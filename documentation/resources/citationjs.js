//Citation.js with bibtex and csl plugins
require=(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _index = _interopRequireDefault(require("./index.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function async(data, options, callback) {
    if (typeof options === 'function' && !callback) {
      callback = options;
      options = undefined;
    }
    const promise = (0, _index.default)().setAsync(data, options);
    if (typeof callback === 'function') {
      promise.then(callback);
      return undefined;
    } else {
      return promise;
    }
  }
  var _default = async;
  exports.default = _default;
  },{"./index.js":3}],2:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.format = format;
  exports.get = get;
  exports.getIds = getIds;
  var _static = require("./static.js");
  var _output = require("../plugins/output.js");
  var _csl = require("../plugins/input/csl.js");
  function getIds() {
    return this.data.map(entry => entry.id);
  }
  function format(format, ...options) {
    return (0, _output.format)(format, (0, _csl.clean)(this.data), ...options);
  }
  function get(options = {}) {
    (0, _static.validateOutputOptions)(options);
    const parsedOptions = Object.assign({}, this.defaultOptions, this._options.output, options);
    const {
      type,
      style
    } = parsedOptions;
    const [styleType, styleFormat] = style.split('-');
    const newStyle = styleType === 'citation' ? 'bibliography' : styleType === 'csl' ? 'data' : styleType;
    const newType = type === 'string' ? 'text' : type === 'json' ? 'object' : type;
    let formatOptions;
    switch (newStyle) {
      case 'bibliography':
        {
          const {
            lang,
            append,
            prepend
          } = parsedOptions;
          formatOptions = {
            template: styleFormat,
            lang,
            format: newType,
            append,
            prepend
          };
          break;
        }
      case 'data':
      case 'bibtex':
      case 'bibtxt':
      case 'ndjson':
      case 'ris':
        formatOptions = {
          type: newType
        };
        break;
      default:
        throw new Error(`Invalid style "${newStyle}"`);
    }
    const result = this.format(newStyle, Object.assign(formatOptions, options._newOptions));
    const {
      format
    } = parsedOptions;
    if (format === 'real' && newType === 'html' && typeof document !== 'undefined' && typeof document.createElement === 'function') {
      const tmp = document.createElement('div');
      tmp.innerHTML = result;
      return tmp.firstChild;
    } else if (format === 'string' && typeof result === 'object') {
      return JSON.stringify(result);
    } else {
      return result;
    }
  }
  },{"../plugins/input/csl.js":25,"../plugins/output.js":33,"./static.js":8}],3:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var log = _interopRequireWildcard(require("./log.js"));
  var options = _interopRequireWildcard(require("./options.js"));
  var set = _interopRequireWildcard(require("./set.js"));
  var sort = _interopRequireWildcard(require("./sort.js"));
  var get = _interopRequireWildcard(require("./get.js"));
  var staticMethods = _interopRequireWildcard(require("./static.js"));
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function Cite(data, options = {}) {
    if (!(this instanceof Cite)) {
      return new Cite(data, options);
    }
    this._options = options;
    this.log = [];
    this.data = [];
    this.set(data, options);
    this.options(options);
    return this;
  }
  Object.assign(Cite.prototype, log, options, set, sort, get);
  Cite.prototype[Symbol.iterator] = function* () {
    yield* this.data;
  };
  Object.assign(Cite, staticMethods);
  var _default = Cite;
  exports.default = _default;
  },{"./get.js":2,"./log.js":4,"./options.js":5,"./set.js":6,"./sort.js":7,"./static.js":8}],4:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.currentVersion = currentVersion;
  exports.retrieveLastVersion = retrieveLastVersion;
  exports.retrieveVersion = retrieveVersion;
  exports.save = save;
  exports.undo = undo;
  var _index = _interopRequireDefault(require("./index.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function currentVersion() {
    return this.log.length;
  }
  function retrieveVersion(versnum = 1) {
    if (versnum <= 0 || versnum > this.currentVersion()) {
      return null;
    } else {
      const [data, options] = this.log[versnum - 1];
      const image = new _index.default(JSON.parse(data), JSON.parse(options));
      image.log = this.log.slice(0, versnum);
      return image;
    }
  }
  function undo(number = 1) {
    return this.retrieveVersion(this.currentVersion() - number);
  }
  function retrieveLastVersion() {
    return this.retrieveVersion(this.currentVersion());
  }
  function save() {
    this.log.push([JSON.stringify(this.data), JSON.stringify(this._options)]);
    return this;
  }
  },{"./index.js":3}],5:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.defaultOptions = void 0;
  exports.options = options;
  var _validate = require("./validate.js");
  const defaultOptions = {
    format: 'real',
    type: 'json',
    style: 'csl',
    lang: 'en-US'
  };
  exports.defaultOptions = defaultOptions;
  function options(options, log) {
    (0, _validate.validateOutputOptions)(options);
    if (log) {
      this.save();
    }
    Object.assign(this._options, options);
    return this;
  }
  },{"./validate.js":9}],6:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.add = add;
  exports.addAsync = addAsync;
  exports.reset = reset;
  exports.set = set;
  exports.setAsync = setAsync;
  var _index = require("../plugins/input/index.js");
  var _fetchId = _interopRequireDefault(require("../util/fetchId.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function add(data, options = {}, log = false) {
    if (options === true || log === true) {
      this.save();
    }
    this.data.push(...(0, _index.chain)(data, options));
    this.data.filter(entry => !Object.prototype.hasOwnProperty.call(entry, 'id')).forEach(entry => {
      entry.id = (0, _fetchId.default)(this.getIds(), 'temp_id_');
    });
    return this;
  }
  async function addAsync(data, options = {}, log = false) {
    if (options === true || log === true) {
      this.save();
    }
    this.data.push(...(await (0, _index.chainAsync)(data, options)));
    this.data.filter(entry => !Object.prototype.hasOwnProperty.call(entry, 'id')).forEach(entry => {
      entry.id = (0, _fetchId.default)(this.getIds(), 'temp_id_');
    });
    return this;
  }
  function set(data, options = {}, log = false) {
    if (options === true || log === true) {
      this.save();
    }
    this.data = [];
    return typeof options !== 'boolean' ? this.add(data, options) : this.add(data);
  }
  async function setAsync(data, options = {}, log = false) {
    if (options === true || log === true) {
      this.save();
    }
    this.data = [];
    return typeof options !== 'boolean' ? this.addAsync(data, options) : this.addAsync(data);
  }
  function reset(log) {
    if (log) {
      this.save();
    }
    this.data = [];
    this._options = {};
    return this;
  }
  },{"../plugins/input/index.js":29,"../util/fetchId.js":37}],7:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sort = sort;
  var _label = require("../plugin-common/output/label.js");
  var _name = require("@citation-js/name");
  function getComparisonValue(obj, prop, label = prop === 'label') {
    let value = label ? (0, _label.getLabel)(obj) : obj[prop];
    switch (prop) {
      case 'author':
      case 'editor':
        return value.map(name => name.literal || name.family || (0, _name.format)(name));
      case 'accessed':
      case 'issued':
        return value['date-parts'][0];
      case 'page':
        return value.split('-').map(num => parseInt(num));
      case 'edition':
      case 'issue':
      case 'volume':
        value = parseInt(value);
        return !isNaN(value) ? value : -Infinity;
      default:
        return value || -Infinity;
    }
  }
  function compareProp(entryA, entryB, prop, flip = /^!/.test(prop)) {
    prop = prop.replace(/^!/, '');
    const a = getComparisonValue(entryA, prop);
    const b = getComparisonValue(entryB, prop);
    return (flip ? -1 : 1) * (a > b ? 1 : a < b ? -1 : 0);
  }
  function getSortCallback(...props) {
    return (a, b) => {
      const keys = props.slice();
      let output = 0;
      while (!output && keys.length) {
        output = compareProp(a, b, keys.shift());
      }
      return output;
    };
  }
  function sort(method = [], log) {
    if (log) {
      this.save();
    }
    this.data.sort(typeof method === 'function' ? method : getSortCallback(...method, 'label'));
    return this;
  }
  },{"../plugin-common/output/label.js":20,"@citation-js/name":47}],8:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    async: true
  };
  Object.defineProperty(exports, "async", {
    enumerable: true,
    get: function () {
      return _async.default;
    }
  });
  var _async = _interopRequireDefault(require("./async.js"));
  var _validate = require("./validate.js");
  Object.keys(_validate).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _validate[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _validate[key];
      }
    });
  });
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  },{"./async.js":1,"./validate.js":9}],9:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.validateOptions = validateOptions;
  exports.validateOutputOptions = validateOutputOptions;
  const formats = ['real', 'string'];
  const types = ['json', 'html', 'string', 'rtf'];
  const styles = ['csl', 'bibtex', 'bibtxt', 'citation-*', 'ris', 'ndjson'];
  const wrapperTypes = ['string', 'function'];
  function validateOutputOptions(options) {
    if (typeof options !== 'object') {
      throw new TypeError('Options not an object!');
    }
    const {
      format,
      type,
      style,
      lang,
      append,
      prepend
    } = options;
    if (format && !formats.includes(format)) {
      throw new TypeError(`Option format ("${format}") should be one of: ${formats}`);
    } else if (type && !types.includes(type)) {
      throw new TypeError(`Option type ("${type}") should be one of: ${types}`);
    } else if (style && !styles.includes(style) && !/^citation/.test(style)) {
      throw new TypeError(`Option style ("${style}") should be one of: ${styles}`);
    } else if (lang && typeof lang !== 'string') {
      throw new TypeError(`Option lang should be a string, but is a ${typeof lang}`);
    } else if (prepend && !wrapperTypes.includes(typeof prepend)) {
      throw new TypeError(`Option prepend should be a string or a function, but is a ${typeof prepend}`);
    } else if (append && !wrapperTypes.includes(typeof append)) {
      throw new TypeError(`Option append should be a string or a function, but is a ${typeof append}`);
    }
    if (/^citation/.test(style) && type === 'json') {
      throw new Error(`Combination type/style of json/citation-* is not valid: ${type}/${style}`);
    }
    return true;
  }
  function validateOptions(options) {
    if (typeof options !== 'object') {
      throw new TypeError('Options should be an object');
    }
    if (options.output) {
      validateOutputOptions(options.output);
    } else if (options.maxChainLength && typeof options.maxChainLength !== 'number') {
      throw new TypeError('Option maxChainLength should be a number');
    } else if (options.forceType && typeof options.forceType !== 'string') {
      throw new TypeError('Option forceType should be a string');
    } else if (options.generateGraph != null && typeof options.generateGraph !== 'boolean') {
      throw new TypeError('Option generateGraph should be a boolean');
    } else if (options.strict != null && typeof options.strict !== 'boolean') {
      throw new TypeError('Option strict should be a boolean');
    } else if (options.target != null && typeof options.target !== 'string') {
      throw new TypeError('Option target should be a boolean');
    }
    return true;
  }
  },{}],10:[function(require,module,exports){
  (function (process){(function (){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  const logger = {
    _output(level, scope, msg) {
      this._log.push(scope, msg);
      if (this._levels.indexOf(level) < this._levels.indexOf(this.level)) {
        return;
      }
      this._console.log(scope, ...msg);
    },
    _console: null,
    _log: [],
    _levels: ['http', 'debug', 'unmapped', 'info', 'warn', 'error', 'silent'],
    level: 'silent'
  };
  for (const level of logger._levels) {
    logger[level] = (scope, ...msg) => logger._output(level, scope, msg);
  }
  if (typeof console.Console === 'function') {
    logger._console = new console.Console(process.stderr);
  } else {
    logger._console = console;
  }
  var _default = logger;
  exports.default = _default;
  }).call(this)}).call(this,require('_process'))
  },{"_process":89}],11:[function(require,module,exports){
  "use strict";
  
  var plugins = _interopRequireWildcard(require("../plugins"));
  var _input = require("./input/");
  var _output = _interopRequireDefault(require("./output/"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  plugins.add(_input.ref, {
    input: _input.formats,
    output: _output.default
  });
  },{"../plugins":23,"./input/":14,"./output/":18}],12:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parse = parse;
  function parse() {
    return [];
  }
  },{}],13:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parse = parse;
  function parse(input) {
    return input.value || input.textContent;
  }
  },{}],14:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ref = exports.parsers = exports.formats = void 0;
  var empty = _interopRequireWildcard(require("./empty.js"));
  var url = _interopRequireWildcard(require("./url.js"));
  var json = _interopRequireWildcard(require("./json.js"));
  var jquery = _interopRequireWildcard(require("./jquery.js"));
  var html = _interopRequireWildcard(require("./html.js"));
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  const ref = '@else';
  exports.ref = ref;
  const parsers = {
    empty,
    url,
    json,
    jquery,
    html
  };
  exports.parsers = parsers;
  const formats = {
    '@empty/text': {
      parse: empty.parse,
      parseType: {
        dataType: 'String',
        predicate: input => input === ''
      }
    },
    '@empty/whitespace+text': {
      parse: empty.parse,
      parseType: {
        dataType: 'String',
        predicate: /^\s+$/
      }
    },
    '@empty': {
      parse: empty.parse,
      parseType: {
        dataType: 'Primitive',
        predicate: input => input == null
      }
    },
    '@else/json': {
      parse: json.parse,
      parseType: {
        dataType: 'String',
        predicate: /^\s*(\{[\S\s]*\}|\[[\S\s]*\])\s*$/
      }
    },
    '@else/url': {
      parse: url.parse,
      parseAsync: url.parseAsync,
      parseType: {
        dataType: 'String',
        predicate: /^https?:\/\/(([\w-]+\.)*[\w-]+)(:\d+)?(\/[^?/]*)*(\?[^#]*)?(#.*)?$/i
      }
    },
    '@else/jquery': {
      parse: jquery.parse,
      parseType: {
        dataType: 'ComplexObject',
        predicate(input) {
          return typeof jQuery !== 'undefined' && input instanceof jQuery;
        }
      }
    },
    '@else/html': {
      parse: html.parse,
      parseType: {
        dataType: 'ComplexObject',
        predicate(input) {
          return typeof HTMLElement !== 'undefined' && input instanceof HTMLElement;
        }
      }
    }
  };
  exports.formats = formats;
  },{"./empty.js":12,"./html.js":13,"./jquery.js":15,"./json.js":16,"./url.js":17}],15:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parse = parse;
  function parse(input) {
    return input.val() || input.text() || input.html();
  }
  },{}],16:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.parse = parseJSON;
  var _logger = _interopRequireDefault(require("../../logger.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const substituters = [[/((?:\[|:|,)\s*)'((?:\\'|[^'])*?[^\\])?'(?=\s*(?:\]|}|,))/g, '$1"$2"'], [/((?:(?:"|]|}|\/[gmiuys]|\.|(?:\d|\.|-)*\d)\s*,|{)\s*)(?:"([^":\n]+?)"|'([^":\n]+?)'|([^":\n]+?))(\s*):/g, '$1"$2$3$4"$5:']];
  function parseJSON(str) {
    if (typeof str !== 'string') {
      return JSON.parse(str);
    }
    try {
      return JSON.parse(str);
    } catch (e) {
      _logger.default.debug('[plugin-common]', 'Invalid JSON, switching to experimental parser');
      substituters.forEach(([regex, subst]) => {
        str = str.replace(regex, subst);
      });
      return JSON.parse(str);
    }
  }
  },{"../../logger.js":10}],17:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function () {
      return _index.fetchFile;
    }
  });
  Object.defineProperty(exports, "parseAsync", {
    enumerable: true,
    get: function () {
      return _index.fetchFileAsync;
    }
  });
  var _index = require("../../util/index.js");
  },{"../../util/index.js":39}],18:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _json = _interopRequireDefault(require("./json.js"));
  var _label = _interopRequireDefault(require("./label.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  var _default = Object.assign({}, _json.default, _label.default);
  exports.default = _default;
  },{"./json.js":19,"./label.js":20}],19:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  exports.getJsonWrapper = getJsonWrapper;
  var plugins = _interopRequireWildcard(require("../../plugins/index.js"));
  var util = _interopRequireWildcard(require("../../util/index.js"));
  var _logger = _interopRequireDefault(require("../../logger.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function appendCommas(string, index, array) {
    return string + (index < array.length - 1 ? ',' : '');
  }
  function getJsonObject(src, dict) {
    const isArray = Array.isArray(src);
    let entries;
    if (isArray) {
      entries = src.map(entry => getJsonValue(entry, dict));
    } else {
      entries = Object.keys(src).filter(prop => JSON.stringify(src[prop])).map(prop => `"${prop}": ${getJsonValue(src[prop], dict)}`);
    }
    entries = entries.map(appendCommas).map(entry => dict.listItem.join(entry));
    entries = dict.list.join(entries.join(''));
    return isArray ? `[${entries}]` : `{${entries}}`;
  }
  function getJsonValue(src, dict) {
    if (typeof src === 'object' && src !== null) {
      if (src.length === 0) {
        return '[]';
      } else if (Object.keys(src).length === 0) {
        return '{}';
      } else {
        return getJsonObject(src, dict);
      }
    } else {
      return JSON.stringify(src);
    }
  }
  function getJson(src, dict) {
    let entries = src.map(entry => getJsonObject(entry, dict));
    entries = entries.map(appendCommas).map(entry => dict.entry.join(entry));
    entries = entries.join('');
    return dict.bibliographyContainer.join(`[${entries}]`);
  }
  function getJsonWrapper(src) {
    return getJson(src, plugins.dict.get('html'));
  }
  var _default = {
    data(data, {
      type,
      format = type || 'text',
      version = '1.0.2'
    } = {}) {
      if (version < '1.0.2') {
        data = util.downgradeCsl(data);
      }
      if (format === 'object') {
        return util.deepCopy(data);
      } else if (format === 'text') {
        return JSON.stringify(data, null, 2);
      } else {
        _logger.default.warn('[core]', 'This feature (JSON output with special formatting) is unstable. See https://github.com/larsgw/citation.js/issues/144');
        return getJson(data, plugins.dict.get(format));
      }
    },
    ndjson(data, {
      version = '1.0.2'
    } = {}) {
      if (version < '1.0.2') {
        data = util.downgradeCsl(data);
      }
      return data.map(entry => JSON.stringify(entry)).join('\n');
    }
  };
  exports.default = _default;
  },{"../../logger.js":10,"../../plugins/index.js":23,"../../util/index.js":39}],20:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  exports.getLabel = getLabel;
  function getLabel(entry) {
    if ('citation-label' in entry) {
      return entry['citation-label'];
    }
    let res = '';
    if (entry.author) {
      res += entry.author[0].family || entry.author[0].literal;
    }
    if (entry.issued && entry.issued['date-parts'] && entry.issued['date-parts'][0]) {
      res += entry.issued['date-parts'][0][0];
    }
    if (entry['year-suffix']) {
      res += entry['year-suffix'];
    } else if (entry.title) {
      res += entry.title.replace(/<\/?.*?>/g, '').match(/^(?:(?:the|a|an)\s+)?(\S+)/i)[1];
    }
    return res;
  }
  var _default = {
    label(data) {
      return data.reduce((object, entry) => {
        object[entry.id] = getLabel(entry);
        return object;
      }, {});
    }
  };
  exports.default = _default;
  },{}],21:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.add = add;
  exports.get = get;
  exports.has = has;
  exports.list = list;
  exports.remove = remove;
  const configs = {};
  function add(ref, config) {
    configs[ref] = config;
  }
  function get(ref) {
    return configs[ref];
  }
  function has(ref) {
    return Object.prototype.hasOwnProperty.call(configs, ref);
  }
  function remove(ref) {
    delete configs[ref];
  }
  function list() {
    return Object.keys(configs);
  }
  },{}],22:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.add = add;
  exports.get = get;
  exports.has = has;
  exports.htmlDict = void 0;
  exports.list = list;
  exports.register = void 0;
  exports.remove = remove;
  exports.textDict = void 0;
  var _register = _interopRequireDefault(require("../util/register.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function validate(name, dict) {
    if (typeof name !== 'string') {
      throw new TypeError(`Invalid dict name, expected string, got ${typeof name}`);
    } else if (typeof dict !== 'object') {
      throw new TypeError(`Invalid dict, expected object, got ${typeof dict}`);
    }
    for (const entryName in dict) {
      const entry = dict[entryName];
      if (!Array.isArray(entry) || entry.some(part => typeof part !== 'string')) {
        throw new TypeError(`Invalid dict entry "${entryName}", expected array of strings`);
      }
    }
  }
  const register = new _register.default({
    html: {
      bibliographyContainer: ['<div class="csl-bib-body">', '</div>'],
      entry: ['<div class="csl-entry">', '</div>'],
      list: ['<ul style="list-style-type:none">', '</ul>'],
      listItem: ['<li>', '</li>']
    },
    text: {
      bibliographyContainer: ['', '\n'],
      entry: ['', '\n'],
      list: ['\n', ''],
      listItem: ['\t', '\n']
    }
  });
  exports.register = register;
  function add(name, dict) {
    validate(name, dict);
    register.set(name, dict);
  }
  function remove(name) {
    register.remove(name);
  }
  function has(name) {
    return register.has(name);
  }
  function list() {
    return register.list();
  }
  function get(name) {
    if (!register.has(name)) {
      throw new Error(`Dict "${name}" unavailable`);
    }
    return register.get(name);
  }
  const htmlDict = {
    wr_start: '<div class="csl-bib-body">',
    wr_end: '</div>',
    en_start: '<div class="csl-entry">',
    en_end: '</div>',
    ul_start: '<ul style="list-style-type:none">',
    ul_end: '</ul>',
    li_start: '<li>',
    li_end: '</li>'
  };
  exports.htmlDict = htmlDict;
  const textDict = {
    wr_start: '',
    wr_end: '\n',
    en_start: '',
    en_end: '\n',
    ul_start: '\n',
    ul_end: '',
    li_start: '\t',
    li_end: '\n'
  };
  exports.textDict = textDict;
  },{"../util/register.js":40}],23:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.add = add;
  exports.dict = exports.config = void 0;
  exports.has = has;
  exports.input = void 0;
  exports.list = list;
  exports.output = void 0;
  exports.remove = remove;
  var input = _interopRequireWildcard(require("./input/index.js"));
  exports.input = input;
  var output = _interopRequireWildcard(require("./output.js"));
  exports.output = output;
  var dict = _interopRequireWildcard(require("./dict.js"));
  exports.dict = dict;
  var config = _interopRequireWildcard(require("./config.js"));
  exports.config = config;
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  const registers = {
    input,
    output,
    dict,
    config
  };
  const indices = {};
  function add(ref, plugins = {}) {
    const mainIndex = indices[ref] = {};
    for (const type in plugins) {
      if (type === 'config') {
        mainIndex.config = {
          [ref]: plugins.config
        };
        registers.config.add(ref, plugins.config);
        continue;
      }
      const typeIndex = mainIndex[type] = {};
      const typePlugins = plugins[type];
      for (const name in typePlugins) {
        const typePlugin = typePlugins[name];
        typeIndex[name] = true;
        registers[type].add(name, typePlugin);
      }
    }
  }
  function remove(ref) {
    const mainIndex = indices[ref];
    for (const type in mainIndex) {
      const typeIndex = mainIndex[type];
      for (const name in typeIndex) {
        registers[type].remove(name);
      }
    }
    delete indices[ref];
  }
  function has(ref) {
    return ref in indices;
  }
  function list() {
    return Object.keys(indices);
  }
  },{"./config.js":21,"./dict.js":22,"./input/index.js":29,"./output.js":33}],24:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.chainLinkAsync = exports.chainLink = exports.chainAsync = exports.chain = void 0;
  var _index = require("../../util/index.js");
  var _logger = _interopRequireDefault(require("../../logger.js"));
  var _register = require("./register.js");
  var _type = require("./type.js");
  var _data = require("./data.js");
  var _graph = require("./graph.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function prepareParseGraph(graph) {
    return graph.reduce((array, next) => {
      const last = array[array.length - 1];
      if (last && last.type === next.type) {
        last.count = last.count + 1 || 2;
      } else {
        array.push(next);
      }
      return array;
    }, []).map(element => (element.count > 1 ? element.count + 'x ' : '') + element.type).join(' -> ');
  }
  class ChainParser {
    constructor(input, options = {}) {
      this.options = Object.assign({
        generateGraph: true,
        forceType: (0, _type.type)(input),
        maxChainLength: 10,
        strict: true,
        target: '@csl/list+object'
      }, options);
      this.type = this.options.forceType;
      this.data = typeof input === 'object' ? (0, _index.deepCopy)(input) : input;
      this.graph = [{
        type: this.type,
        data: input
      }];
      this.iteration = 0;
    }
    iterate() {
      if (this.iteration !== 0) {
        const typeInfo = (0, _register.get)(this.type);
        if (typeInfo && typeInfo.outputs) {
          this.type = typeInfo.outputs;
        } else {
          this.type = (0, _type.type)(this.data);
        }
        this.graph.push({
          type: this.type
        });
      }
      if (this.error || this.type === this.options.target) {
        return false;
      } else if (this.iteration >= this.options.maxChainLength) {
        this.error = new RangeError(`Max. number of parsing iterations reached (${prepareParseGraph(this.graph)})`);
        return false;
      } else {
        this.iteration++;
        return true;
      }
    }
    end() {
      if (this.error) {
        _logger.default.error('[core]', this.error.message);
        if (this.options.strict !== false) {
          throw this.error;
        } else {
          return [];
        }
      } else if (this.options.target === '@csl/list+object') {
        return (0, _index.upgradeCsl)(this.data).map(this.options.generateGraph ? entry => (0, _graph.applyGraph)(entry, this.graph) : _graph.removeGraph);
      } else {
        return this.data;
      }
    }
  }
  const chain = (...args) => {
    const chain = new ChainParser(...args);
    while (chain.iterate()) {
      try {
        chain.data = (0, _data.data)(chain.data, chain.type);
      } catch (e) {
        chain.error = e;
      }
    }
    return chain.end();
  };
  exports.chain = chain;
  const chainLink = input => {
    const type = (0, _type.type)(input);
    const output = type.match(/array|object/) ? (0, _index.deepCopy)(input) : input;
    return (0, _data.data)(output, type);
  };
  exports.chainLink = chainLink;
  const chainAsync = async (...args) => {
    const chain = new ChainParser(...args);
    while (chain.iterate()) {
      chain.data = await (0, _data.dataAsync)(chain.data, chain.type).catch(e => {
        chain.error = e;
      });
    }
    return chain.end();
  };
  exports.chainAsync = chainAsync;
  const chainLinkAsync = async input => {
    const type = (0, _type.type)(input);
    const output = type.match(/array|object/) ? (0, _index.deepCopy)(input) : input;
    return (0, _data.dataAsync)(output, type);
  };
  exports.chainLinkAsync = chainLinkAsync;
  },{"../../logger.js":10,"../../util/index.js":39,"./data.js":26,"./graph.js":28,"./register.js":31,"./type.js":32}],25:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.clean = parseCsl;
  var _name = require("@citation-js/name");
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const NAME = 1;
  const NAME_LIST = 2;
  const DATE = 3;
  const TYPE = 4;
  const entryTypes = {
    article: true,
    'article-journal': true,
    'article-magazine': true,
    'article-newspaper': true,
    bill: true,
    book: true,
    broadcast: true,
    chapter: true,
    classic: true,
    collection: true,
    dataset: true,
    document: true,
    entry: true,
    'entry-dictionary': true,
    'entry-encyclopedia': true,
    event: true,
    figure: true,
    graphic: true,
    hearing: true,
    interview: true,
    legal_case: true,
    legislation: true,
    manuscript: true,
    map: true,
    motion_picture: true,
    musical_score: true,
    pamphlet: true,
    'paper-conference': true,
    patent: true,
    performance: true,
    periodical: true,
    personal_communication: true,
    post: true,
    'post-weblog': true,
    regulation: true,
    report: true,
    review: true,
    'review-book': true,
    software: true,
    song: true,
    speech: true,
    standard: true,
    thesis: true,
    treaty: true,
    webpage: true,
    'journal-article': 'article-journal',
    'book-chapter': 'chapter',
    'posted-content': 'manuscript',
    'proceedings-article': 'paper-conference'
  };
  const fieldTypes = {
    author: NAME_LIST,
    chair: NAME_LIST,
    'collection-editor': NAME_LIST,
    compiler: NAME_LIST,
    composer: NAME_LIST,
    'container-author': NAME_LIST,
    contributor: NAME_LIST,
    curator: NAME_LIST,
    director: NAME_LIST,
    editor: NAME_LIST,
    'editorial-director': NAME_LIST,
    'executive-producer': NAME_LIST,
    guest: NAME_LIST,
    host: NAME_LIST,
    interviewer: NAME_LIST,
    illustrator: NAME_LIST,
    narrator: NAME_LIST,
    organizer: NAME_LIST,
    'original-author': NAME_LIST,
    performer: NAME_LIST,
    producer: NAME_LIST,
    'reviewed-author': NAME_LIST,
    recipient: NAME_LIST,
    'script-writer': NAME_LIST,
    'series-creator': NAME_LIST,
    translator: NAME_LIST,
    accessed: DATE,
    'available-date': DATE,
    container: DATE,
    'event-date': DATE,
    issued: DATE,
    'original-date': DATE,
    submitted: DATE,
    type: TYPE,
    categories: 'object',
    custom: 'object',
    id: ['string', 'number'],
    language: 'string',
    journalAbbreviation: 'string',
    shortTitle: 'string',
    abstract: 'string',
    annote: 'string',
    archive: 'string',
    archive_collection: 'string',
    archive_location: 'string',
    'archive-place': 'string',
    authority: 'string',
    'call-number': 'string',
    'chapter-number': 'string',
    'citation-number': 'string',
    'citation-key': 'string',
    'citation-label': 'string',
    'collection-number': 'string',
    'collection-title': 'string',
    'container-title': 'string',
    'container-title-short': 'string',
    dimensions: 'string',
    division: 'string',
    DOI: 'string',
    edition: ['string', 'number'],
    event: 'string',
    'event-title': 'string',
    'event-place': 'string',
    'first-reference-note-number': 'string',
    genre: 'string',
    ISBN: 'string',
    ISSN: 'string',
    issue: ['string', 'number'],
    jurisdiction: 'string',
    keyword: 'string',
    locator: 'string',
    medium: 'string',
    note: 'string',
    number: ['string', 'number'],
    'number-of-pages': 'string',
    'number-of-volumes': ['string', 'number'],
    'original-publisher': 'string',
    'original-publisher-place': 'string',
    'original-title': 'string',
    page: 'string',
    'page-first': 'string',
    'part-number': ['string', 'number'],
    'part-title': 'string',
    PMCID: 'string',
    PMID: 'string',
    printing: 'string',
    publisher: 'string',
    'publisher-place': 'string',
    references: 'string',
    'reviewed-title': 'string',
    'reviewed-genre': 'string',
    scale: 'string',
    section: 'string',
    source: 'string',
    status: 'string',
    supplement: ['string', 'number'],
    title: 'string',
    'title-short': 'string',
    URL: 'string',
    version: 'string',
    volume: ['string', 'number'],
    'volume-title': 'string',
    'volume-title-short': 'string',
    'year-suffix': 'string'
  };
  function correctName(name, bestGuessConversions) {
    if (typeof name === 'object' && name !== null && (name.literal || name.given || name.family)) {
      return name;
    } else if (!bestGuessConversions) {
      return undefined;
    } else if (typeof name === 'string') {
      return (0, _name.parse)(name);
    }
  }
  function correctNameList(nameList, bestGuessConversions) {
    if (nameList instanceof Array) {
      const names = nameList.map(name => correctName(name, bestGuessConversions)).filter(Boolean);
      return names.length ? names : undefined;
    }
  }
  function correctDateParts(dateParts, bestGuessConversions) {
    if (dateParts.every(part => typeof part === 'number')) {
      return dateParts;
    } else if (!bestGuessConversions || dateParts.some(part => isNaN(parseInt(part)))) {
      return undefined;
    } else {
      return dateParts.map(part => parseInt(part));
    }
  }
  function correctDate(date, bestGuessConversions) {
    const dp = 'date-parts';
    if (typeof date !== 'object' || date === null) {
      return undefined;
    } else if (date[dp] instanceof Array && date[dp].every(part => part instanceof Array)) {
      const range = date[dp].map(dateParts => correctDateParts(dateParts, bestGuessConversions)).filter(Boolean);
      return range.length ? _objectSpread(_objectSpread({}, date), {}, {
        'date-parts': range
      }) : undefined;
    } else if (date instanceof Array && date.every(part => part[dp] instanceof Array)) {
      const range = date.map(dateParts => correctDateParts(dateParts[dp], bestGuessConversions)).filter(Boolean);
      return range.length ? {
        'date-parts': range
      } : undefined;
    } else if (date[dp] instanceof Array) {
      const dateParts = correctDateParts(date[dp], bestGuessConversions);
      return dateParts && {
        'date-parts': [dateParts]
      };
    } else if ('literal' in date || 'raw' in date) {
      return date;
    }
  }
  function correctType(type, bestGuessConversions) {
    type = correctField('language', type, bestGuessConversions);
    if (entryTypes[type] === true) {
      return type;
    } else if (bestGuessConversions && type in entryTypes) {
      return entryTypes[type];
    } else {
      return undefined;
    }
  }
  function correctField(fieldName, value, bestGuessConversions) {
    const fieldType = [].concat(fieldTypes[fieldName]);
    switch (fieldTypes[fieldName]) {
      case NAME:
        return correctName(value, bestGuessConversions);
      case NAME_LIST:
        return correctNameList(value, bestGuessConversions);
      case DATE:
        return correctDate(value, bestGuessConversions);
      case TYPE:
        return correctType(value, bestGuessConversions);
    }
    if (bestGuessConversions) {
      if (typeof value === 'string' && fieldType.includes('number') && !fieldType.includes('string') && !isNaN(+value)) {
        return parseFloat(value);
      } else if (typeof value === 'number' && fieldType.includes('string') && !fieldType.includes('number')) {
        return value.toString();
      } else if (Array.isArray(value) && value.length) {
        return correctField(fieldName, value[0], bestGuessConversions);
      }
    }
    if (fieldType.includes(typeof value)) {
      return value;
    }
  }
  function parseCsl(data, bestGuessConversions = true) {
    return data.map(function (entry) {
      const clean = {};
      for (const field in entry) {
        const correction = correctField(field, entry[field], bestGuessConversions);
        if (correction !== undefined) {
          clean[field] = correction;
        }
      }
      return clean;
    });
  }
  },{"@citation-js/name":47}],26:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addDataParser = addDataParser;
  exports.data = data;
  exports.dataAsync = dataAsync;
  exports.hasDataParser = hasDataParser;
  exports.listDataParser = listDataParser;
  exports.removeDataParser = removeDataParser;
  var _chain = require("./chain.js");
  const parsers = {};
  const asyncParsers = {};
  const nativeParsers = {
    '@csl/object': input => [input],
    '@csl/list+object': input => input,
    '@else/list+object': input => input.map(_chain.chain).flat(),
    '@invalid': () => {
      throw new Error('This format is not supported or recognized');
    }
  };
  const nativeAsyncParsers = {
    '@else/list+object': async input => (await Promise.all(input.map(_chain.chainAsync))).flat()
  };
  function data(input, type) {
    if (typeof parsers[type] === 'function') {
      return parsers[type](input);
    } else if (typeof nativeParsers[type] === 'function') {
      return nativeParsers[type](input);
    } else {
      throw new TypeError(`No synchronous parser found for ${type}`);
    }
  }
  async function dataAsync(input, type) {
    if (typeof asyncParsers[type] === 'function') {
      return asyncParsers[type](input);
    } else if (typeof nativeAsyncParsers[type] === 'function') {
      return nativeAsyncParsers[type](input);
    } else if (hasDataParser(type, false)) {
      return data(input, type);
    } else {
      throw new TypeError(`No parser found for ${type}`);
    }
  }
  function addDataParser(format, {
    parser,
    async
  }) {
    if (async) {
      asyncParsers[format] = parser;
    } else {
      parsers[format] = parser;
    }
  }
  function hasDataParser(type, async) {
    return async ? asyncParsers[type] || nativeAsyncParsers[type] : parsers[type] || nativeParsers[type];
  }
  function removeDataParser(type, async) {
    delete (async ? asyncParsers : parsers)[type];
  }
  function listDataParser(async) {
    return Object.keys(async ? asyncParsers : parsers);
  }
  },{"./chain.js":24}],27:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.dataTypeOf = dataTypeOf;
  exports.typeOf = typeOf;
  function typeOf(thing) {
    switch (thing) {
      case undefined:
        return 'Undefined';
      case null:
        return 'Null';
      default:
        return thing.constructor.name;
    }
  }
  function dataTypeOf(thing) {
    switch (typeof thing) {
      case 'string':
        return 'String';
      case 'object':
        if (Array.isArray(thing)) {
          return 'Array';
        } else if (typeOf(thing) === 'Object') {
          return 'SimpleObject';
        } else if (typeOf(thing) !== 'Null') {
          return 'ComplexObject';
        }
      default:
        return 'Primitive';
    }
  }
  },{}],28:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.applyGraph = applyGraph;
  exports.removeGraph = removeGraph;
  function applyGraph(entry, graph) {
    if (entry._graph) {
      const index = graph.findIndex(({
        type
      }) => type === '@else/list+object');
      if (index !== -1) {
        graph.splice(index + 1, 0, ...entry._graph.slice(0, -1));
      }
    }
    entry._graph = graph;
    return entry;
  }
  function removeGraph(entry) {
    delete entry._graph;
    return entry;
  }
  },{}],29:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  var _exportNames = {
    util: true
  };
  exports.util = void 0;
  var dataType = _interopRequireWildcard(require("./dataType.js"));
  var graph = _interopRequireWildcard(require("./graph.js"));
  var parser = _interopRequireWildcard(require("./parser.js"));
  var csl = _interopRequireWildcard(require("./csl.js"));
  var _register = require("./register");
  Object.keys(_register).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _register[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _register[key];
      }
    });
  });
  var _chain = require("./chain");
  Object.keys(_chain).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _chain[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _chain[key];
      }
    });
  });
  var _type = require("./type");
  Object.keys(_type).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _type[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _type[key];
      }
    });
  });
  var _data = require("./data");
  Object.keys(_data).forEach(function (key) {
    if (key === "default" || key === "__esModule") return;
    if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
    if (key in exports && exports[key] === _data[key]) return;
    Object.defineProperty(exports, key, {
      enumerable: true,
      get: function () {
        return _data[key];
      }
    });
  });
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  const util = Object.assign({}, dataType, graph, parser, csl);
  exports.util = util;
  },{"./chain":24,"./csl.js":25,"./data":26,"./dataType.js":27,"./graph.js":28,"./parser.js":30,"./register":31,"./type":32}],30:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TypeParser = exports.FormatParser = exports.DataParser = void 0;
  var _type = require("./type.js");
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  class TypeParser {
    constructor(data) {
      _defineProperty(this, "validDataTypes", ['String', 'Array', 'SimpleObject', 'ComplexObject', 'Primitive']);
      this.data = data;
    }
    validateDataType() {
      const dataType = this.data.dataType;
      if (dataType && !this.validDataTypes.includes(dataType)) {
        throw new RangeError(`dataType was ${dataType}; expected one of ${this.validDataTypes}`);
      }
    }
    validateParseType() {
      const predicate = this.data.predicate;
      if (predicate && !(predicate instanceof RegExp || typeof predicate === 'function')) {
        throw new TypeError(`predicate was ${typeof predicate}; expected RegExp or function`);
      }
    }
    validateTokenList() {
      const tokenList = this.data.tokenList;
      if (tokenList && typeof tokenList !== 'object') {
        throw new TypeError(`tokenList was ${typeof tokenList}; expected object or RegExp`);
      }
    }
    validatePropertyConstraint() {
      const propertyConstraint = this.data.propertyConstraint;
      if (propertyConstraint && typeof propertyConstraint !== 'object') {
        throw new TypeError(`propertyConstraint was ${typeof propertyConstraint}; expected array or object`);
      }
    }
    validateElementConstraint() {
      const elementConstraint = this.data.elementConstraint;
      if (elementConstraint && typeof elementConstraint !== 'string') {
        throw new TypeError(`elementConstraint was ${typeof elementConstraint}; expected string`);
      }
    }
    validateExtends() {
      const extend = this.data.extends;
      if (extend && typeof extend !== 'string') {
        throw new TypeError(`extends was ${typeof extend}; expected string`);
      }
    }
    validate() {
      if (this.data === null || typeof this.data !== 'object') {
        throw new TypeError(`typeParser was ${typeof this.data}; expected object`);
      }
      this.validateDataType();
      this.validateParseType();
      this.validateTokenList();
      this.validatePropertyConstraint();
      this.validateElementConstraint();
      this.validateExtends();
    }
    parseTokenList() {
      let tokenList = this.data.tokenList;
      if (!tokenList) {
        return [];
      } else if (tokenList instanceof RegExp) {
        tokenList = {
          token: tokenList
        };
      }
      const {
        token,
        split = /\s+/,
        trim = true,
        every = true
      } = tokenList;
      const trimInput = input => trim ? input.trim() : input;
      const testTokens = every ? 'every' : 'some';
      const predicate = input => trimInput(input).split(split)[testTokens](part => token.test(part));
      return [predicate];
    }
    parsePropertyConstraint() {
      const constraints = [].concat(this.data.propertyConstraint || []);
      return constraints.map(({
        props,
        match,
        value
      }) => {
        props = [].concat(props);
        switch (match) {
          case 'any':
          case 'some':
            return input => props.some(prop => prop in input && (!value || value(input[prop])));
          case 'none':
            return input => !props.some(prop => prop in input && (!value || value(input[prop])));
          case 'every':
          default:
            return input => props.every(prop => prop in input && (!value || value(input[prop])));
        }
      });
    }
    parseElementConstraint() {
      const constraint = this.data.elementConstraint;
      return !constraint ? [] : [input => input.every(entry => (0, _type.type)(entry) === constraint)];
    }
    parsePredicate() {
      if (this.data.predicate instanceof RegExp) {
        return [this.data.predicate.test.bind(this.data.predicate)];
      } else if (this.data.predicate) {
        return [this.data.predicate];
      } else {
        return [];
      }
    }
    getCombinedPredicate() {
      const predicates = [...this.parsePredicate(), ...this.parseTokenList(), ...this.parsePropertyConstraint(), ...this.parseElementConstraint()];
      if (predicates.length === 0) {
        return () => true;
      } else if (predicates.length === 1) {
        return predicates[0];
      } else {
        return input => predicates.every(predicate => predicate(input));
      }
    }
    getDataType() {
      if (this.data.dataType) {
        return this.data.dataType;
      } else if (this.data.predicate instanceof RegExp) {
        return 'String';
      } else if (this.data.tokenList) {
        return 'String';
      } else if (this.data.elementConstraint) {
        return 'Array';
      } else {
        return 'Primitive';
      }
    }
    get dataType() {
      return this.getDataType();
    }
    get predicate() {
      return this.getCombinedPredicate();
    }
    get extends() {
      return this.data.extends;
    }
  }
  exports.TypeParser = TypeParser;
  class DataParser {
    constructor(parser, {
      async
    } = {}) {
      this.parser = parser;
      this.async = async;
    }
    validate() {
      const parser = this.parser;
      if (typeof parser !== 'function') {
        throw new TypeError(`parser was ${typeof parser}; expected function`);
      }
    }
  }
  exports.DataParser = DataParser;
  class FormatParser {
    constructor(format, parsers = {}) {
      this.format = format;
      if (parsers.parseType) {
        this.typeParser = new TypeParser(parsers.parseType);
      }
      if (parsers.parse) {
        this.dataParser = new DataParser(parsers.parse, {
          async: false
        });
      }
      if (parsers.parseAsync) {
        this.asyncDataParser = new DataParser(parsers.parseAsync, {
          async: true
        });
      }
    }
    validateFormat() {
      const format = this.format;
      if (!_type.typeMatcher.test(format)) {
        throw new TypeError(`format name was "${format}"; didn't match expected pattern`);
      }
    }
    validate() {
      this.validateFormat();
      if (this.typeParser) {
        this.typeParser.validate();
      }
      if (this.dataParser) {
        this.dataParser.validate();
      }
      if (this.asyncDataParser) {
        this.asyncDataParser.validate();
      }
    }
  }
  exports.FormatParser = FormatParser;
  },{"./type.js":32}],31:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.add = add;
  exports.get = get;
  exports.has = has;
  exports.list = list;
  exports.remove = remove;
  var _parser = require("./parser.js");
  var _type = require("./type.js");
  var _data = require("./data.js");
  const formats = {};
  function add(format, parsers) {
    const formatParser = new _parser.FormatParser(format, parsers);
    formatParser.validate();
    const index = formats[format] || (formats[format] = {});
    if (formatParser.typeParser) {
      (0, _type.addTypeParser)(format, formatParser.typeParser);
      index.type = true;
    }
    if (formatParser.dataParser) {
      (0, _data.addDataParser)(format, formatParser.dataParser);
      index.data = true;
    }
    if (formatParser.asyncDataParser) {
      (0, _data.addDataParser)(format, formatParser.asyncDataParser);
      index.asyncData = true;
    }
    if (parsers.outputs) {
      index.outputs = parsers.outputs;
    }
  }
  function get(format) {
    return formats[format];
  }
  function remove(format) {
    const index = formats[format];
    if (!index) {
      return;
    }
    if (index.type) {
      (0, _type.removeTypeParser)(format);
    }
    if (index.data) {
      (0, _data.removeDataParser)(format);
    }
    if (index.asyncData) {
      (0, _data.removeDataParser)(format, true);
    }
    delete formats[format];
  }
  function has(format) {
    return format in formats;
  }
  function list() {
    return Object.keys(formats);
  }
  },{"./data.js":26,"./parser.js":30,"./type.js":32}],32:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.addTypeParser = addTypeParser;
  exports.hasTypeParser = hasTypeParser;
  exports.listTypeParser = listTypeParser;
  exports.removeTypeParser = removeTypeParser;
  exports.treeTypeParser = treeTypeParser;
  exports.type = type;
  exports.typeMatcher = void 0;
  var _logger = _interopRequireDefault(require("../../logger.js"));
  var _dataType = require("./dataType.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const types = {};
  const dataTypes = {};
  const unregExts = {};
  function parseNativeTypes(input, dataType) {
    switch (dataType) {
      case 'Array':
        if (input.length === 0 || input.every(entry => type(entry) === '@csl/object')) {
          return '@csl/list+object';
        } else {
          return '@else/list+object';
        }
      case 'SimpleObject':
      case 'ComplexObject':
        return '@csl/object';
      default:
        return '@invalid';
    }
  }
  function matchType(typeList = [], data) {
    for (const type of typeList) {
      if (types[type].predicate(data)) {
        return matchType(types[type].extensions, data) || type;
      }
    }
  }
  function type(input) {
    const dataType = (0, _dataType.dataTypeOf)(input);
    if (dataType === 'Array' && input.length === 0) {
      return parseNativeTypes(input, dataType);
    }
    const match = matchType(dataTypes[dataType], input);
    return match || parseNativeTypes(input, dataType);
  }
  function addTypeParser(format, {
    dataType,
    predicate,
    extends: extend
  }) {
    let extensions = [];
    if (format in unregExts) {
      extensions = unregExts[format];
      delete unregExts[format];
      _logger.default.debug('[core]', `Subclasses "${extensions}" finally registered to parent type "${format}"`);
    }
    const object = {
      predicate,
      extensions
    };
    types[format] = object;
    if (extend) {
      const parentTypeParser = types[extend];
      if (parentTypeParser) {
        parentTypeParser.extensions.push(format);
      } else {
        if (!unregExts[extend]) {
          unregExts[extend] = [];
        }
        unregExts[extend].push(format);
        _logger.default.debug('[core]', `Subclass "${format}" is waiting on parent type "${extend}"`);
      }
    } else {
      const typeList = dataTypes[dataType] || (dataTypes[dataType] = []);
      typeList.push(format);
    }
  }
  function hasTypeParser(type) {
    return Object.prototype.hasOwnProperty.call(types, type);
  }
  function removeTypeParser(type) {
    delete types[type];
    const typeLists = [...Object.keys(dataTypes).map(key => dataTypes[key]), ...Object.keys(types).map(type => types[type].extensions).filter(list => list.length > 0)];
    typeLists.forEach(typeList => {
      const index = typeList.indexOf(type);
      if (index > -1) {
        typeList.splice(index, 1);
      }
    });
  }
  function listTypeParser() {
    return Object.keys(types);
  }
  function treeTypeParser() {
    const attachNode = name => ({
      name,
      children: types[name].extensions.map(attachNode)
    });
    return {
      name: 'Type tree',
      children: Object.keys(dataTypes).map(name => ({
        name,
        children: dataTypes[name].map(attachNode)
      }))
    };
  }
  const typeMatcher = /^(?:@(.+?))(?:\/(?:(.+?)\+)?(?:(.+)))?$/;
  exports.typeMatcher = typeMatcher;
  },{"../../logger.js":10,"./dataType.js":27}],33:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.add = add;
  exports.format = format;
  exports.has = has;
  exports.list = list;
  exports.register = void 0;
  exports.remove = remove;
  var _register = _interopRequireDefault(require("../util/register.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function validate(name, formatter) {
    if (typeof name !== 'string') {
      throw new TypeError(`Invalid output format name, expected string, got ${typeof name}`);
    } else if (typeof formatter !== 'function') {
      throw new TypeError(`Invalid formatter, expected function, got ${typeof formatter}`);
    }
  }
  const register = new _register.default();
  exports.register = register;
  function add(name, formatter) {
    validate(name, formatter);
    register.set(name, formatter);
  }
  function remove(name) {
    register.remove(name);
  }
  function has(name) {
    return register.has(name);
  }
  function list() {
    return register.list();
  }
  function format(name, data, ...options) {
    if (!register.has(name)) {
      throw new Error(`Output format "${name}" unavailable`);
    }
    return register.get(name)(data, ...options);
  }
  },{"../util/register.js":40}],34:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.downgradeCsl = downgradeCsl;
  exports.upgradeCsl = upgradeCsl;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function upgradeCsl(item) {
    if (Array.isArray(item)) {
      return item.map(upgradeCsl);
    }
    item = _objectSpread({}, item);
    if ('event' in item) {
      item['event-title'] = item.event;
      delete item.event;
    }
    if (item.type === 'book' && 'version' in item) {
      item.type = 'software';
    }
    return item;
  }
  function downgradeCsl(item) {
    if (Array.isArray(item)) {
      return item.map(downgradeCsl);
    }
    item = _objectSpread({}, item);
    if ('event-title' in item) {
      item.event = item['event-title'];
      delete item['event-title'];
    }
    if (item.type === 'software') {
      item.type = 'book';
    }
    return item;
  }
  },{}],35:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.deepCopy = deepCopy;
  exports.default = void 0;
  function deepCopy(value, seen = new Set()) {
    if (typeof value !== 'object' || value === null || value.constructor !== Object && value.constructor !== Array) {
      return value;
    }
    if (seen.has(value)) {
      throw new TypeError('Recursively copying circular structure');
    }
    seen.add(value);
    let copy;
    if (value.constructor === Array) {
      copy = value.map(value => deepCopy(value, seen));
    } else {
      const object = {};
      for (const key in value) {
        object[key] = deepCopy(value[key], seen);
      }
      copy = object;
    }
    seen.delete(value);
    return copy;
  }
  var _default = deepCopy;
  exports.default = _default;
  },{}],36:[function(require,module,exports){
  (function (process){(function (){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  exports.fetchFile = fetchFile;
  exports.fetchFileAsync = fetchFileAsync;
  exports.setUserAgent = setUserAgent;
  var _syncFetch = _interopRequireDefault(require("sync-fetch"));
  var _fetchPonyfill = _interopRequireDefault(require("fetch-ponyfill"));
  var _logger = _interopRequireDefault(require("../logger.js"));
  var _package = _interopRequireDefault(require("../../package.json"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const {
    fetch,
    Headers
  } = (0, _fetchPonyfill.default)();
  const corsEnabled = typeof location !== 'undefined' && typeof document !== 'undefined';
  let userAgent = corsEnabled ? '' : `Citation.js/${_package.default.version} Node.js/${process.version}`;
  function normaliseHeaders(headers) {
    const result = {};
    const entries = headers instanceof Headers || headers instanceof _syncFetch.default.Headers ? Array.from(headers) : Object.entries(headers);
    for (const [name, header] of entries) {
      result[name.toLowerCase()] = header.toString();
    }
    return result;
  }
  function parseOpts(opts = {}) {
    const reqOpts = {
      headers: {
        accept: '*/*'
      },
      method: 'GET',
      checkContentType: opts.checkContentType
    };
    if (userAgent && !corsEnabled) {
      reqOpts.headers['user-agent'] = userAgent;
    }
    if (opts.body) {
      reqOpts.method = 'POST';
      const isJson = typeof opts.body !== 'string';
      reqOpts.body = isJson ? JSON.stringify(opts.body) : opts.body;
      reqOpts.headers['content-type'] = isJson ? 'application/json' : 'text/plain';
    }
    if (opts.headers) {
      Object.assign(reqOpts.headers, normaliseHeaders(opts.headers));
    }
    return reqOpts;
  }
  function sameType(request, response) {
    if (!request.accept || request.accept === '*/*' || !response['content-type']) {
      return true;
    }
    const [a, b] = response['content-type'].split(';')[0].trim().split('/');
    return request.accept.split(',').map(type => type.split(';')[0].trim().split('/')).some(([c, d]) => (c === a || c === '*') && (d === b || d === '*'));
  }
  function checkResponse(response, opts) {
    const {
      status,
      headers
    } = response;
    let error;
    if (status >= 400) {
      error = new Error(`Server responded with status code ${status}`);
    } else if (opts.checkContentType === true && !sameType(opts.headers, normaliseHeaders(headers))) {
      error = new Error(`Server responded with content-type ${headers.get('content-type')}`);
    }
    if (error) {
      error.status = status;
      error.headers = headers;
      error.body = response.body;
      throw error;
    }
    return response;
  }
  function fetchFile(url, opts) {
    const reqOpts = parseOpts(opts);
    _logger.default.http('[core]', reqOpts.method, url, reqOpts);
    const response = checkResponse((0, _syncFetch.default)(url, reqOpts), reqOpts);
    return response.text();
  }
  async function fetchFileAsync(url, opts) {
    const reqOpts = parseOpts(opts);
    _logger.default.http('[core]', reqOpts.method, url, reqOpts);
    return fetch(url, reqOpts).then(response => checkResponse(response, reqOpts)).then(response => response.text());
  }
  function setUserAgent(newUserAgent) {
    userAgent = newUserAgent;
  }
  var _default = fetchFile;
  exports.default = _default;
  }).call(this)}).call(this,require('_process'))
  },{"../../package.json":43,"../logger.js":10,"_process":89,"fetch-ponyfill":86,"sync-fetch":90}],37:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  function fetchId(list, prefix) {
    let id;
    while (id === undefined || list.includes(id)) {
      id = `${prefix}${Math.random().toString().slice(2)}`;
    }
    return id;
  }
  var _default = fetchId;
  exports.default = _default;
  },{}],38:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Grammar = void 0;
  var _deepCopy = require("./deepCopy.js");
  class Grammar {
    constructor(rules, state) {
      this.rules = rules;
      this.defaultState = state;
      this.mainRule = Object.keys(rules)[0];
      this.log = [];
    }
    parse(iterator, mainRule) {
      this.lexer = iterator;
      this.token = this.lexer.next();
      this.state = (0, _deepCopy.deepCopy)(this.defaultState);
      this.log = [];
      return this.consumeRule(mainRule || this.mainRule);
    }
    matchEndOfFile() {
      return !this.token;
    }
    matchToken(type) {
      return this.token && type === this.token.type;
    }
    consumeToken(type, optional) {
      const token = this.token;
      if (!type || token && token.type === type) {
        this.token = this.lexer.next();
        return token;
      } else if (optional) {
        return undefined;
      } else {
        const got = token ? `"${token.type}"` : 'EOF';
        const error = new SyntaxError(this.lexer.formatError(token, `expected "${type}", got ${got}`));
        error.message += ` (${this.log.join('->')})`;
        throw error;
      }
    }
    consumeRule(rule) {
      this.log.push(rule);
      const result = this.rules[rule].call(this);
      this.log.pop();
      return result;
    }
  }
  exports.Grammar = Grammar;
  },{"./deepCopy.js":35}],39:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Grammar", {
    enumerable: true,
    get: function () {
      return _grammar.Grammar;
    }
  });
  Object.defineProperty(exports, "Register", {
    enumerable: true,
    get: function () {
      return _register.default;
    }
  });
  Object.defineProperty(exports, "TokenStack", {
    enumerable: true,
    get: function () {
      return _stack.default;
    }
  });
  Object.defineProperty(exports, "Translator", {
    enumerable: true,
    get: function () {
      return _translator.Translator;
    }
  });
  Object.defineProperty(exports, "deepCopy", {
    enumerable: true,
    get: function () {
      return _deepCopy.default;
    }
  });
  Object.defineProperty(exports, "downgradeCsl", {
    enumerable: true,
    get: function () {
      return _csl.downgradeCsl;
    }
  });
  Object.defineProperty(exports, "fetchFile", {
    enumerable: true,
    get: function () {
      return _fetchFile.fetchFile;
    }
  });
  Object.defineProperty(exports, "fetchFileAsync", {
    enumerable: true,
    get: function () {
      return _fetchFile.fetchFileAsync;
    }
  });
  Object.defineProperty(exports, "fetchId", {
    enumerable: true,
    get: function () {
      return _fetchId.default;
    }
  });
  Object.defineProperty(exports, "setUserAgent", {
    enumerable: true,
    get: function () {
      return _fetchFile.setUserAgent;
    }
  });
  Object.defineProperty(exports, "upgradeCsl", {
    enumerable: true,
    get: function () {
      return _csl.upgradeCsl;
    }
  });
  var _csl = require("./csl.js");
  var _deepCopy = _interopRequireDefault(require("./deepCopy.js"));
  var _fetchFile = require("./fetchFile.js");
  var _fetchId = _interopRequireDefault(require("./fetchId.js"));
  var _stack = _interopRequireDefault(require("./stack.js"));
  var _register = _interopRequireDefault(require("./register.js"));
  var _grammar = require("./grammar.js");
  var _translator = require("./translator.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  },{"./csl.js":34,"./deepCopy.js":35,"./fetchFile.js":36,"./fetchId.js":37,"./grammar.js":38,"./register.js":40,"./stack.js":41,"./translator.js":42}],40:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  class Register {
    constructor(data = {}) {
      this.data = data;
    }
    set(key, value) {
      this.data[key] = value;
      return this;
    }
    add(...args) {
      return this.set(...args);
    }
    delete(key) {
      delete this.data[key];
      return this;
    }
    remove(...args) {
      return this.delete(...args);
    }
    get(key) {
      return this.data[key];
    }
    has(key) {
      return Object.prototype.hasOwnProperty.call(this.data, key);
    }
    list() {
      return Object.keys(this.data);
    }
  }
  var _default = Register;
  exports.default = _default;
  },{}],41:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  class TokenStack {
    constructor(array) {
      this.stack = array;
      this.index = 0;
      this.current = this.stack[this.index];
    }
    static getPatternText(pattern) {
      return `"${pattern instanceof RegExp ? pattern.source : pattern}"`;
    }
    static getMatchCallback(pattern) {
      if (Array.isArray(pattern)) {
        const matches = pattern.map(TokenStack.getMatchCallback);
        return token => matches.some(matchCallback => matchCallback(token));
      } else if (pattern instanceof Function) {
        return pattern;
      } else if (pattern instanceof RegExp) {
        return token => pattern.test(token);
      } else {
        return token => pattern === token;
      }
    }
    tokensLeft() {
      return this.stack.length - this.index;
    }
    matches(pattern) {
      return TokenStack.getMatchCallback(pattern)(this.current, this.index, this.stack);
    }
    matchesSequence(sequence) {
      const part = this.stack.slice(this.index, this.index + sequence.length).join('');
      return typeof sequence === 'string' ? part === sequence : sequence.every((pattern, index) => TokenStack.getMatchCallback(pattern)(part[index]));
    }
    consumeToken(pattern = /^[\s\S]$/, {
      inverse = false,
      spaced = true
    } = {}) {
      if (spaced) {
        this.consumeWhitespace();
      }
      const token = this.current;
      const match = TokenStack.getMatchCallback(pattern)(token, this.index, this.stack);
      if (match) {
        this.current = this.stack[++this.index];
      } else {
        throw new SyntaxError(`Unexpected token at index ${this.index}: Expected ${TokenStack.getPatternText(pattern)}, got "${token}"`);
      }
      if (spaced) {
        this.consumeWhitespace();
      }
      return token;
    }
    consumeWhitespace(pattern = /^\s$/, {
      optional = true
    } = {}) {
      return this.consume(pattern, {
        min: +!optional
      });
    }
    consumeN(length) {
      if (this.tokensLeft() < length) {
        throw new SyntaxError('Not enough tokens left');
      }
      const start = this.index;
      while (length--) {
        this.current = this.stack[++this.index];
      }
      return this.stack.slice(start, this.index).join('');
    }
    consumeSequence(sequence) {
      if (this.matchesSequence(sequence)) {
        return this.consumeN(sequence.length);
      } else {
        throw new SyntaxError(`Expected "${sequence}", got "${this.consumeN(sequence.length)}"`);
      }
    }
    consume(pattern = /^[\s\S]$/, {
      min = 0,
      max = Infinity,
      inverse = false,
      tokenMap,
      tokenFilter
    } = {}) {
      const start = this.index;
      const match = TokenStack.getMatchCallback(pattern);
      while (match(this.current, this.index, this.stack) !== inverse) {
        this.current = this.stack[++this.index];
      }
      let consumed = this.stack.slice(start, this.index);
      if (consumed.length < min) {
        throw new SyntaxError(`Not enough ${TokenStack.getPatternText(pattern)}`);
      } else if (consumed.length > max) {
        throw new SyntaxError(`Too many ${TokenStack.getPatternText(pattern)}`);
      }
      if (tokenMap) {
        consumed = consumed.map(tokenMap);
      }
      if (tokenFilter) {
        consumed = consumed.filter(tokenFilter);
      }
      return consumed.join('');
    }
  }
  var _default = TokenStack;
  exports.default = _default;
  },{}],42:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Translator = void 0;
  function createConditionEval(condition) {
    return function conditionEval(input) {
      if (typeof condition === 'boolean') {
        return condition;
      }
      return Object.keys(condition).every(prop => {
        const value = condition[prop];
        if (value === true) {
          return prop in input;
        } else if (value === false) {
          return !(prop in input);
        } else if (typeof value === 'function') {
          return value(input[prop]);
        } else if (Array.isArray(value)) {
          return value.includes(input[prop]);
        } else {
          return input[prop] === value;
        }
      });
    };
  }
  function parsePropStatement(prop, toSource) {
    let inputProp;
    let outputProp;
    let convert;
    let condition;
    if (typeof prop === 'string') {
      inputProp = outputProp = prop;
    } else if (prop) {
      inputProp = toSource ? prop.target : prop.source;
      outputProp = toSource ? prop.source : prop.target;
      if (prop.convert) {
        convert = toSource ? prop.convert.toSource : prop.convert.toTarget;
      }
      if (prop.when) {
        condition = toSource ? prop.when.target : prop.when.source;
        if (condition != null) {
          condition = createConditionEval(condition);
        }
      }
    } else {
      return null;
    }
    inputProp = [].concat(inputProp).filter(Boolean);
    outputProp = [].concat(outputProp).filter(Boolean);
    return {
      inputProp,
      outputProp,
      convert,
      condition
    };
  }
  function createConverter(props, toSource) {
    toSource = toSource === Translator.CONVERT_TO_SOURCE;
    props = props.map(prop => parsePropStatement(prop, toSource)).filter(Boolean);
    return function converter(input) {
      const output = {};
      for (const {
        inputProp,
        outputProp,
        convert,
        condition
      } of props) {
        if (outputProp.length === 0) {
          continue;
        } else if (condition && !condition(input)) {
          continue;
        } else if (inputProp.length !== 0 && inputProp.every(prop => !(prop in input))) {
          continue;
        }
        let outputData = inputProp.map(prop => input[prop]);
        if (convert) {
          try {
            const converted = convert.apply(input, outputData);
            outputData = outputProp.length === 1 ? [converted] : converted;
          } catch (cause) {
            throw new Error(`Failed to convert ${inputProp} to ${outputProp}`, {
              cause
            });
          }
        }
        outputProp.forEach((prop, index) => {
          const value = outputData[index];
          if (value !== undefined) {
            output[prop] = value;
          }
        });
      }
      return output;
    };
  }
  class Translator {
    constructor(props) {
      this.convertToSource = createConverter(props, Translator.CONVERT_TO_SOURCE);
      this.convertToTarget = createConverter(props, Translator.CONVERT_TO_TARGET);
    }
  }
  exports.Translator = Translator;
  Translator.CONVERT_TO_SOURCE = Symbol('convert to source');
  Translator.CONVERT_TO_TARGET = Symbol('convert to target');
  },{}],43:[function(require,module,exports){
  module.exports={
    "name": "@citation-js/core",
    "version": "0.6.5",
    "description": "Convert different bibliographic metadata sources",
    "keywords": [
      "citation-js",
      "citation",
      "bibliography"
    ],
    "author": "Lars Willighagen <lars.willighagen@gmail.com>",
    "license": "MIT",
    "main": "lib/index.js",
    "module": "lib-mjs/index.js",
    "directories": {
      "lib": "src",
      "test": "__tests__"
    },
    "homepage": "https://citation.js.org/",
    "repository": "https://github.com/citation-js/citation-js/tree/master/packages/core",
    "bugs": {
      "url": "https://github.com/citation-js/citation-js/issues"
    },
    "engines": {
      "node": ">=14.0.0"
    },
    "files": [
      "lib",
      "lib-mjs"
    ],
    "scripts": {
      "test": "mocha -c -R dot test/*.spec.js"
    },
    "dependencies": {
      "@citation-js/date": "^0.5.0",
      "@citation-js/name": "^0.4.2",
      "fetch-ponyfill": "^7.1.0",
      "sync-fetch": "^0.4.1"
    },
    "gitHead": "f68c6f690e573e3373fe0d9b91ca6ade0026555b"
  }
  
  },{}],44:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "format", {
    enumerable: true,
    get: function get() {
      return _output.default;
    }
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function get() {
      return _input.default;
    }
  });
  
  var _input = _interopRequireDefault(require("./input"));
  
  var _output = _interopRequireDefault(require("./output"));
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  },{"./input":45,"./output":46}],45:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  
  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
  
  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
  
  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
  
  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
  
  function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  const monthMap = {
    jan: 1,
    feb: 2,
    mar: 3,
    apr: 4,
    may: 5,
    jun: 6,
    jul: 7,
    aug: 8,
    sep: 9,
    oct: 10,
    nov: 11,
    dec: 12
  };
  const dateRangeDelimiters = / (?:to|[-/]) | ?(?:--|[â€“â€”]) ?/;
  const dateRangePattern = /^(\d{4}-\d{2}-\d{2})\/(\d{4}-\d{2}-\d{2})$/;
  
  function getMonth(monthName) {
    return monthMap[monthName.toLowerCase().slice(0, 3)];
  }
  
  function parseEpoch(date) {
    const epoch = new Date(date);
  
    if (typeof date === 'number' && !isNaN(epoch.valueOf())) {
      return [epoch.getFullYear(), epoch.getMonth() + 1, epoch.getDate()];
    } else {
      return null;
    }
  }
  
  const parseIso8601 = function parseIso8601(date) {
    const pattern = /^(\d{4}|[-+]\d{6,})-(\d{2})(?:-(\d{2}))?/;
  
    if (typeof date !== 'string' || !pattern.test(date)) {
      return null;
    }
  
    const _date$match = date.match(pattern),
          _date$match2 = _slicedToArray(_date$match, 4),
          year = _date$match2[1],
          month = _date$match2[2],
          day = _date$match2[3];
  
    if (!+month) {
      return [year];
    } else if (!+day) {
      return [year, month];
    } else {
      return [year, month, day];
    }
  };
  
  const parseRfc2822 = function parseRfc2822(date) {
    const pattern = /^(?:[a-z]{3},\s*)?(\d{1,2}) ([a-z]{3}) (\d{4,})/i;
  
    if (typeof date !== 'string' || !pattern.test(date)) {
      return null;
    }
  
    let _date$match3 = date.match(pattern),
        _date$match4 = _slicedToArray(_date$match3, 4),
        day = _date$match4[1],
        month = _date$match4[2],
        year = _date$match4[3];
  
    month = getMonth(month);
  
    if (!month) {
      return null;
    }
  
    return [year, month, day];
  };
  
  function parseAmericanDay(date) {
    const pattern = /^(\d{1,2})\/(\d{1,2})\/(\d{2}(?:\d{2})?)/;
  
    if (typeof date !== 'string' || !pattern.test(date)) {
      return null;
    }
  
    const _date$match5 = date.match(pattern),
          _date$match6 = _slicedToArray(_date$match5, 4),
          month = _date$match6[1],
          day = _date$match6[2],
          year = _date$match6[3];
  
    const check = new Date(year, month, day);
  
    if (check.getMonth() === parseInt(month)) {
      return [year, month, day];
    } else {
      return null;
    }
  }
  
  function parseDay(date) {
    const pattern = /^(\d{1,2})[ .\-/](\d{1,2}|[a-z]{3,10})[ .\-/](-?\d+)/i;
    const reversePattern = /^(-?\d+)[ .\-/](\d{1,2}|[a-z]{3,10})[ .\-/](\d{1,2})/i;
    let year;
    let month;
    let day;
  
    if (typeof date !== 'string') {
      return null;
    } else if (pattern.test(date)) {
      var _date$match7 = date.match(pattern);
  
      var _date$match8 = _slicedToArray(_date$match7, 4);
  
      day = _date$match8[1];
      month = _date$match8[2];
      year = _date$match8[3];
    } else if (reversePattern.test(date)) {
      var _date$match9 = date.match(reversePattern);
  
      var _date$match10 = _slicedToArray(_date$match9, 4);
  
      year = _date$match10[1];
      month = _date$match10[2];
      day = _date$match10[3];
    } else {
      return null;
    }
  
    if (getMonth(month)) {
      month = getMonth(month);
    } else if (isNaN(month)) {
      return null;
    }
  
    return [year, month, day];
  }
  
  function parseMonth(date) {
    const pattern = /^([a-z]{3,10}|-?\d+)[^\w-]+([a-z]{3,10}|-?\d+)$/i;
  
    if (typeof date === 'string' && pattern.test(date)) {
      const values = date.match(pattern).slice(1, 3);
      let month;
  
      if (getMonth(values[1])) {
        month = getMonth(values.pop());
      } else if (getMonth(values[0])) {
        month = getMonth(values.shift());
      } else if (values.some(isNaN) || values.every(value => +value < 0)) {
        return null;
      } else if (+values[0] < 0) {
        month = values.pop();
      } else if (+values[0] > +values[1] && +values[1] > 0) {
        month = values.pop();
      } else {
        month = values.shift();
      }
  
      const year = values.pop();
      return [year, month];
    } else {
      return null;
    }
  }
  
  function parseYear(date) {
    if (typeof date !== 'string') {
      return null;
    }
  
    const adBc = date.match(/^(\d+) ?(a\.?d\.?|b\.?c\.?)$/i);
  
    if (adBc) {
      const _adBc$slice = adBc.slice(1),
            _adBc$slice2 = _slicedToArray(_adBc$slice, 2),
            date = _adBc$slice2[0],
            suffix = _adBc$slice2[1];
  
      return [date * (suffix.toLowerCase()[0] === 'a' ? 1 : -1)];
    } else if (/^-?\d+$/.test(date)) {
      return [date];
    } else {
      return null;
    }
  }
  
  function parseDateParts(value) {
    const dateParts = parseEpoch(value) || parseIso8601(value) || parseRfc2822(value) || parseAmericanDay(value) || parseDay(value) || parseMonth(value) || parseYear(value);
    return dateParts && dateParts.map(string => parseInt(string));
  }
  
  function splitDateRange(range) {
    if (dateRangePattern.test(range)) {
      return range.match(dateRangePattern).slice(1, 3);
    } else {
      return range.split(dateRangeDelimiters);
    }
  }
  
  function parseDate(rangeStart, rangeEnd) {
    const range = [];
    const rangeStartAsRange = typeof rangeStart === 'string' && splitDateRange(rangeStart);
  
    if (rangeEnd) {
      range.push(rangeStart, rangeEnd);
    } else if (rangeStartAsRange && rangeStartAsRange.length === 2) {
      range.push(...rangeStartAsRange);
    } else {
      range.push(rangeStart);
    }
  
    const dateParts = range.map(parseDateParts);
  
    if (dateParts.filter(Boolean).length === range.length) {
      return {
        'date-parts': dateParts
      };
    } else {
      return {
        raw: rangeEnd ? range.join('/') : rangeStart
      };
    }
  }
  
  var _default = parseDate;
  exports.default = _default;
  },{}],46:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  
  function padStart(str, len, chr) {
    if (str.length >= len) {
      return str;
    }
  
    while (str.length < len) {
      str = chr + str;
    }
  
    return str.slice(-len);
  }
  
  const getDate = function getDate(date, delimiter = '-') {
    if (!date['date-parts']) {
      return date.raw;
    }
  
    const dateParts = date['date-parts'][0].map(part => part.toString());
  
    switch (dateParts.length) {
      case 3:
        dateParts[2] = padStart(dateParts[2], 2, '0');
  
      case 2:
        dateParts[1] = padStart(dateParts[1], 2, '0');
  
      case 1:
        dateParts[0] = padStart(dateParts[0], 4, '0');
        break;
    }
  
    return dateParts.join(delimiter);
  };
  
  var _default = getDate;
  exports.default = _default;
  },{}],47:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "parse", {
    enumerable: true,
    get: function get() {
      return _input.default;
    }
  });
  Object.defineProperty(exports, "format", {
    enumerable: true,
    get: function get() {
      return _output.default;
    }
  });
  
  var _input = _interopRequireDefault(require("./input"));
  
  var _output = _interopRequireDefault(require("./output"));
  
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  },{"./input":48,"./output":49}],48:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = exports.parse = exports.types = exports.scope = void 0;
  
  function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }
  
  function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }
  
  function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }
  
  function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
  
  const punctutationMatcher = string => string.replace(/$|( )|(?!^)(?=[A-Z])/g, '\\.?$1');
  
  const getListMatcher = list => `(?:${list.join('|')})\\b`;
  
  const getSplittingRegex = (matcher, flags) => new RegExp(`(?:^| )(${matcher}$)`, flags);
  
  const titles = ['mr', 'mrs', 'ms', 'miss', 'dr', 'herr', 'monsieur', 'hr', 'frau', 'a v m', 'admiraal', 'admiral', 'air cdre', 'air commodore', 'air marshal', 'air vice marshal', 'alderman', 'alhaji', 'ambassador', 'baron', 'barones', 'brig', 'brig gen', 'brig general', 'brigadier', 'brigadier general', 'brother', 'canon', 'capt', 'captain', 'cardinal', 'cdr', 'chief', 'cik', 'cmdr', 'coach', 'col', 'col dr', 'colonel', 'commandant', 'commander', 'commissioner', 'commodore', 'comte', 'comtessa', 'congressman', 'conseiller', 'consul', 'conte', 'contessa', 'corporal', 'councillor', 'count', 'countess', 'crown prince', 'crown princess', 'dame', 'datin', 'dato', 'datuk', 'datuk seri', 'deacon', 'deaconess', 'dean', 'dhr', 'dipl ing', 'doctor', 'dott', 'dott sa', 'dr', 'dr ing', 'dra', 'drs', 'embajador', 'embajadora', 'en', 'encik', 'eng', 'eur ing', 'exma sra', 'exmo sr', 'f o', 'father', 'first lieutient', 'first officer', 'flt lieut', 'flying officer', 'fr', 'frau', 'fraulein', 'fru', 'gen', 'generaal', 'general', 'governor', 'graaf', 'gravin', 'group captain', 'grp capt', 'h e dr', 'h h', 'h m', 'h r h', 'hajah', 'haji', 'hajim', 'her highness', 'her majesty', 'herr', 'high chief', 'his highness', 'his holiness', 'his majesty', 'hon', 'hr', 'hra', 'ing', 'ir', 'jonkheer', 'judge', 'justice', 'khun ying', 'kolonel', 'lady', 'lcda', 'lic', 'lieut', 'lieut cdr', 'lieut col', 'lieut gen', 'lord', 'm', 'm l', 'm r', 'madame', 'mademoiselle', 'maj gen', 'major', 'master', 'mevrouw', 'miss', 'mlle', 'mme', 'monsieur', 'monsignor', 'mr', 'mrs', 'ms', 'mstr', 'nti', 'pastor', 'president', 'prince', 'princess', 'princesse', 'prinses', 'prof', 'prof dr', 'prof sir', 'professor', 'puan', 'puan sri', 'rabbi', 'rear admiral', 'rev', 'rev canon', 'rev dr', 'rev mother', 'reverend', 'rva', 'senator', 'sergeant', 'sheikh', 'sheikha', 'sig', 'sig na', 'sig ra', 'sir', 'sister', 'sqn ldr', 'sr', 'sr d', 'sra', 'srta', 'sultan', 'tan sri', 'tan sri dato', 'tengku', 'teuku', 'than puying', 'the hon dr', 'the hon justice', 'the hon miss', 'the hon mr', 'the hon mrs', 'the hon ms', 'the hon sir', 'the very rev', 'toh puan', 'tun', 'vice admiral', 'viscount', 'viscountess', 'wg cdr'];
  const suffixes = ['I', 'II', 'III', 'IV', 'V', 'Senior', 'Junior', 'Jr', 'Sr', 'PhD', 'Ph\\.D', 'APR', 'RPh', 'PE', 'MD', 'MA', 'DMD', 'CME', 'BVM', 'CFRE', 'CLU', 'CPA', 'CSC', 'CSJ', 'DC', 'DD', 'DDS', 'DO', 'DVM', 'EdD', 'Esq', 'JD', 'LLD', 'OD', 'OSB', 'PC', 'Ret', 'RGS', 'RN', 'RNC', 'SHCJ', 'SJ', 'SNJM', 'SSMO', 'USA', 'USAF', 'USAFR', 'USAR', 'USCG', 'USMC', 'USMCR', 'USN', 'USNR'];
  const particles = ['Vere', 'Von', 'Van', 'De', 'Del', 'Della', 'Di', 'Da', 'Pietro', 'Vanden', 'Du', 'St.', 'St', 'La', 'Lo', 'Ter', 'O', 'O\'', 'Mac', 'Fitz'];
  const titleMatcher = getListMatcher(titles.map(punctutationMatcher));
  const suffixMatcher = getListMatcher(suffixes.map(punctutationMatcher));
  const particleMatcher = getListMatcher(particles);
  const titleSplitter = new RegExp(`^((?:${titleMatcher} )*)(.*)$`, 'i');
  const suffixSplitter = getSplittingRegex(`(?:${suffixMatcher}, )*(?:${suffixMatcher})`, 'i');
  const particleSplitter = getSplittingRegex(`${/(?:[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1C90-\u1CBA\u1CBD-\u1CBF\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uA7B8\uFF21-\uFF3A]|\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD81B[\uDE40-\uDE5F]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89])/.source}.*`);
  const endSplitter = getSplittingRegex(`(?:${/(?:[a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0560-\u0588\u10D0-\u10FA\u10FD-\u10FF\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7AF\uA7B5\uA7B7\uA7B9\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]|\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD81B[\uDE60-\uDE7F]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43])/.source}.*|${particleMatcher}.*|\\S*)`);
  
  const parseName = function parseName(name = '') {
    if (typeof name !== 'string') {
      name = name + '';
    }
  
    let start = '';
    let mid = '';
    let end = '';
  
    if (/[^.], /.test(name)) {
      const parts = name.split(', ');
      end = parts.shift();
      const suffixMatch = RegExp(suffixMatcher).exec(parts.join(', '));
      start = parts.splice(suffixMatch && suffixMatch.index !== 0 ? 0 : -1, 1)[0];
      mid = parts.join(', ');
    } else {
      const parts = name.split(suffixSplitter, 2);
      const main = parts.shift().split(endSplitter, 2);
      start = main[0];
      end = main[1];
      mid = parts.pop();
    }
  
    const _start$match = start.match(titleSplitter),
          _start$match2 = _slicedToArray(_start$match, 3),
          droppingParticle = _start$match2[1],
          given = _start$match2[2];
  
    const suffix = mid;
  
    const _end$split$reverse = end.split(particleSplitter, 2).reverse(),
          _end$split$reverse2 = _slicedToArray(_end$split$reverse, 2),
          family = _end$split$reverse2[0],
          nonDroppingParticle = _end$split$reverse2[1];
  
    if (!given && family) {
      return family.includes(' ') ? {
        literal: family
      } : {
        family
      };
    } else if (family) {
      const nameObject = {
        'dropping-particle': droppingParticle,
        given,
        suffix,
        'non-dropping-particle': nonDroppingParticle,
        family
      };
      Object.keys(nameObject).forEach(key => {
        if (!nameObject[key]) {
          delete nameObject[key];
        }
      });
      return nameObject;
    } else {
      return {
        literal: name
      };
    }
  };
  
  exports.default = exports.parse = parseName;
  const scope = '@name';
  exports.scope = scope;
  const types = '@name';
  exports.types = types;
  },{}],49:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  const startParts = ['dropping-particle', 'given'];
  const suffixParts = ['suffix'];
  const endParts = ['non-dropping-particle', 'family'];
  
  const getName = function getName(name, reversed = false) {
    const get = parts => parts.map(entry => name[entry] || '').filter(Boolean).join(' ');
  
    if (name.literal) {
      return name.literal;
    } else if (reversed) {
      const suffixPart = get(suffixParts) ? `, ${get(suffixParts)}` : '';
      const startPart = get(startParts) ? `, ${get(startParts)}` : '';
      return get(endParts) + suffixPart + startPart;
    } else {
      return `${get([...startParts, ...suffixParts, ...endParts])}`;
    }
  };
  
  var _default = getName;
  exports.default = _default;
  },{}],50:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _biblatexTypes = _interopRequireDefault(require("./mapping/biblatexTypes.json"));
  var _bibtexTypes = _interopRequireDefault(require("./mapping/bibtexTypes.json"));
  var constants = _interopRequireWildcard(require("./input/constants.js"));
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  var _default = {
    constants,
    types: {
      biblatex: _biblatexTypes.default,
      bibtex: _bibtexTypes.default
    },
    parse: {
      biblatex: true,
      strict: false,
      sentenceCase: 'never'
    },
    format: {
      useIdAsLabel: false
    }
  };
  exports.default = _default;
  },{"./input/constants.js":53,"./mapping/biblatexTypes.json":63,"./mapping/bibtexTypes.json":65}],51:[function(require,module,exports){
  "use strict";
  
  var _core = require("@citation-js/core");
  var _index = require("./input/index.js");
  var _config = _interopRequireDefault(require("./config.js"));
  var _index2 = _interopRequireDefault(require("./output/index.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  _core.plugins.add(_index.ref, {
    input: _index.formats,
    output: _index2.default,
    config: _config.default
  });
  },{"./config.js":50,"./input/index.js":57,"./output/index.js":72,"@citation-js/core":"citation-js"}],52:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.textEntry = exports.text = exports.parse = void 0;
  const bibTxtRegex = {
    splitEntries: /\n\s*(?=\[)/g,
    parseEntry: /^\[(.+?)\]\s*(?:\n([\s\S]+))?$/,
    splitPairs: /((?=.)\s)*\n\s*/g,
    splitPair: /:(.*)/
  };
  const parseBibTxtEntry = entry => {
    const [, label, pairs] = entry.match(bibTxtRegex.parseEntry) || [];
    if (!label || !pairs) {
      return {};
    } else {
      const out = {
        type: 'book',
        label,
        properties: {}
      };
      pairs.trim().split(bibTxtRegex.splitPairs).filter(v => v).forEach(pair => {
        let [key, value] = pair.split(bibTxtRegex.splitPair);
        if (value) {
          key = key.trim();
          value = value.trim();
          if (key === 'type') {
            out.type = value;
          } else {
            out.properties[key] = value;
          }
        }
      });
      return out;
    }
  };
  exports.textEntry = parseBibTxtEntry;
  const parseBibTxt = src => src.trim().split(bibTxtRegex.splitEntries).map(parseBibTxtEntry);
  exports.text = exports.parse = parseBibTxt;
  },{}],53:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.sentenceCaseLanguages = exports.required = exports.mathScripts = exports.mathScriptFormatting = exports.ligatures = exports.ligaturePattern = exports.formattingEnvs = exports.formattingCommands = exports.formatting = exports.fieldTypes = exports.diacritics = exports.defaultStrings = exports.commands = exports.argumentCommands = void 0;
  var _required2 = _interopRequireDefault(require("./required.json"));
  var _fieldTypes2 = _interopRequireDefault(require("./fieldTypes.json"));
  var _unicode = _interopRequireDefault(require("./unicode.json"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const required = _required2.default;
  exports.required = required;
  const fieldTypes = _fieldTypes2.default;
  exports.fieldTypes = fieldTypes;
  const diacritics = _unicode.default.diacritics;
  exports.diacritics = diacritics;
  const commands = _unicode.default.commands;
  exports.commands = commands;
  const defaultStrings = {
    jan: '01',
    feb: '02',
    mar: '03',
    apr: '04',
    may: '05',
    jun: '06',
    jul: '07',
    aug: '08',
    sep: '09',
    oct: '10',
    nov: '11',
    dec: '12',
    acmcs: 'ACM Computing Surveys',
    acta: 'Acta Informatica',
    cacm: 'Communications of the ACM',
    ibmjrd: 'IBM Journal of Research and Development',
    ibmsj: 'IBM Systems Journal',
    ieeese: 'IEEE Transactions on Software Engineering',
    ieeetc: 'IEEE Transactions on Computers',
    ieeetcad: 'IEEE Transactions on Computer-Aided Design of Integrated Circuits',
    ipl: 'Information Processing Letters',
    jacm: 'Journal of the ACM',
    jcss: 'Journal of Computer and System Sciences',
    scp: 'Science of Computer Programming',
    sicomp: 'SIAM Journal on Computing',
    tocs: 'ACM Transactions on Computer Systems',
    tods: 'ACM Transactions on Database Systems',
    tog: 'ACM Transactions on Graphics',
    toms: 'ACM Transactions on Mathematical Software',
    toois: 'ACM Transactions on Office Information Systems',
    toplas: 'ACM Transactions on Programming Languages and Systems',
    tcs: 'Theoretical Computer Science'
  };
  exports.defaultStrings = defaultStrings;
  const formattingEnvs = {
    it: 'italics',
    itshape: 'italics',
    sl: 'italics',
    slshape: 'italics',
    em: 'italics',
    bf: 'bold',
    bfseries: 'bold',
    sc: 'smallcaps',
    scshape: 'smallcaps',
    rm: undefined,
    sf: undefined,
    tt: undefined
  };
  exports.formattingEnvs = formattingEnvs;
  const formattingCommands = {
    textit: 'italics',
    textsl: 'italics',
    emph: 'italics',
    mkbibitalic: 'italics',
    mkbibemph: 'italics',
    textbf: 'bold',
    strong: 'bold',
    mkbibbold: 'bold',
    textsc: 'smallcaps',
    textsuperscript: 'superscript',
    textsubscript: 'subscript',
    enquote: 'quotes',
    mkbibquote: 'quotes',
    textmd: undefined,
    textrm: undefined,
    textsf: undefined,
    texttt: undefined,
    textup: undefined
  };
  exports.formattingCommands = formattingCommands;
  const formatting = {
    italics: ['<i>', '</i>'],
    bold: ['<b>', '</b>'],
    superscript: ['<sup>', '</sup>'],
    subscript: ['<sub>', '</sub>'],
    smallcaps: ['<span style="font-variant:small-caps;">', '</span>'],
    nocase: ['<span class="nocase">', '</span>'],
    quotes: ['\u201C', '\u201D']
  };
  exports.formatting = formatting;
  const argumentCommands = {
    ElsevierGlyph(glyph) {
      return String.fromCharCode(parseInt(glyph, 16));
    },
    href(url, text) {
      return url;
    },
    url(url) {
      return url;
    }
  };
  exports.argumentCommands = argumentCommands;
  const ligaturePattern = /---?|''|``|~/g;
  exports.ligaturePattern = ligaturePattern;
  const ligatures = {
    '--': '\u2013',
    '---': '\u2014',
    '``': '\u201C',
    "''": '\u201D',
    '~': '\u00A0'
  };
  exports.ligatures = ligatures;
  const mathScriptFormatting = {
    '^': 'superscript',
    sp: 'superscript',
    _: 'subscript',
    sb: 'subscript',
    mathrm: undefined
  };
  exports.mathScriptFormatting = mathScriptFormatting;
  const mathScripts = {
    '^': {
      '0': '\u2070',
      '1': '\u00B9',
      '2': '\u00B2',
      '3': '\u00B3',
      '4': '\u2074',
      '5': '\u2075',
      '6': '\u2076',
      '7': '\u2077',
      '8': '\u2078',
      '9': '\u2079',
      '+': '\u207A',
      '-': '\u207B',
      '=': '\u207C',
      '(': '\u207D',
      ')': '\u207E',
      'i': '\u2071',
      'n': '\u207F'
    },
    '_': {
      '0': '\u2080',
      '1': '\u2081',
      '2': '\u2082',
      '3': '\u2083',
      '4': '\u2084',
      '5': '\u2085',
      '6': '\u2086',
      '7': '\u2087',
      '8': '\u2088',
      '9': '\u2089',
      '+': '\u208A',
      '-': '\u208B',
      '=': '\u208C',
      '(': '\u208D',
      ')': '\u208E',
      'a': '\u2090',
      'e': '\u2091',
      'o': '\u2092',
      'x': '\u2093',
      '\u0259': '\u2094',
      'h': '\u2095',
      'k': '\u2096',
      'l': '\u2097',
      'm': '\u2098',
      'n': '\u2099',
      's': '\u209A',
      'p': '\u209B',
      't': '\u209C'
    }
  };
  exports.mathScripts = mathScripts;
  const sentenceCaseLanguages = ['american', 'british', 'canadian', 'english', 'australian', 'newzealand', 'usenglish', 'ukenglish', 'en', 'eng', 'en-au', 'en-bz', 'en-ca', 'en-cb', 'en-gb', 'en-ie', 'en-jm', 'en-nz', 'en-ph', 'en-tt', 'en-us', 'en-za', 'en-zw', 'anglais'];
  exports.sentenceCaseLanguages = sentenceCaseLanguages;
  },{"./fieldTypes.json":55,"./required.json":59,"./unicode.json":60}],54:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parse = parse;
  exports.parseBibtex = parseBibtex;
  var _config = _interopRequireDefault(require("../config.js"));
  var _index = require("../mapping/index.js");
  var _value = require("./value.js");
  var _constants = require("./constants.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function validate(entries, requirements) {
    const problems = [];
    for (const {
      type,
      label,
      properties
    } of entries) {
      if (type in requirements) {
        const missing = [];
        for (const field of requirements[type]) {
          if (Array.isArray(field) && !field.some(field => field in properties)) {
            missing.push(field.join('/'));
          } else if (typeof field === 'string' && !(field in properties)) {
            missing.push(field);
          }
        }
        if (missing.length) {
          problems.push([label, `missing fields: ${missing.join(', ')}`]);
        }
      } else {
        problems.push([label, `invalid type: "${type}"`]);
      }
    }
    if (problems.length) {
      throw new RangeError(['Invalid entries:'].concat(problems.map(([label, problem]) => `  - ${label} has ${problem}`)).join('\n'));
    }
  }
  function parseEntryValues(entry) {
    const output = {};
    if ('language' in entry.properties) {
      output.language = (0, _value.parse)(entry.properties.language, 'language');
    }
    for (const property in entry.properties) {
      const value = entry.properties[property];
      if (value === '') {
        continue;
      }
      output[property] = (0, _value.parse)(value + '', property, output.language);
    }
    return _objectSpread(_objectSpread({}, entry), {}, {
      properties: output
    });
  }
  function parse(entries) {
    if (_config.default.parse.strict) {
      validate(entries, _constants.required.biblatex);
    }
    return (0, _index.parse)(entries.map(parseEntryValues));
  }
  function parseBibtex(entries) {
    if (_config.default.parse.strict) {
      validate(entries, _constants.required.bibtex);
    }
    return (0, _index.parseBibtex)(entries.map(parseEntryValues));
  }
  },{"../config.js":50,"../mapping/index.js":67,"./constants.js":53,"./value.js":61}],55:[function(require,module,exports){
  module.exports={
    "abstract": ["field", "literal"],
    "addendum": ["field", "literal"],
    "afterword": ["list", "name"],
    "annotation": ["field", "literal"],
    "annotator": ["list", "name"],
    "author": ["list", "name"],
    "authortype": ["field", "key"],
    "bookauthor": ["list", "name"],
    "bookpagination": ["field", "key"],
    "booksubtitle": ["field", "literal"],
    "booktitle": ["field", "title"],
    "booktitleaddon": ["field", "literal"],
    "chapter": ["field", "literal"],
    "commentator": ["list", "name"],
    "date": ["field", "date"],
    "doi": ["field", "verbatim"],
    "edition": ["field", "literal"],
    "editor": ["list", "name"],
    "editora": ["list", "name"],
    "editorb": ["list", "name"],
    "editorc": ["list", "name"],
    "editortype": ["field", "key"],
    "editoratype": ["field", "key"],
    "editorbtype": ["field", "key"],
    "editorctype": ["field", "key"],
    "eid": ["field", "literal"],
    "entrysubtype": ["field", "literal"],
    "eprint": ["field", "verbatim"],
    "eprintclass": ["field", "literal"],
    "eprinttype": ["field", "literal"],
    "eventdate": ["field", "date"],
    "eventtitle": ["field", "title"],
    "eventtitleaddon": ["field", "literal"],
    "file": ["field", "verbatim"],
    "foreword": ["list", "name"],
    "holder": ["list", "name"],
    "howpublished": ["field", "literal"],
    "indextitle": ["field", "literal"],
    "institution": ["list", "literal"],
    "introduction": ["list", "name"],
    "isan": ["field", "literal"],
    "isbn": ["field", "literal"],
    "ismn": ["field", "literal"],
    "isrn": ["field", "literal"],
    "issn": ["field", "literal"],
    "issue": ["field", "literal"],
    "issuesubtitle": ["field", "literal"],
    "issuetitle": ["field", "literal"],
    "iswc": ["field", "literal"],
    "journalsubtitle": ["field", "literal"],
    "journaltitle": ["field", "literal"],
    "label": ["field", "literal"],
    "language": ["list", "key"],
    "library": ["field", "literal"],
    "location": ["list", "literal"],
    "mainsubtitle": ["field", "literal"],
    "maintitle": ["field", "title"],
    "maintitleaddon": ["field", "literal"],
    "month": ["field", "literal"],
    "nameaddon": ["field", "literal"],
    "note": ["field", "literal"],
    "number": ["field", "literal"],
    "organization": ["list", "literal"],
    "origdate": ["field", "date"],
    "origlanguage": ["list", "key"],
    "origlocation": ["list", "literal"],
    "origpublisher": ["list", "literal"],
    "origtitle": ["field", "title"],
    "pages": ["field", "range"],
    "pagetotal": ["field", "literal"],
    "pagination": ["field", "key"],
    "part": ["field", "literal"],
    "publisher": ["list", "literal"],
    "pubstate": ["field", "key"],
    "reprinttitle": ["field", "literal"],
    "series": ["field", "title"],
    "shortauthor": ["list", "name"],
    "shorteditor": ["list", "name"],
    "shorthand": ["field", "literal"],
    "shorthandintro": ["field", "literal"],
    "shortjournal": ["field", "literal"],
    "shortseries": ["field", "literal"],
    "shorttitle": ["field", "title"],
    "subtitle": ["field", "literal"],
    "title": ["field", "title"],
    "titleaddon": ["field", "literal"],
    "translator": ["list", "name"],
    "type": ["field", "title"],
    "url": ["field", "uri"],
    "urldate": ["field", "date"],
    "venue": ["field", "literal"],
    "version": ["field", "literal"],
    "volume": ["field", "integer"],
    "volumes": ["field", "integer"],
    "year": ["field", "literal"],
    "crossref": ["field", "entry key"],
    "entryset": ["separated", "literal"],
    "execute": ["field", "code"],
    "gender": ["field", "gender"],
    "langid": ["field", "identifier"],
    "langidopts": ["field", "literal"],
    "ids": ["separated", "entry key"],
    "indexsorttitle": ["field", "literal"],
    "keywords": ["separated", "literal"],
    "options": ["separated", "options"],
    "presort": ["field", "string"],
    "related": ["separated", "literal"],
    "relatedoptions": ["separated", "literal"],
    "relatedtype": ["field", "identifier"],
    "relatedstring": ["field", "literal"],
    "sortkey": ["field", "literal"],
    "sortname": ["list", "name"],
    "sortshorthand": ["field", "literal"],
    "sorttitle": ["field", "literal"],
    "sortyear": ["field", "integer"],
    "xdata": ["separated", "entry key"],
    "xref": ["field", "entry key"],
    "namea": ["list", "name"],
    "nameb": ["list", "name"],
    "namec": ["list", "name"],
    "nameatype": ["field", "key"],
    "namebtype": ["field", "key"],
    "namectype": ["field", "key"],
    "lista": ["list", "literal"],
    "listb": ["list", "literal"],
    "listc": ["list", "literal"],
    "listd": ["list", "literal"],
    "liste": ["list", "literal"],
    "listf": ["list", "literal"],
    "usera": ["field", "literal"],
    "userb": ["field", "literal"],
    "userc": ["field", "literal"],
    "userd": ["field", "literal"],
    "usere": ["field", "literal"],
    "userf": ["field", "literal"],
    "verba": ["field", "literal"],
    "verbb": ["field", "literal"],
    "verbc": ["field", "literal"],
    "address": ["list", "literal"],
    "annote": ["field", "literal"],
    "archiveprefix": ["field", "literal"],
    "journal": ["field", "literal"],
    "key": ["field", "literal"],
    "pdf": ["field", "verbatim"],
    "primaryclass": ["field", "literal"],
    "school": ["list", "literal"],
    "numpages": ["field", "integer"],
    "pmid": ["field", "literal"],
    "pmcid": ["field", "literal"]
  }
  
  },{}],56:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.bibtexGrammar = void 0;
  exports.parse = parse;
  var _core = require("@citation-js/core");
  var _moo = _interopRequireDefault(require("moo"));
  var _constants = require("./constants.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const identifier = /[a-zA-Z_][a-zA-Z0-9_:-]*/;
  const whitespace = {
    comment: /%.*/,
    whitespace: {
      match: /\s+/,
      lineBreaks: true
    }
  };
  const lexer = _moo.default.states({
    main: {
      junk: {
        match: /@[cC][oO][mM][mM][eE][nN][tT].+|[^@]+/,
        lineBreaks: true
      },
      at: {
        match: '@',
        push: 'entry'
      }
    },
    entry: _objectSpread(_objectSpread({}, whitespace), {}, {
      otherEntryType: {
        match: /[sS][tT][rR][iI][nN][gG]|[pP][rR][eE][aA][mM][bB][lL][eE]/,
        next: 'otherEntryContents'
      },
      dataEntryType: {
        match: identifier,
        next: 'dataEntryContents'
      }
    }),
    otherEntryContents: _objectSpread(_objectSpread({}, whitespace), {}, {
      lbrace: {
        match: /[{(]/,
        next: 'fields'
      }
    }),
    dataEntryContents: _objectSpread(_objectSpread({}, whitespace), {}, {
      lbrace: {
        match: /[{(]/,
        next: 'dataEntryContents'
      },
      label: /[^,\s]+/,
      comma: {
        match: ',',
        next: 'fields'
      }
    }),
    fields: _objectSpread(_objectSpread({}, whitespace), {}, {
      identifier,
      number: /-?\d+/,
      hash: '#',
      equals: '=',
      comma: ',',
      quote: {
        match: '"',
        push: 'quotedLiteral'
      },
      lbrace: {
        match: '{',
        push: 'bracedLiteral'
      },
      rbrace: {
        match: /[})]/,
        pop: true
      }
    }),
    quotedLiteral: {
      lbrace: {
        match: '{',
        push: 'bracedLiteral'
      },
      quote: {
        match: '"',
        pop: true
      },
      text: {
        match: /(?:\\[\\{]|[^{"])+/,
        lineBreaks: true
      }
    },
    bracedLiteral: {
      lbrace: {
        match: '{',
        push: 'bracedLiteral'
      },
      rbrace: {
        match: '}',
        pop: true
      },
      text: {
        match: /(?:\\[\\{}]|[^{}])+/,
        lineBreaks: true
      }
    }
  });
  const delimiters = {
    '(': ')',
    '{': '}'
  };
  const bibtexGrammar = new _core.util.Grammar({
    Main() {
      const entries = [];
      while (true) {
        while (this.matchToken('junk')) {
          this.consumeToken('junk');
        }
        if (this.matchEndOfFile()) {
          break;
        }
        entries.push(this.consumeRule('Entry'));
      }
      return entries.filter(Boolean);
    },
    _() {
      let oldToken;
      while (oldToken !== this.token) {
        oldToken = this.token;
        this.consumeToken('whitespace', true);
        this.consumeToken('comment', true);
      }
    },
    Entry() {
      this.consumeToken('at');
      this.consumeRule('_');
      const type = (this.matchToken('otherEntryType') ? this.consumeToken('otherEntryType') : this.consumeToken('dataEntryType')).value.toLowerCase();
      this.consumeRule('_');
      const openBrace = this.consumeToken('lbrace').value;
      this.consumeRule('_');
      let result;
      if (type === 'string') {
        const [key, value] = this.consumeRule('Field');
        this.state.strings[key] = value;
      } else if (type === 'preamble') {
        this.consumeRule('Expression');
      } else {
        const label = this.consumeToken('label').value;
        this.consumeRule('_');
        this.consumeToken('comma');
        this.consumeRule('_');
        const properties = this.consumeRule('EntryBody');
        result = {
          type,
          label,
          properties
        };
      }
      this.consumeRule('_');
      const closeBrace = this.consumeToken('rbrace').value;
      if (closeBrace !== delimiters[openBrace]) {
        _core.logger.warn('[plugin-bibtex]', `entry started with "${openBrace}", but ends with "${closeBrace}"`);
      }
      return result;
    },
    EntryBody() {
      const properties = {};
      while (this.matchToken('identifier')) {
        const [field, value] = this.consumeRule('Field');
        properties[field] = value;
        this.consumeRule('_');
        if (this.consumeToken('comma', true)) {
          this.consumeRule('_');
        } else {
          break;
        }
      }
      return properties;
    },
    Field() {
      const field = this.consumeToken('identifier').value.toLowerCase();
      this.consumeRule('_');
      this.consumeToken('equals');
      this.consumeRule('_');
      const value = this.consumeRule('Expression');
      return [field, value];
    },
    Expression() {
      let output = this.consumeRule('ExpressionPart');
      this.consumeRule('_');
      while (this.matchToken('hash')) {
        this.consumeToken('hash');
        this.consumeRule('_');
        output += this.consumeRule('ExpressionPart').toString();
        this.consumeRule('_');
      }
      return output;
    },
    ExpressionPart() {
      if (this.matchToken('identifier')) {
        return this.state.strings[this.consumeToken('identifier').value.toLowerCase()] || '';
      } else if (this.matchToken('number')) {
        return parseInt(this.consumeToken('number'));
      } else if (this.matchToken('quote')) {
        return this.consumeRule('QuoteString');
      } else {
        return this.consumeRule('BracketString');
      }
    },
    QuoteString() {
      let output = '';
      this.consumeToken('quote');
      while (!this.matchToken('quote')) {
        output += this.consumeRule('Text');
      }
      this.consumeToken('quote');
      return output;
    },
    BracketString() {
      let output = '';
      this.consumeToken('lbrace');
      while (!this.matchToken('rbrace')) {
        output += this.consumeRule('Text');
      }
      this.consumeToken('rbrace');
      return output;
    },
    Text() {
      if (this.matchToken('lbrace')) {
        return `{${this.consumeRule('BracketString')}}`;
      } else {
        return this.consumeToken('text').value;
      }
    }
  }, {
    strings: _constants.defaultStrings
  });
  exports.bibtexGrammar = bibtexGrammar;
  function parse(text) {
    return bibtexGrammar.parse(lexer.reset(text));
  }
  },{"./constants.js":53,"@citation-js/core":"citation-js","moo":88}],57:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ref = exports.formats = void 0;
  var _file = require("./file.js");
  var _bibtxt = require("./bibtxt.js");
  var _entries = require("./entries.js");
  const ref = '@bibtex';
  exports.ref = ref;
  const formats = {
    '@biblatex/text': {
      parse: _file.parse,
      parseType: {
        dataType: 'String',
        predicate: /@\s{0,5}[A-Za-z]{1,13}\s{0,5}\{\s{0,5}[^@{}"=,\\\s]{0,100}\s{0,5},[\s\S]*\}/
      }
    },
    '@biblatex/entry+object': {
      parse(input) {
        return (0, _entries.parse)([input]);
      },
      parseType: {
        dataType: 'SimpleObject',
        propertyConstraint: {
          props: ['type', 'label', 'properties']
        }
      }
    },
    '@biblatex/entries+list': {
      parse: _entries.parse,
      parseType: {
        elementConstraint: '@biblatex/entry+object'
      }
    },
    '@bibtex/text': {
      parse: _file.parse,
      outputs: '@bibtex/entries+list'
    },
    '@bibtex/entry+object': {
      parse(input) {
        return (0, _entries.parseBibtex)([input]);
      }
    },
    '@bibtex/entries+list': {
      parse: _entries.parseBibtex
    },
    '@bibtxt/text': {
      parse: _bibtxt.parse,
      parseType: {
        dataType: 'String',
        predicate: /^\s*(\[(?!\s*[{[]).*?\]\s*(\n\s*[^[]((?!:)\S)+\s*:\s*.+?\s*)*\s*)+$/
      }
    }
  };
  exports.formats = formats;
  },{"./bibtxt.js":52,"./entries.js":54,"./file.js":56}],58:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.formatNameParts = formatNameParts;
  exports.getStringCase = getStringCase;
  exports.orderNameParts = orderNameParts;
  exports.orderNamePieces = orderNamePieces;
  function getStringCase(string) {
    const a = string.toUpperCase();
    const b = string.toLowerCase();
    for (let i = 0; i < string.length; i++) {
      if (a[i] !== b[i]) {
        return a[i] === string[i];
      }
    }
    return null;
  }
  function formatNameParts(parts) {
    if (parts.length === 0) {
      return undefined;
    }
    let piece = '';
    while (parts.length > 1) {
      const {
        value,
        hyphenated
      } = parts.shift();
      piece += value + (hyphenated ? '-' : ' ');
    }
    const output = piece + parts[0].value;
    return output[0] && output;
  }
  function orderNameParts(parts, orderGiven = true) {
    const given = [];
    const undecided = [];
    if (orderGiven) {
      while (parts.length > 1 && parts[0].upperCase !== false) {
        given.push(...undecided);
        undecided.length = 0;
        while (parts.length > 1 && parts[0].upperCase !== false && !parts[0].hyphenated) {
          given.push(parts.shift());
        }
        while (parts.length > 0 && parts[0].upperCase !== false && parts[0].hyphenated) {
          undecided.push(parts.shift());
        }
      }
    }
    const prefix = [];
    const family = [];
    while (parts.length > 1) {
      prefix.push(...family);
      family.length = 0;
      while (parts.length > 1 && parts[0].upperCase === false) {
        prefix.push(parts.shift());
      }
      while (parts.length > 0 && parts[0].upperCase !== false) {
        family.push(parts.shift());
      }
    }
    if (undecided.length) {
      family.unshift(...undecided);
    }
    if (parts.length) {
      family.push(parts[0]);
    }
    return [formatNameParts(given), formatNameParts(prefix), formatNameParts(family)];
  }
  function orderNamePieces(pieces) {
    if (pieces[0][0].label) {
      const name = {};
      for (const [{
        value,
        label
      }] of pieces) {
        name[label] = value;
      }
      return name;
    }
    const name = {};
    const [given, prefix, family] = orderNameParts(pieces[0], pieces.length === 1);
    if (family) {
      name.family = family;
    }
    if (prefix) {
      name.prefix = prefix;
    }
    if (pieces.length === 3) {
      name.given = formatNameParts(pieces[2]);
      name.suffix = formatNameParts(pieces[1]);
    } else if (pieces.length === 2) {
      name.given = formatNameParts(pieces[1]);
    } else if (given) {
      name.given = given;
    }
    return name;
  }
  },{}],59:[function(require,module,exports){
  module.exports={"biblatex":{"article":["author","title","journaltitle",["year","date"]],"book":["author","title",["year","date"]],"mvbook":["author","title",["year","date"]],"inbook":["author","title","booktitle",["year","date"]],"booklet":[["author","editor"],"title",["year","date"]],"collection":["editor","title",["year","date"]],"mvcollection":["editor","title",["year","date"]],"incollection":["author","title","booktitle",["year","date"]],"dataset":[["author","editor"],"title",["year","date"]],"online":[["author","editor"],"title",["year","date"],["doi","eprint","url"]],"patent":["author","title","number",["year","date"]],"periodical":["editor","title",["year","date"]],"proceedings":["title",["year","date"]],"mvproceedings":["title",["year","date"]],"inproceedings":["author","title","booktitle",["year","date"]],"report":["author","title","type","institution",["year","date"]],"thesis":["author","title","type","institution",["year","date"]],"unpublished":["author","title",["year","date"]],"conference":["author","title","booktitle",["year","date"]],"electronic":[["author","editor"],"title",["year","date"],["doi","eprint","url"]],"mastersthesis":["author","title","institution",["year","date"]],"phdthesis":["author","title","institution",["year","date"]],"techreport":["author","title","institution",["year","date"]],"www":[["author","editor"],"title",["year","date"],["doi","eprint","url"]]},"bibtex":{"article":["author","title","journal","year"],"book":[["author","editor"],"title","publisher","year"],"booklet":["title"],"inbook":[["author","editor"],"title",["chapter","pages"],"publisher","year"],"incollection":["author","title","booktitle","publisher","year"],"inproceedings":["author","title","booktitle","year"],"mastersthesis":["author","title","school","year"],"phdthesis":["author","title","school","year"],"proceedings":["title","year"],"techreport":["author","title","institution","year"],"unpublished":["author","title","note"]}}
  },{}],60:[function(require,module,exports){
  module.exports={"diacritics":{"`":"Ì€","'":"Ì","^":"Ì‚","~":"Ìƒ","=":"Ì„","u":"Ì†",".":"Ì‡","\"":"Ìˆ","r":"ÌŠ","H":"Ì‹","v":"ÌŒ","b":"Ì²","d":"Ì£","c":"Ì§","k":"Ì¨","t":"Í¡","textcommabelow":"Ì¦"},"commands":{"textquotesingle":"'","textasciigrave":"`","textquotedbl":"\"","textdollar":"$","textless":"<","textgreater":">","textbackslash":"\\","textasciicircum":"^","textunderscore":"_","textbraceleft":"{","textbar":"|","textbraceright":"}","textasciitilde":"~","textexclamdown":"Â¡","textcent":"Â¢","textsterling":"Â£","textcurrency":"Â¤","textyen":"Â¥","textbrokenbar":"Â¦","textsection":"Â§","textasciidieresis":"Â¨","textcopyright":"Â©","textordfeminine":"Âª","guillemetleft":"Â«","guillemotleft":"Â«","textlnot":"Â¬","textregistered":"Â®","textasciimacron":"Â¯","textdegree":"Â°","textpm":"Â±","texttwosuperior":"Â²","textthreesuperior":"Â³","textasciiacute":"Â´","textmu":"Âµ","textparagraph":"Â¶","textperiodcentered":"Â·","textonesuperior":"Â¹","textordmasculine":"Âº","guillemetright":"Â»","guillemotright":"Â»","textonequarter":"Â¼","textonehalf":"Â½","textthreequarters":"Â¾","textquestiondown":"Â¿","AE":"Ã†","DH":"Ã","texttimes":"Ã—","O":"Ã˜","TH":"Ãž","ss":"ÃŸ","ae":"Ã¦","dh":"Ã°","textdiv":"Ã·","o":"Ã¸","th":"Ã¾","DJ":"Ä","dj":"Ä‘","i":"Ä±","IJ":"Ä²","ij":"Ä³","L":"Å","l":"Å‚","NG":"ÅŠ","ng":"Å‹","OE":"Å’","oe":"Å“","textflorin":"Æ’","j":"È·","textasciicaron":"Ë‡","textasciibreve":"Ë˜","textacutedbl":"Ë","textgravedbl":"Ëµ","texttildelow":"Ë·","textbaht":"à¸¿","SS":"áºž","textcompwordmark":"â€Œ","textendash":"â€“","textemdash":"â€”","textbardbl":"â€–","textquoteleft":"â€˜","textquoteright":"â€™","quotesinglbase":"â€š","textquotedblleft":"â€œ","textquotedblright":"â€","quotedblbase":"â€ž","textdagger":"â€ ","textdaggerdbl":"â€¡","textbullet":"â€¢","textellipsis":"â€¦","textperthousand":"â€°","textpertenthousand":"â€±","guilsinglleft":"â€¹","guilsinglright":"â€º","textreferencemark":"â€»","textinterrobang":"â€½","textfractionsolidus":"â„","textlquill":"â…","textrquill":"â†","textdiscount":"â’","textcolonmonetary":"â‚¡","textlira":"â‚¤","textnaira":"â‚¦","textwon":"â‚©","textdong":"â‚«","texteuro":"â‚¬","textpeso":"â‚±","textcelsius":"â„ƒ","textnumero":"â„–","textcircledP":"â„—","textrecipe":"â„ž","textservicemark":"â„ ","texttrademark":"â„¢","textohm":"â„¦","textmho":"â„§","textestimated":"â„®","textleftarrow":"â†","textuparrow":"â†‘","textrightarrow":"â†’","textdownarrow":"â†“","textminus":"âˆ’","Hwithstroke":"Ä¦","hwithstroke":"Ä§","textasteriskcentered":"âˆ—","textsurd":"âˆš","textlangle":"âŒ©","textrangle":"âŒª","textblank":"â¢","textvisiblespace":"â£","textopenbullet":"â—¦","textbigcircle":"â—¯","textmusicalnote":"â™ª","textmarried":"âš­","textdivorced":"âš®","textinterrobangdown":"â¸˜","textcommabelow":null,"copyright":"Â©","Gamma":"Î“","Delta":"Î”","Theta":"Î˜","Lambda":"Î›","Xi":"Îž","Pi":"Î ","Sigma":"Î£","Phi":"Î¦","Psi":"Î¨","Omega":"Î©","alpha":"Î±","beta":"Î²","gamma":"Î³","delta":"Î´","varepsilon":"Îµ","zeta":"Î¶","eta":"Î·","theta":"Î¸","iota":"Î¹","kappa":"Îº","lambda":"Î»","mu":"Î¼","nu":"Î½","xi":"Î¾","pi":"Ï€","rho":"Ï","varsigma":"Ï‚","sigma":"Ïƒ","tau":"Ï„","upsilon":"Ï…","varphi":"Ï†","chi":"Ï‡","psi":"Ïˆ","omega":"Ï‰","vartheta":"Ï‘","Upsilon":"Ï’","phi":"Ï•","varpi":"Ï–","varrho":"Ï±","epsilon":"Ïµ"}}
  },{}],61:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.parse = parse;
  exports.valueGrammar = void 0;
  var _core = require("@citation-js/core");
  var _moo = _interopRequireDefault(require("moo"));
  var _config = _interopRequireDefault(require("../config.js"));
  var constants = _interopRequireWildcard(require("./constants.js"));
  var _name = require("./name.js");
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const commandKeywords = {
    '\\begin': 'commandBegin',
    '\\end': 'commandEnd'
  };
  const text = {
    command: {
      match: /\\(?:[a-zA-Z]+|.) */,
      type: command => commandKeywords[command],
      value: s => s.slice(1).trim()
    },
    lbrace: {
      match: '{',
      push: 'bracedLiteral'
    },
    mathShift: {
      match: '$',
      push: 'mathLiteral'
    },
    whitespace: {
      match: /[\s]+|~/,
      lineBreaks: true,
      value(token) {
        return token === '~' ? '\xa0' : ' ';
      }
    }
  };
  const lexer = _moo.default.states({
    stringLiteral: _objectSpread(_objectSpread({}, text), {}, {
      text: /[^{$}\s~\\]+/
    }),
    namesLiteral: _objectSpread(_objectSpread({
      and: /\s+and\s+/,
      comma: ',',
      hyphen: '-',
      equals: '='
    }, text), {}, {
      text: /[^{$}\s~\\,=-]+/
    }),
    listLiteral: _objectSpread(_objectSpread({
      and: /\s+and\s+/
    }, text), {}, {
      text: /[^{$}\s~\\]+/
    }),
    separatedLiteral: _objectSpread(_objectSpread({
      comma: ','
    }, text), {}, {
      text: /[^{$}\s~\\,]+/
    }),
    bracedLiteral: _objectSpread(_objectSpread({}, text), {}, {
      rbrace: {
        match: '}',
        pop: true
      },
      text: /[^{$}\s~\\]+/
    }),
    mathLiteral: _objectSpread(_objectSpread({}, text), {}, {
      mathShift: {
        match: '$',
        pop: true
      },
      script: /[\^_]/,
      text: /[^{$}\s~\\^_]+/
    })
  });
  function flattenConsString(string) {
    string[0];
    return string;
  }
  function applyFormatting(text, format) {
    if (format in constants.formatting) {
      return text && constants.formatting[format].join(text);
    } else {
      return text;
    }
  }
  const valueGrammar = new _core.util.Grammar({
    String() {
      let output = '';
      while (!this.matchEndOfFile()) {
        output += this.consumeRule('Text');
      }
      return flattenConsString(output);
    },
    StringNames() {
      const list = [];
      while (true) {
        this.consumeToken('whitespace', true);
        list.push(this.consumeRule('Name'));
        this.consumeToken('whitespace', true);
        if (this.matchEndOfFile()) {
          return list;
        } else {
          this.consumeToken('and');
        }
      }
    },
    Name() {
      const pieces = [];
      while (true) {
        pieces.push(this.consumeRule('NamePiece'));
        if (this.matchEndOfFile() || this.matchToken('and')) {
          return (0, _name.orderNamePieces)(pieces);
        } else {
          this.consumeToken('comma');
          this.consumeToken('whitespace', true);
        }
      }
    },
    NamePiece() {
      const parts = [];
      while (true) {
        const part = this.consumeRule('NameToken');
        if (part.label) {
          part.label = (0, _name.formatNameParts)([...parts, {
            value: part.label
          }]);
          return [part];
        }
        parts.push(part);
        if (this.matchEndOfFile() || this.matchToken('and') || this.matchToken('comma')) {
          return parts;
        } else {
          while (this.matchToken('hyphen') || this.matchToken('whitespace')) {
            this.consumeToken();
          }
        }
      }
    },
    NameToken() {
      let upperCase = null;
      let value = '';
      while (true) {
        if (upperCase === null && this.matchToken('text')) {
          const text = this.consumeToken().value;
          value += text;
          upperCase = (0, _name.getStringCase)(text);
        } else if (this.matchEndOfFile() || this.matchToken('and') || this.matchToken('comma') || this.matchToken('whitespace')) {
          return {
            value,
            upperCase
          };
        } else if (this.matchToken('hyphen')) {
          return {
            value,
            upperCase,
            hyphenated: true
          };
        } else if (this.matchToken('equals')) {
          this.consumeToken('equals');
          const text = this.consumeRule('NamePiece');
          if (text[0].label) {
            value += '=' + text[0].label;
          }
          return {
            value: (0, _name.formatNameParts)(text),
            label: value
          };
        } else {
          value += this.consumeRule('Text');
        }
      }
    },
    StringList() {
      const list = [];
      while (!this.matchEndOfFile()) {
        let output = '';
        while (!this.matchEndOfFile() && !this.matchToken('and')) {
          output += this.consumeRule('Text');
        }
        list.push(flattenConsString(output));
        this.consumeToken('and', true);
      }
      return list.length === 1 ? list[0] : list;
    },
    StringSeparated() {
      const list = [];
      while (!this.matchEndOfFile()) {
        let output = '';
        while (!this.matchEndOfFile() && !this.matchToken('comma')) {
          output += this.consumeRule('Text');
        }
        list.push(output.trim());
        this.consumeToken('comma', true);
        this.consumeToken('whitespace', true);
      }
      return list;
    },
    StringVerbatim() {
      let output = '';
      while (!this.matchEndOfFile()) {
        output += this.consumeToken().text;
      }
      return flattenConsString(output);
    },
    StringUri() {
      const uri = this.consumeRule('StringVerbatim');
      try {
        if (decodeURI(uri) === uri) {
          return encodeURI(uri);
        } else {
          return uri;
        }
      } catch (e) {
        return encodeURI(uri);
      }
    },
    StringTitleCase() {
      this.state.sentenceCase = true;
      let output = '';
      while (!this.matchEndOfFile()) {
        output += this.consumeRule('Text');
      }
      return flattenConsString(output);
    },
    BracketString() {
      var _this$state;
      let output = '';
      this.consumeToken('lbrace');
      const sentenceCase = this.state.sentenceCase;
      this.state.sentenceCase = sentenceCase && this.matchToken('command');
      (_this$state = this.state).partlyLowercase && (_this$state.partlyLowercase = this.state.sentenceCase);
      while (!this.matchToken('rbrace')) {
        output += this.consumeRule('Text');
      }
      const topLevel = sentenceCase && !this.state.sentenceCase;
      const protectCase = topLevel && this.state.partlyLowercase;
      this.state.sentenceCase = sentenceCase;
      this.consumeToken('rbrace');
      return protectCase ? applyFormatting(output, 'nocase') : output;
    },
    MathString() {
      let output = '';
      this.consumeToken('mathShift');
      while (!this.matchToken('mathShift')) {
        if (this.matchToken('script')) {
          const script = this.consumeToken('script').value;
          const text = this.consumeRule('Text').split('');
          if (text.every(char => char in constants.mathScripts[script])) {
            output += text.map(char => constants.mathScripts[script][char]).join('');
          } else {
            const formatName = constants.mathScriptFormatting[script];
            output += constants.formatting[formatName].join(text.join(''));
          }
          continue;
        }
        if (this.matchToken('command')) {
          const command = this.token.value;
          if (command in constants.mathScriptFormatting) {
            this.consumeToken('command');
            const text = this.consumeRule('BracketString');
            output += applyFormatting(text, constants.mathScriptFormatting[command]);
            continue;
          }
        }
        output += this.consumeRule('Text');
      }
      this.consumeToken('mathShift');
      return output;
    },
    Text() {
      if (this.matchToken('lbrace')) {
        return this.consumeRule('BracketString');
      } else if (this.matchToken('mathShift')) {
        return this.consumeRule('MathString');
      } else if (this.matchToken('whitespace')) {
        return this.consumeToken('whitespace').value;
      } else if (this.matchToken('commandBegin')) {
        return this.consumeRule('EnclosedEnv');
      } else if (this.matchToken('command')) {
        return this.consumeRule('Command');
      }
      const text = this.consumeToken('text').value.replace(constants.ligaturePattern, ligature => constants.ligatures[ligature]);
      const afterPunctuation = this.state.afterPunctuation;
      this.state.afterPunctuation = /[?!.:]$/.test(text);
      if (!this.state.sentenceCase) {
        var _this$state2;
        (_this$state2 = this.state).partlyLowercase || (_this$state2.partlyLowercase = text === text.toLowerCase() && text !== text.toUpperCase());
        return text;
      }
      const [first, ...otherCharacters] = text;
      const rest = otherCharacters.join('');
      const restLowerCase = rest.toLowerCase();
      if (rest !== restLowerCase) {
        return text;
      }
      if (!afterPunctuation) {
        return text.toLowerCase();
      }
      return first + restLowerCase;
    },
    Command() {
      const commandToken = this.consumeToken('command');
      const command = commandToken.value;
      if (command in constants.formattingEnvs) {
        const text = this.consumeRule('Env');
        const format = constants.formattingEnvs[command];
        return applyFormatting(text, format);
      } else if (command in constants.formattingCommands) {
        const text = this.consumeRule('BracketString');
        const format = constants.formattingCommands[command];
        return applyFormatting(text, format);
      } else if (command in constants.commands) {
        return constants.commands[command];
      } else if (command in constants.diacritics && !this.matchEndOfFile()) {
        const text = this.consumeRule('Text');
        const diacritic = text[0] + constants.diacritics[command];
        return diacritic.normalize('NFC') + text.slice(1);
      } else if (command in constants.argumentCommands) {
        const func = constants.argumentCommands[command];
        const args = [];
        let arity = func.length;
        while (arity-- > 0) {
          this.consumeToken('whitespace', true);
          args.push(this.consumeRule('BracketString'));
        }
        return func(...args);
      } else if (/^[&%$#_{}]$/.test(command)) {
        return commandToken.text.slice(1);
      } else {
        return commandToken.text;
      }
    },
    Env() {
      let output = '';
      while (!this.matchEndOfFile() && !this.matchToken('rbrace')) {
        output += this.consumeRule('Text');
      }
      return output;
    },
    EnclosedEnv() {
      this.consumeToken('commandBegin');
      const beginEnv = this.consumeRule('BracketString');
      let output = '';
      while (!this.matchToken('commandEnd')) {
        output += this.consumeRule('Text');
      }
      const end = this.consumeToken('commandEnd');
      const endEnv = this.consumeRule('BracketString');
      if (beginEnv !== endEnv) {
        throw new SyntaxError(this.lexer.formatError(end, `environment started with "${beginEnv}", ended with "${endEnv}"`));
      }
      return applyFormatting(output, constants.formattingEnvs[beginEnv]);
    }
  }, {
    sentenceCase: false,
    partlyLowercase: false,
    afterPunctuation: true
  });
  exports.valueGrammar = valueGrammar;
  function singleLanguageIsEnglish(language) {
    return constants.sentenceCaseLanguages.includes(language.toLowerCase());
  }
  function isEnglish(languages) {
    if (Array.isArray(languages)) {
      return languages.every(singleLanguageIsEnglish);
    }
    return singleLanguageIsEnglish(languages);
  }
  function getMainRule(fieldType, languages) {
    if (fieldType[1] === 'name') {
      return fieldType[0] === 'list' ? 'StringNames' : 'Name';
    }
    if (fieldType[1] === 'title') {
      const option = _config.default.parse.sentenceCase;
      if (option === 'always' || option === 'english' && isEnglish(languages)) {
        return 'StringTitleCase';
      } else {
        return 'String';
      }
    }
    switch (fieldType[0] === 'field' ? fieldType[1] : fieldType[0]) {
      case 'list':
        return 'StringList';
      case 'separated':
        return 'StringSeparated';
      case 'verbatim':
        return 'StringVerbatim';
      case 'uri':
        return 'StringUri';
      case 'title':
      case 'literal':
      default:
        return 'String';
    }
  }
  function getLexerState(fieldType) {
    if (fieldType[1] === 'name') {
      return 'namesLiteral';
    }
    switch (fieldType[0]) {
      case 'list':
        return 'listLiteral';
      case 'separated':
        return 'separatedLiteral';
      case 'field':
      default:
        return 'stringLiteral';
    }
  }
  function parse(text, field, languages = []) {
    const fieldType = constants.fieldTypes[field] || [];
    return valueGrammar.parse(lexer.reset(text, {
      state: getLexerState(fieldType),
      line: 0,
      col: 0
    }), getMainRule(fieldType, languages));
  }
  },{"../config.js":50,"./constants.js":53,"./name.js":58,"@citation-js/core":"citation-js","moo":88}],62:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _core = require("@citation-js/core");
  var _date = require("@citation-js/date");
  var _biblatexTypes = _interopRequireDefault(require("./biblatexTypes.json"));
  var _shared = require("./shared.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const nonSpec = [{
    source: 'note',
    target: 'accessed',
    when: {
      source: false,
      target: {
        note: false
      }
    },
    convert: {
      toSource(accessed) {
        return `[Online; accessed ${(0, _date.format)(accessed)}]`;
      }
    }
  }, {
    source: 'numpages',
    target: 'number-of-pages',
    when: {
      source: {
        pagetotal: false
      },
      target: false
    }
  }, {
    source: 'pmid',
    target: 'PMID',
    when: {
      source: {
        eprinttype(type) {
          return type !== 'pmid';
        },
        archiveprefix(type) {
          return type !== 'pmid';
        }
      },
      target: false
    }
  }, {
    source: 'pmcid',
    target: 'PMCID',
    when: {
      target: false
    }
  }, {
    source: 's2id',
    target: 'custom',
    convert: {
      toTarget(S2ID) {
        return {
          S2ID
        };
      },
      toSource({
        S2ID
      }) {
        return S2ID;
      }
    }
  }];
  const aliases = [{
    source: 'annote',
    target: 'annote',
    when: {
      source: {
        annotation: false
      },
      target: false
    }
  }, {
    source: 'address',
    target: 'publisher-place',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        location: false
      },
      target: false
    }
  }, {
    source: ['eprint', 'archiveprefix'],
    target: 'PMID',
    convert: _shared.Converters.EPRINT,
    when: {
      source: {
        eprinttype: false
      },
      target: false
    }
  }, {
    source: 'journal',
    target: 'container-title',
    when: {
      source: {
        maintitle: false,
        booktitle: false,
        journaltitle: false
      },
      target: false
    }
  }, {
    source: 'school',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        institution: false,
        organization: false,
        publisher: false
      },
      target: false
    }
  }];
  var _default = new _core.util.Translator([...aliases, ...nonSpec, {
    source: 'abstract',
    target: 'abstract'
  }, {
    source: 'urldate',
    target: 'accessed',
    convert: _shared.Converters.DATE
  }, {
    source: 'annotation',
    target: 'annote'
  }, {
    source: 'author',
    target: 'author',
    convert: _shared.Converters.NAMES
  }, {
    source: 'library',
    target: 'call-number'
  }, {
    source: 'chapter',
    target: 'chapter-number'
  }, {
    source: 'bookauthor',
    target: 'container-author',
    convert: _shared.Converters.NAMES
  }, {
    source: ['maintitle', 'mainsubtitle', 'maintitleaddon'],
    target: 'container-title',
    when: {
      source: true,
      target: {
        'number-of-volumes': true
      }
    },
    convert: _shared.Converters.TITLE
  }, {
    source: ['booktitle', 'booksubtitle', 'booktitleaddon'],
    target: 'container-title',
    when: {
      source: {
        maintitle: false
      },
      target: {
        'number-of-volumes': false,
        type(type) {
          return !type || !type.startsWith('article');
        }
      }
    },
    convert: _shared.Converters.TITLE
  }, {
    source: ['journaltitle', 'journalsubtitle', 'journaltitleaddon'],
    target: 'container-title',
    when: {
      source: {
        [_shared.TYPE]: 'article'
      },
      target: {
        type: ['article', 'article-newspaper', 'article-journal', 'article-magazine']
      }
    },
    convert: _shared.Converters.TITLE
  }, {
    source: 'shortjournal',
    target: 'container-title-short',
    when: {
      source: {
        [_shared.TYPE]: 'article'
      },
      target: {
        type: ['article', 'article-newspaper', 'article-journal', 'article-magazine']
      }
    }
  }, {
    source: 'shortjournal',
    target: 'journalAbbreviation',
    when: {
      source: false,
      target: {
        'container-title-short': false
      }
    }
  }, {
    source: 'number',
    target: 'collection-number',
    when: {
      source: {
        [_shared.TYPE]: ['book', 'mvbook', 'inbook', 'bookinbook', 'suppbook', 'collection', 'mvcollection', 'incollection', 'suppcollection', 'manual', 'suppperiodical', 'proceedings', 'mvproceedings', 'refererence']
      },
      target: {
        type: ['bill', 'book', 'broadcast', 'chapter', 'dataset', 'entry', 'entry-dictionary', 'entry-encyclopedia', 'figure', 'graphic', 'interview', 'legislation', 'legal_case', 'manuscript', 'map', 'motion_picture', 'musical_score', 'pamphlet', 'post', 'post-weblog', 'personal_communication', 'review', 'review-book', 'song', 'speech', 'thesis', 'treaty', 'webpage']
      }
    }
  }, {
    source: 'series',
    target: 'collection-title'
  }, {
    source: 'shortseries',
    target: 'collection-title-short'
  }, {
    source: 'doi',
    target: 'DOI'
  }, {
    source: 'edition',
    target: 'edition'
  }, {
    source: 'editor',
    target: 'editor',
    convert: _shared.Converters.NAMES
  }, {
    source: [_shared.TYPE, 'entrysubtype', 'type'],
    target: ['type', 'genre'],
    convert: {
      toTarget(type, subtype, typeKey) {
        if (!typeKey) {
          if (type === 'mastersthesis') {
            typeKey = 'mathesis';
          }
          if (type === 'phdthesis') {
            typeKey = 'phdthesis';
          }
          if (type === 'techreport') {
            typeKey = 'techreport';
          }
        }
        return [_biblatexTypes.default.source[type] || 'document', typeKey || subtype];
      },
      toSource(type, genre) {
        const sourceType = _biblatexTypes.default.target[type] || 'misc';
        return genre in _shared.TYPE_KEYS ? [sourceType, undefined, genre] : [sourceType, genre];
      }
    }
  }, {
    source: _shared.TYPE,
    when: {
      target: {
        type: false
      }
    },
    convert: {
      toSource() {
        return 'misc';
      }
    }
  }, {
    source: 'eventdate',
    target: 'event-date',
    convert: _shared.Converters.DATE
  }, {
    source: 'venue',
    target: 'event-place'
  }, {
    source: ['eventtitle', 'eventtitleaddon'],
    target: 'event-title',
    convert: _shared.Converters.EVENT_TITLE
  }, {
    source: ['eventtitle', 'eventtitleaddon'],
    target: 'event',
    convert: _shared.Converters.EVENT_TITLE,
    when: {
      source: false,
      target: {
        'event-title': false
      }
    }
  }, {
    source: _shared.LABEL,
    target: ['id', 'citation-key', 'author', 'issued', 'year-suffix', 'title'],
    convert: _shared.Converters.LABEL
  }, {
    source: 'isbn',
    target: 'ISBN'
  }, {
    source: 'issn',
    target: 'ISSN'
  }, {
    source: 'issue',
    target: 'issue',
    when: {
      source: {
        number: false,
        [_shared.TYPE]: ['article', 'periodical']
      },
      target: {
        issue(issue) {
          return typeof issue === 'string' && !issue.match(/\d+/);
        },
        type: ['article', 'article-journal', 'article-newspaper', 'article-magazine', 'periodical']
      }
    }
  }, {
    source: 'number',
    target: 'issue',
    when: {
      source: {
        [_shared.TYPE]: ['article', 'periodical', 'inproceedings']
      },
      target: {
        issue(issue) {
          return issue && (typeof issue === 'number' || issue.match(/\d+/));
        },
        type: ['article', 'article-journal', 'article-newspaper', 'article-magazine', 'paper-conference', 'periodical']
      }
    }
  }, {
    source: 'date',
    target: 'issued',
    convert: _shared.Converters.DATE
  }, {
    source: ['year', 'month', 'day'],
    target: 'issued',
    convert: _shared.Converters.YEAR_MONTH,
    when: {
      source: {
        date: false
      },
      target: false
    }
  }, {
    source: 'location',
    target: 'jurisdiction',
    when: {
      source: {
        type: 'patent'
      },
      target: {
        type: 'patent'
      }
    }
  }, {
    source: 'keywords',
    target: 'keyword',
    convert: _shared.Converters.KEYWORDS
  }, {
    source: 'language',
    target: 'language',
    convert: _shared.Converters.PICK
  }, {
    source: 'note',
    target: 'note'
  }, {
    source: 'eid',
    target: 'number',
    when: {
      target: {
        type: ['article-journal']
      }
    }
  }, {
    source: ['isan', 'ismn', 'isrn', 'iswc'],
    target: 'number',
    convert: _shared.Converters.STANDARD_NUMBERS,
    when: {
      source: {
        [_shared.TYPE](type) {
          return type !== 'patent';
        }
      },
      target: {
        type(type) {
          return type !== 'patent';
        }
      }
    }
  }, {
    source: 'number',
    target: 'number',
    when: {
      source: {
        [_shared.TYPE]: ['patent', 'report', 'techreport', 'legislation']
      },
      target: {
        type: ['patent', 'report', 'legislation']
      }
    }
  }, {
    source: 'origdate',
    target: 'original-date',
    convert: _shared.Converters.DATE
  }, {
    source: 'origlocation',
    target: 'original-publisher-place',
    convert: _shared.Converters.PICK
  }, {
    source: 'origpublisher',
    target: 'original-publisher',
    convert: _shared.Converters.PICK
  }, {
    source: 'origtitle',
    target: 'original-title'
  }, {
    source: 'pages',
    target: 'page',
    when: {
      source: {
        bookpagination: [undefined, 'page']
      }
    },
    convert: _shared.Converters.PAGES
  }, {
    source: 'pagetotal',
    target: 'number-of-pages'
  }, {
    source: 'part',
    target: 'part-number'
  }, {
    source: ['eprint', 'eprinttype'],
    target: 'PMID',
    convert: _shared.Converters.EPRINT
  }, {
    source: 'location',
    target: 'publisher-place',
    convert: _shared.Converters.PICK
  }, {
    source: 'publisher',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: true,
      target: {
        type: ['article', 'article-journal', 'article-magazine', 'article-newspaper', 'bill', 'book', 'broadcast', 'chapter', 'classic', 'collection', 'dataset', 'document', 'entry', 'entry-dictionary', 'entry-encyclopedia', 'event', 'figure', 'graphic', 'hearing', 'interview', 'legal_case', 'legislation', 'manuscript', 'map', 'motion_picture', 'musical_score', 'pamphlet', 'paper-conference', 'patent', 'performance', 'periodical', 'personal_communication', 'post', 'post-weblog', 'regulation', 'review', 'review-book', 'software', 'song', 'speech', 'standard', 'treaty']
      }
    }
  }, {
    source: 'organization',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        publisher: false
      },
      target: {
        type: 'webpage'
      }
    }
  }, {
    source: 'institution',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        publisher: false,
        organization: false
      },
      target: {
        type: ['report', 'thesis']
      }
    }
  }, {
    source: 'howpublished',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        publisher: false,
        organization: false,
        institution: false
      },
      target: {
        type: 'manuscript'
      }
    }
  }, {
    source: ['pages', 'bookpagination'],
    target: 'section',
    when: {
      source: {
        bookpagination: 'section'
      },
      target: {
        page: false
      }
    },
    convert: {
      toTarget(section) {
        return section;
      },
      toSource(section) {
        return [section, 'section'];
      }
    }
  }, {
    source: 'pubstate',
    target: 'status',
    convert: _shared.Converters.STATUS
  }, {
    source: 'shorttitle',
    target: 'title-short'
  }, {
    source: 'shorttitle',
    target: 'shortTitle',
    when: {
      source: false,
      target: {
        'title-short': false
      }
    }
  }, {
    source: ['title', 'subtitle', 'titleaddon'],
    target: 'title',
    convert: _shared.Converters.TITLE
  }, {
    source: 'translator',
    target: 'translator',
    convert: _shared.Converters.NAMES
  }, {
    source: 'url',
    target: 'URL'
  }, {
    source: 'howpublished',
    target: 'URL',
    convert: _shared.Converters.HOW_PUBLISHED,
    when: {
      source: {
        url: false
      },
      target: false
    }
  }, {
    source: 'version',
    target: 'version'
  }, {
    source: 'volume',
    target: 'volume'
  }, {
    source: 'volumes',
    target: 'number-of-volumes'
  }, {
    source: ['issuetitle', 'issuesubtitle', 'issuetitleaddon'],
    target: 'volume-title',
    convert: _shared.Converters.TITLE
  }]);
  exports.default = _default;
  },{"./biblatexTypes.json":63,"./shared.js":68,"@citation-js/core":"citation-js","@citation-js/date":44}],63:[function(require,module,exports){
  module.exports={
    "source": {
      "article": "article-journal",
      "book": "book",
      "mvbook": "book",
      "inbook": "chapter",
      "bookinbook": "book",
      "booklet": "book",
      "collection": "book",
      "mvcollection": "book",
      "incollection": "chapter",
      "dataset": "dataset",
      "manual": "report",
      "misc": "document",
      "online": "webpage",
      "patent": "patent",
      "periodical": "periodical",
      "proceedings": "book",
      "mvproceedings": "book",
      "inproceedings": "paper-conference",
      "reference": "book",
      "mvreference": "book",
      "inreference": "entry",
      "report": "report",
      "software": "software",
      "thesis": "thesis",
      "unpublished": "manuscript",
      "artwork": "graphic",
      "audio": "song",
      "image": "figure",
      "jurisdiction": "legal_case",
      "legislation": "legislation",
      "legal": "treaty",
      "letter": "personal_communication",
      "movie": "motion_picture",
      "music": "musical_score",
      "performance": "performance",
      "review": "review",
      "standard": "standard",
      "video": "motion_picture",
      "conference": "paper-conference",
      "electronic": "webpage",
      "mastersthesis": "thesis",
      "phdthesis": "thesis",
      "techreport": "report",
      "www": "webpage"
    },
    "target": {
      "article": "article",
      "article-journal": "article",
      "article-magazine": "article",
      "article-newspaper": "article",
      "bill": "legislation",
      "book": "book",
      "broadcast": "audio",
      "chapter": "inbook",
      "classic": "unpublished",
      "collection": "misc",
      "dataset": "dataset",
      "document": "misc",
      "entry": "inreference",
      "entry-dictionary": "inreference",
      "entry-encyclopedia": "inreference",
      "event": "misc",
      "figure": "artwork",
      "graphic": "artwork",
      "hearing": "legal",
      "interview": "audio",
      "legal_case": "jurisdiction",
      "legislation": "legislation",
      "manuscript": "unpublished",
      "motion_picture": "movie",
      "musical_score": "music",
      "paper-conference": "inproceedings",
      "patent": "patent",
      "performance": "performance",
      "periodical": "periodical",
      "personal_communication": "letter",
      "post": "online",
      "post-weblog": "online",
      "regulation": "legal",
      "report": "report",
      "review": "review",
      "review-book": "review",
      "software": "software",
      "song": "music",
      "speech": "audio",
      "standard": "standard",
      "thesis": "thesis",
      "treaty": "legal",
      "webpage": "online"
    }
  }
  
  },{}],64:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _core = require("@citation-js/core");
  var _date = require("@citation-js/date");
  var _bibtexTypes = _interopRequireDefault(require("./bibtexTypes.json"));
  var _shared = require("./shared.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  var _default = new _core.util.Translator([{
    source: 'note',
    target: 'accessed',
    when: {
      source: false,
      target: {
        note: false
      }
    },
    convert: {
      toSource(accessed) {
        return `[Online; accessed ${(0, _date.format)(accessed)}]`;
      }
    }
  }, {
    source: 'annote',
    target: 'annote'
  }, {
    source: 'address',
    target: 'publisher-place',
    convert: _shared.Converters.PICK
  }, {
    source: 'author',
    target: 'author',
    convert: _shared.Converters.NAMES
  }, {
    source: 'chapter',
    target: 'chapter-number'
  }, {
    source: 'number',
    target: 'collection-number',
    when: {
      source: {
        [_shared.TYPE]: ['book', 'mvbook', 'inbook', 'collection', 'mvcollection', 'incollection', 'suppcollection', 'manual', 'suppperiodical', 'proceedings', 'mvproceedings', 'refererence']
      },
      target: {
        type: ['bill', 'book', 'broadcast', 'chapter', 'dataset', 'entry', 'entry-dictionary', 'entry-encyclopedia', 'figure', 'graphic', 'interview', 'legislation', 'legal_case', 'manuscript', 'map', 'motion_picture', 'musical_score', 'pamphlet', 'post', 'post-weblog', 'personal_communication', 'review', 'review-book', 'song', 'speech', 'thesis', 'treaty', 'webpage']
      }
    }
  }, {
    source: 'series',
    target: 'collection-title'
  }, {
    source: 'booktitle',
    target: 'container-title',
    when: {
      target: {
        type: ['chapter', 'paper-conference']
      }
    }
  }, {
    source: 'journal',
    target: 'container-title',
    when: {
      source: {
        [_shared.TYPE]: 'article'
      },
      target: {
        type: ['article', 'article-newspaper', 'article-journal', 'article-magazine']
      }
    }
  }, {
    source: 'edition',
    target: 'edition'
  }, {
    source: 'editor',
    target: 'editor',
    convert: _shared.Converters.NAMES
  }, {
    source: _shared.LABEL,
    target: ['id', 'citation-key', 'author', 'issued', 'year-suffix', 'title'],
    convert: _shared.Converters.LABEL
  }, {
    source: 'number',
    target: 'issue',
    when: {
      source: {
        [_shared.TYPE]: ['article', 'periodical', 'inproceedings']
      },
      target: {
        issue(issue) {
          return typeof issue === 'number' || typeof issue === 'string' && issue.match(/\d+/);
        },
        type: ['article', 'article-journal', 'article-newspaper', 'article-magazine', 'paper-conference', 'periodical']
      }
    }
  }, {
    source: ['year', 'month', 'day'],
    target: 'issued',
    convert: _shared.Converters.YEAR_MONTH
  }, {
    source: 'note',
    target: 'note'
  }, {
    source: 'number',
    target: 'number',
    when: {
      source: {
        [_shared.TYPE]: ['patent', 'report', 'techreport']
      },
      target: {
        type: ['patent', 'report']
      }
    }
  }, {
    source: 'pages',
    target: 'page',
    convert: _shared.Converters.PAGES
  }, {
    source: 'publisher',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      target: {
        type: ['article', 'article-journal', 'article-magazine', 'article-newspaper', 'bill', 'book', 'broadcast', 'chapter', 'classic', 'collection', 'dataset', 'document', 'entry', 'entry-dictionary', 'entry-encyclopedia', 'event', 'figure', 'graphic', 'hearing', 'interview', 'legal_case', 'legislation', 'map', 'motion_picture', 'musical_score', 'pamphlet', 'patent', 'performance', 'periodical', 'personal_communication', 'post', 'post-weblog', 'regulation', 'review', 'review-book', 'software', 'song', 'speech', 'standard', 'treaty', 'webpage']
      }
    }
  }, {
    source: 'organization',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        publisher: false
      },
      target: {
        type: 'paper-conference'
      }
    }
  }, {
    source: 'institution',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        publisher: false,
        organization: false
      },
      target: {
        type: 'report'
      }
    }
  }, {
    source: 'school',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        institution: false,
        organization: false,
        publisher: false
      },
      target: {
        type: 'thesis'
      }
    }
  }, {
    source: 'howpublished',
    target: 'publisher',
    convert: _shared.Converters.PICK,
    when: {
      source: {
        publisher: false,
        organization: false,
        institution: false,
        school: false
      },
      target: {
        type: 'manuscript'
      }
    }
  }, {
    source: 'title',
    target: 'title'
  }, {
    source: [_shared.TYPE, 'type'],
    target: ['type', 'genre'],
    convert: {
      toTarget(sourceType, subType) {
        const type = _bibtexTypes.default.source[sourceType] || 'document';
        if (subType) {
          return [type, subType];
        } else if (sourceType === 'mastersthesis') {
          return [type, 'Master\'s thesis'];
        } else if (sourceType === 'phdthesis') {
          return [type, 'PhD thesis'];
        } else {
          return [type];
        }
      },
      toSource(targetType, genre) {
        const type = _bibtexTypes.default.target[targetType] || 'misc';
        if (/^(master'?s|diploma) thesis$/i.test(genre)) {
          return ['mastersthesis'];
        } else if (/^(phd|doctoral) thesis$/i.test(genre)) {
          return ['phdthesis'];
        } else {
          return [type, genre];
        }
      }
    }
  }, {
    source: _shared.TYPE,
    when: {
      target: {
        type: false
      }
    },
    convert: {
      toSource() {
        return 'misc';
      }
    }
  }, {
    source: 'howpublished',
    target: 'URL',
    convert: _shared.Converters.HOW_PUBLISHED,
    when: {
      target: {
        publisher: false
      }
    }
  }, {
    source: 'volume',
    target: 'volume'
  }]);
  exports.default = _default;
  },{"./bibtexTypes.json":65,"./shared.js":68,"@citation-js/core":"citation-js","@citation-js/date":44}],65:[function(require,module,exports){
  module.exports={
    "source": {
      "article": "article-journal",
      "book": "book",
      "booklet": "book",
      "conference": "paper-conference",
      "inbook": "chapter",
      "incollection": "chapter",
      "inproceedings": "paper-conference",
      "manual": "report",
      "mastersthesis": "thesis",
      "misc": "document",
      "phdthesis": "thesis",
      "proceedings": "book",
      "techreport": "report",
      "unpublished": "manuscript"
    },
    "target": {
      "article": "article",
      "article-journal": "article",
      "article-magazine": "article",
      "article-newspaper": "article",
      "book": "book",
      "chapter": "inbook",
      "manuscript": "unpublished",
      "paper-conference": "inproceedings",
      "report": "techreport",
      "review": "article",
      "review-book": "article"
    }
  }
  
  },{}],66:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.crossref = crossref;
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  const BOOK = new Set(['book', 'inbook', 'bookinbook', 'suppbook']);
  const BOOK_PART = new Set(['inbook', 'bookinbook', 'suppbook']);
  const COLLECTION = new Set(['collection', 'reference', 'incollection', 'inreference', 'suppcollection']);
  const COLLECTION_PART = new Set(['incollection', 'inreference', 'suppcollection']);
  const PROCEEDINGS = new Set(['proceedings', 'inproceedings']);
  const PROCEEDINGS_PART = new Set(['inproceedings']);
  const PERIODICAL_PART = new Set(['article', 'suppperiodical']);
  const TITLE_MAP = {
    mvbook: ['main', BOOK],
    mvcollection: ['main', COLLECTION],
    mvreference: ['main', COLLECTION],
    mvproceedings: ['main', PROCEEDINGS],
    book: ['book', BOOK_PART],
    collection: ['book', COLLECTION_PART],
    reference: ['book', COLLECTION_PART],
    proceedings: ['book', PROCEEDINGS_PART],
    periodical: ['journal', PERIODICAL_PART]
  };
  function crossref(target, entry, registry) {
    if (entry.crossref in registry) {
      const parent = registry[entry.crossref];
      if (parent.properties === entry) {
        return entry;
      }
      const data = _objectSpread({}, crossref(parent.type, parent.properties, registry));
      delete data.ids;
      delete data.crossref;
      delete data.xref;
      delete data.entryset;
      delete data.entrysubtype;
      delete data.execute;
      delete data.label;
      delete data.options;
      delete data.presort;
      delete data.related;
      delete data.relatedoptions;
      delete data.relatedstring;
      delete data.relatedtype;
      delete data.shortand;
      delete data.shortandintro;
      delete data.sortkey;
      if ((parent.type === 'mvbook' || parent.type === 'book') && BOOK_PART.has(target)) {
        data.bookauthor = data.author;
      }
      if (parent.type in TITLE_MAP) {
        const [prefix, targets] = TITLE_MAP[parent.type];
        if (targets.has(target)) {
          data[prefix + 'title'] = data.title;
          data[prefix + 'subtitle'] = data.subtitle;
          if (prefix !== 'journal') {
            data[prefix + 'titleaddon'] = data.titleaddon;
          }
          delete data.title;
          delete data.subtitle;
          delete data.titleaddon;
          delete data.shorttitle;
          delete data.sorttitle;
          delete data.indextitle;
          delete data.indexsorttitle;
        }
      }
      return Object.assign(data, entry);
    }
    return entry;
  }
  },{}],67:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.format = format;
  exports.formatBibtex = formatBibtex;
  exports.parse = parse;
  exports.parseBibtex = parseBibtex;
  var _shared = require("./shared.js");
  var _biblatex = _interopRequireDefault(require("./biblatex.js"));
  var _bibtex = _interopRequireDefault(require("./bibtex.js"));
  var _crossref = require("./crossref.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
  function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
  function _parse(input, spec) {
    const registry = {};
    for (const entry of input) {
      registry[entry.label] = entry;
    }
    return input.map(({
      type,
      label,
      properties
    }) => spec.convertToTarget(_objectSpread({
      [_shared.TYPE]: type,
      [_shared.LABEL]: label
    }, (0, _crossref.crossref)(type, properties, registry))));
  }
  function _format(input, spec) {
    return input.map(entry => {
      const _spec$convertToSource = spec.convertToSource(entry),
        {
          [_shared.TYPE]: type,
          [_shared.LABEL]: label
        } = _spec$convertToSource,
        properties = _objectWithoutProperties(_spec$convertToSource, [_shared.TYPE, _shared.LABEL].map(_toPropertyKey));
      return {
        type,
        label,
        properties
      };
    });
  }
  function parseBibtex(input) {
    return _parse(input, _bibtex.default);
  }
  function formatBibtex(input) {
    return _format(input, _bibtex.default);
  }
  function parse(input) {
    return _parse(input, _biblatex.default);
  }
  function format(input) {
    return _format(input, _biblatex.default);
  }
  },{"./biblatex.js":62,"./bibtex.js":64,"./crossref.js":66,"./shared.js":68}],68:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.TYPE_KEYS = exports.TYPE = exports.STANDARD_NUMBERS_PATTERN = exports.MONTHS = exports.LABEL = exports.Converters = void 0;
  exports.formatLabel = formatLabel;
  exports.parseDate = parseDate;
  exports.parseMonth = parseMonth;
  var _core = require("@citation-js/core");
  var _config = _interopRequireDefault(require("../config.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const stopWords = new Set(['the', 'a', 'an']);
  const unsafeChars = /(?:<\/?.*?>|[\u0020-\u002F\u003A-\u0040\u005B-\u005E\u0060\u007B-\u007F])+/g;
  const unicode = /[^\u0020-\u007F]+/g;
  function firstWord(text) {
    if (!text) {
      return '';
    } else {
      return text.normalize('NFKD').replace(unicode, '').split(unsafeChars).find(word => word.length && !stopWords.has(word.toLowerCase()));
    }
  }
  const name = new _core.util.Translator([{
    source: 'given',
    target: 'given'
  }, {
    source: 'family',
    target: 'family'
  }, {
    source: 'suffix',
    target: 'suffix'
  }, {
    source: 'prefix',
    target: 'non-dropping-particle'
  }, {
    source: 'family',
    target: 'literal',
    when: {
      source: false,
      target: {
        family: false,
        given: false
      }
    }
  }]);
  const months = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
  const TYPE = 'BibTeX type';
  exports.TYPE = TYPE;
  const LABEL = 'BibTeX label';
  exports.LABEL = LABEL;
  const MONTHS = {
    jan: 1,
    feb: 2,
    mar: 3,
    apr: 4,
    may: 5,
    jun: 6,
    jul: 7,
    aug: 8,
    sep: 9,
    oct: 10,
    nov: 11,
    dec: 12,
    january: 1,
    february: 2,
    march: 3,
    april: 4,
    may: 5,
    june: 6,
    july: 7,
    august: 8,
    september: 9,
    october: 10,
    november: 11,
    december: 12
  };
  exports.MONTHS = MONTHS;
  const TYPE_KEYS = {
    bathesis: 'Bachelor\'s thesis',
    mathesis: 'Master\'s thesis',
    phdthesis: 'PhD thesis',
    candthesis: 'Candidate thesis',
    techreport: 'technical report',
    resreport: 'research report',
    software: 'computer software',
    datacd: 'data cd',
    audiocd: 'audio cd',
    patent: 'patent',
    patentde: 'German patent',
    patenteu: 'European patent',
    patentfr: 'French patent',
    patentuk: 'British patent',
    patentus: 'U.S. patent',
    patreq: 'patent request',
    patreqde: 'German patent request',
    patreqeu: 'European patent request',
    patreqfr: 'French patent request',
    patrequk: 'British patent request',
    patrequs: 'U.S. patent request'
  };
  exports.TYPE_KEYS = TYPE_KEYS;
  const STANDARD_NUMBERS_PATTERN = /(^(?:ISAN )?(?:[0-9a-f]{4}-){4}[0-9a-z](?:-(?:[0-9a-f]{4}-){2}[0-9a-z])?$)|(^(?:979-?0-?|M-?)(?:\d{9}|(?=[\d-]{11}$)\d+-\d+-\d)$)|(^ISRN .{1,36}$)|(^(?:ISWC )?T-?\d{9}-?\d$)/i;
  exports.STANDARD_NUMBERS_PATTERN = STANDARD_NUMBERS_PATTERN;
  function parseDate(date) {
    const parts = date.split('T')[0].replace(/[?~%]$/, '').split('-');
    const year = +parts[0].replace(/^Y(?=-?\d{4}\d+)/, '').replace(/X/g, '0');
    const month = +parts[1];
    const day = +parts[2];
    if (!month || month > 20) {
      return [year];
    } else if (!day) {
      return [year, month];
    } else {
      return [year, month, day];
    }
  }
  function parseMonth(value) {
    if (value == null) {
      return [];
    }
    if (+value) {
      return [parseInt(value, 10)];
    }
    value = value.trim().toLowerCase();
    if (value in MONTHS) {
      return [MONTHS[value]];
    }
    const parts = value.split(/\s+/);
    let month;
    let day;
    if (parts[0] in MONTHS) {
      month = MONTHS[parts[0]];
      day = parseInt(parts[1]);
    } else if (parts[1] in MONTHS) {
      month = MONTHS[parts[1]];
      day = parseInt(parts[0]);
    }
    return day ? [month, day] : month ? [month] : [];
  }
  function formatLabel(author, issued, suffix, title) {
    let label = '';
    if (author && author[0]) {
      label += firstWord(author[0].family || author[0].literal);
    }
    if (issued && issued['date-parts'] && issued['date-parts'][0]) {
      label += issued['date-parts'][0][0];
    }
    if (suffix) {
      label += suffix;
    } else if (title) {
      label += firstWord(title);
    }
    return label;
  }
  const Converters = {
    PICK: {
      toTarget(...args) {
        return args.find(Boolean);
      },
      toSource(value) {
        return [value];
      }
    },
    DATE: {
      toTarget(date) {
        const parts = date.split('/').map(part => part && part !== '..' ? parseDate(part) : undefined);
        return isNaN(parts[0][0]) ? {
          literal: date
        } : {
          'date-parts': parts
        };
      },
      toSource(date) {
        if ('date-parts' in date) {
          return date['date-parts'].map(datePart => datePart.map(datePart => datePart.toString().padStart(2, '0')).join('-')).join('/');
        }
      }
    },
    YEAR_MONTH: {
      toTarget(year, month, day) {
        if (isNaN(+year)) {
          return {
            literal: year
          };
        } else if (!isNaN(+day) && !isNaN(+month)) {
          return {
            'date-parts': [[+year, +month, +day]]
          };
        } else {
          return {
            'date-parts': [[+year, ...parseMonth(month)]]
          };
        }
      },
      toSource(date) {
        if ('date-parts' in date) {
          const [year, month, day] = date['date-parts'][0];
          return [year.toString(), month ? day ? `${months[month - 1]} ${day}` : month : undefined];
        } else {
          return [];
        }
      }
    },
    EPRINT: {
      toTarget(id, type) {
        if (type === 'pubmed') {
          return id;
        }
      },
      toSource(id) {
        return [id, 'pubmed'];
      }
    },
    EVENT_TITLE: {
      toTarget(title, addon) {
        if (addon) {
          title += ' (' + addon + ')';
        }
        return title;
      },
      toSource(title) {
        return title.match(/^(.+)(?: \((.+)\))?$/).slice(1, 3);
      }
    },
    HOW_PUBLISHED: {
      toTarget(howPublished) {
        if (howPublished.startsWith('http')) {
          return howPublished;
        }
      }
    },
    KEYWORDS: {
      toTarget(list) {
        return list.join(',');
      },
      toSource(list) {
        return list.split(',');
      }
    },
    LABEL: {
      toTarget(label) {
        return [label, label];
      },
      toSource(id, label, author, issued, suffix, title) {
        let safeId;
        if (id === null) {
          safeId = 'null';
        } else if (id === undefined) {
          safeId = 'undefined';
        } else {
          safeId = id.toString().replace(unsafeChars, '');
        }
        if (_config.default.format.useIdAsLabel) {
          return safeId;
        }
        if (label && !unsafeChars.test(label)) {
          return label;
        } else {
          return formatLabel(author, issued, suffix, title) || safeId;
        }
      }
    },
    NAMES: {
      toTarget(list) {
        return list.map(name.convertToTarget);
      },
      toSource(list) {
        return list.map(name.convertToSource);
      }
    },
    PAGES: {
      toTarget(pages) {
        return pages.replace(/[â€“â€”]/, '-');
      },
      toSource(pages) {
        return pages.replace('-', '--');
      }
    },
    STANDARD_NUMBERS: {
      toTarget(...args) {
        return args.find(Boolean);
      },
      toSource(number) {
        const match = number.toString().match(STANDARD_NUMBERS_PATTERN);
        return match ? match.slice(1, 5) : [];
      }
    },
    STATUS: {
      toSource(state) {
        if (/^(inpreparation|submitted|forthcoming|inpress|prepublished)$/i.test(state)) {
          return state;
        }
      }
    },
    TITLE: {
      toTarget(title, subtitle, addon) {
        if (subtitle) {
          title += ': ' + subtitle;
        }
        return title;
      },
      toSource(title) {
        return [title];
      }
    }
  };
  exports.Converters = Converters;
  },{"../config.js":50,"@citation-js/core":"citation-js"}],69:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.format = format;
  function formatEntry({
    type,
    label,
    properties
  }, dict) {
    const fields = Object.entries(properties).map(([field, value]) => dict.listItem.join(`${field} = {${value}},`));
    return dict.entry.join(`@${type}{${label},${dict.list.join(fields.join(''))}}`);
  }
  function format(src, dict) {
    const entries = src.map(entry => formatEntry(entry, dict)).join('');
    return dict.bibliographyContainer.join(entries);
  }
  },{}],70:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.format = format;
  function formatEntry({
    type,
    label,
    properties
  }, dict) {
    const fields = Object.entries(properties).concat([['type', type]]).map(([field, value]) => dict.listItem.join(`${field}: ${value}`));
    return dict.entry.join(`[${label}]${dict.list.join(fields.join(''))}`);
  }
  function format(src, dict) {
    const entries = src.map(entry => formatEntry(entry, dict)).join('\n');
    return dict.bibliographyContainer.join(entries);
  }
  },{}],71:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.format = format;
  exports.formatBibtex = formatBibtex;
  var _index = require("../mapping/index.js");
  var _value = require("./value.js");
  function formatEntryValues({
    type,
    label,
    properties
  }) {
    const output = {};
    for (const property in properties) {
      const value = properties[property];
      output[property] = (0, _value.format)(property, value);
    }
    return {
      type,
      label,
      properties: output
    };
  }
  function format(entries) {
    return (0, _index.format)(entries).map(formatEntryValues);
  }
  function formatBibtex(entries) {
    return (0, _index.formatBibtex)(entries).map(formatEntryValues);
  }
  },{"../mapping/index.js":67,"./value.js":73}],72:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = void 0;
  var _core = require("@citation-js/core");
  var _entries = require("./entries.js");
  var _bibtex = require("./bibtex.js");
  var _bibtxt = require("./bibtxt.js");
  const factory = function (mapper, formatter) {
    return function (data, opts = {}) {
      const {
        type,
        format = type || 'text'
      } = opts;
      data = mapper(data);
      if (format === 'object') {
        return data;
      } else if (_core.plugins.dict.has(format)) {
        return formatter(data, _core.plugins.dict.get(format), opts);
      } else {
        throw new RangeError(`Output dictionary "${format}" not available`);
      }
    };
  };
  var _default = {
    bibtex: factory(_entries.formatBibtex, _bibtex.format),
    biblatex: factory(_entries.format, _bibtex.format),
    bibtxt: factory(_entries.formatBibtex, _bibtxt.format)
  };
  exports.default = _default;
  },{"./bibtex.js":69,"./bibtxt.js":70,"./entries.js":71,"@citation-js/core":"citation-js"}],73:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.format = format;
  var _constants = require("../input/constants.js");
  const unicode = {};
  for (const command in _constants.commands) {
    unicode[_constants.commands[command]] = command;
  }
  for (const diacritic in _constants.diacritics) {
    unicode[_constants.diacritics[diacritic]] = diacritic;
  }
  for (const ligature in _constants.ligatures) {
    unicode[_constants.ligatures[ligature]] = ligature;
  }
  const UNSAFE_UNICODE = /[^a-zA-Z0-9\s!"#%&'()*+,\-./:;=?@[\]{}\u0300-\u0308\u030a-\u030c\u0332\u0323\u0327\u0328\u0361\u0326]/g;
  const DIACRITIC_PATTERN = /.[\u0300-\u0308\u030a-\u030c\u0332\u0323\u0327\u0328\u0361\u0326]+/g;
  const listDelimiters = {
    separated: ',',
    list: ' and '
  };
  const richTextMappings = {
    i: '\\textit{',
    b: '\\textbf{',
    sc: '\\textsc{',
    sup: '\\textsuperscript{',
    sub: '\\textsubscript{',
    'span style="font-variant:small-caps;"': '\\textsc{',
    'span class="nocase"': '{'
  };
  function escapeValue(value) {
    return value.normalize('NFKD').replace(UNSAFE_UNICODE, char => char in unicode ? unicode[char] in _constants.ligatures ? unicode[char] : `\\${unicode[char]}{}` : '').replace(DIACRITIC_PATTERN, match => Array.from(match).reduce((subject, diacritic) => `{\\${unicode[diacritic]} ${subject}}`));
  }
  function formatRichText(value) {
    const closingTags = [];
    let tokens = value.split(/<(\/?(?:i|b|sc|sup|sub|span)|span .*?)>/g);
    tokens = tokens.map((token, index) => {
      if (index % 2 === 0) {
        return escapeValue(token);
      } else if (token in richTextMappings) {
        closingTags.push('/' + token.split(' ')[0]);
        return richTextMappings[token];
      } else if (token === closingTags[closingTags.length - 1]) {
        closingTags.pop();
        return '}';
      } else {
        return '';
      }
    });
    return tokens.join('');
  }
  function formatName(name) {
    if (name.family && !name.prefix && !name.given & !name.suffix) {
      return name.family.includes(listDelimiters.list) ? name.family : `{${name.family}}`;
    }
    const parts = [''];
    if (name.prefix && name.family) {
      parts[0] += name.prefix + ' ';
    }
    if (name.family) {
      parts[0] += name.family;
    }
    if (name.suffix) {
      parts.push(name.suffix);
      parts.push(name.given || '');
    } else {
      parts.push(name.given);
    }
    return escapeValue(parts.join(', ').trim());
  }
  function formatTitle(title) {
    return formatRichText(title).split(/(:\s*)/).map((part, i) => i % 2 ? part : part.replace(/(?!^)\b[a-z]*[A-Z].*?\b/g, '{$&}')).join('');
  }
  function formatSingleValue(value, valueType) {
    switch (valueType) {
      case 'title':
        return formatTitle(value);
      case 'literal':
        return formatRichText(value.toString());
      case 'name':
        return formatName(value);
      case 'verbatim':
      case 'uri':
        return value.toString();
      default:
        return escapeValue(value.toString());
    }
  }
  function formatList(values, valueType, listType) {
    const delimiter = listDelimiters[listType];
    return values.map(value => {
      const formatted = formatSingleValue(value, valueType);
      return formatted.includes(delimiter) ? `{${formatted}}` : formatted;
    }).join(delimiter);
  }
  function format(field, value) {
    if (!(field in _constants.fieldTypes)) {
      return formatSingleValue(value, 'verbatim');
    }
    const [listType, valueType] = _constants.fieldTypes[field];
    if (listType in listDelimiters) {
      return formatList(value, valueType, listType);
    } else {
      return formatSingleValue(value, valueType);
    }
  }
  },{"../input/constants.js":53}],74:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getPrefixedEntry = exports.getAttributedEntry = void 0;
  const getAttributedEntry = (string, name, value) => string.replace(/^\s*<[a-z]+/i, `$& data-${name}="${value}"`);
  exports.getAttributedEntry = getAttributedEntry;
  const getPrefixedEntry = (value, id) => getAttributedEntry(value, 'csl-entry-id', id);
  exports.getPrefixedEntry = getPrefixedEntry;
  },{}],75:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = bibliography;
  var _core = require("@citation-js/core");
  var _engines = _interopRequireDefault(require("./engines.js"));
  var _attr = require("./attr.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const getAffix = (source, affix) => typeof affix === 'function' ? affix(source) : affix || '';
  function bibliography(data, options = {}) {
    const {
      template = 'apa',
      lang,
      format = 'text',
      nosort = false
    } = options;
    const ids = options.entry ? [].concat(options.entry) : data.map(({
      id
    }) => id);
    data = _core.util.downgradeCsl(data);
    const citeproc = (0, _engines.default)(data, template, lang, format);
    const sortedIds = citeproc.updateItems(ids, nosort);
    if (options.append || options.prepend) {
      const items = data.reduce((items, entry) => {
        items[entry.id] = entry;
        return items;
      }, {});
      citeproc.sys.wrapBibliographyEntry = function (id) {
        const entry = items[id];
        return [getAffix(entry, options.prepend), getAffix(entry, options.append)];
      };
    } else {
      citeproc.sys.wrapBibliographyEntry = () => ['', ''];
    }
    const bibliography = citeproc.makeBibliography();
    const [{
      bibstart,
      bibend
    }, bibBody] = bibliography;
    const entries = bibBody.map((element, index) => (0, _attr.getPrefixedEntry)(element, sortedIds[index]));
    if (options.asEntryArray) {
      return entries.map((element, index) => [sortedIds[index], element]);
    }
    return bibstart + entries.join('') + bibend;
  }
  },{"./attr.js":74,"./engines.js":77,"@citation-js/core":"citation-js"}],76:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = citation;
  var _core = require("@citation-js/core");
  var _engines = _interopRequireDefault(require("./engines.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  function citation(data, options = {}) {
    const {
      template = 'apa',
      lang,
      format = 'text'
    } = options;
    const ids = data.map(({
      id
    }) => id);
    const entries = options.entry ? [].concat(options.entry) : ids;
    data = _core.util.downgradeCsl(data);
    const citeproc = (0, _engines.default)(data, template, lang, format);
    citeproc.updateItems(ids);
    const {
      citationsPre = [],
      citationsPost = []
    } = options;
    const citation = citeproc.previewCitationCluster({
      citationItems: entries.map(id => typeof id === 'object' ? id : {
        id
      }),
      properties: {
        noteIndex: 0
      }
    }, citationsPre, citationsPost, format);
    return citation;
  }
  },{"./engines.js":77,"@citation-js/core":"citation-js"}],77:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.fetchEngine = exports.default = void 0;
  var _citeproc = _interopRequireDefault(require("citeproc"));
  var _styles = require("./styles.js");
  var _locales = require("./locales.js");
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const proxied = Symbol.for('proxied');
  const getWrapperProxy = function (original) {
    const proxy = function (state, entry) {
      if (state.sys.wrapBibliographyEntry) {
        const [prefix, postfix] = state.sys.wrapBibliographyEntry(this.system_id);
        entry = [prefix, entry, postfix].join('');
      }
      return original.call(this, state, entry);
    };
    proxy[proxied] = true;
    return proxy;
  };
  for (const format in _citeproc.default.Output.Formats) {
    const original = _citeproc.default.Output.Formats[format]['@bibliography/entry'];
    if (!original || original[proxied]) {
      continue;
    }
    _citeproc.default.Output.Formats[format]['@bibliography/entry'] = getWrapperProxy(original);
  }
  function retrieveLocale(locale) {
    if (_locales.locales.has(locale)) {
      return _locales.locales.get(locale);
    }
    const unnormalised = locale.replace('-', '_');
    if (_locales.locales.has(unnormalised)) {
      return _locales.locales.get(unnormalised);
    }
    return {};
  }
  const engines = {};
  const fetchEngine = function (style, locale, styleXml, retrieveItem, retrieveLocale) {
    const engineHash = `${style}|${locale}`;
    let engine;
    if (engines[engineHash] instanceof _citeproc.default.Engine) {
      engine = engines[engineHash];
      engine.sys.retrieveItem = retrieveItem;
      engine.updateItems([]);
    } else {
      engine = engines[engineHash] = new _citeproc.default.Engine({
        retrieveLocale,
        retrieveItem
      }, styleXml, locale, true);
    }
    return engine;
  };
  exports.fetchEngine = fetchEngine;
  const prepareEngine = function (data, style, locale, format) {
    if (!_citeproc.default.Output.Formats[format] || !_citeproc.default.Output.Formats[format]['@bibliography/entry']) {
      throw new TypeError(`Cannot find format '${format}'`);
    }
    const items = data.reduce((store, entry) => {
      store[entry.id] = entry;
      return store;
    }, {});
    const template = _styles.templates.get(_styles.templates.has(style) ? style : 'apa');
    locale = _locales.locales.has(locale) ? locale : undefined;
    const callback = function (key) {
      if (Object.prototype.hasOwnProperty.call(items, key)) {
        return items[key];
      } else {
        throw new Error(`Cannot find entry with id '${key}'`);
      }
    };
    const engine = fetchEngine(style, locale, template, callback, retrieveLocale);
    engine.setOutputFormat(format);
    return engine;
  };
  var _default = prepareEngine;
  exports.default = _default;
  },{"./locales.js":80,"./styles.js":82,"citeproc":85}],78:[function(require,module,exports){
  "use strict";
  
  var _core = require("@citation-js/core");
  var _locales = require("./locales.js");
  var _styles = require("./styles.js");
  var _engines = _interopRequireDefault(require("./engines.js"));
  var _bibliography = _interopRequireDefault(require("./bibliography.js"));
  var _citation = _interopRequireDefault(require("./citation.js"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  _core.plugins.add('@csl', {
    output: {
      bibliography: _bibliography.default,
      citation: _citation.default
    },
    config: {
      engine: _engines.default,
      locales: _locales.locales,
      templates: _styles.templates
    }
  });
  },{"./bibliography.js":75,"./citation.js":76,"./engines.js":77,"./locales.js":80,"./styles.js":82,"@citation-js/core":"citation-js"}],79:[function(require,module,exports){
  module.exports={
    "en-US": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"en-US\"><info><translator><name>Andrew Dunning</name></translator><translator><name>Sebastian Karcher</name></translator><translator><name>Rintze M. Zelle</name></translator><translator><name>Denis Meier</name></translator><translator><name>Brenton M. Wiernik</name></translator><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights><updated>2015-10-10T23:31:02+00:00</updated></info><style-options punctuation-in-quote=\"true\"/><date form=\"text\"><date-part name=\"month\" suffix=\" \"/><date-part name=\"day\" suffix=\", \"/><date-part name=\"year\"/></date><date form=\"numeric\"><date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\"/\"/><date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\"/\"/><date-part name=\"year\"/></date><terms><term name=\"advance-online-publication\">advance online publication</term><term name=\"album\">album</term><term name=\"audio-recording\">audio recording</term><term name=\"film\">film</term><term name=\"henceforth\">henceforth</term><term name=\"loc-cit\">loc. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"no-place\">no place</term><term name=\"no-place\" form=\"short\">n.p.</term><term name=\"no-publisher\">no publisher</term> <!-- sine nomine --><term name=\"no-publisher\" form=\"short\">n.p.</term><term name=\"on\">on</term><term name=\"op-cit\">op. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"original-work-published\">original work published</term><term name=\"personal-communication\">personal communication</term><term name=\"podcast\">podcast</term><term name=\"podcast-episode\">podcast episode</term><term name=\"preprint\">preprint</term><term name=\"radio-broadcast\">radio broadcast</term><term name=\"radio-series\">radio series</term><term name=\"radio-series-episode\">radio series episode</term><term name=\"special-issue\">special issue</term><term name=\"special-section\">special section</term><term name=\"television-broadcast\">television broadcast</term><term name=\"television-series\">television series</term><term name=\"television-series-episode\">television series episode</term><term name=\"video\">video</term><term name=\"working-paper\">working paper</term><term name=\"accessed\">accessed</term><term name=\"and\">and</term><term name=\"and others\">and others</term><term name=\"anonymous\">anonymous</term><term name=\"anonymous\" form=\"short\">anon.</term><term name=\"at\">at</term><term name=\"available at\">available at</term><term name=\"by\">by</term><term name=\"circa\">circa</term><term name=\"circa\" form=\"short\">c.</term><term name=\"cited\">cited</term><term name=\"edition\"><single>edition</single><multiple>editions</multiple></term><term name=\"edition\" form=\"short\">ed.</term><term name=\"et-al\">et al.</term><term name=\"forthcoming\">forthcoming</term><term name=\"from\">from</term><term name=\"ibid\">ibid.</term><term name=\"in\">in</term><term name=\"in press\">in press</term><term name=\"internet\">internet</term><term name=\"interview\">interview</term><term name=\"letter\">letter</term><term name=\"no date\">no date</term><term name=\"no date\" form=\"short\">n.d.</term><term name=\"online\">online</term><term name=\"presented at\">presented at the</term><term name=\"reference\"><single>reference</single><multiple>references</multiple></term><term name=\"reference\" form=\"short\"><single>ref.</single><multiple>refs.</multiple></term><term name=\"retrieved\">retrieved</term><term name=\"scale\">scale</term><term name=\"version\">version</term>\n<!-- LONG ITEM TYPE FORMS --><term name=\"article\">preprint</term><term name=\"article-journal\">journal article</term><term name=\"article-magazine\">magazine article</term><term name=\"article-newspaper\">newspaper article</term><term name=\"bill\">bill</term><term name=\"book\">book</term><term name=\"broadcast\">broadcast</term><term name=\"chapter\">book chapter</term><term name=\"classic\">classic</term><term name=\"collection\">collection</term><term name=\"dataset\">dataset</term><term name=\"document\">document</term><term name=\"entry\">entry</term><term name=\"entry-dictionary\">dictionary entry</term><term name=\"entry-encyclopedia\">encyclopedia entry</term><term name=\"event\">event</term><!-- figure is in the list of locator terms --><term name=\"graphic\">graphic</term><term name=\"hearing\">hearing</term><term name=\"interview\">interview</term><term name=\"legal_case\">legal case</term><term name=\"legislation\">legislation</term><term name=\"manuscript\">manuscript</term><term name=\"map\">map</term><term name=\"motion_picture\">video recording</term><term name=\"musical_score\">musical score</term><term name=\"pamphlet\">pamphlet</term><term name=\"paper-conference\">conference paper</term><term name=\"patent\">patent</term><term name=\"performance\">performance</term><term name=\"periodical\">periodical</term><term name=\"personal_communication\">personal communication</term><term name=\"post\">post</term><term name=\"post-weblog\">blog post</term><term name=\"regulation\">regulation</term><term name=\"report\">report</term><term name=\"review\">review</term><term name=\"review-book\">book review</term><term name=\"software\">software</term><term name=\"song\">audio recording</term><term name=\"speech\">presentation</term><term name=\"standard\">standard</term><term name=\"thesis\">thesis</term><term name=\"treaty\">treaty</term><term name=\"webpage\">webpage</term>\n<!-- SHORT ITEM TYPE FORMS --><term name=\"article-journal\" form=\"short\">journal art.</term><term name=\"article-magazine\" form=\"short\">mag. art.</term><term name=\"article-newspaper\" form=\"short\">newspaper art.</term><term name=\"book\" form=\"short\">bk.</term><term name=\"chapter\" form=\"short\">bk. chap.</term><term name=\"document\" form=\"short\">doc.</term><!-- figure is in the list of locator terms --><term name=\"graphic\" form=\"short\">graph.</term><term name=\"interview\" form=\"short\">interv.</term><term name=\"manuscript\" form=\"short\">MS</term><term name=\"motion_picture\" form=\"short\">video rec.</term><term name=\"report\" form=\"short\">rep.</term><term name=\"review\" form=\"short\">rev.</term><term name=\"review-book\" form=\"short\">bk. rev.</term><term name=\"song\" form=\"short\">audio rec.</term>\n<!-- HISTORICAL ERA TERMS --><term name=\"ad\">AD</term><term name=\"bc\">BC</term><term name=\"bce\">BCE</term><term name=\"ce\">CE</term>\n<!-- PUNCTUATION --><term name=\"open-quote\">â€œ</term><term name=\"close-quote\">â€</term><term name=\"open-inner-quote\">â€˜</term><term name=\"close-inner-quote\">â€™</term><term name=\"page-range-delimiter\">â€“</term><term name=\"colon\">:</term><term name=\"comma\">,</term><term name=\"semicolon\">;</term>\n<!-- ORDINALS --><term name=\"ordinal\">th</term><term name=\"ordinal-01\">st</term><term name=\"ordinal-02\">nd</term><term name=\"ordinal-03\">rd</term><term name=\"ordinal-11\">th</term><term name=\"ordinal-12\">th</term><term name=\"ordinal-13\">th</term>\n<!-- LONG ORDINALS --><term name=\"long-ordinal-01\">first</term><term name=\"long-ordinal-02\">second</term><term name=\"long-ordinal-03\">third</term><term name=\"long-ordinal-04\">fourth</term><term name=\"long-ordinal-05\">fifth</term><term name=\"long-ordinal-06\">sixth</term><term name=\"long-ordinal-07\">seventh</term><term name=\"long-ordinal-08\">eighth</term><term name=\"long-ordinal-09\">ninth</term><term name=\"long-ordinal-10\">tenth</term>\n<!-- LONG LOCATOR FORMS --><term name=\"act\">\t\t\t <single>act</single><multiple>acts</multiple>\t\t\t\t\t\t </term><term name=\"appendix\">\t\t\t <single>appendix</single><multiple>appendices</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>article</single><multiple>articles</multiple>\t\t\t\t\t\t </term><term name=\"canon\">\t\t\t <single>canon</single><multiple>canons</multiple>\t\t\t\t\t\t </term><term name=\"elocation\">\t\t\t <single>location</single><multiple>locations</multiple>\t\t\t\t\t\t </term><term name=\"equation\">\t\t\t <single>equation</single><multiple>equations</multiple>\t\t\t\t\t\t </term><term name=\"rule\">\t\t\t <single>rule</single><multiple>rules</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>scene</single><multiple>scenes</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>table</single><multiple>tables</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>title</single><multiple>titles</multiple>\t\t\t\t\t\t </term><term name=\"book\"><single>book</single><multiple>books</multiple></term><term name=\"chapter\"><single>chapter</single><multiple>chapters</multiple></term><term name=\"column\"><single>column</single><multiple>columns</multiple></term><term name=\"figure\"><single>figure</single><multiple>figures</multiple></term><term name=\"folio\"><single>folio</single><multiple>folios</multiple></term><term name=\"issue\"><single>number</single><multiple>numbers</multiple></term><term name=\"line\"><single>line</single><multiple>lines</multiple></term><term name=\"note\"><single>note</single><multiple>notes</multiple></term><term name=\"opus\"><single>opus</single><multiple>opera</multiple></term><term name=\"page\"><single>page</single><multiple>pages</multiple></term><term name=\"number-of-pages\"><single>page</single><multiple>pages</multiple></term><term name=\"paragraph\"><single>paragraph</single><multiple>paragraphs</multiple></term><term name=\"part\"><single>part</single><multiple>parts</multiple></term><term name=\"section\"><single>section</single><multiple>sections</multiple></term><term name=\"sub-verbo\"><single>sub verbo</single><multiple>sub verbis</multiple></term><term name=\"verse\"><single>verse</single><multiple>verses</multiple></term><term name=\"volume\"><single>volume</single><multiple>volumes</multiple></term>\n<!-- SHORT LOCATOR FORMS --><term name=\"appendix\" form=\"short\">\t\t\t <single>app.</single><multiple>apps.</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\" form=\"short\">\t\t\t <single>art.</single><multiple>arts.</multiple></term><term name=\"elocation\" form=\"short\">\t\t\t <single>loc.</single><multiple>locs.</multiple></term><term name=\"equation\" form=\"short\">\t\t\t <single>eq.</single><multiple>eqs.</multiple></term><term name=\"rule\" form=\"short\">\t\t\t <single>r.</single><multiple>rr.</multiple>\t\t\t\t\t\t </term><term name=\"scene\" form=\"short\">\t\t\t <single>sc.</single><multiple>scs.</multiple>\t\t\t\t\t\t </term><term name=\"table\" form=\"short\">\t\t\t <single>tbl.</single><multiple>tbls.</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\" form=\"short\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\" form=\"short\">\t\t\t <single>tit.</single><multiple>tits.</multiple></term><term name=\"book\" form=\"short\"><single>bk.</single><multiple>bks.</multiple></term><term name=\"chapter\" form=\"short\"><single>chap.</single><multiple>chaps.</multiple></term><term name=\"column\" form=\"short\"><single>col.</single><multiple>cols.</multiple></term><term name=\"figure\" form=\"short\"><single>fig.</single><multiple>figs.</multiple></term><term name=\"folio\" form=\"short\"><single>fol.</single><multiple>fols.</multiple></term><term name=\"issue\" form=\"short\"><single>no.</single><multiple>nos.</multiple></term><term name=\"line\" form=\"short\"><single>l.</single><multiple>ll.</multiple></term><term name=\"note\" form=\"short\"><single>n.</single><multiple>nn.</multiple></term><term name=\"opus\" form=\"short\"><single>op.</single><multiple>opp.</multiple></term><term name=\"page\" form=\"short\"><single>p.</single><multiple>pp.</multiple></term><term name=\"number-of-pages\" form=\"short\"><single>p.</single><multiple>pp.</multiple></term><term name=\"paragraph\" form=\"short\"><single>para.</single><multiple>paras.</multiple></term><term name=\"part\" form=\"short\"><single>pt.</single><multiple>pts.</multiple></term><term name=\"section\" form=\"short\"><single>sec.</single><multiple>secs.</multiple></term><term name=\"sub-verbo\" form=\"short\"><single>s.v.</single><multiple>s.vv.</multiple></term><term name=\"verse\" form=\"short\"><single>v.</single><multiple>vv.</multiple></term><term name=\"volume\" form=\"short\"><single>vol.</single><multiple>vols.</multiple></term>\n<!-- SYMBOL LOCATOR FORMS --><term name=\"paragraph\" form=\"symbol\"><single>Â¶</single><multiple>Â¶Â¶</multiple></term><term name=\"section\" form=\"symbol\"><single>Â§</single><multiple>Â§Â§</multiple></term>\n<!-- LONG ROLE FORMS --><term name=\"chair\"><single>chair</single><multiple>chairs</multiple></term><term name=\"compiler\"><single>compiler</single><multiple>compilers</multiple></term><term name=\"contributor\"><single>contributor</single><multiple>contributors</multiple></term><term name=\"curator\"><single>curator</single><multiple>curators</multiple></term><term name=\"executive-producer\"><single>executive producer</single><multiple>executive producers</multiple></term><term name=\"guest\"><single>guest</single><multiple>guests</multiple></term><term name=\"host\"><single>host</single><multiple>hosts</multiple></term><term name=\"narrator\"><single>narrator</single><multiple>narrators</multiple></term><term name=\"organizer\"><single>organizer</single><multiple>organizers</multiple></term><term name=\"performer\"><single>performer</single><multiple>performers</multiple></term><term name=\"producer\"><single>producer</single><multiple>producers</multiple></term><term name=\"script-writer\"><single>writer</single><multiple>writers</multiple></term><term name=\"series-creator\"><single>series creator</single><multiple>series creators</multiple></term><term name=\"director\"><single>director</single><multiple>directors</multiple></term><term name=\"editor\"><single>editor</single><multiple>editors</multiple></term><term name=\"editorial-director\"><single>editor</single><multiple>editors</multiple></term><term name=\"illustrator\"><single>illustrator</single><multiple>illustrators</multiple></term><term name=\"translator\"><single>translator</single><multiple>translators</multiple></term><term name=\"editortranslator\"><single>editor &amp; translator</single><multiple>editors &amp; translators</multiple></term>\n<!-- SHORT ROLE FORMS --><term name=\"compiler\" form=\"short\"><single>comp.</single><multiple>comps.</multiple></term><term name=\"contributor\" form=\"short\"><single>contrib.</single><multiple>contribs.</multiple></term><term name=\"curator\" form=\"short\"><single>cur.</single><multiple>curs.</multiple></term><term name=\"executive-producer\" form=\"short\"><single>exec. prod.</single><multiple>exec. prods.</multiple></term><term name=\"narrator\" form=\"short\"><single>narr.</single><multiple>narrs.</multiple></term><term name=\"organizer\" form=\"short\"><single>org.</single><multiple>orgs.</multiple></term><term name=\"performer\" form=\"short\"><single>perf.</single><multiple>perfs.</multiple></term><term name=\"producer\" form=\"short\"><single>prod.</single><multiple>prods.</multiple></term><term name=\"script-writer\" form=\"short\"><single>writ.</single><multiple>writs.</multiple></term><term name=\"series-creator\" form=\"short\"><single>cre.</single><multiple>cres.</multiple></term><term name=\"director\" form=\"short\"><single>dir.</single><multiple>dirs.</multiple></term><term name=\"editor\" form=\"short\"><single>ed.</single><multiple>eds.</multiple></term><term name=\"editorial-director\" form=\"short\"><single>ed.</single><multiple>eds.</multiple></term><term name=\"illustrator\" form=\"short\"><single>ill.</single><multiple>ills.</multiple></term><term name=\"translator\" form=\"short\"><single>tran.</single><multiple>trans.</multiple></term><term name=\"editortranslator\" form=\"short\"><single>ed. &amp; tran.</single><multiple>eds. &amp; trans.</multiple></term>\n<!-- VERB ROLE FORMS --><term name=\"chair\" form=\"verb\">chaired by</term><term name=\"compiler\" form=\"verb\">compiled by</term><term name=\"contributor\" form=\"verb\">with</term><term name=\"curator\" form=\"verb\">curated by</term><term name=\"executive-producer\" form=\"verb\">executive produced by</term><term name=\"guest\" form=\"verb\">with guest</term><term name=\"host\" form=\"verb\">hosted by</term><term name=\"narrator\" form=\"verb\">narrated by</term><term name=\"organizer\" form=\"verb\">organized by</term><term name=\"performer\" form=\"verb\">performed by</term><term name=\"producer\" form=\"verb\">produced by</term><term name=\"script-writer\" form=\"verb\">written by</term><term name=\"series-creator\" form=\"verb\">created by</term><term name=\"container-author\" form=\"verb\">by</term><term name=\"director\" form=\"verb\">directed by</term><term name=\"editor\" form=\"verb\">edited by</term><term name=\"editorial-director\" form=\"verb\">edited by</term><term name=\"illustrator\" form=\"verb\">illustrated by</term><term name=\"interviewer\" form=\"verb\">interview by</term><term name=\"recipient\" form=\"verb\">to</term><term name=\"reviewed-author\" form=\"verb\">by</term><term name=\"translator\" form=\"verb\">translated by</term><term name=\"editortranslator\" form=\"verb\">edited &amp; translated by</term>\n<!-- SHORT VERB ROLE FORMS --><term name=\"compiler\" form=\"verb-short\">comp. by</term><term name=\"contributor\" form=\"verb-short\">w.</term><term name=\"curator\" form=\"verb-short\">cur. by</term><term name=\"executive-producer\" form=\"verb-short\">exec. prod. by</term><term name=\"guest\" form=\"verb-short\">w. guest</term><term name=\"host\" form=\"verb-short\">hosted by</term><term name=\"narrator\" form=\"verb-short\">narr. by</term><term name=\"organizer\" form=\"verb-short\">org. by</term><term name=\"performer\" form=\"verb-short\">perf. by</term><term name=\"producer\" form=\"verb-short\">prod. by</term><term name=\"script-writer\" form=\"verb-short\">writ. by</term><term name=\"series-creator\" form=\"verb-short\">cre. by</term><term name=\"director\" form=\"verb-short\">dir. by</term><term name=\"editor\" form=\"verb-short\">ed. by</term><term name=\"editorial-director\" form=\"verb-short\">ed. by</term><term name=\"illustrator\" form=\"verb-short\">illus. by</term><term name=\"translator\" form=\"verb-short\">trans. by</term><term name=\"editortranslator\" form=\"verb-short\">ed. &amp; trans. by</term>\n<!-- LONG MONTH FORMS --><term name=\"month-01\">January</term><term name=\"month-02\">February</term><term name=\"month-03\">March</term><term name=\"month-04\">April</term><term name=\"month-05\">May</term><term name=\"month-06\">June</term><term name=\"month-07\">July</term><term name=\"month-08\">August</term><term name=\"month-09\">September</term><term name=\"month-10\">October</term><term name=\"month-11\">November</term><term name=\"month-12\">December</term>\n<!-- SHORT MONTH FORMS --><term name=\"month-01\" form=\"short\">Jan.</term><term name=\"month-02\" form=\"short\">Feb.</term><term name=\"month-03\" form=\"short\">Mar.</term><term name=\"month-04\" form=\"short\">Apr.</term><term name=\"month-05\" form=\"short\">May</term><term name=\"month-06\" form=\"short\">Jun.</term><term name=\"month-07\" form=\"short\">Jul.</term><term name=\"month-08\" form=\"short\">Aug.</term><term name=\"month-09\" form=\"short\">Sep.</term><term name=\"month-10\" form=\"short\">Oct.</term><term name=\"month-11\" form=\"short\">Nov.</term><term name=\"month-12\" form=\"short\">Dec.</term>\n<!-- SEASONS --><term name=\"season-01\">Spring</term><term name=\"season-02\">Summer</term><term name=\"season-03\">Autumn</term><term name=\"season-04\">Winter</term></terms>\n</locale>\n",
    "nl-NL": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"nl-NL\"><info><translator><name>Rintze M. Zelle</name><uri>http://twitter.com/rintzezelle</uri></translator><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights><updated>2017-04-01T12:00:00+00:00</updated></info><style-options punctuation-in-quote=\"false\"/><date form=\"text\"><date-part name=\"day\" suffix=\" \"/><date-part name=\"month\" suffix=\" \"/><date-part name=\"year\"/></date><date form=\"numeric\"><date-part name=\"day\" suffix=\"-\" range-delimiter=\"/\"/><date-part name=\"month\" form=\"numeric\" suffix=\"-\" range-delimiter=\"/\"/><date-part name=\"year\"/></date><terms><term name=\"advance-online-publication\">advance online publication</term><term name=\"album\">album</term><term name=\"audio-recording\">audio recording</term><term name=\"film\">film</term><term name=\"henceforth\">henceforth</term><term name=\"loc-cit\">loc. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"no-place\">no place</term><term name=\"no-place\" form=\"short\">n.p.</term><term name=\"no-publisher\">no publisher</term> <!-- sine nomine --><term name=\"no-publisher\" form=\"short\">n.p.</term><term name=\"on\">on</term><term name=\"op-cit\">op. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"original-work-published\">original work published</term><term name=\"personal-communication\">persoonlijke communicatie</term><term name=\"podcast\">podcast</term><term name=\"podcast-episode\">podcast episode</term><term name=\"preprint\">preprint</term><term name=\"radio-broadcast\">radio broadcast</term><term name=\"radio-series\">radio series</term><term name=\"radio-series-episode\">radio series episode</term><term name=\"special-issue\">special issue</term><term name=\"special-section\">special section</term><term name=\"television-broadcast\">television broadcast</term><term name=\"television-series\">television series</term><term name=\"television-series-episode\">television series episode</term><term name=\"video\">video</term><term name=\"working-paper\">working paper</term><term name=\"accessed\">geraadpleegd</term><term name=\"and\">en</term><term name=\"and others\">en anderen</term><term name=\"anonymous\">anoniem</term><term name=\"anonymous\" form=\"short\">anon.</term><term name=\"at\">bij</term><term name=\"available at\">beschikbaar op</term><term name=\"by\">door</term><term name=\"circa\">circa</term><term name=\"circa\" form=\"short\">c.</term><term name=\"cited\">geciteerd</term><term name=\"edition\"><single>druk</single><multiple>drukken</multiple></term><term name=\"edition\" form=\"short\">dr.</term><term name=\"et-al\">e.a.</term><term name=\"forthcoming\">in voorbereiding</term><term name=\"from\">van</term><term name=\"ibid\">ibid.</term><term name=\"in\">in</term><term name=\"in press\">in druk</term><term name=\"internet\">internet</term><term name=\"interview\">interview</term><term name=\"letter\">brief</term><term name=\"no date\">zonder datum</term><term name=\"no date\" form=\"short\">z.d.</term><term name=\"online\">online</term><term name=\"presented at\">gepresenteerd bij</term><term name=\"reference\"><single>referentie</single><multiple>referenties</multiple></term><term name=\"reference\" form=\"short\"><single>ref.</single><multiple>refs.</multiple></term><term name=\"retrieved\">geraadpleegd</term><term name=\"scale\">schaal</term><term name=\"version\">versie</term>\n<!-- LONG ITEM TYPE FORMS --><term name=\"article\">preprint</term><term name=\"article-journal\">journal article</term><term name=\"article-magazine\">magazine article</term><term name=\"article-newspaper\">newspaper article</term><term name=\"bill\">bill</term><term name=\"book\">book</term><term name=\"broadcast\">broadcast</term><term name=\"chapter\">book chapter</term><term name=\"classic\">classic</term><term name=\"collection\">collection</term><term name=\"dataset\">dataset</term><term name=\"document\">document</term><term name=\"entry\">entry</term><term name=\"entry-dictionary\">dictionary entry</term><term name=\"entry-encyclopedia\">encyclopedia entry</term><term name=\"event\">event</term><!-- figure is in the list of locator terms --><term name=\"graphic\">graphic</term><term name=\"hearing\">hearing</term><term name=\"interview\">interview</term><term name=\"legal_case\">legal case</term><term name=\"legislation\">legislation</term><term name=\"manuscript\">manuscript</term><term name=\"map\">map</term><term name=\"motion_picture\">video recording</term><term name=\"musical_score\">musical score</term><term name=\"pamphlet\">pamphlet</term><term name=\"paper-conference\">conference paper</term><term name=\"patent\">patent</term><term name=\"performance\">performance</term><term name=\"periodical\">periodical</term><term name=\"personal_communication\">persoonlijke communicatie</term><term name=\"post\">post</term><term name=\"post-weblog\">blog post</term><term name=\"regulation\">regulation</term><term name=\"report\">report</term><term name=\"review\">review</term><term name=\"review-book\">book review</term><term name=\"software\">software</term><term name=\"song\">audio recording</term><term name=\"speech\">presentation</term><term name=\"standard\">standard</term><term name=\"thesis\">thesis</term><term name=\"treaty\">treaty</term><term name=\"webpage\">webpage</term>\n<!-- SHORT ITEM TYPE FORMS --><term name=\"article-journal\" form=\"short\">journal art.</term><term name=\"article-magazine\" form=\"short\">mag. art.</term><term name=\"article-newspaper\" form=\"short\">newspaper art.</term><term name=\"book\" form=\"short\">bk.</term><term name=\"chapter\" form=\"short\">bk. chap.</term><term name=\"document\" form=\"short\">doc.</term><!-- figure is in the list of locator terms --><term name=\"graphic\" form=\"short\">graph.</term><term name=\"interview\" form=\"short\">interv.</term><term name=\"manuscript\" form=\"short\">MS</term><term name=\"motion_picture\" form=\"short\">video rec.</term><term name=\"report\" form=\"short\">rep.</term><term name=\"review\" form=\"short\">rev.</term><term name=\"review-book\" form=\"short\">bk. rev.</term><term name=\"song\" form=\"short\">audio rec.</term>\n<!-- HISTORICAL ERA TERMS --><term name=\"ad\">AD</term><term name=\"bc\">BC</term><term name=\"bce\">BCE</term><term name=\"ce\">CE</term>\n<!-- PUNCTUATION --><term name=\"open-quote\">â€˜</term><term name=\"close-quote\">â€™</term><term name=\"open-inner-quote\">â€œ</term><term name=\"close-inner-quote\">â€</term><term name=\"page-range-delimiter\">â€“</term><term name=\"colon\">:</term><term name=\"comma\">,</term><term name=\"semicolon\">;</term>\n<!-- ORDINALS --><term name=\"ordinal\">ste</term><term name=\"ordinal-00\" match=\"whole-number\">de</term><term name=\"ordinal-02\" match=\"last-two-digits\">de</term><term name=\"ordinal-03\" match=\"last-two-digits\">de</term><term name=\"ordinal-04\" match=\"last-two-digits\">de</term><term name=\"ordinal-05\" match=\"last-two-digits\">de</term><term name=\"ordinal-06\" match=\"last-two-digits\">de</term><term name=\"ordinal-07\" match=\"last-two-digits\">de</term><term name=\"ordinal-09\" match=\"last-two-digits\">de</term><term name=\"ordinal-10\">de</term><term name=\"ordinal-11\">de</term><term name=\"ordinal-12\">de</term><term name=\"ordinal-13\">de</term><term name=\"ordinal-14\">de</term><term name=\"ordinal-15\">de</term><term name=\"ordinal-16\">de</term><term name=\"ordinal-17\">de</term><term name=\"ordinal-18\">de</term><term name=\"ordinal-19\">de</term>\n<!-- LONG ORDINALS --><term name=\"long-ordinal-01\">eerste</term><term name=\"long-ordinal-02\">tweede</term><term name=\"long-ordinal-03\">derde</term><term name=\"long-ordinal-04\">vierde</term><term name=\"long-ordinal-05\">vijfde</term><term name=\"long-ordinal-06\">zesde</term><term name=\"long-ordinal-07\">zevende</term><term name=\"long-ordinal-08\">achtste</term><term name=\"long-ordinal-09\">negende</term><term name=\"long-ordinal-10\">tiende</term>\n<!-- LONG LOCATOR FORMS --><term name=\"act\">\t\t\t <single>act</single><multiple>acts</multiple>\t\t\t\t\t\t </term><term name=\"appendix\">\t\t\t <single>appendix</single><multiple>appendices</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>article</single><multiple>articles</multiple>\t\t\t\t\t\t </term><term name=\"canon\">\t\t\t <single>canon</single><multiple>canons</multiple>\t\t\t\t\t\t </term><term name=\"elocation\">\t\t\t <single>location</single><multiple>locations</multiple>\t\t\t\t\t\t </term><term name=\"equation\">\t\t\t <single>equation</single><multiple>equations</multiple>\t\t\t\t\t\t </term><term name=\"rule\">\t\t\t <single>rule</single><multiple>rules</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>scene</single><multiple>scenes</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>table</single><multiple>tables</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>title</single><multiple>titles</multiple>\t\t\t\t\t\t </term><term name=\"book\"><single>boek</single><multiple>boeken</multiple></term><term name=\"chapter\"><single>hoofdstuk</single><multiple>hoofdstukken</multiple></term><term name=\"column\"><single>column</single><multiple>columns</multiple></term><term name=\"figure\"><single>figuur</single><multiple>figuren</multiple></term><term name=\"folio\"><single>folio</single><multiple>folio's</multiple></term><term name=\"issue\"><single>nummer</single><multiple>nummers</multiple></term><term name=\"line\"><single>regel</single><multiple>regels</multiple></term><term name=\"note\"><single>aantekening</single><multiple>aantekeningen</multiple></term><term name=\"opus\"><single>opus</single><multiple>opera</multiple></term><term name=\"page\"><single>pagina</single><multiple>pagina's</multiple></term><term name=\"number-of-pages\"><single>pagina</single><multiple>pagina's</multiple></term><term name=\"paragraph\"><single>paragraaf</single><multiple>paragrafen</multiple></term><term name=\"part\"><single>deel</single><multiple>delen</multiple></term><term name=\"section\"><single>sectie</single><multiple>secties</multiple></term><term name=\"sub-verbo\"><single>sub verbo</single><multiple>sub verbis</multiple></term><term name=\"verse\"><single>vers</single><multiple>versen</multiple></term><term name=\"volume\"><single>volume</single><multiple>volumes</multiple></term>\n<!-- SHORT LOCATOR FORMS --><term name=\"appendix\">\t\t\t <single>app.</single><multiple>apps.</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>art.</single><multiple>arts.</multiple></term><term name=\"elocation\">\t\t\t <single>loc.</single><multiple>locs.</multiple></term><term name=\"equation\">\t\t\t <single>eq.</single><multiple>eqs.</multiple></term><term name=\"rule\">\t\t\t <single>r.</single><multiple>rr.</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>sc.</single><multiple>scs.</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>tbl.</single><multiple>tbls.</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>tit.</single><multiple>tits.</multiple></term><term name=\"book\" form=\"short\">bk.</term><term name=\"chapter\" form=\"short\">hfdst.</term><term name=\"column\" form=\"short\">col.</term><term name=\"figure\" form=\"short\">fig.</term><term name=\"folio\" form=\"short\">f.</term><term name=\"issue\" form=\"short\">nr.</term><term name=\"line\" form=\"short\">l.</term><term name=\"note\" form=\"short\">n.</term><term name=\"opus\" form=\"short\">op.</term><term name=\"page\" form=\"short\"><single>p.</single><multiple>pp.</multiple></term><term name=\"number-of-pages\" form=\"short\"><single>p.</single><multiple>pp.</multiple></term><term name=\"paragraph\" form=\"short\">par.</term><term name=\"part\" form=\"short\">deel</term><term name=\"section\" form=\"short\">sec.</term><term name=\"sub-verbo\" form=\"short\"><single>s.v.</single><multiple>s.vv.</multiple></term><term name=\"verse\" form=\"short\"><single>v.</single><multiple>vv.</multiple></term><term name=\"volume\" form=\"short\"><single>vol.</single><multiple>vols.</multiple></term>\n<!-- SYMBOL LOCATOR FORMS --><term name=\"paragraph\" form=\"symbol\"><single>Â¶</single><multiple>Â¶Â¶</multiple></term><term name=\"section\" form=\"symbol\"><single>Â§</single><multiple>Â§Â§</multiple></term>\n<!-- LONG ROLE FORMS --><term name=\"chair\"><single>chair</single><multiple>chairs</multiple></term><term name=\"compiler\"><single>compiler</single><multiple>compilers</multiple></term><term name=\"contributor\"><single>contributor</single><multiple>contributors</multiple></term><term name=\"curator\"><single>curator</single><multiple>curators</multiple></term><term name=\"executive-producer\"><single>executive producer</single><multiple>executive producers</multiple></term><term name=\"guest\"><single>guest</single><multiple>guests</multiple></term><term name=\"host\"><single>host</single><multiple>hosts</multiple></term><term name=\"narrator\"><single>narrator</single><multiple>narrators</multiple></term><term name=\"organizer\"><single>organizer</single><multiple>organizers</multiple></term><term name=\"performer\"><single>performer</single><multiple>performers</multiple></term><term name=\"producer\"><single>producer</single><multiple>producers</multiple></term><term name=\"script-writer\"><single>writer</single><multiple>writers</multiple></term><term name=\"series-creator\"><single>series creator</single><multiple>series creators</multiple></term><term name=\"director\"><single>regisseur</single><multiple>regisseurs</multiple></term><term name=\"editor\"><single>redacteur</single><multiple>redacteuren</multiple></term><term name=\"editorial-director\"><single>redacteur</single><multiple>redacteuren</multiple></term><term name=\"illustrator\"><single>illustrator</single><multiple>illustrators</multiple></term><term name=\"translator\"><single>vertaler</single><multiple>vertalers</multiple></term><term name=\"editortranslator\"><single>redacteur &amp; vertaler</single><multiple>redacteuren &amp; vertalers</multiple></term>\n<!-- SHORT ROLE FORMS --><term name=\"compiler\" form=\"short\"><single>comp.</single><multiple>comps.</multiple></term><term name=\"contributor\" form=\"short\"><single>contrib.</single><multiple>contribs.</multiple></term><term name=\"curator\" form=\"short\"><single>cur.</single><multiple>curs.</multiple></term><term name=\"executive-producer\" form=\"short\"><single>exec. prod.</single><multiple>exec. prods.</multiple></term><term name=\"narrator\" form=\"short\"><single>narr.</single><multiple>narrs.</multiple></term><term name=\"organizer\" form=\"short\"><single>org.</single><multiple>orgs.</multiple></term><term name=\"performer\" form=\"short\"><single>perf.</single><multiple>perfs.</multiple></term><term name=\"producer\" form=\"short\"><single>prod.</single><multiple>prods.</multiple></term><term name=\"script-writer\" form=\"short\"><single>writ.</single><multiple>writs.</multiple></term><term name=\"series-creator\" form=\"short\"><single>cre.</single><multiple>cres.</multiple></term><term name=\"director\" form=\"short\"><single>reg.</single><multiple>reg.</multiple></term><term name=\"editor\" form=\"short\"><single>red.</single><multiple>red.</multiple></term><term name=\"editorial-director\" form=\"short\"><single>red.</single><multiple>red.</multiple></term><term name=\"illustrator\" form=\"short\"><single>ill.</single><multiple>ill.</multiple></term><term name=\"translator\" form=\"short\"><single>vert.</single><multiple>vert.</multiple></term><term name=\"editortranslator\" form=\"short\"><single>red. &amp; vert.</single><multiple>red. &amp; vert.</multiple></term>\n<!-- VERB ROLE FORMS --><term name=\"chair\" form=\"verb\">chaired by</term><term name=\"compiler\" form=\"verb\">compiled by</term><term name=\"contributor\" form=\"verb\">with</term><term name=\"curator\" form=\"verb\">curated by</term><term name=\"executive-producer\" form=\"verb\">executive produced by</term><term name=\"guest\" form=\"verb\">with guest</term><term name=\"host\" form=\"verb\">hosted by</term><term name=\"narrator\" form=\"verb\">narrated by</term><term name=\"organizer\" form=\"verb\">organized by</term><term name=\"performer\" form=\"verb\">performed by</term><term name=\"producer\" form=\"verb\">produced by</term><term name=\"script-writer\" form=\"verb\">written by</term><term name=\"series-creator\" form=\"verb\">created by</term><term name=\"container-author\" form=\"verb\">door</term><term name=\"director\" form=\"verb\">geregisseerd door</term><term name=\"editor\" form=\"verb\">onder redactie van</term><term name=\"editorial-director\" form=\"verb\">onder redactie van</term><term name=\"illustrator\" form=\"verb\">geÃ¯llustreerd door</term><term name=\"interviewer\" form=\"verb\">geÃ¯nterviewd door</term><term name=\"recipient\" form=\"verb\">ontvangen door</term><term name=\"reviewed-author\" form=\"verb\">door</term><term name=\"translator\" form=\"verb\">vertaald door</term><term name=\"editortranslator\" form=\"verb\">bewerkt &amp; vertaald door</term>\n<!-- SHORT VERB ROLE FORMS --><term name=\"compiler\" form=\"verb-short\">comp. by</term><term name=\"contributor\" form=\"verb-short\">w.</term><term name=\"curator\" form=\"verb-short\">cur. by</term><term name=\"executive-producer\" form=\"verb-short\">exec. prod. by</term><term name=\"guest\" form=\"verb-short\">w. guest</term><term name=\"host\" form=\"verb-short\">hosted by</term><term name=\"narrator\" form=\"verb-short\">narr. by</term><term name=\"organizer\" form=\"verb-short\">org. by</term><term name=\"performer\" form=\"verb-short\">perf. by</term><term name=\"producer\" form=\"verb-short\">prod. by</term><term name=\"script-writer\" form=\"verb-short\">writ. by</term><term name=\"series-creator\" form=\"verb-short\">cre. by</term><term name=\"director\" form=\"verb-short\">geregisseerd door</term><term name=\"editor\" form=\"verb-short\">onder redactie van</term><term name=\"editorial-director\" form=\"verb-short\">bewerkt door</term><term name=\"illustrator\" form=\"verb-short\">geÃ¯llustreerd door</term><term name=\"translator\" form=\"verb-short\">vertaald door</term><term name=\"editortranslator\" form=\"verb-short\">bewerkt &amp; vertaald door</term>\n<!-- LONG MONTH FORMS --><term name=\"month-01\">januari</term><term name=\"month-02\">februari</term><term name=\"month-03\">maart</term><term name=\"month-04\">april</term><term name=\"month-05\">mei</term><term name=\"month-06\">juni</term><term name=\"month-07\">juli</term><term name=\"month-08\">augustus</term><term name=\"month-09\">september</term><term name=\"month-10\">oktober</term><term name=\"month-11\">november</term><term name=\"month-12\">december</term>\n<!-- SHORT MONTH FORMS --><term name=\"month-01\" form=\"short\">jan.</term><term name=\"month-02\" form=\"short\">feb.</term><term name=\"month-03\" form=\"short\">mrt.</term><term name=\"month-04\" form=\"short\">apr.</term><term name=\"month-05\" form=\"short\">mei</term><term name=\"month-06\" form=\"short\">jun.</term><term name=\"month-07\" form=\"short\">jul.</term><term name=\"month-08\" form=\"short\">aug.</term><term name=\"month-09\" form=\"short\">sep.</term><term name=\"month-10\" form=\"short\">okt.</term><term name=\"month-11\" form=\"short\">nov.</term><term name=\"month-12\" form=\"short\">dec.</term>\n<!-- SEASONS --><term name=\"season-01\">lente</term><term name=\"season-02\">zomer</term><term name=\"season-03\">herst</term><term name=\"season-04\">winter</term></terms>\n</locale>\n",
    "fr-FR": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"fr-FR\"><info><translator><name>GrÃ©goire Colly</name></translator><translator><name>Collectif Zotero francophone</name></translator><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights><updated>2012-07-04T23:31:02+00:00</updated></info><style-options punctuation-in-quote=\"false\" limit-day-ordinals-to-day-1=\"true\"/><date form=\"text\"><date-part name=\"day\" suffix=\" \"/><date-part name=\"month\" suffix=\" \"/><date-part name=\"year\"/></date><date form=\"numeric\"><date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\"/\"/><date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\"/\"/><date-part name=\"year\"/></date><terms><term name=\"advance-online-publication\">publication en ligne anticipÃ©e</term><term name=\"album\">album</term><term name=\"audio-recording\">enregistrement audio</term><term name=\"film\">film</term><term name=\"henceforth\">dÃ©sormais</term><term name=\"loc-cit\">loc.&#160;cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"no-place\">sans lieu</term><term name=\"no-place\" form=\"short\">s.&#160;l.</term><term name=\"no-publisher\">sans nom</term> <!-- sine nomine --><term name=\"no-publisher\" form=\"short\">s.&#160;n.</term><term name=\"on\">sur</term><term name=\"op-cit\">op.&#160;cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"original-work-published\">Ã©dition originale</term><term name=\"personal-communication\">communication personnelle</term><term name=\"podcast\">podcast</term><term name=\"podcast-episode\">Ã©pisode de podcast</term><term name=\"preprint\">prÃ©publication</term><term name=\"radio-broadcast\">Ã©mission de radio</term><term name=\"radio-series\">sÃ©rie radiophonique</term><term name=\"radio-series-episode\">Ã©pisode de sÃ©rie radiophonique</term><term name=\"special-issue\">numÃ©ro spÃ©cial</term><term name=\"special-section\">section spÃ©ciale</term><term name=\"television-broadcast\">Ã©mission de tÃ©lÃ©vision</term><term name=\"television-series\">sÃ©rie tÃ©lÃ©visÃ©e</term><term name=\"television-series-episode\">Ã©pisode de sÃ©rie tÃ©lÃ©visÃ©e</term><term name=\"video\">vidÃ©o</term><term name=\"working-paper\">document de travail</term><term name=\"accessed\">consultÃ© le</term><term name=\"and\">et</term><term name=\"and others\">et autres</term><term name=\"anonymous\">anonyme</term><term name=\"anonymous\" form=\"short\">anon.</term><term name=\"at\">sur</term><term name=\"available at\">disponible sur</term><term name=\"by\">par</term><term name=\"circa\">vers</term><term name=\"circa\" form=\"short\">v.</term><term name=\"cited\">citÃ©</term><term name=\"edition\" gender=\"feminine\"><single>Ã©dition</single><multiple>Ã©ditions</multiple></term><term name=\"edition\" form=\"short\">Ã©d.</term><term name=\"et-al\">et al.</term><term name=\"forthcoming\">Ã  paraÃ®tre</term><term name=\"from\">Ã  l'adresse</term><term name=\"ibid\">ibid.</term><term name=\"in\">in</term><term name=\"in press\">sous presse</term><term name=\"internet\">Internet</term><term name=\"interview\">entretien</term><term name=\"letter\">lettre</term><term name=\"no date\">sans date</term><term name=\"no date\" form=\"short\">s.&#160;d.</term><term name=\"online\">en ligne</term><term name=\"presented at\">prÃ©sentÃ© Ã </term><term name=\"reference\"><single>rÃ©fÃ©rence</single><multiple>rÃ©fÃ©rences</multiple></term><term name=\"reference\" form=\"short\"><single>rÃ©f.</single><multiple>rÃ©f.</multiple></term><term name=\"retrieved\">consultÃ©</term><term name=\"scale\">Ã©chelle</term><term name=\"version\">version</term>\n<!-- LONG ITEM TYPE FORMS --><term name=\"article\">article</term><term name=\"article-journal\">article de revue</term><term name=\"article-magazine\">article de magazine</term><term name=\"article-newspaper\">article de presse</term><term name=\"bill\">projet de loi</term><term name=\"book\">livre</term><term name=\"broadcast\">Ã©mission</term><term name=\"chapter\">chapitre de livre</term><term name=\"classic\">classique</term><term name=\"collection\">collection</term><term name=\"dataset\">jeu de donnÃ©es</term><term name=\"document\">document</term><term name=\"entry\">entrÃ©e</term><term name=\"entry-dictionary\">entrÃ©e de dictionnaire</term><term name=\"entry-encyclopedia\">entrÃ©e d'encyclopÃ©die</term><term name=\"event\">Ã©vÃ©nement</term><!-- figure is in the list of locator terms --><term name=\"graphic\">image</term><term name=\"hearing\">audience</term><term name=\"interview\">interview</term><term name=\"legal_case\">affaire</term><term name=\"legislation\">acte juridique</term><term name=\"manuscript\">manuscrit</term><term name=\"map\">carte</term><term name=\"motion_picture\">enregistrement vidÃ©o</term><term name=\"musical_score\">partition</term><term name=\"pamphlet\">pamphlet</term><term name=\"paper-conference\">article de colloque</term><term name=\"patent\">brevet</term><term name=\"performance\">interprÃ©tation</term><term name=\"periodical\">pÃ©riodique</term><term name=\"personal_communication\">communication personnelle</term><term name=\"post\">billet</term><term name=\"post-weblog\">billet de blog</term><term name=\"regulation\">rÃ¨glement</term><term name=\"report\">rapport</term><term name=\"review\">recension</term><term name=\"review-book\">recension de livre</term><term name=\"software\">logiciel</term><term name=\"song\">chanson</term><term name=\"speech\">prÃ©sentation</term><term name=\"standard\">norme</term><term name=\"thesis\">thÃ¨se</term><term name=\"treaty\">traitÃ©</term><term name=\"webpage\">page web</term>\n<!-- SHORT ITEM TYPE FORMS --><term name=\"article-journal\" form=\"short\">art. de revue</term><term name=\"article-magazine\" form=\"short\">art. de mag.</term><term name=\"article-newspaper\" form=\"short\">art. de presse</term><term name=\"book\" form=\"short\">liv.</term><term name=\"chapter\" form=\"short\">chap. de liv.</term><term name=\"document\" form=\"short\">doc.</term><!-- figure is in the list of locator terms --><term name=\"graphic\" form=\"short\">graph.</term><term name=\"interview\" form=\"short\">interv.</term><term name=\"manuscript\" form=\"short\">ms</term><term name=\"motion_picture\" form=\"short\">enr. vidÃ©o</term><term name=\"report\" form=\"short\">rap.</term><term name=\"review\" form=\"short\">recens.</term><term name=\"review-book\" form=\"short\">recens. de liv.</term><term name=\"song\" form=\"short\">enr. audio</term>\n<!-- HISTORICAL ERA TERMS --><term name=\"ad\">apr. J.-C.</term><term name=\"bc\">av. J.-C.</term><term name=\"bce\">av. n. Ã¨.</term><term name=\"ce\">n. Ã¨.</term>\n<!-- PUNCTUATION --><term name=\"open-quote\">Â«&#160;</term><term name=\"close-quote\">&#160;Â»</term><term name=\"open-inner-quote\">â€œ</term><term name=\"close-inner-quote\">â€</term><term name=\"page-range-delimiter\">&#8209;</term> <!-- non-breaking hyphen --><term name=\"colon\">&#160;:</term><term name=\"comma\">,</term><term name=\"semicolon\">&#160;;</term>\n<!-- ORDINALS --><term name=\"ordinal\">áµ‰</term><term name=\"ordinal-01\" gender-form=\"feminine\" match=\"whole-number\">Ê³áµ‰</term><term name=\"ordinal-01\" gender-form=\"masculine\" match=\"whole-number\">áµ‰Ê³</term>\n<!-- LONG ORDINALS --><term name=\"long-ordinal-01\">premier</term><term name=\"long-ordinal-02\">deuxiÃ¨me</term><term name=\"long-ordinal-03\">troisiÃ¨me</term><term name=\"long-ordinal-04\">quatriÃ¨me</term><term name=\"long-ordinal-05\">cinquiÃ¨me</term><term name=\"long-ordinal-06\">sixiÃ¨me</term><term name=\"long-ordinal-07\">septiÃ¨me</term><term name=\"long-ordinal-08\">huitiÃ¨me</term><term name=\"long-ordinal-09\">neuviÃ¨me</term><term name=\"long-ordinal-10\">dixiÃ¨me</term>\n<!-- LONG LOCATOR FORMS --><term name=\"act\"><single>acte</single><multiple>actes</multiple></term><term name=\"appendix\"><single>appendice</single><multiple>appendices</multiple></term><term name=\"article-locator\"><single>article</single><multiple>articles</multiple></term><term name=\"canon\"><single>canon</single><multiple>canons</multiple></term><term name=\"elocation\"><single>emplacement</single><multiple>emplacements</multiple></term><term name=\"equation\"><single>Ã©quation</single><multiple>Ã©quations</multiple></term><term name=\"rule\"><single>rÃ¨gle</single><multiple>rÃ¨gles</multiple></term><term name=\"scene\"><single>scÃ¨ne</single><multiple>scÃ¨nes</multiple></term><term name=\"table\"><single>tableau</single><multiple>tableaux</multiple></term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple></term><term name=\"title-locator\"><single>titre</single><multiple>titres</multiple></term><term name=\"book\"><single>livre</single><multiple>livres</multiple></term><term name=\"chapter\"><single>chapitre</single><multiple>chapitres</multiple></term><term name=\"column\"><single>colonne</single><multiple>colonnes</multiple></term><term name=\"figure\"><single>figure</single><multiple>figures</multiple></term><term name=\"folio\"><single>folio</single><multiple>folios</multiple></term><term name=\"issue\" gender=\"masculine\"><single>numÃ©ro</single><multiple>numÃ©ros</multiple></term><term name=\"line\"><single>ligne</single><multiple>lignes</multiple></term><term name=\"note\"><single>note</single><multiple>notes</multiple></term><term name=\"opus\"><single>opus</single><multiple>opus</multiple></term><term name=\"page\"><single>page</single><multiple>pages</multiple></term><term name=\"number-of-pages\"><single>page</single><multiple>pages</multiple></term><term name=\"paragraph\"><single>paragraphe</single><multiple>paragraphes</multiple></term><term name=\"part\"><single>partie</single><multiple>parties</multiple></term><term name=\"section\"><single>section</single><multiple>sections</multiple></term><term name=\"sub-verbo\"><single>sub verbo</single><multiple>sub verbis</multiple></term><term name=\"verse\"><single>verset</single><multiple>versets</multiple></term><term name=\"volume\" gender=\"masculine\"><single>volume</single><multiple>volumes</multiple></term>\n<!-- SHORT LOCATOR FORMS --><term name=\"appendix\"><single>append.</single><multiple>append.</multiple></term><term name=\"article-locator\"><single>art.</single><multiple>art.</multiple></term><term name=\"elocation\"><single>emplact</single><multiple>emplact</multiple></term><term name=\"equation\"><single>eq.</single><multiple>eq.</multiple></term><term name=\"rule\"><single>rÃ¨gle</single><multiple>rÃ¨gles</multiple></term><term name=\"scene\"><single>sc.</single><multiple>sc.</multiple></term><term name=\"table\"><single>tab.</single><multiple>tab.</multiple></term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple></term><term name=\"title-locator\"><single>tit.</single><multiple>tit.</multiple></term><term name=\"book\" form=\"short\">liv.</term><term name=\"chapter\" form=\"short\">chap.</term><term name=\"column\" form=\"short\">col.</term><term name=\"figure\" form=\"short\">fig.</term><term name=\"folio\" form=\"short\"><single>fáµ’</single><multiple>fáµ’Ë¢</multiple></term><term name=\"issue\" form=\"short\"><single>náµ’</single><multiple>náµ’Ë¢</multiple></term><term name=\"line\" form=\"short\">l.</term><term name=\"note\" form=\"short\">n.</term><term name=\"opus\" form=\"short\">op.</term><term name=\"page\" form=\"short\"><single>p.</single><multiple>p.</multiple></term><term name=\"number-of-pages\" form=\"short\"><single>p.</single><multiple>p.</multiple></term><term name=\"paragraph\" form=\"short\">paragr.</term><term name=\"part\" form=\"short\">part.</term><term name=\"section\" form=\"short\">sect.</term><term name=\"sub-verbo\" form=\"short\"><single>s.&#160;v.</single><multiple>s.&#160;vv.</multiple></term><term name=\"verse\" form=\"short\"><single>v.</single><multiple>v.</multiple></term><term name=\"volume\" form=\"short\"><single>vol.</single><multiple>vol.</multiple></term>\n<!-- SYMBOL LOCATOR FORMS --><term name=\"paragraph\" form=\"symbol\"><single>Â§</single><multiple>Â§</multiple></term><term name=\"section\" form=\"symbol\"><single>Â§</single><multiple>Â§</multiple></term>\n<!-- LONG ROLE FORMS --><term name=\"chair\"><single>prÃ©sident</single><multiple>prÃ©sidents</multiple></term><term name=\"compiler\"><single>compilateur</single><multiple>compilateurs</multiple></term><term name=\"contributor\"><single>contributeur</single><multiple>contributeurs</multiple></term><term name=\"curator\"><single>commissaire</single><multiple>commissaires</multiple></term><term name=\"executive-producer\"><single>producteur exÃ©cutif</single><multiple>producteurs exÃ©cutifs</multiple></term><term name=\"guest\"><single>invitÃ©</single><multiple>invitÃ©s</multiple></term><term name=\"host\"><single>hÃ´te</single><multiple>hÃ´tes</multiple></term><term name=\"narrator\"><single>narrateur</single><multiple>narrateurs</multiple></term><term name=\"organizer\"><single>organisateur</single><multiple>organisateurs</multiple></term><term name=\"performer\"><single>interprÃ¨te</single><multiple>interprÃ¨tes</multiple></term><term name=\"producer\"><single>producteur</single><multiple>producteurs</multiple></term><term name=\"script-writer\"><single>scÃ©nariste</single><multiple>scÃ©naristes</multiple></term><term name=\"series-creator\"><single>crÃ©ateur de sÃ©rie</single><multiple>crÃ©ateurs de sÃ©rie</multiple></term><term name=\"director\"><single>rÃ©alisateur</single><multiple>rÃ©alisateurs</multiple></term><term name=\"editor\"><single>Ã©diteur</single><multiple>Ã©diteurs</multiple></term><term name=\"editorial-director\"><single>directeur</single><multiple>directeurs</multiple></term><term name=\"illustrator\"><single>illustrateur</single><multiple>illustrateurs</multiple></term><term name=\"translator\"><single>traducteur</single><multiple>traducteurs</multiple></term><term name=\"editortranslator\"><single>Ã©diteur et traducteur</single><multiple>Ã©diteurs et traducteurs</multiple></term>\n<!-- SHORT ROLE FORMS --><term name=\"compiler\" form=\"short\"><single>compil.</single><multiple>compil.</multiple></term><term name=\"contributor\" form=\"short\"><single>contrib.</single><multiple>contrib.</multiple></term><term name=\"curator\" form=\"short\"><single>commiss.</single><multiple>commiss.</multiple></term><term name=\"executive-producer\" form=\"short\"><single>prod. exÃ©.</single><multiple>prod. exÃ©.</multiple></term><term name=\"narrator\" form=\"short\"><single>narr.</single><multiple>narr.</multiple></term><term name=\"organizer\" form=\"short\"><single>org.</single><multiple>org.</multiple></term><term name=\"performer\" form=\"short\"><single>interpr.</single><multiple>interpr.</multiple></term><term name=\"producer\" form=\"short\"><single>prod.</single><multiple>prod.</multiple></term><term name=\"script-writer\" form=\"short\"><single>scÃ©nar.</single><multiple>scÃ©nar.</multiple></term><term name=\"series-creator\" form=\"short\"><single>crÃ©at.</single><multiple>crÃ©at.</multiple></term><term name=\"director\" form=\"short\"><single>rÃ©al.</single><multiple>rÃ©al.</multiple></term><term name=\"editor\" form=\"short\"><single>Ã©d.</single><multiple>Ã©d.</multiple></term><term name=\"editorial-director\" form=\"short\"><single>dir.</single><multiple>dir.</multiple></term><term name=\"illustrator\" form=\"short\"><single>ill.</single><multiple>ill.</multiple></term><term name=\"translator\" form=\"short\"><single>trad.</single><multiple>trad.</multiple></term><term name=\"editortranslator\" form=\"short\"><single>Ã©d. et trad.</single><multiple>Ã©d. et trad.</multiple></term>\n<!-- VERB ROLE FORMS --><term name=\"chair\" form=\"verb\">prÃ©sidÃ© par</term><term name=\"compiler\" form=\"verb\">compilÃ© par</term><term name=\"contributor\" form=\"verb\">avec</term><term name=\"curator\" form=\"verb\">organisÃ© par</term><term name=\"executive-producer\" form=\"verb\">production exÃ©cutive par</term><term name=\"guest\" form=\"verb\">avec pour invitÃ©</term><term name=\"host\" form=\"verb\">animÃ© par</term><term name=\"narrator\" form=\"verb\">lu par</term><term name=\"organizer\" form=\"verb\">organisÃ© par</term><term name=\"performer\" form=\"verb\">interprÃ©tÃ© par</term><term name=\"producer\" form=\"verb\">produit par</term><term name=\"script-writer\" form=\"verb\">scÃ©nario de</term><term name=\"series-creator\" form=\"verb\">crÃ©Ã© par</term><term name=\"container-author\" form=\"verb\">par</term><term name=\"director\" form=\"verb\">rÃ©alisÃ© par</term><term name=\"editor\" form=\"verb\">Ã©ditÃ© par</term><term name=\"editorial-director\" form=\"verb\">sous la direction de</term><term name=\"illustrator\" form=\"verb\">illustrÃ© par</term><term name=\"interviewer\" form=\"verb\">entretien rÃ©alisÃ© par</term><term name=\"recipient\" form=\"verb\">Ã </term><term name=\"reviewed-author\" form=\"verb\">par</term><term name=\"translator\" form=\"verb\">traduit par</term><term name=\"editortranslator\" form=\"verb\">Ã©ditÃ© et traduit par</term>\n<!-- SHORT VERB ROLE FORMS --><term name=\"compiler\" form=\"verb-short\">compil. par</term><term name=\"contributor\" form=\"verb-short\">ac</term><term name=\"curator\" form=\"verb-short\">org. par</term><term name=\"executive-producer\" form=\"verb-short\">prod. exÃ©. par</term><term name=\"guest\" form=\"verb-short\">ac pr inv.</term><term name=\"host\" form=\"verb-short\">anim. par</term><term name=\"narrator\" form=\"verb-short\">lu par</term><term name=\"organizer\" form=\"verb-short\">org. par</term><term name=\"performer\" form=\"verb-short\">interpr. par</term><term name=\"producer\" form=\"verb-short\">prod. par</term><term name=\"script-writer\" form=\"verb-short\">scÃ©nar. de</term><term name=\"series-creator\" form=\"verb-short\">crÃ©Ã© par</term><term name=\"director\" form=\"verb-short\">rÃ©al. par</term><term name=\"editor\" form=\"verb-short\">Ã©d. par</term><term name=\"editorial-director\" form=\"verb-short\">ss la dir. de</term><term name=\"illustrator\" form=\"verb-short\">ill. par</term><term name=\"translator\" form=\"verb-short\">trad. par</term><term name=\"editortranslator\" form=\"verb-short\">Ã©d. et trad. par</term>\n<!-- LONG MONTH FORMS --><term name=\"month-01\" gender=\"masculine\">janvier</term><term name=\"month-02\" gender=\"masculine\">fÃ©vrier</term><term name=\"month-03\" gender=\"masculine\">mars</term><term name=\"month-04\" gender=\"masculine\">avril</term><term name=\"month-05\" gender=\"masculine\">mai</term><term name=\"month-06\" gender=\"masculine\">juin</term><term name=\"month-07\" gender=\"masculine\">juillet</term><term name=\"month-08\" gender=\"masculine\">aoÃ»t</term><term name=\"month-09\" gender=\"masculine\">septembre</term><term name=\"month-10\" gender=\"masculine\">octobre</term><term name=\"month-11\" gender=\"masculine\">novembre</term><term name=\"month-12\" gender=\"masculine\">dÃ©cembre</term>\n<!-- SHORT MONTH FORMS --><term name=\"month-01\" form=\"short\">janv.</term><term name=\"month-02\" form=\"short\">fÃ©vr.</term><term name=\"month-03\" form=\"short\">mars</term><term name=\"month-04\" form=\"short\">avr.</term><term name=\"month-05\" form=\"short\">mai</term><term name=\"month-06\" form=\"short\">juin</term><term name=\"month-07\" form=\"short\">juill.</term><term name=\"month-08\" form=\"short\">aoÃ»t</term><term name=\"month-09\" form=\"short\">sept.</term><term name=\"month-10\" form=\"short\">oct.</term><term name=\"month-11\" form=\"short\">nov.</term><term name=\"month-12\" form=\"short\">dÃ©c.</term>\n<!-- SEASONS --><term name=\"season-01\">printemps</term><term name=\"season-02\">Ã©tÃ©</term><term name=\"season-03\">automne</term><term name=\"season-04\">hiver</term></terms>\n</locale>\n",
    "de-DE": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"de-DE\"><info><translator><name>Till A. Heilmann</name></translator><translator><name>Ulrich</name></translator><translator><name>Rintze M. Zelle</name></translator><translator><name>Sebastian Karcher</name></translator><translator><name>jakov</name></translator><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights><updated>2012-07-04T23:31:02+00:00</updated></info><style-options punctuation-in-quote=\"false\"/><date form=\"text\"><date-part name=\"day\" form=\"ordinal\" suffix=\" \"/><date-part name=\"month\" suffix=\" \"/><date-part name=\"year\"/></date><date form=\"numeric\"><date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\".\"/><date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\".\"/><date-part name=\"year\"/></date><terms><term name=\"advance-online-publication\">advance online publication</term><term name=\"album\">album</term><term name=\"audio-recording\">audio recording</term><term name=\"film\">film</term><term name=\"henceforth\">henceforth</term><term name=\"loc-cit\">loc. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"no-place\">no place</term><term name=\"no-place\" form=\"short\">n.p.</term><term name=\"no-publisher\">no publisher</term> <!-- sine nomine --><term name=\"no-publisher\" form=\"short\">n.p.</term><term name=\"on\">on</term><term name=\"op-cit\">op. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"original-work-published\">original work published</term><term name=\"personal-communication\">persÃ¶nliche Kommunikation</term><term name=\"podcast\">podcast</term><term name=\"podcast-episode\">podcast episode</term><term name=\"preprint\">preprint</term><term name=\"radio-broadcast\">radio broadcast</term><term name=\"radio-series\">radio series</term><term name=\"radio-series-episode\">radio series episode</term><term name=\"special-issue\">special issue</term><term name=\"special-section\">special section</term><term name=\"television-broadcast\">television broadcast</term><term name=\"television-series\">television series</term><term name=\"television-series-episode\">television series episode</term><term name=\"video\">video</term><term name=\"working-paper\">working paper</term><term name=\"accessed\">zugegriffen</term><term name=\"and\">und</term><term name=\"and others\">und andere</term><term name=\"anonymous\">ohne Autor</term><term name=\"anonymous\" form=\"short\">o.&#160;A.</term><term name=\"at\">auf</term><term name=\"available at\">verfÃ¼gbar unter</term><term name=\"by\">von</term><term name=\"circa\">circa</term><term name=\"circa\" form=\"short\">ca.</term><term name=\"cited\">zitiert</term><term name=\"edition\"><single>Auflage</single><multiple>Auflagen</multiple></term><term name=\"edition\" form=\"short\">Aufl.</term><term name=\"et-al\">u.&#160;a.</term><term name=\"forthcoming\">i.&#160;E.</term><term name=\"from\">von</term><term name=\"ibid\">ebd.</term><term name=\"in\">in</term><term name=\"in press\">im Druck</term><term name=\"internet\">Internet</term><term name=\"interview\">Interview</term><term name=\"letter\">Brief</term><term name=\"no date\">ohne Datum</term><term name=\"no date\" form=\"short\">o.&#160;J.</term><term name=\"online\">online</term><term name=\"presented at\">gehalten auf der</term><term name=\"reference\"><single>Referenz</single><multiple>Referenzen</multiple></term><term name=\"reference\" form=\"short\"><single>Ref.</single><multiple>Ref.</multiple></term><term name=\"retrieved\">abgerufen</term><term name=\"scale\">MaÃŸstab</term><term name=\"version\">Version</term>\n<!-- LONG ITEM TYPE FORMS --><term name=\"article\">preprint</term><term name=\"article-journal\">journal article</term><term name=\"article-magazine\">magazine article</term><term name=\"article-newspaper\">newspaper article</term><term name=\"bill\">bill</term><term name=\"book\">book</term><term name=\"broadcast\">broadcast</term><term name=\"chapter\">book chapter</term><term name=\"classic\">classic</term><term name=\"collection\">collection</term><term name=\"dataset\">dataset</term><term name=\"document\">document</term><term name=\"entry\">entry</term><term name=\"entry-dictionary\">dictionary entry</term><term name=\"entry-encyclopedia\">encyclopedia entry</term><term name=\"event\">event</term><!-- figure is in the list of locator terms --><term name=\"graphic\">graphic</term><term name=\"hearing\">hearing</term><term name=\"interview\">interview</term><term name=\"legal_case\">legal case</term><term name=\"legislation\">legislation</term><term name=\"manuscript\">manuscript</term><term name=\"map\">map</term><term name=\"motion_picture\">video recording</term><term name=\"musical_score\">musical score</term><term name=\"pamphlet\">pamphlet</term><term name=\"paper-conference\">conference paper</term><term name=\"patent\">patent</term><term name=\"performance\">performance</term><term name=\"periodical\">periodical</term><term name=\"personal_communication\">persÃ¶nliche Kommunikation</term><term name=\"post\">post</term><term name=\"post-weblog\">blog post</term><term name=\"regulation\">regulation</term><term name=\"report\">report</term><term name=\"review\">review</term><term name=\"review-book\">book review</term><term name=\"software\">software</term><term name=\"song\">audio recording</term><term name=\"speech\">presentation</term><term name=\"standard\">standard</term><term name=\"thesis\">thesis</term><term name=\"treaty\">treaty</term><term name=\"webpage\">webpage</term>\n<!-- SHORT ITEM TYPE FORMS --><term name=\"article-journal\" form=\"short\">journal art.</term><term name=\"article-magazine\" form=\"short\">mag. art.</term><term name=\"article-newspaper\" form=\"short\">newspaper art.</term><term name=\"book\" form=\"short\">bk.</term><term name=\"chapter\" form=\"short\">bk. chap.</term><term name=\"document\" form=\"short\">doc.</term><!-- figure is in the list of locator terms --><term name=\"graphic\" form=\"short\">graph.</term><term name=\"interview\" form=\"short\">interv.</term><term name=\"manuscript\" form=\"short\">MS</term><term name=\"motion_picture\" form=\"short\">video rec.</term><term name=\"report\" form=\"short\">rep.</term><term name=\"review\" form=\"short\">rev.</term><term name=\"review-book\" form=\"short\">bk. rev.</term><term name=\"song\" form=\"short\">audio rec.</term>\n<!-- HISTORICAL ERA TERMS --><term name=\"ad\">&#160;n.&#160;Chr.</term><term name=\"bc\">&#160;v.&#160;Chr.</term><term name=\"bce\">BCE</term><term name=\"ce\">CE</term>\n<!-- PUNCTUATION --><term name=\"open-quote\">â€ž</term><term name=\"close-quote\">â€œ</term><term name=\"open-inner-quote\">â€š</term><term name=\"close-inner-quote\">â€˜</term><term name=\"page-range-delimiter\">â€“</term><term name=\"colon\">:</term><term name=\"comma\">,</term><term name=\"semicolon\">;</term>\n<!-- ORDINALS --><term name=\"ordinal\">.</term>\n<!-- LONG ORDINALS --><term name=\"long-ordinal-01\">erster</term><term name=\"long-ordinal-02\">zweiter</term><term name=\"long-ordinal-03\">dritter</term><term name=\"long-ordinal-04\">vierter</term><term name=\"long-ordinal-05\">fÃ¼nfter</term><term name=\"long-ordinal-06\">sechster</term><term name=\"long-ordinal-07\">siebter</term><term name=\"long-ordinal-08\">achter</term><term name=\"long-ordinal-09\">neunter</term><term name=\"long-ordinal-10\">zehnter</term>\n<!-- LONG LOCATOR FORMS --><term name=\"act\">\t\t\t <single>act</single><multiple>acts</multiple>\t\t\t\t\t\t </term><term name=\"appendix\">\t\t\t <single>appendix</single><multiple>appendices</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>article</single><multiple>articles</multiple>\t\t\t\t\t\t </term><term name=\"canon\">\t\t\t <single>canon</single><multiple>canons</multiple>\t\t\t\t\t\t </term><term name=\"elocation\">\t\t\t <single>location</single><multiple>locations</multiple>\t\t\t\t\t\t </term><term name=\"equation\">\t\t\t <single>equation</single><multiple>equations</multiple>\t\t\t\t\t\t </term><term name=\"rule\">\t\t\t <single>rule</single><multiple>rules</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>scene</single><multiple>scenes</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>table</single><multiple>tables</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>title</single><multiple>titles</multiple>\t\t\t\t\t\t </term><term name=\"book\"><single>Buch</single><multiple>BÃ¼cher</multiple></term><term name=\"chapter\"><single>Kapitel</single><multiple>Kapitel</multiple></term><term name=\"column\"><single>Spalte</single><multiple>Spalten</multiple></term><term name=\"figure\"><single>Abbildung</single><multiple>Abbildungen</multiple></term><term name=\"folio\"><single>Blatt</single><multiple>BlÃ¤tter</multiple></term><term name=\"issue\"><single>Nummer</single><multiple>Nummern</multiple></term><term name=\"line\"><single>Zeile</single><multiple>Zeilen</multiple></term><term name=\"note\"><single>Note</single><multiple>Noten</multiple></term><term name=\"opus\"><single>Opus</single><multiple>Opera</multiple></term><term name=\"page\"><single>Seite</single><multiple>Seiten</multiple></term><term name=\"number-of-pages\"><single>Seite</single><multiple>Seiten</multiple></term><term name=\"paragraph\"><single>Absatz</single><multiple>AbsÃ¤tze</multiple></term><term name=\"part\"><single>Teil</single><multiple>Teile</multiple></term><term name=\"section\"><single>Abschnitt</single><multiple>Abschnitte</multiple></term><term name=\"sub-verbo\"><single>sub verbo</single><multiple>sub verbis</multiple></term><term name=\"verse\"><single>Vers</single><multiple>Verse</multiple></term><term name=\"volume\"><single>Band</single><multiple>BÃ¤nde</multiple></term>\n<!-- SHORT LOCATOR FORMS --><term name=\"appendix\">\t\t\t <single>app.</single><multiple>apps.</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>art.</single><multiple>arts.</multiple></term><term name=\"elocation\">\t\t\t <single>loc.</single><multiple>locs.</multiple></term><term name=\"equation\">\t\t\t <single>eq.</single><multiple>eqs.</multiple></term><term name=\"rule\">\t\t\t <single>r.</single><multiple>rr.</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>sc.</single><multiple>scs.</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>tbl.</single><multiple>tbls.</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>tit.</single><multiple>tits.</multiple></term><term name=\"book\" form=\"short\">B.</term><term name=\"chapter\" form=\"short\">Kap.</term><term name=\"column\" form=\"short\">Sp.</term><term name=\"figure\" form=\"short\">Abb.</term><term name=\"folio\" form=\"short\">Fol.</term><term name=\"issue\" form=\"short\">Nr.</term><term name=\"line\" form=\"short\">Z.</term><term name=\"note\" form=\"short\">N.</term><term name=\"opus\" form=\"short\">op.</term><term name=\"page\" form=\"short\"><single>S.</single><multiple>S.</multiple></term><term name=\"number-of-pages\" form=\"short\"><single>S.</single><multiple>S.</multiple></term><term name=\"paragraph\" form=\"short\">Abs.</term><term name=\"part\" form=\"short\">Teil</term><term name=\"section\" form=\"short\">Abschn.</term><term name=\"sub-verbo\" form=\"short\"><single>s.&#160;v.</single><multiple>s.&#160;vv.</multiple></term><term name=\"verse\" form=\"short\"><single>V.</single><multiple>V.</multiple></term><term name=\"volume\" form=\"short\"><single>Bd.</single><multiple>Bde.</multiple></term>\n<!-- SYMBOL LOCATOR FORMS --><term name=\"paragraph\" form=\"symbol\"><single>Â¶</single><multiple>Â¶Â¶</multiple></term><term name=\"section\" form=\"symbol\"><single>Â§</single><multiple>Â§Â§</multiple></term>\n<!-- LONG ROLE FORMS --><term name=\"chair\"><single>chair</single><multiple>chairs</multiple></term><term name=\"compiler\"><single>compiler</single><multiple>compilers</multiple></term><term name=\"contributor\"><single>contributor</single><multiple>contributors</multiple></term><term name=\"curator\"><single>curator</single><multiple>curators</multiple></term><term name=\"executive-producer\"><single>executive producer</single><multiple>executive producers</multiple></term><term name=\"guest\"><single>guest</single><multiple>guests</multiple></term><term name=\"host\"><single>host</single><multiple>hosts</multiple></term><term name=\"narrator\"><single>narrator</single><multiple>narrators</multiple></term><term name=\"organizer\"><single>organizer</single><multiple>organizers</multiple></term><term name=\"performer\"><single>performer</single><multiple>performers</multiple></term><term name=\"producer\"><single>producer</single><multiple>producers</multiple></term><term name=\"script-writer\"><single>writer</single><multiple>writers</multiple></term><term name=\"series-creator\"><single>series creator</single><multiple>series creators</multiple></term><term name=\"director\"><single>Regisseur</single><multiple>Regisseure</multiple></term><term name=\"editor\"><single>Herausgeber</single><multiple>Herausgeber</multiple></term><term name=\"collection-editor\"><single>Reihenherausgeber</single><multiple>Reihenherausgeber</multiple></term><term name=\"editorial-director\"><single>Herausgeber</single><multiple>Herausgeber</multiple></term><term name=\"illustrator\"><single>Illustrator</single><multiple>Illustratoren</multiple></term><term name=\"translator\"><single>Ãœbersetzer</single><multiple>Ãœbersetzer</multiple></term><term name=\"editortranslator\"><single>Herausgeber&#160;&amp; Ãœbersetzer</single><multiple>Herausgeber&#160;&amp; Ãœbersetzer</multiple></term>\n<!-- SHORT ROLE FORMS --><term name=\"compiler\" form=\"short\"><single>comp.</single><multiple>comps.</multiple></term><term name=\"contributor\" form=\"short\"><single>contrib.</single><multiple>contribs.</multiple></term><term name=\"curator\" form=\"short\"><single>cur.</single><multiple>curs.</multiple></term><term name=\"executive-producer\" form=\"short\"><single>exec. prod.</single><multiple>exec. prods.</multiple></term><term name=\"narrator\" form=\"short\"><single>narr.</single><multiple>narrs.</multiple></term><term name=\"organizer\" form=\"short\"><single>org.</single><multiple>orgs.</multiple></term><term name=\"performer\" form=\"short\"><single>perf.</single><multiple>perfs.</multiple></term><term name=\"producer\" form=\"short\"><single>prod.</single><multiple>prods.</multiple></term><term name=\"script-writer\" form=\"short\"><single>writ.</single><multiple>writs.</multiple></term><term name=\"series-creator\" form=\"short\"><single>cre.</single><multiple>cres.</multiple></term><term name=\"director\" form=\"short\"><single>Reg.</single><multiple>Reg.</multiple></term><term name=\"editor\" form=\"short\"><single>Hrsg.</single><multiple>Hrsg.</multiple></term><term name=\"collection-editor\" form=\"short\"><single>Hrsg.</single><multiple>Hrsg.</multiple></term><term name=\"editorial-director\" form=\"short\"><single>Hrsg.</single><multiple>Hrsg.</multiple></term><term name=\"illustrator\" form=\"short\"><single>Ill.</single><multiple>Ill.</multiple></term><term name=\"translator\" form=\"short\"><single>Ãœbers.</single><multiple>Ãœbers.</multiple></term><term name=\"editortranslator\" form=\"short\"><single>Hrsg.&#160;&amp; Ãœbers.</single><multiple>Hrsg.&#160;&amp; Ãœbers.</multiple></term>\n<!-- VERB ROLE FORMS --><term name=\"chair\" form=\"verb\">chaired by</term><term name=\"compiler\" form=\"verb\">compiled by</term><term name=\"contributor\" form=\"verb\">with</term><term name=\"curator\" form=\"verb\">curated by</term><term name=\"executive-producer\" form=\"verb\">executive produced by</term><term name=\"guest\" form=\"verb\">with guest</term><term name=\"host\" form=\"verb\">hosted by</term><term name=\"narrator\" form=\"verb\">narrated by</term><term name=\"organizer\" form=\"verb\">organized by</term><term name=\"performer\" form=\"verb\">performed by</term><term name=\"producer\" form=\"verb\">produced by</term><term name=\"script-writer\" form=\"verb\">written by</term><term name=\"series-creator\" form=\"verb\">created by</term><term name=\"container-author\" form=\"verb\">von</term><term name=\"director\" form=\"verb\">Regie von</term><term name=\"editor\" form=\"verb\">herausgegeben von</term><term name=\"collection-editor\" form=\"verb\">herausgegeben von</term><term name=\"editorial-director\" form=\"verb\">herausgegeben von</term><term name=\"illustrator\" form=\"verb\">illustriert von</term><term name=\"interviewer\" form=\"verb\">interviewt von</term><term name=\"recipient\" form=\"verb\">an</term><term name=\"reviewed-author\" form=\"verb\">von</term><term name=\"translator\" form=\"verb\">Ã¼bersetzt von</term><term name=\"editortranslator\" form=\"verb\">herausgegeben und Ã¼bersetzt von</term>\n<!-- SHORT VERB ROLE FORMS --><term name=\"compiler\" form=\"verb-short\">comp. by</term><term name=\"contributor\" form=\"verb-short\">w.</term><term name=\"curator\" form=\"verb-short\">cur. by</term><term name=\"executive-producer\" form=\"verb-short\">exec. prod. by</term><term name=\"guest\" form=\"verb-short\">w. guest</term><term name=\"host\" form=\"verb-short\">hosted by</term><term name=\"narrator\" form=\"verb-short\">narr. by</term><term name=\"organizer\" form=\"verb-short\">org. by</term><term name=\"performer\" form=\"verb-short\">perf. by</term><term name=\"producer\" form=\"verb-short\">prod. by</term><term name=\"script-writer\" form=\"verb-short\">writ. by</term><term name=\"series-creator\" form=\"verb-short\">cre. by</term><term name=\"director\" form=\"verb-short\">Reg.</term><term name=\"editor\" form=\"verb-short\">hg. von</term><term name=\"collection-editor\" form=\"verb-short\">hg. von</term><term name=\"editorial-director\" form=\"verb-short\">hg. von</term><term name=\"illustrator\" form=\"verb-short\">illus. von</term><term name=\"translator\" form=\"verb-short\">Ã¼bers. von</term><term name=\"editortranslator\" form=\"verb-short\">hg.&#160;&amp; Ã¼bers. von</term>\n<!-- LONG MONTH FORMS --><term name=\"month-01\">Januar</term><term name=\"month-02\">Februar</term><term name=\"month-03\">MÃ¤rz</term><term name=\"month-04\">April</term><term name=\"month-05\">Mai</term><term name=\"month-06\">Juni</term><term name=\"month-07\">Juli</term><term name=\"month-08\">August</term><term name=\"month-09\">September</term><term name=\"month-10\">Oktober</term><term name=\"month-11\">November</term><term name=\"month-12\">Dezember</term>\n<!-- SHORT MONTH FORMS --><term name=\"month-01\" form=\"short\">Jan.</term><term name=\"month-02\" form=\"short\">Feb.</term><term name=\"month-03\" form=\"short\">MÃ¤rz</term><term name=\"month-04\" form=\"short\">Apr.</term><term name=\"month-05\" form=\"short\">Mai</term><term name=\"month-06\" form=\"short\">Juni</term><term name=\"month-07\" form=\"short\">Juli</term><term name=\"month-08\" form=\"short\">Aug.</term><term name=\"month-09\" form=\"short\">Sep.</term><term name=\"month-10\" form=\"short\">Okt.</term><term name=\"month-11\" form=\"short\">Nov.</term><term name=\"month-12\" form=\"short\">Dez.</term>\n<!-- SEASONS --><term name=\"season-01\">FrÃ¼hjahr</term><term name=\"season-02\">Sommer</term><term name=\"season-03\">Herbst</term><term name=\"season-04\">Winter</term></terms>\n</locale>\n",
    "es-ES": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<locale xmlns=\"http://purl.org/net/xbiblio/csl\" version=\"1.0\" xml:lang=\"es-ES\"><info><translator><name>javimat</name></translator><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights><updated>2012-07-04T23:31:02+00:00</updated></info><style-options punctuation-in-quote=\"false\"/><date form=\"text\"><date-part name=\"day\" suffix=\" de \"/><date-part name=\"month\" suffix=\" de \"/><date-part name=\"year\"/></date><date form=\"numeric\"><date-part name=\"day\" form=\"numeric-leading-zeros\" suffix=\"/\"/><date-part name=\"month\" form=\"numeric-leading-zeros\" suffix=\"/\"/><date-part name=\"year\"/></date><terms><term name=\"advance-online-publication\">advance online publication</term><term name=\"album\">album</term><term name=\"audio-recording\">audio recording</term><term name=\"film\">film</term><term name=\"henceforth\">henceforth</term><term name=\"loc-cit\">loc. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"no-place\">no place</term><term name=\"no-place\" form=\"short\">n.p.</term><term name=\"no-publisher\">no publisher</term> <!-- sine nomine --><term name=\"no-publisher\" form=\"short\">n.p.</term><term name=\"on\">on</term><term name=\"op-cit\">op. cit.</term> <!-- like ibid., the abbreviated form is the regular form  --><term name=\"original-work-published\">original work published</term><term name=\"personal-communication\">comunicaciÃ³n personal</term><term name=\"podcast\">podcast</term><term name=\"podcast-episode\">podcast episode</term><term name=\"preprint\">preprint</term><term name=\"radio-broadcast\">radio broadcast</term><term name=\"radio-series\">radio series</term><term name=\"radio-series-episode\">radio series episode</term><term name=\"special-issue\">special issue</term><term name=\"special-section\">special section</term><term name=\"television-broadcast\">television broadcast</term><term name=\"television-series\">television series</term><term name=\"television-series-episode\">television series episode</term><term name=\"video\">video</term><term name=\"working-paper\">working paper</term><term name=\"accessed\">accedido</term><term name=\"and\">y</term><term name=\"and others\">y otros</term><term name=\"anonymous\">anÃ³nimo</term><term name=\"anonymous\" form=\"short\">anÃ³n.</term><term name=\"at\">en</term><term name=\"available at\">disponible en</term><term name=\"by\">de</term><term name=\"circa\">circa</term><term name=\"circa\" form=\"short\">c.</term><term name=\"cited\">citado</term><term name=\"edition\"><single>ediciÃ³n</single><multiple>ediciones</multiple></term><term name=\"edition\" form=\"short\">ed.</term><term name=\"et-al\">et&#160;al.</term><term name=\"forthcoming\">previsto</term><term name=\"from\">a partir de</term><term name=\"ibid\">ibid.</term><term name=\"in\">en</term><term name=\"in press\">en imprenta</term><term name=\"internet\">internet</term><term name=\"interview\">entrevista</term><term name=\"letter\">carta</term><term name=\"no date\">sin fecha</term><term name=\"no date\" form=\"short\">s.&#160;f.</term><term name=\"online\">en lÃ­nea</term><term name=\"presented at\">presentado en</term><term name=\"reference\"><single>referencia</single><multiple>referencias</multiple></term><term name=\"reference\" form=\"short\"><single>ref.</single><multiple>refs.</multiple></term><term name=\"retrieved\">recuperado</term><term name=\"scale\">escala</term><term name=\"version\">versiÃ³n</term>\n<!-- LONG ITEM TYPE FORMS --><term name=\"article\">preprint</term><term name=\"article-journal\">journal article</term><term name=\"article-magazine\">magazine article</term><term name=\"article-newspaper\">newspaper article</term><term name=\"bill\">bill</term><term name=\"book\">book</term><term name=\"broadcast\">broadcast</term><term name=\"chapter\">book chapter</term><term name=\"classic\">classic</term><term name=\"collection\">collection</term><term name=\"dataset\">dataset</term><term name=\"document\">document</term><term name=\"entry\">entry</term><term name=\"entry-dictionary\">dictionary entry</term><term name=\"entry-encyclopedia\">encyclopedia entry</term><term name=\"event\">event</term><!-- figure is in the list of locator terms --><term name=\"graphic\">graphic</term><term name=\"hearing\">hearing</term><term name=\"interview\">interview</term><term name=\"legal_case\">legal case</term><term name=\"legislation\">legislation</term><term name=\"manuscript\">manuscript</term><term name=\"map\">map</term><term name=\"motion_picture\">video recording</term><term name=\"musical_score\">musical score</term><term name=\"pamphlet\">pamphlet</term><term name=\"paper-conference\">conference paper</term><term name=\"patent\">patent</term><term name=\"performance\">performance</term><term name=\"periodical\">periodical</term><term name=\"personal_communication\">comunicaciÃ³n personal</term><term name=\"post\">post</term><term name=\"post-weblog\">blog post</term><term name=\"regulation\">regulation</term><term name=\"report\">report</term><term name=\"review\">review</term><term name=\"review-book\">book review</term><term name=\"software\">software</term><term name=\"song\">audio recording</term><term name=\"speech\">presentation</term><term name=\"standard\">standard</term><term name=\"thesis\">thesis</term><term name=\"treaty\">treaty</term><term name=\"webpage\">webpage</term>\n<!-- SHORT ITEM TYPE FORMS --><term name=\"article-journal\" form=\"short\">journal art.</term><term name=\"article-magazine\" form=\"short\">mag. art.</term><term name=\"article-newspaper\" form=\"short\">newspaper art.</term><term name=\"book\" form=\"short\">bk.</term><term name=\"chapter\" form=\"short\">bk. chap.</term><term name=\"document\" form=\"short\">doc.</term><!-- figure is in the list of locator terms --><term name=\"graphic\" form=\"short\">graph.</term><term name=\"interview\" form=\"short\">interv.</term><term name=\"manuscript\" form=\"short\">MS</term><term name=\"motion_picture\" form=\"short\">video rec.</term><term name=\"report\" form=\"short\">rep.</term><term name=\"review\" form=\"short\">rev.</term><term name=\"review-book\" form=\"short\">bk. rev.</term><term name=\"song\" form=\"short\">audio rec.</term>\n<!-- HISTORICAL ERA TERMS --><term name=\"ad\">d.&#160;C.</term><term name=\"bc\">a.&#160;C.</term><term name=\"bce\">BCE</term><term name=\"ce\">CE</term>\n<!-- PUNCTUATION --><term name=\"open-quote\">Â«</term><term name=\"close-quote\">Â»</term><term name=\"open-inner-quote\">â€œ</term><term name=\"close-inner-quote\">â€</term><term name=\"page-range-delimiter\">-</term><term name=\"colon\">:</term><term name=\"comma\">,</term><term name=\"semicolon\">;</term>\n<!-- ORDINALS --><term name=\"ordinal\">.Âª</term>\n<!-- LONG ORDINALS --><term name=\"long-ordinal-01\">primera</term><term name=\"long-ordinal-02\">segunda</term><term name=\"long-ordinal-03\">tercera</term><term name=\"long-ordinal-04\">cuarta</term><term name=\"long-ordinal-05\">quinta</term><term name=\"long-ordinal-06\">sexta</term><term name=\"long-ordinal-07\">sÃ©ptima</term><term name=\"long-ordinal-08\">octava</term><term name=\"long-ordinal-09\">novena</term><term name=\"long-ordinal-10\">dÃ©cima</term>\n<!-- LONG LOCATOR FORMS --><term name=\"act\">\t\t\t <single>act</single><multiple>acts</multiple>\t\t\t\t\t\t </term><term name=\"appendix\">\t\t\t <single>appendix</single><multiple>appendices</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>article</single><multiple>articles</multiple>\t\t\t\t\t\t </term><term name=\"canon\">\t\t\t <single>canon</single><multiple>canons</multiple>\t\t\t\t\t\t </term><term name=\"elocation\">\t\t\t <single>location</single><multiple>locations</multiple>\t\t\t\t\t\t </term><term name=\"equation\">\t\t\t <single>equation</single><multiple>equations</multiple>\t\t\t\t\t\t </term><term name=\"rule\">\t\t\t <single>rule</single><multiple>rules</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>scene</single><multiple>scenes</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>table</single><multiple>tables</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>title</single><multiple>titles</multiple>\t\t\t\t\t\t </term><term name=\"book\"><single>libro</single><multiple>libros</multiple></term><term name=\"chapter\"><single>capÃ­tulo</single><multiple>capÃ­tulos</multiple></term><term name=\"column\"><single>columna</single><multiple>columnas</multiple></term><term name=\"figure\"><single>figura</single><multiple>figuras</multiple></term><term name=\"folio\"><single>folio</single><multiple>folios</multiple></term><term name=\"issue\"><single>nÃºmero</single><multiple>nÃºmeros</multiple></term><term name=\"line\"><single>lÃ­nea</single><multiple>lÃ­neas</multiple></term><term name=\"note\"><single>nota</single><multiple>notas</multiple></term><term name=\"opus\"><single>opus</single><multiple>opera</multiple></term><term name=\"page\"><single>pÃ¡gina</single><multiple>pÃ¡ginas</multiple></term><term name=\"number-of-pages\"><single>pÃ¡gina</single><multiple>pÃ¡ginas</multiple></term><term name=\"paragraph\"><single>pÃ¡rrafo</single><multiple>pÃ¡rrafos</multiple></term><term name=\"part\"><single>parte</single><multiple>partes</multiple></term><term name=\"section\"><single>secciÃ³n</single><multiple>secciones</multiple></term><term name=\"sub-verbo\"><single>sub voce</single><multiple>sub vocibus</multiple></term><term name=\"verse\"><single>verso</single><multiple>versos</multiple></term><term name=\"volume\"><single>volumen</single><multiple>volÃºmenes</multiple></term>\n<!-- SHORT LOCATOR FORMS --><term name=\"appendix\">\t\t\t <single>app.</single><multiple>apps.</multiple>\t\t\t\t\t\t </term><term name=\"article-locator\">\t\t\t <single>art.</single><multiple>arts.</multiple></term><term name=\"elocation\">\t\t\t <single>loc.</single><multiple>locs.</multiple></term><term name=\"equation\">\t\t\t <single>eq.</single><multiple>eqs.</multiple></term><term name=\"rule\">\t\t\t <single>r.</single><multiple>rr.</multiple>\t\t\t\t\t\t </term><term name=\"scene\">\t\t\t <single>sc.</single><multiple>scs.</multiple>\t\t\t\t\t\t </term><term name=\"table\">\t\t\t <single>tbl.</single><multiple>tbls.</multiple>\t\t\t\t\t\t </term><term name=\"timestamp\"> <!-- generally blank --><single></single><multiple></multiple>\t\t\t\t\t\t </term><term name=\"title-locator\">\t\t\t <single>tit.</single><multiple>tits.</multiple></term><term name=\"book\" form=\"short\">lib.</term><term name=\"chapter\" form=\"short\">cap.</term><term name=\"column\" form=\"short\">col.</term><term name=\"figure\" form=\"short\">fig.</term><term name=\"folio\" form=\"short\">f.</term><term name=\"issue\" form=\"short\">n.Âº</term><term name=\"line\" form=\"short\">l.</term><term name=\"note\" form=\"short\">n.</term><term name=\"opus\" form=\"short\">op.</term><term name=\"page\" form=\"short\"><single>p.</single><multiple>pp.</multiple></term><term name=\"number-of-pages\" form=\"short\"><single>p.</single><multiple>pp.</multiple></term><term name=\"paragraph\" form=\"short\">pÃ¡rr.</term><term name=\"part\" form=\"short\">pt.</term><term name=\"section\" form=\"short\">sec.</term><term name=\"sub-verbo\" form=\"short\"><single>s.&#160;v.</single><multiple>s.&#160;vv.</multiple></term><term name=\"verse\" form=\"short\"><single>v.</single><multiple>vv.</multiple></term><term name=\"volume\" form=\"short\"><single>vol.</single><multiple>vols.</multiple></term>\n<!-- SYMBOL LOCATOR FORMS --><term name=\"paragraph\" form=\"symbol\"><single>Â§</single><multiple>Â§</multiple></term><term name=\"section\" form=\"symbol\"><single>Â§</single><multiple>Â§</multiple></term>\n<!-- LONG ROLE FORMS --><term name=\"chair\"><single>chair</single><multiple>chairs</multiple></term><term name=\"compiler\"><single>compiler</single><multiple>compilers</multiple></term><term name=\"contributor\"><single>contributor</single><multiple>contributors</multiple></term><term name=\"curator\"><single>curator</single><multiple>curators</multiple></term><term name=\"executive-producer\"><single>executive producer</single><multiple>executive producers</multiple></term><term name=\"guest\"><single>guest</single><multiple>guests</multiple></term><term name=\"host\"><single>host</single><multiple>hosts</multiple></term><term name=\"narrator\"><single>narrator</single><multiple>narrators</multiple></term><term name=\"organizer\"><single>organizer</single><multiple>organizers</multiple></term><term name=\"performer\"><single>performer</single><multiple>performers</multiple></term><term name=\"producer\"><single>producer</single><multiple>producers</multiple></term><term name=\"script-writer\"><single>writer</single><multiple>writers</multiple></term><term name=\"series-creator\"><single>series creator</single><multiple>series creators</multiple></term><term name=\"director\"><single>director</single><multiple>directores</multiple></term><term name=\"editor\"><single>editor</single><multiple>editores</multiple></term><term name=\"editorial-director\"><single>editor</single><multiple>editores</multiple></term><term name=\"illustrator\"><single>ilustrador</single><multiple>ilustradores</multiple></term><term name=\"translator\"><single>traductor</single><multiple>traductores</multiple></term><term name=\"editortranslator\"><single>editor y traductor</single><multiple>editores y traductores</multiple></term>\n<!-- SHORT ROLE FORMS --><term name=\"compiler\" form=\"short\"><single>comp.</single><multiple>comps.</multiple></term><term name=\"contributor\" form=\"short\"><single>contrib.</single><multiple>contribs.</multiple></term><term name=\"curator\" form=\"short\"><single>cur.</single><multiple>curs.</multiple></term><term name=\"executive-producer\" form=\"short\"><single>exec. prod.</single><multiple>exec. prods.</multiple></term><term name=\"narrator\" form=\"short\"><single>narr.</single><multiple>narrs.</multiple></term><term name=\"organizer\" form=\"short\"><single>org.</single><multiple>orgs.</multiple></term><term name=\"performer\" form=\"short\"><single>perf.</single><multiple>perfs.</multiple></term><term name=\"producer\" form=\"short\"><single>prod.</single><multiple>prods.</multiple></term><term name=\"script-writer\" form=\"short\"><single>writ.</single><multiple>writs.</multiple></term><term name=\"series-creator\" form=\"short\"><single>cre.</single><multiple>cres.</multiple></term><term name=\"director\" form=\"short\"><single>dir.</single><multiple>dirs.</multiple></term><term name=\"editor\" form=\"short\"><single>ed.</single><multiple>eds.</multiple></term><term name=\"editorial-director\" form=\"short\"><single>ed.</single><multiple>eds.</multiple></term><term name=\"illustrator\" form=\"short\"><single>ilust.</single><multiple>ilusts.</multiple></term><term name=\"translator\" form=\"short\"><single>trad.</single><multiple>trads.</multiple></term><term name=\"editortranslator\" form=\"short\"><single>ed. y trad.</single><multiple>eds. y trads.</multiple></term>\n<!-- VERB ROLE FORMS --><term name=\"chair\" form=\"verb\">chaired by</term><term name=\"compiler\" form=\"verb\">compiled by</term><term name=\"contributor\" form=\"verb\">with</term><term name=\"curator\" form=\"verb\">curated by</term><term name=\"executive-producer\" form=\"verb\">executive produced by</term><term name=\"guest\" form=\"verb\">with guest</term><term name=\"host\" form=\"verb\">hosted by</term><term name=\"narrator\" form=\"verb\">narrated by</term><term name=\"organizer\" form=\"verb\">organized by</term><term name=\"performer\" form=\"verb\">performed by</term><term name=\"producer\" form=\"verb\">produced by</term><term name=\"script-writer\" form=\"verb\">written by</term><term name=\"series-creator\" form=\"verb\">created by</term><term name=\"container-author\" form=\"verb\">de</term><term name=\"director\" form=\"verb\">dirigido por</term><term name=\"editor\" form=\"verb\">editado por</term><term name=\"editorial-director\" form=\"verb\">editado por</term><term name=\"illustrator\" form=\"verb\">ilustrado por</term><term name=\"interviewer\" form=\"verb\">entrevistado por</term><term name=\"recipient\" form=\"verb\">a</term><term name=\"reviewed-author\" form=\"verb\">por</term><term name=\"translator\" form=\"verb\">traducido por</term><term name=\"editortranslator\" form=\"verb\">editado y traducido por</term>\n<!-- SHORT VERB ROLE FORMS --><term name=\"compiler\" form=\"verb-short\">comp. by</term><term name=\"contributor\" form=\"verb-short\">w.</term><term name=\"curator\" form=\"verb-short\">cur. by</term><term name=\"executive-producer\" form=\"verb-short\">exec. prod. by</term><term name=\"guest\" form=\"verb-short\">w. guest</term><term name=\"host\" form=\"verb-short\">hosted by</term><term name=\"narrator\" form=\"verb-short\">narr. by</term><term name=\"organizer\" form=\"verb-short\">org. by</term><term name=\"performer\" form=\"verb-short\">perf. by</term><term name=\"producer\" form=\"verb-short\">prod. by</term><term name=\"script-writer\" form=\"verb-short\">writ. by</term><term name=\"series-creator\" form=\"verb-short\">cre. by</term><term name=\"director\" form=\"verb-short\">dir.</term><term name=\"editor\" form=\"verb-short\">ed.</term><term name=\"editorial-director\" form=\"verb-short\">ed.</term><term name=\"illustrator\" form=\"verb-short\">ilust.</term><term name=\"translator\" form=\"verb-short\">trad.</term><term name=\"editortranslator\" form=\"verb-short\">ed. y trad.</term>\n<!-- LONG MONTH FORMS --><term name=\"month-01\">enero</term><term name=\"month-02\">febrero</term><term name=\"month-03\">marzo</term><term name=\"month-04\">abril</term><term name=\"month-05\">mayo</term><term name=\"month-06\">junio</term><term name=\"month-07\">julio</term><term name=\"month-08\">agosto</term><term name=\"month-09\">septiembre</term><term name=\"month-10\">octubre</term><term name=\"month-11\">noviembre</term><term name=\"month-12\">diciembre</term>\n<!-- SHORT MONTH FORMS --><term name=\"month-01\" form=\"short\">ene.</term><term name=\"month-02\" form=\"short\">feb.</term><term name=\"month-03\" form=\"short\">mar.</term><term name=\"month-04\" form=\"short\">abr.</term><term name=\"month-05\" form=\"short\">may</term><term name=\"month-06\" form=\"short\">jun.</term><term name=\"month-07\" form=\"short\">jul.</term><term name=\"month-08\" form=\"short\">ago.</term><term name=\"month-09\" form=\"short\">sep.</term><term name=\"month-10\" form=\"short\">oct.</term><term name=\"month-11\" form=\"short\">nov.</term><term name=\"month-12\" form=\"short\">dic.</term>\n<!-- SEASONS --><term name=\"season-01\">primavera</term><term name=\"season-02\">verano</term><term name=\"season-03\">otoÃ±o</term><term name=\"season-04\">invierno</term></terms>\n</locale>\n"
  }
  
  },{}],80:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.locales = exports.default = void 0;
  var _core = require("@citation-js/core");
  var _locales = _interopRequireDefault(require("./locales.json"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const locales = new _core.util.Register(_locales.default);
  exports.locales = locales;
  const fetchLocale = lang => {
    if (locales.has(lang)) {
      return locales.get(lang);
    } else {
      return locales.get('en-US');
    }
  };
  var _default = fetchLocale;
  exports.default = _default;
  },{"./locales.json":79,"@citation-js/core":"citation-js"}],81:[function(require,module,exports){
  module.exports={
    "apa": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"never\" page-range-format=\"expanded\"><info><title>American Psychological Association 7th edition</title><title-short>APA</title-short><id>http://www.zotero.org/styles/apa</id><link href=\"http://www.zotero.org/styles/apa\" rel=\"self\"/><link href=\"http://www.zotero.org/styles/apa-6th-edition\" rel=\"template\"/><link href=\"https://apastyle.apa.org/style-grammar-guidelines/references/examples\" rel=\"documentation\"/><author><name>Brenton M. Wiernik</name><email>zotero@wiernik.org</email></author><category citation-format=\"author-date\"/><category field=\"psychology\"/><category field=\"generic-base\"/><updated>2022-01-31T14:43:56+00:00</updated><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights></info><locale xml:lang=\"en\"><terms><term name=\"editortranslator\" form=\"short\"><single>ed. &amp; trans.</single><multiple>eds. &amp; trans.</multiple></term><term name=\"translator\" form=\"short\">trans.</term><term name=\"interviewer\" form=\"short\"><single>interviewer</single><multiple>interviewers</multiple></term><term name=\"collection-editor\" form=\"short\"><single>ed.</single><multiple>eds.</multiple></term><term name=\"circa\" form=\"short\">ca.</term><term name=\"bc\"> B.C.E.</term><term name=\"ad\"> C.E.</term><term name=\"letter\">personal communication</term><term name=\"letter\" form=\"short\">letter</term><term name=\"issue\" form=\"long\"><single>issue</single><multiple>issues</multiple></term></terms></locale><locale xml:lang=\"af\"><terms><term name=\"letter\">persoonlike kommunikasie</term><term name=\"letter\" form=\"short\">brief</term></terms></locale><locale xml:lang=\"ar\"><terms><term name=\"letter\">Ø§ØªØµØ§Ù„ Ø´Ø®ØµÙŠ</term><term name=\"letter\" form=\"short\">Ø®Ø·Ø§Ø¨</term></terms></locale><locale xml:lang=\"bg\"><terms><term name=\"letter\">Ð»Ð¸Ñ‡Ð½Ð° ÐºÐ¾Ð¼ÑƒÐ½Ð¸ÐºÐ°Ñ†Ð¸Ñ</term><term name=\"letter\" form=\"short\">Ð¿Ð¸ÑÐ¼Ð¾</term></terms></locale><locale xml:lang=\"ca\"><terms><term name=\"letter\">comunicaciÃ³ personal</term><term name=\"letter\" form=\"short\">carta</term></terms></locale><locale xml:lang=\"cs\"><terms><term name=\"letter\">osobnÃ­ komunikace</term><term name=\"letter\" form=\"short\">dopis</term></terms></locale><locale xml:lang=\"cy\"><terms><term name=\"letter\">cyfathrebu personol</term><term name=\"letter\" form=\"short\">llythyr</term></terms></locale><locale xml:lang=\"da\"><terms><term name=\"et-al\">et al.</term><term name=\"letter\">personlig kommunikation</term><term name=\"letter\" form=\"short\">brev</term></terms></locale><locale xml:lang=\"de\"><terms><term name=\"et-al\">et al.</term><term name=\"letter\">persÃ¶nliche Kommunikation</term><term name=\"letter\" form=\"short\">Brief</term></terms></locale><locale xml:lang=\"el\"><terms><term name=\"letter\">Ï€ÏÎ¿ÏƒÏ‰Ï€Î¹ÎºÎ® ÎµÏ€Î¹ÎºÎ¿Î¹Î½Ï‰Î½Î¯Î±</term><term name=\"letter\" form=\"short\">ÎµÏ€Î¹ÏƒÏ„Î¿Î»Î®</term></terms></locale><locale xml:lang=\"es\"><terms><term name=\"from\">de</term><term name=\"letter\">comunicaciÃ³n personal</term><term name=\"letter\" form=\"short\">carta</term></terms></locale><locale xml:lang=\"et\"><terms><term name=\"letter\">isiklik suhtlus</term><term name=\"letter\" form=\"short\">kiri</term></terms></locale><locale xml:lang=\"eu\"><terms><term name=\"letter\">komunikazio pertsonala</term><term name=\"letter\" form=\"short\">gutuna</term></terms></locale><locale xml:lang=\"fa\"><terms><term name=\"letter\">Ø§Ø±ØªØ¨Ø§Ø· Ø´Ø®ØµÛŒ</term><term name=\"letter\" form=\"short\">Ù†Ø§Ù…Ù‡</term></terms></locale><locale xml:lang=\"fi\"><terms><term name=\"letter\">henkilÃ¶kohtainen viestintÃ¤</term><term name=\"letter\" form=\"short\">kirje</term></terms></locale><locale xml:lang=\"fr\"><terms><term name=\"letter\">communication personnelle</term><term name=\"letter\" form=\"short\">lettre</term><term name=\"editor\" form=\"short\"><single>Ã©d.</single><multiple>Ã©ds.</multiple></term></terms></locale><locale xml:lang=\"he\"><terms><term name=\"letter\">×ª×§×©×•×¨×ª ××™×©×™×ª</term><term name=\"letter\" form=\"short\">×ž×›×ª×‘</term></terms></locale><locale xml:lang=\"hr\"><terms><term name=\"letter\">osobna komunikacija</term><term name=\"letter\" form=\"short\">pismo</term></terms></locale><locale xml:lang=\"hu\"><terms><term name=\"letter\">szemÃ©lyes kommunikÃ¡ciÃ³</term><term name=\"letter\" form=\"short\">levÃ©l</term></terms></locale><locale xml:lang=\"id\"><terms><term name=\"letter\">komunikasi pribadi</term><term name=\"letter\" form=\"short\">surat</term></terms></locale><locale xml:lang=\"is\"><terms><term name=\"letter\">persÃ³nuleg samskipti</term><term name=\"letter\" form=\"short\">brÃ©f</term></terms></locale><locale xml:lang=\"it\"><terms><term name=\"letter\">comunicazione personale</term><term name=\"letter\" form=\"short\">lettera</term></terms></locale><locale xml:lang=\"ja\"><terms><term name=\"letter\">å€‹äººçš„ãªã‚„ã‚Šå–ã‚Š</term><term name=\"letter\" form=\"short\">æ‰‹ç´™</term></terms></locale><locale xml:lang=\"ko\"><terms><term name=\"letter\">ê°œì¸ ì„œì‹ </term><term name=\"letter\" form=\"short\">íŽ¸ì§€</term></terms></locale><locale xml:lang=\"la\"><terms><term name=\"letter\"/><term name=\"letter\" form=\"short\">epistula</term></terms></locale><locale xml:lang=\"lt\"><terms><term name=\"letter\">communicationis personalis</term><term name=\"letter\" form=\"short\"/></terms></locale><locale xml:lang=\"lv\"><terms><term name=\"letter\">personÄ«ga komunikÄcija</term><term name=\"letter\" form=\"short\">vÄ“stule</term></terms></locale><locale xml:lang=\"mn\"><terms><term name=\"letter\">Ñ…ÑƒÐ²Ð¸Ð¹Ð½ Ñ…Ð°Ñ€Ð¸Ð»Ñ†Ð°Ð° Ñ…Ð¾Ð»Ð±Ð¾Ð¾</term><term name=\"letter\" form=\"short\">Ð·Ð°Ñ…Ð¸Ð°</term></terms></locale><locale xml:lang=\"nb\"><terms><term name=\"et-al\">et al.</term><term name=\"letter\">personlig kommunikasjon</term><term name=\"letter\" form=\"short\">brev</term></terms></locale><locale xml:lang=\"nl\"><terms><term name=\"et-al\">et al.</term><term name=\"letter\">persoonlijke communicatie</term><term name=\"letter\" form=\"short\">brief</term></terms></locale><locale xml:lang=\"nn\"><terms><term name=\"et-al\">et al.</term><term name=\"letter\">personlig kommunikasjon</term><term name=\"letter\" form=\"short\">brev</term></terms></locale><locale xml:lang=\"pl\"><terms><term name=\"letter\">osobista komunikacja</term><term name=\"letter\" form=\"short\">list</term></terms></locale><locale xml:lang=\"pt\"><terms><term name=\"letter\">comunicaÃ§Ã£o pessoal</term><term name=\"letter\" form=\"short\">carta</term></terms></locale><locale xml:lang=\"ro\"><terms><term name=\"letter\">comunicare personalÄƒ</term><term name=\"letter\" form=\"short\">scrisoare</term></terms></locale><locale xml:lang=\"ru\"><terms><term name=\"letter\">Ð»Ð¸Ñ‡Ð½Ð°Ñ Ð¿ÐµÑ€ÐµÐ¿Ð¸ÑÐºÐ°</term><term name=\"letter\" form=\"short\">Ð¿Ð¸ÑÑŒÐ¼Ð¾</term></terms></locale><locale xml:lang=\"sk\"><terms><term name=\"letter\">osobnÃ¡ komunikÃ¡cia</term><term name=\"letter\" form=\"short\">list</term></terms></locale><locale xml:lang=\"sl\"><terms><term name=\"letter\">osebna komunikacija</term><term name=\"letter\" form=\"short\">pismo</term></terms></locale><locale xml:lang=\"sr\"><terms><term name=\"letter\">Ð»Ð¸Ñ‡Ð½Ð° ÐºÐ¾Ð¼ÑƒÐ½Ð¸ÐºÐ°Ñ†Ð¸Ñ˜Ð°</term><term name=\"letter\" form=\"short\">Ð¿Ð¸ÑÐ¼Ð¾</term></terms></locale><locale xml:lang=\"sv\"><terms><term name=\"letter\">personlig kommunikation</term><term name=\"letter\" form=\"short\">brev</term></terms></locale><locale xml:lang=\"th\"><terms><term name=\"letter\">à¸à¸²à¸£à¸ªà¸·à¹ˆà¸­à¸ªà¸²à¸£à¸ªà¹ˆà¸§à¸™à¸šà¸¸à¸„à¸„à¸¥</term><term name=\"letter\" form=\"short\">à¸ˆà¸”à¸«à¸¡à¸²à¸¢</term></terms></locale><locale xml:lang=\"tr\"><terms><term name=\"letter\">kiÅŸisel iletiÅŸim</term><term name=\"letter\" form=\"short\">mektup</term></terms></locale><locale xml:lang=\"uk\"><terms><term name=\"letter\">Ð¾ÑÐ¾Ð±Ð¸ÑÑ‚Ðµ ÑÐ¿Ñ–Ð»ÐºÑƒÐ²Ð°Ð½Ð½Ñ</term><term name=\"letter\" form=\"short\">Ð»Ð¸ÑÑ‚</term></terms></locale><locale xml:lang=\"vi\"><terms><term name=\"letter\">giao tiáº¿p cÃ¡ nhÃ¢n</term><term name=\"letter\" form=\"short\">thÆ°</term></terms></locale><locale xml:lang=\"zh-CN\"><terms><term name=\"letter\">çš„ç§äººäº¤æµ</term><term name=\"letter\" form=\"short\">ä¿¡å‡½</term></terms></locale><locale xml:lang=\"zh-TW\"><terms><term name=\"letter\">ç§äººé€šè¨Š</term><term name=\"letter\" form=\"short\">ä¿¡å‡½</term></terms></locale><!-- General categories of item types:Periodical: article-journal article-magazine article-newspaper post-weblog review review-bookPeriodical or Booklike: paper-conferenceBooklike: article book broadcast chapter dataset entry entry-dictionary entry-encyclopedia figure graphic interview manuscript map motion_picture musical_score pamphlet patent personal_communication report song speech thesis post webpageLegal: bill legal_case legislation treaty--><!-- APA references contain four parts: author, date, title, source --><macro name=\"author-bib\"><names variable=\"composer\" delimiter=\", \"><name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/><substitute><names variable=\"author\"/><names variable=\"illustrator\"/><names variable=\"director\"><name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"long\" prefix=\" (\" suffix=\")\" text-case=\"title\"/></names><choose><if variable=\"container-title\"><choose><if type=\"book entry entry-dictionary entry-encyclopedia\" match=\"any\"><choose><if variable=\"title\"><group delimiter=\" \"><text macro=\"title\"/><text macro=\"parenthetical\"/></group></if><else><text macro=\"title-and-descriptions\"/></else></choose></if></choose></if></choose><!-- Test for editortranslator and put that first as that becomes available --><names variable=\"editor\" delimiter=\", \"><name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"short\" prefix=\" (\" suffix=\")\" text-case=\"title\"/></names><names variable=\"editorial-director\"><name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"short\" prefix=\" (\" suffix=\")\" text-case=\"title\"/></names><names variable=\"collection-editor\"><name name-as-sort-order=\"all\" and=\"symbol\" sort-separator=\", \" initialize-with=\". \" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"short\" prefix=\" (\" suffix=\")\" text-case=\"title\"/></names><choose><if variable=\"title\"><group delimiter=\" \"><text macro=\"title\"/><text macro=\"parenthetical\"/></group></if><else><text macro=\"title-and-descriptions\"/></else></choose></substitute></names></macro><macro name=\"author-intext\"><choose><if type=\"bill legal_case legislation treaty\" match=\"any\"><text macro=\"title-intext\"/></if><else-if type=\"interview personal_communication\" match=\"any\"><choose><!-- These variables indicate that the letter is retrievable by the reader. If not, then use the APA in-text-only personal communication format --><if variable=\"archive container-title DOI publisher URL\" match=\"none\"><group delimiter=\", \"><names variable=\"author\"><name and=\"symbol\" delimiter=\", \" initialize-with=\". \"/><substitute><text macro=\"title-intext\"/></substitute></names><!-- Replace with term=\"personal-communication\" if that becomes available --><text term=\"letter\"/></group></if><else><names variable=\"author\" delimiter=\", \"><name form=\"short\" and=\"symbol\" delimiter=\", \" initialize-with=\". \"/><substitute><text macro=\"title-intext\"/></substitute></names></else></choose></else-if><else><names variable=\"composer\" delimiter=\", \"><name form=\"short\" and=\"symbol\" delimiter=\", \" initialize-with=\". \"/><substitute><names variable=\"author\"/><names variable=\"illustrator\"/><names variable=\"director\"/><choose><if variable=\"container-title\"><choose><if type=\"book entry entry-dictionary entry-encyclopedia\" match=\"any\"><text macro=\"title-intext\"/></if></choose></if></choose><names variable=\"editor\"/><names variable=\"editorial-director\"/><text macro=\"title-intext\"/></substitute></names></else></choose></macro><macro name=\"date-bib\"><group delimiter=\" \" prefix=\"(\" suffix=\")\"><choose><if is-uncertain-date=\"issued\"><text term=\"circa\" form=\"short\"/></if></choose><group><choose><if variable=\"issued\"><date variable=\"issued\"><date-part name=\"year\"/></date><text variable=\"year-suffix\"/><choose><if type=\"article-magazine article-newspaper broadcast interview motion_picture pamphlet personal_communication post post-weblog song speech webpage\" match=\"any\"><!-- Many video and audio examples in manual give full dates. Err on the side of too much information. --><date variable=\"issued\"><date-part prefix=\", \" name=\"month\"/><date-part prefix=\" \" name=\"day\"/></date></if><else-if type=\"paper-conference\"><!-- Capture 'speech' stored as 'paper-conference' --><choose><if variable=\"collection-editor editor editorial-director issue page volume\" match=\"none\"><date variable=\"issued\"><date-part prefix=\", \" name=\"month\"/><date-part prefix=\" \" name=\"day\"/></date></if></choose></else-if><!-- Only year: article article-journal book chapter entry entry-dictionary entry-encyclopedia dataset figure graphic manuscript map musical_score paper-conference[published] patent report review review-book thesis --></choose></if><else-if variable=\"status\"><group><text variable=\"status\" text-case=\"lowercase\"/><text variable=\"year-suffix\" prefix=\"-\"/></group></else-if><else><text term=\"no date\" form=\"short\"/><text variable=\"year-suffix\" prefix=\"-\"/></else></choose></group></group></macro><macro name=\"date-sort-group\"><!-- APA sorts 1. no-date items, 2. items with dates, 3. in-press (status) items --><choose><if variable=\"issued\"><text value=\"1\"/></if><else-if variable=\"status\"><text value=\"2\"/></else-if><else><text value=\"0\"/></else></choose></macro><macro name=\"date-sort-date\"><date variable=\"issued\" form=\"numeric\"/></macro><macro name=\"date-intext\"><choose><if variable=\"issued\"><group delimiter=\"/\"><group delimiter=\" \"><choose><if is-uncertain-date=\"original-date\"><text term=\"circa\" form=\"short\"/></if></choose><date variable=\"original-date\"><date-part name=\"year\"/></date></group><group delimiter=\" \"><choose><if is-uncertain-date=\"issued\"><text term=\"circa\" form=\"short\"/></if></choose><group><choose><if type=\"interview personal_communication\" match=\"any\"><choose><if variable=\"archive container-title DOI publisher URL\" match=\"none\"><!-- These variables indicate that the communication is retrievable by the reader. If not, then use the in-text-only personal communication format --><date variable=\"issued\" form=\"text\"/></if><else><date variable=\"issued\"><date-part name=\"year\"/></date></else></choose></if><else><date variable=\"issued\"><date-part name=\"year\"/></date></else></choose><text variable=\"year-suffix\"/></group></group></group></if><else-if variable=\"status\"><text variable=\"status\" text-case=\"lowercase\"/><text variable=\"year-suffix\" prefix=\"-\"/></else-if><else><text term=\"no date\" form=\"short\"/><text variable=\"year-suffix\" prefix=\"-\"/></else></choose></macro><!-- APA has two description elements following the title:title (parenthetical) [bracketed]  --><macro name=\"title-and-descriptions\"><choose><if variable=\"title\"><group delimiter=\" \"><text macro=\"title\"/><text macro=\"parenthetical\"/><text macro=\"bracketed\"/></group></if><else><group delimiter=\" \"><text macro=\"bracketed\"/><text macro=\"parenthetical\"/></group></else></choose></macro><macro name=\"title\"><choose><if type=\"post webpage\" match=\"any\"><!-- Webpages are always italicized --><text variable=\"title\" font-style=\"italic\"/></if><else-if variable=\"container-title\" match=\"any\"><!-- Other types are italicized based on presence of container-title.Assume that review and review-book are published in periodicals/blogs,not just on a web page (ex. 69) --><text variable=\"title\"/></else-if><else><choose><if type=\"article-journal article-magazine article-newspaper post-weblog review review-book\" match=\"any\"><text variable=\"title\" font-style=\"italic\"/></if><else-if type=\"paper-conference\"><choose><if variable=\"collection-editor editor editorial-director\" match=\"any\"><group delimiter=\": \" font-style=\"italic\"><text variable=\"title\"/><!-- Replace with volume-title as that becomes available --><choose><if is-numeric=\"volume\" match=\"none\"><group delimiter=\" \"><label variable=\"volume\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"volume\"/></group></if></choose></group></if><else><text variable=\"title\" font-style=\"italic\"/></else></choose></else-if><else><group delimiter=\": \" font-style=\"italic\"><text variable=\"title\"/><!-- Replace with volume-title as that becomes available --><choose><if is-numeric=\"volume\" match=\"none\"><group delimiter=\" \"><label variable=\"volume\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"volume\"/></group></if></choose></group></else></choose></else></choose></macro><macro name=\"title-intext\"><choose><if variable=\"title\" match=\"none\"><text macro=\"bracketed-intext\" prefix=\"[\" suffix=\"]\"/></if><else-if type=\"bill\"><!-- If a bill has no number or container-title, assume it is a hearing; italic --><choose><if variable=\"number container-title\" match=\"none\"><text variable=\"title\" form=\"short\" font-style=\"italic\" text-case=\"title\"/></if><else-if variable=\"title\"><text variable=\"title\" form=\"short\" text-case=\"title\"/></else-if><else><group delimiter=\" \"><text variable=\"genre\"/><group delimiter=\" \"><choose><if variable=\"chapter-number container-title\" match=\"none\"><!-- Replace with label variable=\"number\" as that becomes available --><text term=\"issue\" form=\"short\"/></if></choose><text variable=\"number\"/></group></group></else></choose></else-if><else-if type=\"legal_case\" match=\"any\"><!-- Cases are italicized --><text variable=\"title\" font-style=\"italic\"/></else-if><else-if type=\"legislation treaty\" match=\"any\"><!-- Legislation and treaties not italicized or quoted --><text variable=\"title\" form=\"short\" text-case=\"title\"/></else-if><else-if type=\"post webpage\" match=\"any\"><!-- Webpages are always italicized --><text variable=\"title\" form=\"short\" font-style=\"italic\" text-case=\"title\"/></else-if><else-if variable=\"container-title\" match=\"any\"><!-- Other types are italicized or quoted based on presence of container-title. As in title macro. --><text variable=\"title\" form=\"short\" quotes=\"true\" text-case=\"title\"/></else-if><else><text variable=\"title\" form=\"short\" font-style=\"italic\" text-case=\"title\"/></else></choose></macro><macro name=\"parenthetical\"><!-- (Secondary contributors; Database location; Genre no. 123; Report Series 123, Version, Edition, Volume, Page) --><group prefix=\"(\" suffix=\")\"><choose><if type=\"patent\"><!-- authority: U.S. ; genre: patent ; number: 123,445 --><group delimiter=\" \"><text variable=\"authority\" form=\"short\"/><choose><if variable=\"genre\"><text variable=\"genre\" text-case=\"capitalize-first\"/></if><else><!-- This should be localized --><text value=\"patent\" text-case=\"capitalize-first\"/></else></choose><group delimiter=\" \"><!-- Replace with label variable=\"number\" if that becomes available --><text term=\"issue\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"number\"/></group></group></if><else-if type=\"post webpage\" match=\"any\"><!-- For post webpage, container-title is treated as publisher --><group delimiter=\"; \"><text macro=\"secondary-contributors\"/><text macro=\"database-location\"/><text macro=\"number\"/><text macro=\"locators-booklike\"/></group></else-if><else-if variable=\"container-title\"><group delimiter=\"; \"><text macro=\"secondary-contributors\"/><choose><if type=\"broadcast graphic map motion_picture song\" match=\"any\"><!-- For audiovisual media, number information comes after title, not container-title --><text macro=\"number\"/></if></choose></group></else-if><else><group delimiter=\"; \"><text macro=\"secondary-contributors\"/><text macro=\"database-location\"/><text macro=\"number\"/><text macro=\"locators-booklike\"/></group></else></choose></group></macro><macro name=\"parenthetical-container\"><choose><if variable=\"container-title\" match=\"any\"><group prefix=\"(\" suffix=\")\"><group delimiter=\"; \"><text macro=\"database-location\"/><choose><if type=\"broadcast graphic map motion_picture song\" match=\"none\"><!-- For audiovisual media, number information comes after title, not container-title --><text macro=\"number\"/></if></choose><text macro=\"locators-booklike\"/></group></group></if></choose></macro><macro name=\"bracketed\"><!-- [Descriptive information] --><!-- If there is a number, genre is already printed in macro=\"number\" --><group prefix=\"[\" suffix=\"]\"><choose><if variable=\"reviewed-author reviewed-title\" type=\"review review-book\" match=\"any\"><!-- Reviewed item --><group delimiter=\"; \"><group delimiter=\", \"><group delimiter=\" \"><!-- Assume that genre is entered as 'Review of the book' or similar --><choose><if variable=\"number\" match=\"none\"><choose><if variable=\"genre\"><text variable=\"genre\" text-case=\"capitalize-first\"/></if><else-if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/></else-if><else><!-- Replace with term=\"review\" as that becomes available --><text value=\"Review of\"/></else></choose></if><else><choose><if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/></if><else><!-- Replace with term=\"review\" as that becomes available --><text value=\"Review of\"/></else></choose></else></choose><text macro=\"reviewed-title\"/></group><names variable=\"reviewed-author\"><label form=\"verb-short\" suffix=\" \"/><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></group><choose><if variable=\"genre\" match=\"any\"><choose><if variable=\"number\" match=\"none\"><text variable=\"medium\" text-case=\"capitalize-first\"/></if></choose></if></choose></group></if><else-if type=\"thesis\"><!-- Thesis type and institution --><group delimiter=\"; \"><choose><if variable=\"number\" match=\"none\"><group delimiter=\", \"><text variable=\"genre\" text-case=\"capitalize-first\"/><choose><if variable=\"archive DOI URL\" match=\"any\"><!-- Include the university in brackets if thesis is published --><text variable=\"publisher\"/></if></choose></group></if></choose><text variable=\"medium\" text-case=\"capitalize-first\"/></group></else-if><else-if variable=\"interviewer\" type=\"interview\" match=\"any\"><!-- Interview information --><choose><if variable=\"title\"><text macro=\"format\"/></if><else-if variable=\"genre\"><group delimiter=\"; \"><group delimiter=\" \"><text variable=\"genre\" text-case=\"capitalize-first\"/><group delimiter=\" \"><text term=\"author\" form=\"verb\"/><names variable=\"interviewer\"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></group></group></group></else-if><else-if variable=\"interviewer\"><group delimiter=\"; \"><names variable=\"interviewer\"><label form=\"verb\" suffix=\" \" text-case=\"capitalize-first\"/><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names><text variable=\"medium\" text-case=\"capitalize-first\"/></group></else-if><else><text macro=\"format\"/></else></choose></else-if><else-if type=\"personal_communication\"><!-- Letter information --><choose><if variable=\"recipient\"><group delimiter=\"; \"><group delimiter=\" \"><choose><if variable=\"number\" match=\"none\"><choose><if variable=\"genre\"><text variable=\"genre\" text-case=\"capitalize-first\"/></if><else-if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/></else-if><else><text term=\"letter\" form=\"short\" text-case=\"capitalize-first\"/></else></choose></if><else><choose><if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/></if><else><text term=\"letter\" form=\"short\" text-case=\"capitalize-first\"/></else></choose></else></choose><names variable=\"recipient\" delimiter=\", \"><label form=\"verb\" suffix=\" \"/><name and=\"symbol\" delimiter=\", \"/></names></group><choose><if variable=\"genre\" match=\"any\"><choose><if variable=\"number\" match=\"none\"><text variable=\"medium\" text-case=\"capitalize-first\"/></if></choose></if></choose></group></if><else><text macro=\"format\"/></else></choose></else-if><else-if variable=\"composer\" type=\"song\" match=\"all\"><!-- Performer of classical music works --><group delimiter=\"; \"><choose><if variable=\"number\" match=\"none\"><group delimiter=\" \"><choose><if variable=\"genre\"><text variable=\"genre\" text-case=\"capitalize-first\"/><!-- Replace prefix with performer label as that becomes available --><names variable=\"author\" prefix=\"recorded by \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></if><else-if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/><!-- Replace prefix with performer label as that becomes available --><names variable=\"author\" prefix=\"recorded by \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></else-if><else><!-- Replace prefix with performer label as that becomes available --><names variable=\"author\" prefix=\"Recorded by \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></else></choose></group></if><else><group delimiter=\" \"><choose><if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/><!-- Replace prefix with performer label as that becomes available --><names variable=\"author\" prefix=\"recorded by \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></if><else><!-- Replace prefix with performer label as that becomes available --><names variable=\"author\" prefix=\"Recorded by \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names></else></choose></group></else></choose><choose><if variable=\"genre\" match=\"any\"><choose><if variable=\"number\" match=\"none\"><text variable=\"medium\" text-case=\"capitalize-first\"/></if></choose></if></choose></group></else-if><else-if variable=\"container-title\" match=\"none\"><!-- Other description --><text macro=\"format\"/></else-if><else><!-- For conference presentations, chapters in reports, software, place bracketed after the container title --><choose><if type=\"paper-conference speech\" match=\"any\"><choose><if variable=\"collection-editor editor editorial-director issue page volume\" match=\"any\"><text macro=\"format\"/></if></choose></if><else-if type=\"book\"><choose><if variable=\"version\" match=\"none\"><text macro=\"format\"/></if></choose></else-if><else-if type=\"report\" match=\"none\"><text macro=\"format\"/></else-if></choose></else></choose></group></macro><macro name=\"bracketed-intext\"><group prefix=\"[\" suffix=\"]\"><choose><if variable=\"reviewed-author reviewed-title\" type=\"review review-book\" match=\"any\"><!-- This should be localized --><text macro=\"reviewed-title-intext\" prefix=\"Review of \"/></if><else-if variable=\"interviewer\" type=\"interview\" match=\"any\"><names variable=\"interviewer\"><label form=\"verb\" suffix=\" \" text-case=\"capitalize-first\"/><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><substitute><text macro=\"format-intext\"/></substitute></names></else-if><else-if type=\"personal_communication\"><!-- Letter information --><choose><if variable=\"recipient\"><group delimiter=\" \"><choose><if variable=\"number\" match=\"none\"><text variable=\"genre\" text-case=\"capitalize-first\"/></if><else><text term=\"letter\" form=\"short\" text-case=\"capitalize-first\"/></else></choose><names variable=\"recipient\" delimiter=\", \"><label form=\"verb\" suffix=\" \"/><name and=\"symbol\" delimiter=\", \"/></names></group></if><else><text macro=\"format-intext\"/></else></choose></else-if><else><text macro=\"format-intext\"/></else></choose></group></macro><macro name=\"bracketed-container\"><group prefix=\"[\" suffix=\"]\"><choose><if type=\"paper-conference speech\" match=\"any\"><!-- Conference presentations should describe the session [container] in bracketed unless published in a proceedings --><choose><if variable=\"collection-editor editor editorial-director issue page volume\" match=\"none\"><text macro=\"format\"/></if></choose></if><else-if type=\"book\" variable=\"version\" match=\"all\"><!-- For entries in mobile app reference works, place bracketed after the container-title --><text macro=\"format\"/></else-if><else-if type=\"report\"><!-- For chapters in reports, place bracketed after the container title --><text macro=\"format\"/></else-if></choose></group></macro><macro name=\"secondary-contributors\"><choose><if type=\"article-journal article-magazine article-newspaper post-weblog review review-book\" match=\"any\"><text macro=\"secondary-contributors-periodical\"/></if><else-if type=\"paper-conference\"><choose><if variable=\"collection-editor editor editorial-director\" match=\"any\"><text macro=\"secondary-contributors-booklike\"/></if><else><text macro=\"secondary-contributors-periodical\"/></else></choose></else-if><else><text macro=\"secondary-contributors-booklike\"/></else></choose></macro><macro name=\"secondary-contributors-periodical\"><group delimiter=\"; \"><choose><if variable=\"title\"><names variable=\"interviewer\" delimiter=\"; \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><label form=\"short\" prefix=\", \" text-case=\"title\"/></names></if></choose><names variable=\"translator\" delimiter=\"; \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><label form=\"short\" prefix=\", \" text-case=\"title\"/></names></group></macro><macro name=\"secondary-contributors-booklike\"><group delimiter=\"; \"><choose><if variable=\"title\"><names variable=\"interviewer\"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><label form=\"short\" prefix=\", \" text-case=\"title\"/></names></if></choose><!-- When editortranslator becomes available, add a test: variable=\"editortranslator\" match=\"none\"; then print translator --><choose><if type=\"post webpage\" match=\"none\"><!-- Webpages treat container-title like publisher --><choose><if variable=\"container-title\" match=\"none\"><group delimiter=\"; \"><names variable=\"container-author\"><label form=\"verb-short\" suffix=\" \" text-case=\"title\"/><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names><names variable=\"editor translator\" delimiter=\"; \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><label form=\"short\" prefix=\", \" text-case=\"title\"/></names></group></if></choose></if><else><group delimiter=\"; \"><names variable=\"container-author\"><label form=\"verb-short\" suffix=\" \" text-case=\"title\"/><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/></names><names variable=\"editor translator\" delimiter=\"; \"><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><label form=\"short\" prefix=\", \" text-case=\"title\"/></names></group></else></choose></group></macro><macro name=\"database-location\"><choose><if variable=\"archive-place\" match=\"none\"><!-- With `archive-place`: physical archives. Without: online archives. --><!-- Add archive_collection as that becomes available --><text variable=\"archive_location\"/></if></choose></macro><macro name=\"number\"><choose><if variable=\"number\"><group delimiter=\", \"><group delimiter=\" \"><text variable=\"genre\" text-case=\"title\"/><choose><if is-numeric=\"number\"><!-- Replace with label variable=\"number\" if that becomes available --><text term=\"issue\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"number\"/></if><else><text variable=\"number\"/></else></choose></group><choose><if type=\"thesis\"><choose><!-- Include the university in brackets if thesis is published --><if variable=\"archive DOI URL\" match=\"any\"><text variable=\"publisher\"/></if></choose></if></choose></group></if></choose></macro><macro name=\"locators-booklike\"><choose><if type=\"article-journal article-magazine article-newspaper broadcast interview patent post post-weblog review review-book speech webpage\" match=\"any\"/><else-if type=\"paper-conference\"><choose><if variable=\"collection-editor editor editorial-director\" match=\"any\"><group delimiter=\", \"><text macro=\"version\"/><text macro=\"edition\"/><text macro=\"volume-booklike\"/></group></if></choose></else-if><else><group delimiter=\", \"><text macro=\"version\"/><text macro=\"edition\"/><text macro=\"volume-booklike\"/></group></else></choose></macro><macro name=\"version\"><choose><if is-numeric=\"version\"><group delimiter=\" \"><!-- replace with label variable=\"version\" if that becomes available --><text term=\"version\" text-case=\"capitalize-first\"/><text variable=\"version\"/></group></if><else><text variable=\"version\"/></else></choose></macro><macro name=\"edition\"><choose><if is-numeric=\"edition\"><group delimiter=\" \"><number variable=\"edition\" form=\"ordinal\"/><label variable=\"edition\" form=\"short\"/></group></if><else><text variable=\"edition\"/></else></choose></macro><macro name=\"volume-booklike\"><group delimiter=\", \"><!-- Report series [ex. 52] --><choose><if type=\"report\"><group delimiter=\" \"><text variable=\"collection-title\" text-case=\"title\"/><text variable=\"collection-number\"/></group></if></choose><choose><if variable=\"volume\" match=\"any\"><choose><!-- Non-numeric volumes are already printed as part of the book title --><if is-numeric=\"volume\" match=\"none\"/><else><group delimiter=\" \"><label variable=\"volume\" form=\"short\" text-case=\"capitalize-first\"/><number variable=\"volume\" form=\"numeric\"/></group></else></choose></if><else><group><!-- Replace with label variable=\"number-of-volumes\" if that becomes available --><text term=\"volume\" form=\"short\" text-case=\"capitalize-first\" suffix=\" \"/><text term=\"page-range-delimiter\" prefix=\"1\"/><number variable=\"number-of-volumes\" form=\"numeric\"/></group></else></choose><group delimiter=\" \"><label variable=\"issue\" text-case=\"capitalize-first\"/><text variable=\"issue\"/></group><group delimiter=\" \"><label variable=\"page\" form=\"short\" suffix=\" \"/><text variable=\"page\"/></group></group></macro><macro name=\"reviewed-title\"><choose><if variable=\"reviewed-title\"><!-- Not possible to distinguish TV series episode from other reviewed works [Ex. 69] --><text variable=\"reviewed-title\" font-style=\"italic\"/></if><else><!-- Assume title is title of reviewed work --><text variable=\"title\" font-style=\"italic\"/></else></choose></macro><macro name=\"reviewed-title-intext\"><choose><if variable=\"reviewed-title\"><!-- Not possible to distinguish TV series episode from other reviewed works [Ex. 69] --><text variable=\"reviewed-title\" form=\"short\" font-style=\"italic\" text-case=\"title\"/></if><else><!-- Assume title is title of reviewed work --><text variable=\"title\" form=\"short\" font-style=\"italic\" text-case=\"title\"/></else></choose></macro><macro name=\"format\"><choose><if variable=\"genre medium\" match=\"any\"><group delimiter=\"; \"><choose><if variable=\"number\" match=\"none\"><text variable=\"genre\" text-case=\"capitalize-first\"/></if></choose><text variable=\"medium\" text-case=\"capitalize-first\"/></group></if><!-- Generic labels for specific types --><!-- These should be localized when possible --><else-if type=\"dataset\"><text value=\"Data set\"/></else-if><else-if type=\"book\" variable=\"version\" match=\"all\"><!-- Replace with type=\"software\" and term=\"software\" as that becomes available --><text value=\"Computer software\"/></else-if><else-if type=\"interview personal_communication\" match=\"any\"><choose><if variable=\"archive container-title DOI publisher URL\" match=\"none\"><text term=\"letter\" text-case=\"capitalize-first\"/></if><else-if type=\"interview\"><text term=\"interview\" text-case=\"capitalize-first\"/></else-if></choose></else-if><else-if type=\"map\"><text value=\"Map\"/></else-if></choose></macro><macro name=\"format-intext\"><choose><if variable=\"genre\" match=\"any\"><text variable=\"genre\" text-case=\"capitalize-first\"/></if><else-if variable=\"medium\"><text variable=\"medium\" text-case=\"capitalize-first\"/></else-if><!-- Generic labels for specific types --><!-- These should be localized when possible --><else-if type=\"dataset\"><text value=\"Data set\"/></else-if><else-if type=\"book\" variable=\"version\" match=\"all\"><!-- Replace with type=\"software\" and term=\"software\" as that becomes available --><text value=\"Computer software\"/></else-if><else-if type=\"interview personal_communication\" match=\"any\"><choose><if variable=\"archive container-title DOI publisher URL\" match=\"none\"><text term=\"letter\" text-case=\"capitalize-first\"/></if><else-if type=\"interview\"><text term=\"interview\" text-case=\"capitalize-first\"/></else-if></choose></else-if><else-if type=\"map\"><text value=\"Map\"/></else-if></choose></macro><!-- APA 'source' element contains four parts:container, event, publisher, access --><macro name=\"container\"><choose><if type=\"article-journal article-magazine article-newspaper post-weblog review review-book\" match=\"any\"><!-- Periodical items --><text macro=\"container-periodical\"/></if><else-if type=\"paper-conference\"><!-- Determine if paper-conference is a periodical or booklike --><choose><if variable=\"editor editorial-director collection-editor container-author\" match=\"any\"><text macro=\"container-booklike\"/></if><else><text macro=\"container-periodical\"/></else></choose></else-if><else-if type=\"post webpage\" match=\"none\"><!-- post and webpage treat container-title like publisher --><text macro=\"container-booklike\"/></else-if></choose></macro><macro name=\"container-periodical\"><group delimiter=\". \"><group delimiter=\", \"><text variable=\"container-title\" font-style=\"italic\" text-case=\"title\"/><choose><if variable=\"volume\"><group><text variable=\"volume\" font-style=\"italic\"/><text variable=\"issue\" prefix=\"(\" suffix=\")\"/></group></if><else><text variable=\"issue\" font-style=\"italic\"/></else></choose><choose><if variable=\"page\"><text variable=\"page\"/></if><else><!-- Ex. 6: Journal article with article number or eLocator --><!-- This should be localized --><text variable=\"number\" prefix=\"Article \"/></else></choose></group><choose><if variable=\"issued\"><choose><if variable=\"issue page volume\" match=\"none\"><text variable=\"status\" text-case=\"capitalize-first\"/></if></choose></if></choose></group></macro><macro name=\"container-booklike\"><choose><if variable=\"container-title\" match=\"any\"><group delimiter=\" \"><text term=\"in\" text-case=\"capitalize-first\"/><group delimiter=\", \"><names variable=\"editor translator\" delimiter=\", &amp; \"><!-- Change to editortranslator and move editor to substitute as that becomes available --><name and=\"symbol\" initialize-with=\". \" delimiter=\", \"/><label form=\"short\" text-case=\"title\" prefix=\" (\" suffix=\")\"/><substitute><names variable=\"editorial-director\"/><names variable=\"collection-editor\"/><names variable=\"container-author\"/></substitute></names><group delimiter=\": \" font-style=\"italic\"><text variable=\"container-title\"/><!-- Replace with volume-title as that becomes available --><choose><if is-numeric=\"volume\" match=\"none\"><group delimiter=\" \"><label variable=\"volume\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"volume\"/></group></if></choose></group></group><text macro=\"parenthetical-container\"/><text macro=\"bracketed-container\"/></group></if></choose></macro><macro name=\"publisher\"><group delimiter=\"; \"><choose><if type=\"thesis\"><choose><if variable=\"archive DOI URL\" match=\"none\"><text variable=\"publisher\"/></if></choose></if><else-if type=\"post webpage\" match=\"any\"><!-- For websites, treat container title like publisher --><group delimiter=\"; \"><text variable=\"container-title\" text-case=\"title\"/><text variable=\"publisher\"/></group></else-if><else-if type=\"paper-conference\"><!-- For paper-conference, don't print publisher if in a journal-like proceedings --><choose><if variable=\"collection-editor editor editorial-director\" match=\"any\"><text variable=\"publisher\"/></if></choose></else-if><else-if type=\"article-journal article-magazine article-newspaper post-weblog\" match=\"none\"><text variable=\"publisher\"/></else-if></choose><group delimiter=\", \"><choose><if variable=\"archive-place\"><!-- With `archive-place`: physical archives. Without: online archives. --><!-- For physical archives, print the location before the archive name.For electronic archives, these are printed in macro=\"description\". --><!-- Split \"archive_location\" into \"archive_collection\" and \"archive_location\" as that becomes available --><!-- Must test for archive_collection:With collection: archive_collection (archive_location), archive, archive-placeNo collection: archive (archive_location), archive-place--><text variable=\"archive_location\"/></if></choose><text variable=\"archive\"/><text variable=\"archive-place\"/></group></group></macro><macro name=\"access\"><choose><if variable=\"DOI\" match=\"any\"><text variable=\"DOI\" prefix=\"https://doi.org/\"/></if><else-if variable=\"URL\"><group delimiter=\" \"><choose><if variable=\"issued status\" match=\"none\"><group delimiter=\" \"><text term=\"retrieved\" text-case=\"capitalize-first\"/><date variable=\"accessed\" form=\"text\" suffix=\",\"/><text term=\"from\"/></group></if></choose><text variable=\"URL\"/></group></else-if></choose></macro><macro name=\"event\"><choose><if variable=\"event\"><!-- To prevent Zotero from printing event-place due to its double-mapping of all 'place' toboth publisher-place and event-place. Remove this 'choose' when that is changed. --><choose><if variable=\"collection-editor editor editorial-director issue page volume\" match=\"none\"><!-- Don't print event info if published in a proceedings --><group delimiter=\", \"><text variable=\"event\"/><text variable=\"event-place\"/></group></if></choose></if></choose></macro><!-- After 'source', APA also prints publication history (original publication, reprint info, retraction info) --><macro name=\"publication-history\"><choose><if type=\"patent\" match=\"none\"><group prefix=\"(\" suffix=\")\"><choose><if variable=\"references\"><!-- This provides the option for more elaborate description of publication history, such as full \"reprinted\" references(examples 11, 43, 44) or retracted references --><text variable=\"references\"/></if><else><group delimiter=\" \"><text value=\"Original work published\"/><choose><if is-uncertain-date=\"original-date\"><text term=\"circa\" form=\"short\"/></if></choose><date variable=\"original-date\"><date-part name=\"year\"/></date></group></else></choose></group></if><else><text variable=\"references\" prefix=\"(\" suffix=\")\"/></else></choose></macro><!-- Legal citations have their own rules --><macro name=\"legal-cites\"><choose><if type=\"legal_case\"><group delimiter=\". \"><group delimiter=\", \"><text variable=\"title\"/><group delimiter=\" \"><text macro=\"container-legal\"/><text macro=\"date-legal\"/></group><text variable=\"references\"/></group><text macro=\"access\"/></group></if><else-if type=\"bill\"><!-- Currently designed to handle bills, resolutions, hearings, rederal reports. --><group delimiter=\". \"><group delimiter=\", \"><choose><if variable=\"number container-title\" match=\"none\"><!-- If no number or container-title, then assume it is a hearing --><text variable=\"title\" font-style=\"italic\"/></if><else><text variable=\"title\"/></else></choose><group delimiter=\" \"><text macro=\"container-legal\"/><text macro=\"date-legal\"/><choose><if variable=\"number container-title\" match=\"none\"><!-- If no number or container-title, then assume it is a hearing --><names variable=\"author\" prefix=\"(testimony of \" suffix=\")\"><name and=\"symbol\" delimiter=\", \"/></names></if><else><text variable=\"status\" prefix=\"(\" suffix=\")\"/></else></choose></group><text variable=\"references\"/></group><text macro=\"access\"/></group></else-if><else-if type=\"legislation\"><!-- Currently designed to handle statutes, codified regulations, executive orders.For uncodified regulations, assume future code section is in status. --><group delimiter=\". \"><group delimiter=\", \"><text variable=\"title\"/><group delimiter=\" \"><text macro=\"container-legal\"/><text macro=\"date-legal\"/><text variable=\"status\" prefix=\"(\" suffix=\")\"/></group><text variable=\"references\"/></group><text macro=\"access\"/></group></else-if><else-if type=\"treaty\"><!-- APA generally defers to Bluebook for legal citations, but diverges withoutexplanation for treaty items. The Bluebook format that was used in APA 6thed. is used here. --><group delimiter=\", \"><text variable=\"title\" text-case=\"title\"/><names variable=\"author\"><name initialize-with=\".\" form=\"short\" delimiter=\"-\"/></names><text macro=\"date-legal\"/><text macro=\"container-legal\"/><text macro=\"access\"/></group></else-if></choose></macro><macro name=\"date-legal\"><choose><if type=\"legal_case\"><group prefix=\"(\" suffix=\")\" delimiter=\" \"><text variable=\"authority\"/><choose><if variable=\"container-title\" match=\"any\"><!-- Print only year for cases published in reporters--><date variable=\"issued\" form=\"numeric\" date-parts=\"year\"/></if><else><date variable=\"issued\" form=\"text\"/></else></choose></group></if><else-if type=\"bill legislation\" match=\"any\"><group prefix=\"(\" suffix=\")\" delimiter=\" \"><group delimiter=\" \"><date variable=\"original-date\"><date-part name=\"year\"/></date><text term=\"and\" form=\"symbol\"/></group><date variable=\"issued\"><date-part name=\"year\"/></date></group></else-if><else-if type=\"treaty\"><date variable=\"issued\" form=\"text\"/></else-if></choose></macro><macro name=\"container-legal\"><!-- Expect legal item container-titles to be stored in short form --><choose><if type=\"legal_case\"><group delimiter=\" \"><choose><if variable=\"container-title\"><group delimiter=\" \"><text variable=\"volume\"/><text variable=\"container-title\"/><group delimiter=\" \"><!-- Change to label variable=\"section\" as that becomes available --><text term=\"section\" form=\"symbol\"/><text variable=\"section\"/></group><choose><if variable=\"page page-first\" match=\"any\"><text variable=\"page-first\"/></if><else><text value=\"___\"/></else></choose></group></if><else><group delimiter=\" \"><choose><if is-numeric=\"number\"><!-- Replace with label variable=\"number\" if that becomes available --><text term=\"issue\" form=\"short\" text-case=\"capitalize-first\"/></if></choose><text variable=\"number\"/></group></else></choose></group></if><else-if type=\"bill\"><group delimiter=\", \"><group delimiter=\" \"><text variable=\"genre\"/><group delimiter=\" \"><choose><if variable=\"chapter-number container-title\" match=\"none\"><!-- Replace with label variable=\"number\" as that becomes available --><text term=\"issue\" form=\"short\"/></if></choose><text variable=\"number\"/></group></group><text variable=\"authority\"/><text variable=\"chapter-number\"/><group delimiter=\" \"><text variable=\"volume\"/><text variable=\"container-title\"/><text variable=\"page-first\"/></group></group></else-if><else-if type=\"legislation\"><choose><if variable=\"number\"><!--There's a public law number--><group delimiter=\", \"><text variable=\"number\" prefix=\"Pub. L. No. \"/><group delimiter=\" \"><text variable=\"volume\"/><text variable=\"container-title\"/><text variable=\"page-first\"/></group></group></if><else><group delimiter=\" \"><text variable=\"volume\"/><text variable=\"container-title\"/><choose><if variable=\"section\"><group delimiter=\" \"><!-- Change to label variable=\"section\" as that becomes available --><text term=\"section\" form=\"symbol\"/><text variable=\"section\"/></group></if><else><text variable=\"page-first\"/></else></choose></group></else></choose></else-if><else-if type=\"treaty\"><group delimiter=\" \"><number variable=\"volume\"/><text variable=\"container-title\"/><choose><if variable=\"page page-first\" match=\"any\"><text variable=\"page-first\"/></if><else><group delimiter=\" \"><!-- Replace with label variable=\"number\" if that becomes available --><text term=\"issue\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"number\"/></group></else></choose></group></else-if></choose></macro><macro name=\"citation-locator\"><group delimiter=\" \"><choose><if locator=\"chapter\"><label variable=\"locator\" text-case=\"capitalize-first\"/></if><else><label variable=\"locator\" form=\"short\"/></else></choose><text variable=\"locator\"/></group></macro><citation et-al-min=\"3\" et-al-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\" collapse=\"year\" givenname-disambiguation-rule=\"primary-name-with-initials\"><sort><key macro=\"author-bib\" names-min=\"3\" names-use-first=\"1\"/><key macro=\"date-sort-group\"/><key macro=\"date-sort-date\" sort=\"ascending\"/><key variable=\"status\"/></sort><layout prefix=\"(\" suffix=\")\" delimiter=\"; \"><group delimiter=\", \"><text macro=\"author-intext\"/><text macro=\"date-intext\"/><text macro=\"citation-locator\"/></group></layout></citation><bibliography hanging-indent=\"true\" et-al-min=\"21\" et-al-use-first=\"19\" et-al-use-last=\"true\" entry-spacing=\"0\" line-spacing=\"2\"><sort><key macro=\"author-bib\"/><key macro=\"date-sort-group\"/><key macro=\"date-sort-date\" sort=\"ascending\"/><key variable=\"status\"/><key macro=\"title\"/></sort><layout><choose><if type=\"bill legal_case legislation treaty\" match=\"any\"><!-- Legal items have different orders and delimiters --><choose><if variable=\"DOI URL\" match=\"any\"><text macro=\"legal-cites\"/></if><else><text macro=\"legal-cites\" suffix=\".\"/></else></choose></if><else><group delimiter=\" \"><group delimiter=\". \" suffix=\".\"><text macro=\"author-bib\"/><text macro=\"date-bib\"/><text macro=\"title-and-descriptions\"/><text macro=\"container\"/><text macro=\"event\"/><text macro=\"publisher\"/></group><text macro=\"access\"/><text macro=\"publication-history\"/></group></else></choose></layout></bibliography>\n</style>\n",
    "vancouver": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"sort-only\" initialize-with-hyphen=\"false\" page-range-format=\"minimal\"><info><title>Vancouver</title><id>http://www.zotero.org/styles/vancouver</id><link href=\"http://www.zotero.org/styles/vancouver\" rel=\"self\"/><link href=\"http://www.nlm.nih.gov/bsd/uniform_requirements.html\" rel=\"documentation\"/><author><name>Michael Berkowitz</name><email>mberkowi@gmu.edu</email></author><contributor><name>Sean Takats</name><email>stakats@gmu.edu</email></contributor><contributor><name>Sebastian Karcher</name></contributor><category citation-format=\"numeric\"/><category field=\"medicine\"/><summary>Vancouver style as outlined by International Committee of Medical Journal Editors Uniform Requirements for Manuscripts Submitted to Biomedical Journals: Sample References</summary><updated>2022-04-14T13:48:43+00:00</updated><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights></info><locale xml:lang=\"en\"><date form=\"text\" delimiter=\" \"><date-part name=\"year\"/><date-part name=\"month\" form=\"short\" strip-periods=\"true\"/><date-part name=\"day\"/></date><terms><term name=\"collection-editor\" form=\"long\"><single>editor</single><multiple>editors</multiple></term><term name=\"presented at\">presented at</term><term name=\"available at\">available from</term><term name=\"section\" form=\"short\">sect.</term></terms></locale><locale xml:lang=\"fr\"><date form=\"text\" delimiter=\" \"><date-part name=\"day\"/><date-part name=\"month\" form=\"short\" strip-periods=\"true\"/><date-part name=\"year\"/></date></locale><macro name=\"author\"><names variable=\"author\"><name sort-separator=\" \" initialize-with=\"\" name-as-sort-order=\"all\" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"long\" prefix=\", \"/><substitute><names variable=\"editor\"/></substitute></names></macro><macro name=\"editor\"><names variable=\"editor\" suffix=\".\"><name sort-separator=\" \" initialize-with=\"\" name-as-sort-order=\"all\" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"long\" prefix=\", \"/></names></macro><macro name=\"chapter-marker\"><choose><if type=\"chapter paper-conference entry-dictionary entry-encyclopedia\" match=\"any\"><text term=\"in\" text-case=\"capitalize-first\"/></if></choose></macro><macro name=\"publisher\"><choose><!--discard publisher info for articles--><if type=\"article-journal article-magazine article-newspaper\" match=\"none\"><group delimiter=\": \" suffix=\";\"><choose><if type=\"thesis\"><text variable=\"publisher-place\" prefix=\"[\" suffix=\"]\"/></if><else-if type=\"speech\"/><else><text variable=\"publisher-place\"/></else></choose><text variable=\"publisher\"/></group></if></choose></macro><macro name=\"access\"><choose><if variable=\"URL\"><group delimiter=\": \"><text term=\"available at\" text-case=\"capitalize-first\"/><text variable=\"URL\"/></group></if></choose></macro><macro name=\"accessed-date\"><choose><if variable=\"URL\"><group prefix=\"[\" suffix=\"]\" delimiter=\" \"><text term=\"cited\" text-case=\"lowercase\"/><date variable=\"accessed\" form=\"text\"/></group></if></choose></macro><macro name=\"container-title\"><choose><if type=\"article-journal article-magazine chapter paper-conference article-newspaper review review-book entry-dictionary entry-encyclopedia\" match=\"any\"><group suffix=\".\" delimiter=\" \"><choose><if type=\"article-journal review review-book\" match=\"any\"><text variable=\"container-title\" form=\"short\" strip-periods=\"true\"/></if><else><text variable=\"container-title\" strip-periods=\"true\"/></else></choose><choose><if variable=\"URL\"><text term=\"internet\" prefix=\"[\" suffix=\"]\" text-case=\"capitalize-first\"/></if></choose></group><text macro=\"edition\" prefix=\" \"/></if><!--add event-name and event-place once they become available--><else-if type=\"bill legislation\" match=\"any\"><group delimiter=\", \"><group delimiter=\". \"><text variable=\"container-title\"/><group delimiter=\" \"><text term=\"section\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"section\"/></group></group><text variable=\"number\"/></group></else-if><else-if type=\"speech\"><group delimiter=\": \" suffix=\";\"><group delimiter=\" \"><text variable=\"genre\" text-case=\"capitalize-first\"/><text term=\"presented at\"/></group><text variable=\"event\"/></group></else-if><else><group delimiter=\", \" suffix=\".\"><choose><if variable=\"collection-title\" match=\"none\"><group delimiter=\" \"><label variable=\"volume\" form=\"short\" text-case=\"capitalize-first\"/><text variable=\"volume\"/></group></if></choose><text variable=\"container-title\"/></group></else></choose></macro><macro name=\"title\"><text variable=\"title\"/><choose><if type=\"article-journal article-magazine chapter paper-conference article-newspaper review review-book entry-dictionary entry-encyclopedia\" match=\"none\"><choose><if variable=\"URL\"><text term=\"internet\" prefix=\" [\" suffix=\"]\" text-case=\"capitalize-first\"/></if></choose><text macro=\"edition\" prefix=\". \"/></if></choose><choose><if type=\"thesis\"><text variable=\"genre\" prefix=\" [\" suffix=\"]\"/></if></choose></macro><macro name=\"edition\"><choose><if is-numeric=\"edition\"><group delimiter=\" \"><number variable=\"edition\" form=\"ordinal\"/><text term=\"edition\" form=\"short\"/></group></if><else><text variable=\"edition\" suffix=\".\"/></else></choose></macro><macro name=\"date\"><choose><if type=\"article-journal article-magazine article-newspaper review review-book\" match=\"any\"><group suffix=\";\" delimiter=\" \"><date variable=\"issued\" form=\"text\"/><text macro=\"accessed-date\"/></group></if><else-if type=\"bill legislation\" match=\"any\"><group delimiter=\", \"><date variable=\"issued\" delimiter=\" \"><date-part name=\"month\" form=\"short\" strip-periods=\"true\"/><date-part name=\"day\"/></date><date variable=\"issued\"><date-part name=\"year\"/></date></group></else-if><else-if type=\"report\"><date variable=\"issued\" delimiter=\" \"><date-part name=\"year\"/><date-part name=\"month\" form=\"short\" strip-periods=\"true\"/></date><text macro=\"accessed-date\" prefix=\" \"/></else-if><else-if type=\"patent\"><group suffix=\".\"><group delimiter=\", \"><text variable=\"number\"/><date variable=\"issued\"><date-part name=\"year\"/></date></group><text macro=\"accessed-date\" prefix=\" \"/></group></else-if><else-if type=\"speech\"><group delimiter=\"; \"><group delimiter=\" \"><date variable=\"issued\" delimiter=\" \"><date-part name=\"year\"/><date-part name=\"month\" form=\"short\" strip-periods=\"true\"/><date-part name=\"day\"/></date><text macro=\"accessed-date\"/></group><text variable=\"event-place\"/></group></else-if><else><group suffix=\".\"><date variable=\"issued\"><date-part name=\"year\"/></date><text macro=\"accessed-date\" prefix=\" \"/></group></else></choose></macro><macro name=\"pages\"><choose><if type=\"article-journal article-magazine article-newspaper review review-book\" match=\"any\"><text variable=\"page\" prefix=\":\"/></if><else-if type=\"book\" match=\"any\"><text variable=\"number-of-pages\" prefix=\" \"/><choose><if is-numeric=\"number-of-pages\"><label variable=\"number-of-pages\" form=\"short\" prefix=\" \" plural=\"never\"/></if></choose></else-if><else><group prefix=\" \" delimiter=\" \"><label variable=\"page\" form=\"short\" plural=\"never\"/><text variable=\"page\"/></group></else></choose></macro><macro name=\"journal-location\"><choose><if type=\"article-journal article-magazine review review-book\" match=\"any\"><text variable=\"volume\"/><text variable=\"issue\" prefix=\"(\" suffix=\")\"/></if></choose></macro><macro name=\"collection-details\"><choose><if type=\"article-journal article-magazine article-newspaper review review-book\" match=\"none\"><choose><if variable=\"collection-title\"><group delimiter=\" \" prefix=\"(\" suffix=\")\"><names variable=\"collection-editor\" suffix=\".\"><name sort-separator=\" \" initialize-with=\"\" name-as-sort-order=\"all\" delimiter=\", \" delimiter-precedes-last=\"always\"/><label form=\"long\" prefix=\", \"/></names><group delimiter=\"; \"><text variable=\"collection-title\"/><group delimiter=\" \"><label variable=\"volume\" form=\"short\"/><text variable=\"volume\"/></group></group></group></if></choose></if></choose></macro><macro name=\"report-details\"><choose><if type=\"report\"><text variable=\"number\" prefix=\"Report No.: \"/></if></choose></macro><citation collapse=\"citation-number\"><sort><key variable=\"citation-number\"/></sort><layout prefix=\"(\" suffix=\")\" delimiter=\",\"><text variable=\"citation-number\"/></layout></citation><bibliography et-al-min=\"7\" et-al-use-first=\"6\" second-field-align=\"flush\"><layout><text variable=\"citation-number\" suffix=\". \"/><group delimiter=\". \" suffix=\". \"><text macro=\"author\"/><text macro=\"title\"/></group><group delimiter=\" \" suffix=\". \"><group delimiter=\": \"><text macro=\"chapter-marker\"/><group delimiter=\" \"><text macro=\"editor\"/><text macro=\"container-title\"/></group></group><text macro=\"publisher\"/><group><text macro=\"date\"/><text macro=\"journal-location\"/><text macro=\"pages\"/></group></group><text macro=\"collection-details\" suffix=\". \"/><text macro=\"report-details\" suffix=\". \"/><text macro=\"access\"/></layout></bibliography>\n</style>\n",
    "harvard1": "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<style xmlns=\"http://purl.org/net/xbiblio/csl\" class=\"in-text\" version=\"1.0\" demote-non-dropping-particle=\"sort-only\" default-locale=\"en-GB\"><info><title>Cite Them Right 11th edition - Harvard</title><id>http://www.zotero.org/styles/harvard-cite-them-right</id><link href=\"http://www.zotero.org/styles/harvard-cite-them-right\" rel=\"self\"/><link href=\"http://www.zotero.org/styles/harvard-cite-them-right-10th-edition\" rel=\"template\"/><link href=\"http://www.citethemrightonline.com/\" rel=\"documentation\"/><author><name>Patrick O'Brien</name></author><category citation-format=\"author-date\"/><category field=\"generic-base\"/><summary>Harvard according to Cite Them Right, 11th edition.</summary><updated>2021-09-01T10:12:20+00:00</updated><rights license=\"http://creativecommons.org/licenses/by-sa/3.0/\">This work is licensed under a Creative Commons Attribution-ShareAlike 3.0 License</rights></info><locale xml:lang=\"en-GB\"><terms><term name=\"editor\" form=\"short\"><single>ed.</single><multiple>eds</multiple></term><term name=\"editortranslator\" form=\"verb\">edited and translated by</term><term name=\"edition\" form=\"short\">edn.</term></terms></locale><macro name=\"editor\"><choose><if type=\"chapter paper-conference\" match=\"any\"><names variable=\"container-author\" delimiter=\", \" suffix=\", \"><name and=\"text\" initialize-with=\". \" delimiter=\", \" sort-separator=\", \" name-as-sort-order=\"all\"/></names><choose><if variable=\"container-author\" match=\"none\"><names variable=\"editor translator\" delimiter=\", \"><name and=\"text\" initialize-with=\".\" name-as-sort-order=\"all\"/><label form=\"short\" prefix=\" (\" suffix=\")\"/></names></if></choose></if></choose></macro><macro name=\"secondary-contributors\"><choose><if type=\"chapter paper-conference\" match=\"none\"><names variable=\"editor translator\" delimiter=\". \"><label form=\"verb\" text-case=\"capitalize-first\" suffix=\" \"/><name and=\"text\" initialize-with=\".\"/></names></if><else-if variable=\"container-author\" match=\"any\"><names variable=\"editor translator\" delimiter=\". \"><label form=\"verb\" text-case=\"capitalize-first\" suffix=\" \"/><name and=\"text\" initialize-with=\". \" delimiter=\", \"/></names></else-if></choose></macro><macro name=\"author\"><names variable=\"author\"><name and=\"text\" delimiter-precedes-last=\"never\" initialize-with=\".\" name-as-sort-order=\"all\"/><label form=\"short\" prefix=\" (\" suffix=\")\"/><et-al font-style=\"italic\"/><substitute><names variable=\"editor\"/><names variable=\"translator\"/><choose><if type=\"article-newspaper article-magazine\" match=\"any\"><text variable=\"container-title\" text-case=\"title\" font-style=\"italic\"/></if><else><text macro=\"title\"/></else></choose></substitute></names></macro><macro name=\"author-short\"><names variable=\"author\"><name form=\"short\" and=\"text\" delimiter=\", \" delimiter-precedes-last=\"never\" initialize-with=\". \"/><et-al font-style=\"italic\"/><substitute><names variable=\"editor\"/><names variable=\"translator\"/><choose><if type=\"article-newspaper article-magazine\" match=\"any\"><text variable=\"container-title\" text-case=\"title\" font-style=\"italic\"/></if><else><text macro=\"title\"/></else></choose></substitute></names></macro><macro name=\"access\"><choose><if variable=\"DOI\"><text variable=\"DOI\" prefix=\"doi:\"/></if><else-if variable=\"URL\"><text term=\"available at\" suffix=\": \" text-case=\"capitalize-first\"/><text variable=\"URL\"/><group prefix=\" (\" delimiter=\": \" suffix=\")\"><text term=\"accessed\" text-case=\"capitalize-first\"/><date form=\"text\" variable=\"accessed\"><date-part name=\"day\"/><date-part name=\"month\"/><date-part name=\"year\"/></date></group></else-if></choose></macro><macro name=\"number-volumes\"><choose><if variable=\"volume\" match=\"none\"><group delimiter=\" \" prefix=\"(\" suffix=\")\"><text variable=\"number-of-volumes\"/><label variable=\"volume\" form=\"short\" strip-periods=\"true\"/></group></if></choose></macro><macro name=\"title\"><choose><if type=\"bill book legal_case legislation motion_picture report song thesis webpage graphic\" match=\"any\"><group delimiter=\". \"><group delimiter=\" \"><group delimiter=\" \"><text variable=\"title\" font-style=\"italic\"/><text variable=\"medium\" prefix=\"[\" suffix=\"]\"/></group><text macro=\"number-volumes\"/></group><text macro=\"edition\"/></group></if><else><text variable=\"title\" form=\"long\" quotes=\"true\"/></else></choose></macro><macro name=\"publisher\"><choose><if type=\"thesis\"><group delimiter=\". \"><text variable=\"genre\"/><text variable=\"publisher\"/></group></if><else-if type=\"report\"><group delimiter=\". \"><group delimiter=\" \"><text variable=\"genre\"/><text variable=\"number\"/></group><group delimiter=\": \"><text variable=\"publisher-place\"/><text variable=\"publisher\"/></group></group></else-if><else-if type=\"article-journal article-newspaper article-magazine\" match=\"none\"><group delimiter=\" \"><group delimiter=\", \"><choose><if type=\"speech\" variable=\"event\" match=\"any\"><text variable=\"event\" font-style=\"italic\"/></if></choose><group delimiter=\": \"><text variable=\"publisher-place\"/><text variable=\"publisher\"/></group></group><group prefix=\"(\" suffix=\")\" delimiter=\", \"><text variable=\"collection-title\"/><text variable=\"collection-number\"/></group></group></else-if></choose></macro><macro name=\"year-date\"><choose><if variable=\"issued\"><date variable=\"issued\"><date-part name=\"year\"/></date><text variable=\"year-suffix\"/></if><else><text term=\"no date\"/><text variable=\"year-suffix\" prefix=\" \"/></else></choose></macro><macro name=\"locator\"><choose><if type=\"article-journal\"><text variable=\"volume\"/><text variable=\"issue\" prefix=\"(\" suffix=\")\"/></if></choose></macro><macro name=\"published-date\"><choose><if type=\"article-newspaper article-magazine post-weblog speech\" match=\"any\"><date variable=\"issued\"><date-part name=\"day\" suffix=\" \"/><date-part name=\"month\" form=\"long\"/></date></if></choose></macro><macro name=\"pages\"><choose><if type=\"chapter paper-conference article-journal article article-magazine article-newspaper book review review-book report\" match=\"any\"><group delimiter=\" \"><label variable=\"page\" form=\"short\"/><text variable=\"page\"/></group></if></choose></macro><macro name=\"container-title\"><choose><if variable=\"container-title\"><group delimiter=\". \"><group delimiter=\" \"><text variable=\"container-title\" font-style=\"italic\"/><choose><if type=\"article article-journal\" match=\"any\"><choose><if match=\"none\" variable=\"page volume\"><text value=\"Preprint\" prefix=\"[\" suffix=\"]\"/></if></choose></if></choose></group><text macro=\"edition\"/></group></if></choose></macro><macro name=\"edition\"><choose><if is-numeric=\"edition\"><group delimiter=\" \"><number variable=\"edition\" form=\"ordinal\"/><text term=\"edition\" form=\"short\" strip-periods=\"true\"/></group></if><else><text variable=\"edition\"/></else></choose></macro><macro name=\"container-prefix\"><choose><if type=\"chapter paper-conference\" match=\"any\"><text term=\"in\"/></if></choose></macro><citation et-al-min=\"4\" et-al-use-first=\"1\" disambiguate-add-year-suffix=\"true\" disambiguate-add-names=\"true\" disambiguate-add-givenname=\"true\" collapse=\"year\"><sort><key macro=\"year-date\"/></sort><layout prefix=\"(\" suffix=\")\" delimiter=\"; \"><group delimiter=\", \"><group delimiter=\", \"><text macro=\"author-short\"/><text macro=\"year-date\"/></group><group><label variable=\"locator\" form=\"short\" suffix=\" \"/><text variable=\"locator\"/></group></group></layout></citation><bibliography and=\"text\" et-al-min=\"4\" et-al-use-first=\"1\"><sort><key macro=\"author\"/><key macro=\"year-date\"/><key variable=\"title\"/></sort><layout suffix=\".\"><group delimiter=\". \"><group delimiter=\" \"><text macro=\"author\"/><text macro=\"year-date\" prefix=\"(\" suffix=\")\"/><group delimiter=\", \"><text macro=\"title\"/><group delimiter=\" \"><text macro=\"container-prefix\"/><text macro=\"editor\"/><text macro=\"container-title\"/></group></group></group><text macro=\"secondary-contributors\"/><text macro=\"publisher\"/></group><group delimiter=\", \" prefix=\", \"><text macro=\"locator\"/><text macro=\"published-date\"/><text macro=\"pages\"/></group><text macro=\"access\" prefix=\". \"/></layout></bibliography>\n</style>\n"
  }
  
  },{}],82:[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.templates = exports.default = void 0;
  var _core = require("@citation-js/core");
  var _styles = _interopRequireDefault(require("./styles.json"));
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const templates = new _core.util.Register(_styles.default);
  exports.templates = templates;
  const fetchStyle = style => {
    if (templates.has(style)) {
      return templates.get(style);
    } else {
      return templates.get('apa');
    }
  };
  var _default = fetchStyle;
  exports.default = _default;
  },{"./styles.json":81,"@citation-js/core":"citation-js"}],83:[function(require,module,exports){
  'use strict'
  
  exports.byteLength = byteLength
  exports.toByteArray = toByteArray
  exports.fromByteArray = fromByteArray
  
  var lookup = []
  var revLookup = []
  var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array
  
  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
  for (var i = 0, len = code.length; i < len; ++i) {
    lookup[i] = code[i]
    revLookup[code.charCodeAt(i)] = i
  }
  
  // Support decoding URL-safe base64 strings, as Node.js does.
  // See: https://en.wikipedia.org/wiki/Base64#URL_applications
  revLookup['-'.charCodeAt(0)] = 62
  revLookup['_'.charCodeAt(0)] = 63
  
  function getLens (b64) {
    var len = b64.length
  
    if (len % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }
  
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=')
    if (validLen === -1) validLen = len
  
    var placeHoldersLen = validLen === len
      ? 0
      : 4 - (validLen % 4)
  
    return [validLen, placeHoldersLen]
  }
  
  // base64 is 4/3 + up to two characters of the original data
  function byteLength (b64) {
    var lens = getLens(b64)
    var validLen = lens[0]
    var placeHoldersLen = lens[1]
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }
  
  function _byteLength (b64, validLen, placeHoldersLen) {
    return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen
  }
  
  function toByteArray (b64) {
    var tmp
    var lens = getLens(b64)
    var validLen = lens[0]
    var placeHoldersLen = lens[1]
  
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))
  
    var curByte = 0
  
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0
      ? validLen - 4
      : validLen
  
    var i
    for (i = 0; i < len; i += 4) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 18) |
        (revLookup[b64.charCodeAt(i + 1)] << 12) |
        (revLookup[b64.charCodeAt(i + 2)] << 6) |
        revLookup[b64.charCodeAt(i + 3)]
      arr[curByte++] = (tmp >> 16) & 0xFF
      arr[curByte++] = (tmp >> 8) & 0xFF
      arr[curByte++] = tmp & 0xFF
    }
  
    if (placeHoldersLen === 2) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 2) |
        (revLookup[b64.charCodeAt(i + 1)] >> 4)
      arr[curByte++] = tmp & 0xFF
    }
  
    if (placeHoldersLen === 1) {
      tmp =
        (revLookup[b64.charCodeAt(i)] << 10) |
        (revLookup[b64.charCodeAt(i + 1)] << 4) |
        (revLookup[b64.charCodeAt(i + 2)] >> 2)
      arr[curByte++] = (tmp >> 8) & 0xFF
      arr[curByte++] = tmp & 0xFF
    }
  
    return arr
  }
  
  function tripletToBase64 (num) {
    return lookup[num >> 18 & 0x3F] +
      lookup[num >> 12 & 0x3F] +
      lookup[num >> 6 & 0x3F] +
      lookup[num & 0x3F]
  }
  
  function encodeChunk (uint8, start, end) {
    var tmp
    var output = []
    for (var i = start; i < end; i += 3) {
      tmp =
        ((uint8[i] << 16) & 0xFF0000) +
        ((uint8[i + 1] << 8) & 0xFF00) +
        (uint8[i + 2] & 0xFF)
      output.push(tripletToBase64(tmp))
    }
    return output.join('')
  }
  
  function fromByteArray (uint8) {
    var tmp
    var len = uint8.length
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    var parts = []
    var maxChunkLength = 16383 // must be multiple of 3
  
    // go through the array every three bytes, we'll deal with trailing stuff later
    for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
      parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
    }
  
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
      tmp = uint8[len - 1]
      parts.push(
        lookup[tmp >> 2] +
        lookup[(tmp << 4) & 0x3F] +
        '=='
      )
    } else if (extraBytes === 2) {
      tmp = (uint8[len - 2] << 8) + uint8[len - 1]
      parts.push(
        lookup[tmp >> 10] +
        lookup[(tmp >> 4) & 0x3F] +
        lookup[(tmp << 2) & 0x3F] +
        '='
      )
    }
  
    return parts.join('')
  }
  
  },{}],84:[function(require,module,exports){
  (function (Buffer){(function (){
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */
  
  'use strict'
  
  var base64 = require('base64-js')
  var ieee754 = require('ieee754')
  
  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50
  
  var K_MAX_LENGTH = 0x7fffffff
  exports.kMaxLength = K_MAX_LENGTH
  
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
  
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
      typeof console.error === 'function') {
    console.error(
      'This browser lacks typed array (Uint8Array) support which is required by ' +
      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
    )
  }
  
  function typedArraySupport () {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1)
      arr.__proto__ = { __proto__: Uint8Array.prototype, foo: function () { return 42 } }
      return arr.foo() === 42
    } catch (e) {
      return false
    }
  }
  
  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.buffer
    }
  })
  
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.byteOffset
    }
  })
  
  function createBuffer (length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"')
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length)
    buf.__proto__ = Buffer.prototype
    return buf
  }
  
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */
  
  function Buffer (arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        )
      }
      return allocUnsafe(arg)
    }
    return from(arg, encodingOrOffset, length)
  }
  
  // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
  if (typeof Symbol !== 'undefined' && Symbol.species != null &&
      Buffer[Symbol.species] === Buffer) {
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true,
      enumerable: false,
      writable: false
    })
  }
  
  Buffer.poolSize = 8192 // not used by this implementation
  
  function from (value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset)
    }
  
    if (ArrayBuffer.isView(value)) {
      return fromArrayLike(value)
    }
  
    if (value == null) {
      throw TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }
  
    if (isInstance(value, ArrayBuffer) ||
        (value && isInstance(value.buffer, ArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }
  
    if (typeof value === 'number') {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      )
    }
  
    var valueOf = value.valueOf && value.valueOf()
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length)
    }
  
    var b = fromObject(value)
    if (b) return b
  
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
        typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(
        value[Symbol.toPrimitive]('string'), encodingOrOffset, length
      )
    }
  
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }
  
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length)
  }
  
  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  
  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number')
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
  }
  
  function alloc (size, fill, encoding) {
    assertSize(size)
    if (size <= 0) {
      return createBuffer(size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpretted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(size).fill(fill, encoding)
        : createBuffer(size).fill(fill)
    }
    return createBuffer(size)
  }
  
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding)
  }
  
  function allocUnsafe (size) {
    assertSize(size)
    return createBuffer(size < 0 ? 0 : checked(size) | 0)
  }
  
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size)
  }
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size)
  }
  
  function fromString (string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8'
    }
  
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  
    var length = byteLength(string, encoding) | 0
    var buf = createBuffer(length)
  
    var actual = buf.write(string, encoding)
  
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual)
    }
  
    return buf
  }
  
  function fromArrayLike (array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0
    var buf = createBuffer(length)
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255
    }
    return buf
  }
  
  function fromArrayBuffer (array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds')
    }
  
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds')
    }
  
    var buf
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array)
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset)
    } else {
      buf = new Uint8Array(array, byteOffset, length)
    }
  
    // Return an augmented `Uint8Array` instance
    buf.__proto__ = Buffer.prototype
    return buf
  }
  
  function fromObject (obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0
      var buf = createBuffer(len)
  
      if (buf.length === 0) {
        return buf
      }
  
      obj.copy(buf, 0, 0, len)
      return buf
    }
  
    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }
  
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }
  
  function checked (length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    }
    return length | 0
  }
  
  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0
    }
    return Buffer.alloc(+length)
  }
  
  Buffer.isBuffer = function isBuffer (b) {
    return b != null && b._isBuffer === true &&
      b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
  }
  
  Buffer.compare = function compare (a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      )
    }
  
    if (a === b) return 0
  
    var x = a.length
    var y = b.length
  
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i]
        y = b[i]
        break
      }
    }
  
    if (x < y) return -1
    if (y < x) return 1
    return 0
  }
  
  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }
  
  Buffer.concat = function concat (list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
  
    if (list.length === 0) {
      return Buffer.alloc(0)
    }
  
    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; ++i) {
        length += list[i].length
      }
    }
  
    var buffer = Buffer.allocUnsafe(length)
    var pos = 0
    for (i = 0; i < list.length; ++i) {
      var buf = list[i]
      if (isInstance(buf, Uint8Array)) {
        buf = Buffer.from(buf)
      }
      if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }
      buf.copy(buffer, pos)
      pos += buf.length
    }
    return buffer
  }
  
  function byteLength (string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
        'Received type ' + typeof string
      )
    }
  
    var len = string.length
    var mustMatch = (arguments.length > 2 && arguments[2] === true)
    if (!mustMatch && len === 0) return 0
  
    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
          }
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength
  
  function slowToString (encoding, start, end) {
    var loweredCase = false
  
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
  
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }
  
    if (end === undefined || end > this.length) {
      end = this.length
    }
  
    if (end <= 0) {
      return ''
    }
  
    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0
    start >>>= 0
  
    if (end <= start) {
      return ''
    }
  
    if (!encoding) encoding = 'utf8'
  
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)
  
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)
  
        case 'ascii':
          return asciiSlice(this, start, end)
  
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)
  
        case 'base64':
          return base64Slice(this, start, end)
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }
  
  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true
  
  function swap (b, n, m) {
    var i = b[n]
    b[n] = b[m]
    b[m] = i
  }
  
  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1)
    }
    return this
  }
  
  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3)
      swap(this, i + 1, i + 2)
    }
    return this
  }
  
  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7)
      swap(this, i + 1, i + 6)
      swap(this, i + 2, i + 5)
      swap(this, i + 3, i + 4)
    }
    return this
  }
  
  Buffer.prototype.toString = function toString () {
    var length = this.length
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }
  
  Buffer.prototype.toLocaleString = Buffer.prototype.toString
  
  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }
  
  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
    if (this.length > max) str += ' ... '
    return '<Buffer ' + str + '>'
  }
  
  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength)
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. ' +
        'Received type ' + (typeof target)
      )
    }
  
    if (start === undefined) {
      start = 0
    }
    if (end === undefined) {
      end = target ? target.length : 0
    }
    if (thisStart === undefined) {
      thisStart = 0
    }
    if (thisEnd === undefined) {
      thisEnd = this.length
    }
  
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }
  
    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }
  
    start >>>= 0
    end >>>= 0
    thisStart >>>= 0
    thisEnd >>>= 0
  
    if (this === target) return 0
  
    var x = thisEnd - thisStart
    var y = end - start
    var len = Math.min(x, y)
  
    var thisCopy = this.slice(thisStart, thisEnd)
    var targetCopy = target.slice(start, end)
  
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i]
        y = targetCopy[i]
        break
      }
    }
  
    if (x < y) return -1
    if (y < x) return 1
    return 0
  }
  
  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1
  
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset
      byteOffset = 0
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000
    }
    byteOffset = +byteOffset // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1)
    }
  
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0
      else return -1
    }
  
    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding)
    }
  
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
    }
  
    throw new TypeError('val must be string, number or Buffer')
  }
  
  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1
    var arrLength = arr.length
    var valLength = val.length
  
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase()
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2
        arrLength /= 2
        valLength /= 2
        byteOffset /= 2
      }
    }
  
    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }
  
    var i
    if (dir) {
      var foundIndex = -1
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex
          foundIndex = -1
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
      for (i = byteOffset; i >= 0; i--) {
        var found = true
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false
            break
          }
        }
        if (found) return i
      }
    }
  
    return -1
  }
  
  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  }
  
  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  }
  
  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  }
  
  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }
  
    var strLen = string.length
  
    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (numberIsNaN(parsed)) return i
      buf[offset + i] = parsed
    }
    return i
  }
  
  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }
  
  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }
  
  function latin1Write (buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length)
  }
  
  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }
  
  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }
  
  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0
      if (isFinite(length)) {
        length = length >>> 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }
  
    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining
  
    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }
  
    if (!encoding) encoding = 'utf8'
  
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)
  
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)
  
        case 'ascii':
          return asciiWrite(this, string, offset, length)
  
        case 'latin1':
        case 'binary':
          return latin1Write(this, string, offset, length)
  
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  
  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }
  
  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }
  
  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []
  
    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF) ? 4
        : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
            : 1
  
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint
  
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }
  
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }
  
      res.push(codePoint)
      i += bytesPerSequence
    }
  
    return decodeCodePointsArray(res)
  }
  
  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000
  
  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }
  
    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }
  
  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }
  
  function latin1Slice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }
  
  function hexSlice (buf, start, end) {
    var len = buf.length
  
    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len
  
    var out = ''
    for (var i = start; i < end; ++i) {
      out += toHex(buf[i])
    }
    return out
  }
  
  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    for (var i = 0; i < bytes.length; i += 2) {
      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
    }
    return res
  }
  
  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end
  
    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }
  
    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }
  
    if (end < start) end = start
  
    var newBuf = this.subarray(start, end)
    // Return an augmented `Uint8Array` instance
    newBuf.__proto__ = Buffer.prototype
    return newBuf
  }
  
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }
  
  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
  
    return val
  }
  
  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }
  
    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }
  
    return val
  }
  
  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }
  
  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }
  
  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }
  
  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }
  
  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }
  
  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80
  
    if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  
    return val
  }
  
  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80
  
    if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  
    return val
  }
  
  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }
  
  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }
  
  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }
  
  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }
  
  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }
  
  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }
  
  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }
  
  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }
  
  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }
  
  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }
  
  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }
  
    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }
  
    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    this[offset] = (value & 0xff)
    return offset + 1
  }
  
  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }
  
  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }
  
  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
    return offset + 4
  }
  
  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }
  
  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)
  
      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }
  
    var i = 0
    var mul = 1
    var sub = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)
  
      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }
  
    var i = byteLength - 1
    var mul = 1
    var sub = 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }
  
  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }
  
  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }
  
  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
    return offset + 4
  }
  
  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }
  
  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }
  
  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }
  
  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }
  
  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }
  
  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }
  
  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }
  
  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }
  
  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start
  
    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0
  
    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')
  
    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }
  
    var len = end - start
  
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end)
    } else if (this === target && start < targetStart && targetStart < end) {
      // descending copy from end
      for (var i = len - 1; i >= 0; --i) {
        target[i + targetStart] = this[i + start]
      }
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      )
    }
  
    return len
  }
  
  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start
        start = 0
        end = this.length
      } else if (typeof end === 'string') {
        encoding = end
        end = this.length
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0)
        if ((encoding === 'utf8' && code < 128) ||
            encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255
    }
  
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }
  
    if (end <= start) {
      return this
    }
  
    start = start >>> 0
    end = end === undefined ? this.length : end >>> 0
  
    if (!val) val = 0
  
    var i
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val
      }
    } else {
      var bytes = Buffer.isBuffer(val)
        ? val
        : Buffer.from(val, encoding)
      var len = bytes.length
      if (len === 0) {
        throw new TypeError('The value "' + val +
          '" is invalid for argument "value"')
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len]
      }
    }
  
    return this
  }
  
  // HELPER FUNCTIONS
  // ================
  
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
  
  function base64clean (str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0]
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }
  
  function toHex (n) {
    if (n < 16) return '0' + n.toString(16)
    return n.toString(16)
  }
  
  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []
  
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i)
  
      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }
  
          // valid lead
          leadSurrogate = codePoint
  
          continue
        }
  
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }
  
        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }
  
      leadSurrogate = null
  
      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }
  
    return bytes
  }
  
  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }
  
  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break
  
      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }
  
    return byteArray
  }
  
  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }
  
  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }
  
  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance (obj, type) {
    return obj instanceof type ||
      (obj != null && obj.constructor != null && obj.constructor.name != null &&
        obj.constructor.name === type.name)
  }
  function numberIsNaN (obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
  }
  
  }).call(this)}).call(this,require("buffer").Buffer)
  },{"base64-js":83,"buffer":84,"ieee754":87}],85:[function(require,module,exports){
  /*
  Copyright (c) 2009-2019 Frank Bennett
  
    This program is free software: you can redistribute it and/or
    modify it under EITHER
  
        * the terms of the Common Public Attribution License (CPAL) as
        published by the Open Source Initiative, either version 1 of
        the CPAL, or (at your option) any later version; OR
  
        * the terms of the GNU Affero General Public License (AGPL)
          as published by the Free Software Foundation, either version
          3 of the AGPL, or (at your option) any later version.
  
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Affero General Public License for more details.
  
    You should have received copies of the Common Public Attribution
      License and of the GNU Affero General Public License along with
      this program.  If not, see <https://opensource.org/licenses/> or
      <http://www.gnu.org/licenses/> respectively.
  */
  /*global CSL: true */
  
  /**
   * A Javascript implementation of the CSL citation formatting language.
   *
   * <p>A configured instance of the process is built in two stages,
   * using {@link CSL.Core.Build} and {@link CSL.Core.Configure}.
   * The former sets up hash-accessible locale data and imports the CSL format file
   * to be applied to the citations,
   * transforming it into a one-dimensional token list, and
   * registering functions and parameters on each token as appropriate.
   * The latter sets jump-point information
   * on tokens that constitute potential branch
   * points, in a single back-to-front scan of the token list.
   * This
   * yields a token list that can be executed front-to-back by
   * body methods available on the
   * {@link CSL.Engine} class.</p>
   *
   * <p>This top-level {@link CSL} object itself carries
   * constants that are needed during processing.</p>
   * @namespace A CSL citation formatter.
   */
  
  // IE6 does not implement Array.indexOf().
  // IE7 neither, according to rumour.
  
  
  // Potential skip words:
  // under; along; out; between; among; outside; inside; amid; amidst; against; toward; towards.
  // See https://forums.zotero.org/discussion/30484/?Focus=159613#Comment_159613
  
  'use strict';
  
  
  var CSL = {
  
      PROCESSOR_VERSION: "1.4.61",
  
      error: function(str) { // default error function
          if ("undefined" === typeof Error) {
              throw new Error("citeproc-js error: " + str);
          } else {
              throw "citeproc-js error: " + str;
          }
      },
      debug: function(str) { // default debug function
          if ("undefined" === typeof console) {
              dump("CSL: " + str + "\n");
          } else {
              console.log("citeproc-js warning: " + str);
          }
      },
  
      toLocaleUpperCase(str) {
          var arr = this.tmp.lang_array;
          try {
              str = str.toLocaleUpperCase(arr);
          } catch (e) {
              str = str.toUpperCase();
          }
          return str;
      },
  
      toLocaleLowerCase(str) {
          var arr = this.tmp.lang_array;
          try {
              str = str.toLocaleLowerCase(arr);
          } catch (e) {
              str = str.toLowerCase();
          }
          return str;
      },
  
      LOCATOR_LABELS_REGEXP: new RegExp("^((vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\\.)\\s+(.*)"),
  
      STATUTE_SUBDIV_PLAIN_REGEX: /(?:(?:^| )(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
      STATUTE_SUBDIV_PLAIN_REGEX_FRONT: /(?:^\s*[.,;]*\s*(?:vrs|sv|subpara|op|subch|add|amend|annot|app|art|bibliog|bk|ch|cl|col|cmt|dec|dept|div|ex|fig|fld|fol|n|hypo|illus|intro|l|no|p|pp|para|pt|pmbl|princ|pub|r|rn|sched|sec|ser|subdiv|subsec|supp|tbl|tit|vol)\. *)/,
   
      STATUTE_SUBDIV_STRINGS: {
          "vrs.": "verse",
      "sv.": "sub-verbo",
          "subpara.": "subparagraph",
          "op.": "opus",
          "subch.": "subchapter",
          "add.": "addendum",
          "amend.": "amendment",
          "annot.": "annotation",
          "app.": "appendix",
          "art.": "article",
          "bibliog.": "bibliography",
          "bk.": "book",
          "ch.": "chapter",
          "cl.": "clause",
          "col.": "column",
          "cmt.": "comment",
          "dec.": "decision",
          "dept.": "department",
          "ex.": "example",
          "fig.": "figure",
          "fld.": "field",
          "fol.": "folio",
          "n.": "note",
          "hypo.": "hypothetical",
          "illus.": "illustration",
          "intro.": "introduction",
          "l.": "line",
          "no.": "issue",
          "p.": "page",
          "pp.": "page",
          "para.": "paragraph",
          "pt.": "part",
          "pmbl.": "preamble",
          "princ.": "principle",
          "pub.": "publication",
          "r.": "rule",
          "rn.": "randnummer",
          "sched.": "schedule",
          "sec.": "section",
          "ser.": "series,",
          "subdiv.": "subdivision",
          "subsec.": "subsection",
          "supp.": "supplement",
          "tbl.": "table",
          "tit.": "title",
          "vol.": "volume"
      },
      STATUTE_SUBDIV_STRINGS_REVERSE: {
          "verse": "vrs.",
      "sub-verbo": "sv.",
          "sub verbo": "sv.",
          "subparagraph": "subpara.",
          "opus": "op.",
          "subchapter": "subch.",
          "addendum": "add.",
          "amendment": "amend.",
          "annotation": "annot.",
          "appendix": "app.",
          "article": "art.",
          "bibliography": "bibliog.",
          "book": "bk.",
          "chapter": "ch.",
          "clause": "cl.",
          "column": "col.",
          "comment": "cmt.",
          "decision": "dec.",
          "department": "dept.",
          "example": "ex.",
          "figure": "fig.",
          "field": "fld.",
          "folio": "fol.",
          "note": "n.",
          "hypothetical": "hypo.",
          "illustration": "illus.",
          "introduction": "intro.",
          "line": "l.",
          "issue": "no.",
          "page": "p.",
          "paragraph": "para.",
          "part": "pt.",
          "preamble": "pmbl.",
          "principle": "princ.",
          "publication": "pub.",
          "rule": "r.",
          "randnummer": "rn.",
          "schedule": "sched.",
          "section": "sec.",
          "series,": "ser.",
          "subdivision": "subdiv.",
          "subsection": "subsec.",
          "supplement": "supp.",
          "table": "tbl.",
          "title": "tit.",
          "volume": "vol."
      },
  
      LOCATOR_LABELS_MAP: {
          "vrs": "verse",
      "sv": "sub-verbo",
          "subpara": "subparagraph",
          "op": "opus",
          "subch": "subchapter",
          "add": "addendum",
          "amend": "amendment",
          "annot": "annotation",
          "app": "appendix",
          "art": "article",
          "bibliog": "bibliography",
          "bk": "book",
          "ch": "chapter",
          "cl": "clause",
          "col": "column",
          "cmt": "comment",
          "dec": "decision",
          "dept": "department",
          "ex": "example",
          "fig": "figure",
          "fld": "field",
          "fol": "folio",
          "n": "note",
          "hypo": "hypothetical",
          "illus": "illustration",
          "intro": "introduction",
          "l": "line",
          "no": "issue",
          "p": "page",
          "pp": "page",
          "para": "paragraph",
          "pt": "part",
          "pmbl": "preamble",
          "princ": "principle",
          "pub": "publication",
          "r": "rule",
          "rn": "randnummer",
          "sched": "schedule",
          "sec": "section",
          "ser": "series,",
          "subdiv": "subdivision",
          "subsec": "subsection",
          "supp": "supplement",
          "tbl": "table",
          "tit": "title",
          "vol": "volume"
      },
      MODULE_MACROS: {
          "juris-pretitle": true,
          "juris-title": true,
          "juris-pretitle-short": true,
          "juris-title-short": true,
          "juris-main": true,
          "juris-main-short": true,
          "juris-tail": true,
          "juris-tail-short": true,
          "juris-locator": true
      },
      MODULE_TYPES: {
          "legal_case": true,
          "legislation": true,
          "bill": true,
          "hearing": true,
          "gazette": true,
          "report": true,
          "regulation": true,
          "standard": true,
          "patent": true,
          "locator": true
      },
      checkNestedBrace: function(state) {
          if (state.opt.xclass === "note") {
              this.depth = 0;
              this.update = function(str) {
                  
                  // Receives affix string, returns with flipped parens.
                  
                  var str = str ? str : "";
                  var lst = str.split(/([\(\)])/);
                  for (var i=1,ilen=lst.length;i<ilen;i += 2) {
                      if (lst[i] === "(") {
                          if (1 === (this.depth % 2)) {
                              lst[i] = "[";
                          }
                          this.depth += 1;
                      } else if (lst[i] === ")") {
                          if (0 === (this.depth % 2)) {
                              lst[i] = "]";
                          }
                          this.depth -= 1;
                      }
                  }
                  var ret = lst.join("");
                  return ret;
              };
          } else {
              this.update = function(str) {
                  return str;
              };
          }
      },
  
      MULTI_FIELDS: ["event", "publisher", "publisher-place", "event-place", "title", "container-title", "collection-title", "authority","genre","title-short","medium","country","jurisdiction","archive","archive-place"],
  
      LangPrefsMap: {
          "title":"titles",
          "title-short":"titles",
          "event":"titles",
          "genre":"titles",
          "medium":"titles",
          "container-title":"journals",
          "collection-title":"titles",
          "archive":"journals",
          "publisher":"publishers",
          "authority":"publishers",
          "publisher-place": "places",
          "event-place": "places",
          "archive-place": "places",
          "jurisdiction": "places",
          "number": "places",
          "edition":"places",
          "issue":"places",
          "volume":"places"
      },
  
      AbbreviationSegments: function () {
          this["container-title"] = {};
          this["collection-title"] = {};
          this["institution-entire"] = {};
          this["institution-part"] = {};
          this.nickname = {};
          this.number = {};
          this.title = {};
          this.place = {};
          this.hereinafter = {};
          this.classic = {};
          this["container-phrase"] = {};
          this["title-phrase"] = {};
      },
  
      getAbbrevsDomain: function (state, country, lang) {
      var domain = null;
          if (state.opt.availableAbbrevDomains && country && country !== "default") {
            var globalDomainPreference = state.locale[state.opt.lang].opts["jurisdiction-preference"];
          var itemDomainPreference = null;
          if (state.locale[lang]) {
            itemDomainPreference = state.locale[lang].opts["jurisdiction-preference"];
          }
          if (itemDomainPreference) {
            for (var j=itemDomainPreference.length-1; j > -1; j--) {
              if (state.opt.availableAbbrevDomains[country].indexOf(itemDomainPreference[j]) > -1) {
                domain = itemDomainPreference[j];
                break;
              }
            }
          }
          if (!domain && globalDomainPreference) {
            for (var j=globalDomainPreference.length-1; j > -1; j--) {
              if (state.opt.availableAbbrevDomains[country].indexOf(globalDomainPreference[j]) > -1) {
                domain = globalDomainPreference[j];
                break;
              }
            }
          }
          }
          return domain;
      },
      
      FIELD_CATEGORY_REMAP: {
          "title": "title",
          "container-title": "container-title",
          "collection-title": "collection-title",
          "country": "place",
          "number": "number",
          "place": "place",
          "archive": "container-title",
          "title-short": "title",
          "genre": "title",
          "event": "title",
          "medium": "title",
      "archive-place": "place",
      "publisher-place": "place",
      "event-place": "place",
      "jurisdiction": "place",
      "language-name": "place",
      "language-name-original": "place",
          "call-number": "number",
          "chapter-number": "number",
          "collection-number": "number",
          "edition": "number",
          "page": "number",
          "issue": "number",
          "locator": "number",
          "locator-extra": "number",
          "number-of-pages": "number",
          "number-of-volumes": "number",
          "volume": "number",
          "citation-number": "number",
          "publisher": "institution-part"
      },
      
      parseLocator: function(item) {
          if (this.opt.development_extensions.locator_date_and_revision) {
              // Break out locator elements if necessary
              if (item.locator) {
                  item.locator = "" + item.locator;
                  var idx = item.locator.indexOf("|");
                  if (idx > -1) {
                      var raw_locator = item.locator;
                      item.locator = raw_locator.slice(0, idx);
                      raw_locator = raw_locator.slice(idx + 1);
                      var m = raw_locator.match(/^([0-9]{4}-[0-9]{2}-[0-9]{2}).*/);
                      if (m) {
                          item["locator-date"] = this.fun.dateparser.parseDateToObject(m[1]);
                          raw_locator = raw_locator.slice(m[1].length);
                      }
                      item["locator-extra"] = raw_locator.replace(/^\s+/, "").replace(/\s+$/, "");
                  }
              }
          }
          if (item.locator) {
              item.locator = ("" + item.locator).replace(/\s+$/, '');
          }
          return item;
      },
  
      normalizeLocaleStr: function(str) {
          if (!str) {
              return;
          }
          var lst = str.split('-');
          lst[0] = lst[0].toLowerCase();
          if (lst[1]) {
              lst[1] = lst[1].toUpperCase();
          }
          return lst.join("-");
      },
  
      parseNoteFieldHacks: function(Item, validFieldsForType, allowDateOverride) {
          if ("string" !== typeof Item.note) {
              return;
          }
          var elems = [];
          var lines = Item.note.split('\n');
          // Normalize entries
          for (var i=0, ilen=lines.length; i<ilen; i++) {
              var line = lines[i];
              var elems = [];
              var m = line.match(CSL.NOTE_FIELDS_REGEXP);
              if (m) {
                  var splt = line.split(CSL.NOTE_FIELDS_REGEXP);
                  for (var j=0,jlen=(splt.length-1);j<jlen;j++) {
                      elems.push(splt[j]);
                      elems.push(m[j]);
                  }
                  elems.push(splt[splt.length-1]);
                  for (var j=1,jlen=elems.length;j<jlen;j += 2) {
                      // Abort conversions if preceded by unparseable text
                      if (elems[j-1].trim() && (i>0 || j>1) && !elems[j-1].match(CSL.NOTE_FIELD_REGEXP)) {
                          break;
                      } else {
                          elems[j] = '\n' + elems[j].slice(2,-1).trim() + '\n';
                      }
                  }
                  lines[i] = elems.join('');
              }
          }
          // Resplit
          lines = lines.join('\n').split('\n');
          var offset = 0;
          var names = {};
          for (var i=0,ilen=lines.length;i<ilen;i++) {
              var line = lines[i];
              var mm = line.match(CSL.NOTE_FIELD_REGEXP);
              if (!line.trim()) {
                  continue;
              } else if (!mm) {
                  if (i === 0) {
                      continue;
                  } else {
                      offset = i;
                      break;
                  }
              }
              var key = mm[1];
              var val = mm[2].replace(/^\s+/, "").replace(/\s+$/, "");
              if (key === "type") {
                  Item.type = val;
                  lines[i] = "";
              } else if (CSL.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                  if (!Item[key] || allowDateOverride) {
                      Item[key] = CSL.DateParser.parseDateToArray(val);
                      if (!validFieldsForType || (validFieldsForType[key] && this.isDateString(val))) {
                          lines[i] = "";
                      }
                  }
              } else if (!Item[key]) {
                  if (CSL.NAME_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
                      if (!names[key]) {
                          names[key] = [];
                      }
                      var lst = val.split(/\s*\|\|\s*/);
                      if (lst.length === 1) {
                          names[key].push({literal:lst[0]});
                      } else if (lst.length === 2) {
                          var name = {family:lst[0],given:lst[1]};
                          CSL.parseParticles(name);
                          names[key].push(name);
                      }
                  } else {
                      Item[key] = val;
                  }
                  if (!validFieldsForType || validFieldsForType[key]) {
                      lines[i] = "";
                  }
              }
          }
          for (var key in names) {
              Item[key] = names[key];
          }
          // Final cleanup for validCslFields only: eliminate blank lines, add blank line to text
          if (validFieldsForType) {
              if (lines[offset].trim()) {
                  lines[offset] = '\n' + lines[offset];
              }
              for (var i=offset-1;i>-1;i--) {
                  if (!lines[i].trim()) {
                      lines = lines.slice(0, i).concat(lines.slice(i + 1));
                  }
              }
          }
          Item.note = lines.join("\n").trim();
      },
  
      checkPrefixSpaceAppend: function (state, prefix) {
          if (!prefix) {
              prefix = "";
          }
          var sp = "";
          // We need the raw string, without decorations
          // of any kind. Markup scheme is known, though, so
          // markup can be safely stripped at string level.
          //
          // U+201d = right double quotation mark
          // U+2019 = right single quotation mark
          // U+00bb = right double angle bracket (guillemet)
          // U+202f = non-breaking thin space
          // U+00a0 = non-breaking space
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g,"");
          var test_char = test_prefix.slice(-1);
          if (test_prefix.match(CSL.ENDSWITH_ROMANESQUE_REGEXP)) {
              sp = " ";
          } else if (CSL.TERMINAL_PUNCTUATION.slice(0,-1).indexOf(test_char) > -1) {
              sp = " ";
          } else if (test_char.match(/[\)\],0-9]/)) {
              sp = " ";
          }
          // Protect against double spaces, which would trigger an extra,
          // explicit, non-breaking space.
          var prefix = (prefix + sp).replace(/\s+/g, " ");
          return prefix;
      },
  
      checkIgnorePredecessor: function(state, prefix) {
          var ignorePredecessor = false;
          var test_prefix = prefix.replace(/<[^>]+>/g, "").replace(/["'\u201d\u2019\u00bb\u202f\u00a0 ]+$/g,"");
          var test_char = test_prefix.slice(-1);
          if (CSL.TERMINAL_PUNCTUATION.slice(0,-1).indexOf(test_char) > -1 && prefix.trim().indexOf(" ") > -1) {
              state.tmp.term_predecessor = false;
              return true;
          }
          return false;
      },
  
      checkSuffixSpacePrepend: function(state, suffix) {
          if (!suffix) {
              return "";
          }
          if (suffix.match(CSL.STARTSWITH_ROMANESQUE_REGEXP) || ['[','('].indexOf(suffix.slice(0,1)) > -1) {
              suffix = " " + suffix;
          }
          return suffix;
      },
      
      GENDERS: ["masculine", "feminine"],
      
      ERROR_NO_RENDERED_FORM: 1,
  
      PREVIEW: "Just for laughs.",
      ASSUME_ALL_ITEMS_REGISTERED: 2,
  
      START: 0,
      END: 1,
      SINGLETON: 2,
  
      SEEN: 6,
      SUCCESSOR: 3,
      SUCCESSOR_OF_SUCCESSOR: 4,
      SUPPRESS: 5,
  
      SINGULAR: 0,
      PLURAL: 1,
  
      LITERAL: true,
  
      BEFORE: 1,
      AFTER: 2,
  
      DESCENDING: 1,
      ASCENDING: 2,
  
      PRIMARY: 1,
      SECONDARY: 2,
      
      POSITION_FIRST: 0,
      POSITION_SUBSEQUENT: 1,
      POSITION_IBID: 2,
      POSITION_IBID_WITH_LOCATOR: 3,
      POSITION_CONTAINER_SUBSEQUENT: 4,
  
      POSITION_MAP: {
          "0": 0,
          "4": 1,
          "1": 2,
          "2": 3,
          "3": 4
      },
      
      POSITION_TEST_VARS: ["position", "first-reference-note-number", "near-note"],
  
      AREAS: ["citation", "citation_sort", "bibliography", "bibliography_sort", "intext"],
  
      CITE_FIELDS: ["first-reference-note-number", "first-container-reference-note-number", "locator", "locator-extra"],
  
      SWAPPING_PUNCTUATION: [".", "!", "?", ":", ","],
      TERMINAL_PUNCTUATION: [":", ".", ";", "!", "?", " "],
  
      // update modes
      NONE: 0,
      NUMERIC: 1,
      POSITION: 2,
      TRIGRAPH: 3,
  
      DATE_PARTS: ["year", "month", "day"],
      DATE_PARTS_ALL: ["year", "month", "day", "season"],
      DATE_PARTS_INTERNAL: ["year", "month", "day", "year_end", "month_end", "day_end"],
  
      NAME_PARTS: ["non-dropping-particle", "family", "given", "dropping-particle", "suffix", "literal"],
  
      DISAMBIGUATE_OPTIONS: [
          "disambiguate-add-names",
          "disambiguate-add-givenname",
          "disambiguate-add-year-suffix"
      ],
  
      GIVENNAME_DISAMBIGUATION_RULES: [
          "all-names",
          "all-names-with-initials",
          "primary-name",
          "primary-name-with-initials",
          "by-cite"
      ],
  
      NAME_ATTRIBUTES: [
          "and",
          "delimiter-precedes-last",
          "delimiter-precedes-et-al",
          "initialize-with",
          "initialize",
          "name-as-sort-order",
          "sort-separator",
          "et-al-min",
          "et-al-use-first",
          "et-al-subsequent-min",
          "et-al-subsequent-use-first",
          "form",
          "prefix",
          "suffix",
          "delimiter"
      ],
  
      LOOSE: 0,
      STRICT: 1,
      TOLERANT: 2,
  
      PREFIX_PUNCTUATION: /[.;:]\s*$/,
      SUFFIX_PUNCTUATION: /^\s*[.;:,\(\)]/,
  
      NUMBER_REGEXP: /(?:^\d+|\d+$)/,
      //
      // \u0400-\u042f are cyrillic and extended cyrillic capitals
      // this is not fully smart yet.  can't do what this was trying to do
      // with regexps, actually; we want to identify strings with a leading
      // capital letter, and any subsequent capital letters.  Have to compare
      // locale caps version with existing version, character by character.
      // hard stuff, but if it breaks, that's what to do.
      // \u0600-\u06ff is Arabic/Persian
      // \u200c-\u200e and \u202a-\u202e are special spaces and left-right 
      // control characters
  
  
  
      NAME_INITIAL_REGEXP: /^([A-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u042f\u0590-\u05d4\u05d6-\u05ff\u0600-\u06ff\u0370\u0372\u0376\u0386\u0388-\u03ab\u03e2\u03e4\u03e6\u03e8\u03ea\u03ec\u03ee\u03f4\u03f7\u03fd-\u03ff])([a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0400-\u052f\u0600-\u06ff\u0370-\u03ff\u1f00-\u1fff]*|)(\.)*/,
      ROMANESQUE_REGEXP: /[-0-9a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
      ROMANESQUE_NOT_REGEXP: /[^a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/g,
      STARTSWITH_ROMANESQUE_REGEXP: /^[&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]/,
      ENDSWITH_ROMANESQUE_REGEXP: /[.;:&a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]$/,
      ALL_ROMANESQUE_REGEXP: /^[a-zA-Z\u0e01-\u0e5b\u00c0-\u017f\u0370-\u03ff\u0400-\u052f\u0590-\u05d4\u05d6-\u05ff\u1f00-\u1fff\u0600-\u06ff\u200c\u200d\u200e\u0218\u0219\u021a\u021b\u202a-\u202e]+$/,
  
      VIETNAMESE_SPECIALS: /[\u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]/,
  
      VIETNAMESE_NAMES: /^(?:(?:[.AaBbCcDdEeGgHhIiKkLlMmNnOoPpQqRrSsTtUuVvXxYy \u00c0-\u00c3\u00c8-\u00ca\u00cc\u00cd\u00d2-\u00d5\u00d9\u00da\u00dd\u00e0-\u00e3\u00e8-\u00ea\u00ec\u00ed\u00f2-\u00f5\u00f9\u00fa\u00fd\u0101\u0103\u0110\u0111\u0128\u0129\u0168\u0169\u01a0\u01a1\u01af\u01b0\u1ea0-\u1ef9]{2,6})(\s+|$))+$/,
  
      NOTE_FIELDS_REGEXP: /\{:(?:[\-_a-z]+|[A-Z]+):[^\}]+\}/g,
      NOTE_FIELD_REGEXP: /^([\-_a-z]+|[A-Z]+):\s*([^\}]+)$/,
  
    PARTICLE_GIVEN_REGEXP: /^([^ ]+(?:\u02bb |\u2019 | |\' ) *)(.+)$/,
    PARTICLE_FAMILY_REGEXP: /^([^ ]+(?:\-|\u02bb|\u2019| |\') *)(.+)$/,
  
      DISPLAY_CLASSES: ["block", "left-margin", "right-inline", "indent"],
  
      NAME_VARIABLES: [
          "author",
          "chair",
          "collection-editor",
          "compiler",
          "composer",
          "container-author",
          "contributor",
          "curator",
          "director",
          "editor",
          "editor-translator", 
          "editorial-director",
          "executive-producer",
          "guest",
          "host",
          "illustrator",
          "interviewer",
          "narrator", 
          "organizer",
          "original-author",
          "performer",
          "producer",
          "recipient",
          "reviewed-author",
          "script-writer",
          "series-creator",
          "translator",
          "commenter"
      ],
      CREATORS: [
          "author",
          "chair",
          "collection-editor",
          "compiler",
          "composer",
          "container-author",
          "contributor",
          "curator",
          "director",
          "editor",
          "editor-translator", 
          "editorial-director",
          "executive-producer",
          "guest",
          "host",
          "illustrator",
          "interviewer",
          "narrator", 
          "organizer",
          "original-author",
          "performer",
          "producer",
          "recipient",
          "reviewed-author",
          "script-writer",
          "series-creator",
          "translator",
          "commenter"
      ],
      NUMERIC_VARIABLES: [
          "call-number",
          "chapter-number",
          "collection-number",
          "division",
          "edition",
          "page",
          "issue",
          "locator",
          "locator-extra",
          "number",
          "number-of-pages",
          "number-of-volumes",
          "part-number",
          "printing-number",
          "section",
          "supplement-number",
          "version",
          "volume",
          "supplement", // maybe deprecated this? supplement-number should serve this purpose in standard CSL.
          "citation-number"
      ],
      //var x = new Array();
      //x = x.concat(["title","container-title","issued","page"]);
      //x = x.concat(["locator","collection-number","original-date"]);
      //x = x.concat(["reporting-date","decision-date","filing-date"]);
      //x = x.concat(["revision-date"]);
      //NUMERIC_VARIABLES = x.slice();
      DATE_VARIABLES: [
          "locator-date", 
          "issued", 
          "event-date", 
          "accessed", 
          "original-date",
          "publication-date",
          "available-date",
          "submitted",
          "alt-issued",
          "alt-event"
      ],
      VARIABLES_WITH_SHORT_FORM: [
          "title",
          "container-title"
      ],
      TITLE_FIELD_SPLITS: function(seg) {
          var keys = ["title", "short", "main", "sub", "subjoin"];
          var ret = {};
          for (var i=0,ilen=keys.length;i<ilen;i++) {
              ret[keys[i]] = seg + "title" + (keys[i] === "title" ? "" : "-" + keys[i]);
          }
          return ret;
      },
      
      demoteNoiseWords: function (state, fld, drop_or_demote) {
          var SKIP_WORDS = state.locale[state.opt.lang].opts["leading-noise-words"];
          if (fld && drop_or_demote) {
              fld = fld.split(/\s+/);
              fld.reverse();
              var toEnd = [];
              for (var j  = fld.length - 1; j > -1; j += -1) {
                  if (SKIP_WORDS.indexOf(fld[j].toLowerCase()) > -1) {
                      toEnd.push(fld.pop());
                  } else {
                      break;
                  }
              }
              fld.reverse();
              var start = fld.join(" ");
              var end = toEnd.join(" ");
              if ("drop" === drop_or_demote || !end) {
                  fld = start;
              } else if ("demote" === drop_or_demote) {
                  fld = [start, end].join(", ");
              }
          }
          return fld;
      },
  
      extractTitleAndSubtitle: function (Item, narrowSpaceLocale) {
          var narrowSpace = narrowSpaceLocale ? "\u202f" : "";
          // XXX In this function, split on split-char, but prefer exact match
          // XXX of subtitle to a split-char in title if found.
          var segments = [""];
          if (this.opt.development_extensions.split_container_title) {
              segments.push("container-");
          }
          for (var i=0,ilen=segments.length;i<ilen;i++) {
              var seg = segments[i];
              var title = CSL.TITLE_FIELD_SPLITS(seg);
              var langs = [false];
              if (Item.multi) {
                  for (var lang in Item.multi._keys[title.short]) {
                      langs.push(lang);
                  }
              }
              for (var j=0,jlen=langs.length;j<jlen;j++) {
                  var lang = langs[j];
                  var vals = {};
                  if (lang) {
                      if (Item.multi._keys[title.title]) {
                          vals[title.title] = Item.multi._keys[title.title][lang];
                      }
                      if (Item.multi._keys[title["short"]]) {
                          vals[title["short"]] = Item.multi._keys[title["short"]][lang];
                      }
                  } else {
                      vals[title.title] = Item[title.title];
                      vals[title["short"]] = Item[title["short"]];
                  }
                  vals[title.main] = vals[title.title];
                  vals[title.sub] = false;
                  var shortTitle = vals[title["short"]];
                  if (vals[title.title]) {
                      // Rules
                      // TITLE_SPLIT eliminates split-points of period-space preceded by a capital letter.
                      // If short title exists and matches exactly to a split-point, use that split-point only.
                      // Otherwise if there is just one split-point, use that as main/sub split.
                      // Otherwise use all split-points ... which is handled in titleCaseSentenceOrNormal, not here.
                      if (shortTitle && shortTitle.toLowerCase() === vals[title.title].toLowerCase()) {
                          vals[title.main] = vals[title.title];
                          vals[title.subjoin] = "";
                          vals[title.sub] = "";
                      } else if (shortTitle) {
                          // check for valid match to shortTitle
                          var tail = vals[title.title].slice(shortTitle.replace(/[\?\!]+$/, "").length);
                          var top = vals[title.title].replace(tail.replace(/^[\?\!]+/, ""), "").trim();
                          var m = CSL.TITLE_SPLIT_REGEXP.matchfirst.exec(tail);
                          if (m && top.toLowerCase() === shortTitle.toLowerCase()) {
                              vals[title.main] = top;
                              vals[title.subjoin] = m[1].replace(/[\?\!]+(\s*)$/, "$1");
                              vals[title.sub] = tail.replace(CSL.TITLE_SPLIT_REGEXP.matchfirst, "");
                              if (this.opt.development_extensions.force_short_title_casing_alignment) {
                                  vals[title["short"]] = vals[title.main];
                              }
                          } else {
                              var splitTitle = CSL.TITLE_SPLIT(vals[title.title]);
                              if (splitTitle.length == 3) {
                                  vals[title.main] = splitTitle[0];
                                  vals[title.subjoin] = splitTitle[1];
                                  vals[title.sub] = splitTitle[2];
                              } else {
                                  vals[title.main] = vals[title.title];
                                  vals[title.subjoin] = "";
                                  vals[title.sub] = "";
                              }
                          }
                      } else {
                          var splitTitle = CSL.TITLE_SPLIT(vals[title.title]);
                          if (splitTitle.length == 3) {
                              vals[title.main] = splitTitle[0];
                              vals[title.subjoin] = splitTitle[1];
                              vals[title.sub] = splitTitle[2];
                              if (this.opt.development_extensions.implicit_short_title && Item.type !== "legal_case") {
                                  if (!Item[title.short] && !vals[title.main].match(/^[\-\.[0-9]+$/)) {
                                      var punct = vals[title.subjoin].trim();
                                      if (["?", "!"].indexOf(punct) === -1) {
                                          punct = "";
                                      }
                                      vals[title.short] = vals[title.main] + punct;
                                  }
                              }
                          } else {
                              vals[title.main] = vals[title.title];
                              vals[title.subjoin] = "";
                              vals[title.sub] = "";
                          }
                      }
                      if (vals[title.subjoin]) {
                          if (vals[title.subjoin].match(/([\?\!])/)) {
                              var m = vals[title.subjoin].match(/(\s*)$/)
                              vals[title.main] = vals[title.main] + narrowSpace +vals[title.subjoin].trim();
                              vals[title.subjoin] = m[1];
                          }
                      }
                  }
                  if (vals[title.subjoin]) {
                      if (vals[title.subjoin].indexOf(":") > -1) {
                          vals[title.subjoin] = narrowSpace + ": ";
                      }
                      if (vals[title.subjoin].indexOf("-") > -1 || vals[title.subjoin].indexOf("â€”") > -1) {
                          vals[title.subjoin] = "â€”";
                      }
                  }
                  if (lang) {
                      for (var key in vals) {
                          if (!Item.multi._keys[key]) {
                              Item.multi._keys[key] = {};
                          }
                          Item.multi._keys[key][lang] = vals[key];
                      }
                  } else {
                      for (var key in vals) {
                          Item[key] = vals[key];
                      }
                  }
              }
          }
      },
  
      titlecaseSentenceOrNormal: function(state, Item, seg, lang, sentenceCase) {
          // Hold on here.
          // What is seg here?
          // It's ... either "" or "container-". Which is ugly, but works.
          // But this ALWAYS returns the full title, never short.
          // So sentence-casing cannot be applied to short.
          // Goes unnoticed because forced sentence-casing almost never appears in styles.
          var title = CSL.TITLE_FIELD_SPLITS(seg);
          var vals = {};
          if (lang && Item.multi) {
              if (Item.multi._keys[title.title]) {
                  vals[title.title] = Item.multi._keys[title.title][lang];
              }
              if (Item.multi._keys[title.main]) {
                  vals[title.main] = Item.multi._keys[title.main][lang];
              }
              if (Item.multi._keys[title.sub]) {
                  vals[title.sub] = Item.multi._keys[title.sub][lang];
              }
              if (Item.multi._keys[title.subjoin]) {
                  vals[title.subjoin] = Item.multi._keys[title.subjoin][lang];
              }
          } else {
              vals[title.title] = Item[title.title];
              vals[title.main] = Item[title.main];
              vals[title.sub] = Item[title.sub];
              vals[title.subjoin] = Item[title.subjoin];
          }
          if (vals[title.main] && vals[title.sub]) {
              var mainTitle = vals[title.main];
              var subJoin = vals[title.subjoin];
              var subTitle = vals[title.sub];
              if (sentenceCase) {
                  mainTitle = CSL.Output.Formatters.sentence(state, mainTitle);
                  subTitle = CSL.Output.Formatters.sentence(state, subTitle);
              } else if (state.opt.development_extensions.uppercase_subtitles) {
                  subTitle = CSL.Output.Formatters["capitalize-first"](state, subTitle);
              }
              return [mainTitle, subJoin, subTitle].join("");
          } else if (vals[title.title]) {
              if (sentenceCase) {
                  return CSL.Output.Formatters.sentence(state, vals[title.title]);
              } else if (state.opt.development_extensions.uppercase_subtitles) {
                  // Split and apply everywhere.
                  var splits = CSL.TITLE_SPLIT(vals[title.title]);
                  for (var i=0,ilen=splits.length; i<ilen; i += 2) {
                      splits[i] = CSL.Output.Formatters["capitalize-first"](state, splits[i]);
                  }
                  for (var i=1, ilen=splits.length-1; i < ilen; i += 2) {
                      var m = splits[i].match(/([:\?\!] )/);
                      if (m) {
                          var narrowSpace = state.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr" ? "\u202f" : "";
                          splits[i] = narrowSpace + m[1];
                      }
                      if (splits[i].indexOf("-") > -1 || splits[i].indexOf("â€”") > -1) {
                          splits[i] = "â€”";
                      }
                  }
                  vals[title.title] = splits.join("");
                  return vals[title.title];
              } else {
                  return vals[title.title];
              }
          } else {
              return "";
          }
      },
  
      getSafeEscape: function(state) {
          if (["bibliography", "citation"].indexOf(state.tmp.area) > -1) {
              // Callback to apply thin space hack
              // Callback to force LTR/RTL on parens and braces
              // XXX Is this really necessary?
              var callbacks = [];
              if (state.opt.development_extensions.thin_non_breaking_space_html_hack && state.opt.mode === "html") {
                  callbacks.push(function (txt) {
                      return txt.replace(/\u202f/g, '<span style="white-space:nowrap">&thinsp;</span>');
                  });
              }
              if (callbacks.length) {
                  return function (txt) {
                      for (var i = 0, ilen = callbacks.length; i < ilen; i += 1) {
                          txt = callbacks[i](txt);
                      }
                      return CSL.Output.Formats[state.opt.mode].text_escape(txt);
                  };
              } else {
                  return CSL.Output.Formats[state.opt.mode].text_escape;
              }
          } else {
              return function (txt) { return txt; };
          }
      },
  
      SKIP_WORDS: ["about","above","across","afore","after","against","al", "along","alongside","amid","amidst","among","amongst","anenst","apropos","apud","around","as","aside","astride","at","athwart","atop","barring","before","behind","below","beneath","beside","besides","between","beyond","but","by","circa","despite","down","during","et", "except","for","forenenst","from","given","in","inside","into","lest","like","modulo","near","next","notwithstanding","of","off","on","onto","out","over","per","plus","pro","qua","sans","since","than","through"," thru","throughout","thruout","till","to","toward","towards","under","underneath","until","unto","up","upon","versus","vs.","v.","vs","v","via","vis-Ã -vis","with","within","without","according to","ahead of","apart from","as for","as of","as per","as regards","aside from","back to","because of","close to","due to","except for","far from","inside of","instead of","near to","next to","on to","out from","out of","outside of","prior to","pursuant to","rather than","regardless of","such as","that of","up to","where as","or", "yet", "so", "for", "and", "nor", "a", "an", "the", "de", "d'", "von", "van", "c", "ca"],
  
      FORMAT_KEY_SEQUENCE: [
          "@strip-periods",
          "@font-style",
          "@font-variant",
          "@font-weight",
          "@text-decoration",
          "@vertical-align",
          "@quotes"
      ],
  
      INSTITUTION_KEYS: [
          "font-style",
          "font-variant",
          "font-weight",
          "text-decoration",
          "text-case"
      ],
  
      SUFFIX_CHARS: "a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z",
      ROMAN_NUMERALS: [
          [ "", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix" ],
          [ "", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc" ],
          [ "", "c", "cc", "ccc", "cd", "d", "dc", "dcc", "dccc", "cm" ],
          [ "", "m", "mm", "mmm", "mmmm", "mmmmm"]
      ],
  
      LANGS: {
          "af-ZA":"Afrikaans",
          "ar":"Arabic",
          "bg-BG":"Bulgarian",
          "ca-AD":"Catalan",
          "cs-CZ":"Czech",
          "da-DK":"Danish",
          "de-AT":"Austrian",
          "de-CH":"German (CH)",
          "de-DE":"German (DE)",
          "el-GR":"Greek",
          "en-GB":"English (GB)",
          "en-US":"English (US)",
          "es-ES":"Spanish",
          "et-EE":"Estonian",
          "eu":"European",
          "fa-IR":"Persian",
          "fi-FI":"Finnish",
          "fr-CA":"French (CA)",
          "fr-FR":"French (FR)",
          "he-IL":"Hebrew",
          "hr-HR":"Croatian",
          "hu-HU":"Hungarian",
          "is-IS":"Icelandic",
          "it-IT":"Italian",
          "ja-JP":"Japanese",
          "km-KH":"Khmer",
          "ko-KR":"Korean",
          "lt-LT":"Lithuanian",
          "lv-LV":"Latvian",
          "mn-MN":"Mongolian",
          "nb-NO":"Norwegian (BokmÃ¥l)",
          "nl-NL":"Dutch",
          "nn-NO":"Norwegian (Nynorsk)",
          "pl-PL":"Polish",
          "pt-BR":"Portuguese (BR)",
          "pt-PT":"Portuguese (PT)",
          "ro-RO":"Romanian",
          "ru-RU":"Russian",
          "sk-SK":"Slovak",
          "sl-SI":"Slovenian",
          "sr-RS":"Serbian",
          "sv-SE":"Swedish",
          "th-TH":"Thai",
          "tr-TR":"Turkish",
          "uk-UA":"Ukrainian",
          "vi-VN":"Vietnamese",
          "zh-CN":"Chinese (CN)",
          "zh-TW":"Chinese (TW)"
      },
  
      LANG_BASES: {
          af: "af_ZA",
          ar: "ar",
          bg: "bg_BG",
          ca: "ca_AD",
          cs: "cs_CZ",
          da: "da_DK",
          de: "de_DE",
          el: "el_GR",
          en: "en_US",
          es: "es_ES",
          et: "et_EE",
          eu: "eu",
          fa: "fa_IR",
          fi: "fi_FI",
          fr: "fr_FR",
          he: "he_IL",
          hr: "hr-HR",
          hu: "hu_HU",
          is: "is_IS",
          it: "it_IT",
          ja: "ja_JP",
          km: "km_KH",
          ko: "ko_KR",
          lt: "lt_LT",
          lv: "lv-LV",
          mn: "mn_MN",
          nb: "nb_NO",
          nl: "nl_NL",
          nn: "nn-NO",
          pl: "pl_PL",
          pt: "pt_PT",
          ro: "ro_RO",
          ru: "ru_RU",
          sk: "sk_SK",
          sl: "sl_SI",
          sr: "sr_RS",
          sv: "sv_SE",
          th: "th_TH",
          tr: "tr_TR",
          uk: "uk_UA",
          vi: "vi_VN",
          zh: "zh_CN"
      },
  
      SUPERSCRIPTS: {
          "\u00AA": "\u0061",
          "\u00B2": "\u0032",
          "\u00B3": "\u0033",
          "\u00B9": "\u0031",
          "\u00BA": "\u006F",
          "\u02B0": "\u0068",
          "\u02B1": "\u0266",
          "\u02B2": "\u006A",
          "\u02B3": "\u0072",
          "\u02B4": "\u0279",
          "\u02B5": "\u027B",
          "\u02B6": "\u0281",
          "\u02B7": "\u0077",
          "\u02B8": "\u0079",
          "\u02E0": "\u0263",
          "\u02E1": "\u006C",
          "\u02E2": "\u0073",
          "\u02E3": "\u0078",
          "\u02E4": "\u0295",
          "\u1D2C": "\u0041",
          "\u1D2D": "\u00C6",
          "\u1D2E": "\u0042",
          "\u1D30": "\u0044",
          "\u1D31": "\u0045",
          "\u1D32": "\u018E",
          "\u1D33": "\u0047",
          "\u1D34": "\u0048",
          "\u1D35": "\u0049",
          "\u1D36": "\u004A",
          "\u1D37": "\u004B",
          "\u1D38": "\u004C",
          "\u1D39": "\u004D",
          "\u1D3A": "\u004E",
          "\u1D3C": "\u004F",
          "\u1D3D": "\u0222",
          "\u1D3E": "\u0050",
          "\u1D3F": "\u0052",
          "\u1D40": "\u0054",
          "\u1D41": "\u0055",
          "\u1D42": "\u0057",
          "\u1D43": "\u0061",
          "\u1D44": "\u0250",
          "\u1D45": "\u0251",
          "\u1D46": "\u1D02",
          "\u1D47": "\u0062",
          "\u1D48": "\u0064",
          "\u1D49": "\u0065",
          "\u1D4A": "\u0259",
          "\u1D4B": "\u025B",
          "\u1D4C": "\u025C",
          "\u1D4D": "\u0067",
          "\u1D4F": "\u006B",
          "\u1D50": "\u006D",
          "\u1D51": "\u014B",
          "\u1D52": "\u006F",
          "\u1D53": "\u0254",
          "\u1D54": "\u1D16",
          "\u1D55": "\u1D17",
          "\u1D56": "\u0070",
          "\u1D57": "\u0074",
          "\u1D58": "\u0075",
          "\u1D59": "\u1D1D",
          "\u1D5A": "\u026F",
          "\u1D5B": "\u0076",
          "\u1D5C": "\u1D25",
          "\u1D5D": "\u03B2",
          "\u1D5E": "\u03B3",
          "\u1D5F": "\u03B4",
          "\u1D60": "\u03C6",
          "\u1D61": "\u03C7",
          "\u2070": "\u0030",
          "\u2071": "\u0069",
          "\u2074": "\u0034",
          "\u2075": "\u0035",
          "\u2076": "\u0036",
          "\u2077": "\u0037",
          "\u2078": "\u0038",
          "\u2079": "\u0039",
          "\u207A": "\u002B",
          "\u207B": "\u2212",
          "\u207C": "\u003D",
          "\u207D": "\u0028",
          "\u207E": "\u0029",
          "\u207F": "\u006E",
          "\u2120": "\u0053\u004D",
          "\u2122": "\u0054\u004D",
          "\u3192": "\u4E00",
          "\u3193": "\u4E8C",
          "\u3194": "\u4E09",
          "\u3195": "\u56DB",
          "\u3196": "\u4E0A",
          "\u3197": "\u4E2D",
          "\u3198": "\u4E0B",
          "\u3199": "\u7532",
          "\u319A": "\u4E59",
          "\u319B": "\u4E19",
          "\u319C": "\u4E01",
          "\u319D": "\u5929",
          "\u319E": "\u5730",
          "\u319F": "\u4EBA",
          "\u02C0": "\u0294",
          "\u02C1": "\u0295",
          "\u06E5": "\u0648",
          "\u06E6": "\u064A"
      },
      SUPERSCRIPTS_REGEXP: new RegExp("[\u00AA\u00B2\u00B3\u00B9\u00BA\u02B0\u02B1\u02B2\u02B3\u02B4\u02B5\u02B6\u02B7\u02B8\u02E0\u02E1\u02E2\u02E3\u02E4\u1D2C\u1D2D\u1D2E\u1D30\u1D31\u1D32\u1D33\u1D34\u1D35\u1D36\u1D37\u1D38\u1D39\u1D3A\u1D3C\u1D3D\u1D3E\u1D3F\u1D40\u1D41\u1D42\u1D43\u1D44\u1D45\u1D46\u1D47\u1D48\u1D49\u1D4A\u1D4B\u1D4C\u1D4D\u1D4F\u1D50\u1D51\u1D52\u1D53\u1D54\u1D55\u1D56\u1D57\u1D58\u1D59\u1D5A\u1D5B\u1D5C\u1D5D\u1D5E\u1D5F\u1D60\u1D61\u2070\u2071\u2074\u2075\u2076\u2077\u2078\u2079\u207A\u207B\u207C\u207D\u207E\u207F\u2120\u2122\u3192\u3193\u3194\u3195\u3196\u3197\u3198\u3199\u319A\u319B\u319C\u319D\u319E\u319F\u02C0\u02C1\u06E5\u06E6]", "g"),
  
      // I think we need to have separate args for prefix and term,
      // since they have different effects between comma-safe and comma-safe-numbers-only.
      // Either that, or -- oh, we could just bang the two together for the test where
      // necessary.
      
      UPDATE_GROUP_CONTEXT_CONDITION: function (state, str, valueTerm, token, value) {
          if (!state.opt.use_context_condition) return;
          var flags = state.tmp.group_context.tip;
          if (flags.condition) {
              if (!flags.condition.termtxt) {
                  flags.condition.termtxt = str;
                  flags.condition.valueTerm = valueTerm;
              }
              if (!flags.value_seen && flags.condition.test === "comma-safe-numbers-only") {
                  if (value) {
                      flags.value_seen = true;
                      if (!value.match(/^[0-9]/)) {
                          state.tmp.just_did_number = false;
                      }
                  }
              }
          } else {
              // If not inside a conditional group, raise numeric flag
              // if and only if the current term string ends in a number.
              if (token && token.decorations.filter(o => o[0] === "@vertical-align").length > 0) {
                  state.tmp.just_did_number = false;
              } else if (token && token.strings.suffix) {
                  state.tmp.just_did_number = false;
              } else if (str) {
                  if (str.match(/[0-9]$/)) {
                      state.tmp.just_did_number = true;
                  } else {
                      state.tmp.just_did_number = false;
                  }
              }
          }
      },
  
      EVALUATE_GROUP_CONDITION: function(state, flags) {
          if (!state.opt.use_context_condition) return;
          var testres;
          var numbersOnly = flags.condition.test === "comma-safe-numbers-only";
          if (flags.condition.test === "empty-label") {
              testres = !flags.condition.termtxt;
          } else if (flags.condition.test === "empty-label-no-decor") {
              testres = !flags.condition.termtxt || flags.condition.termtxt.indexOf("%s") > -1;
          } else if (["comma-safe", "comma-safe-numbers-only"].indexOf(flags.condition.test) > -1) {
              var locale_term = flags.condition.termtxt;
              var termStartAlpha = false;
              if (flags.condition.termtxt) {
                  termStartAlpha = flags.condition.termtxt.slice(0,1).match(CSL.ALL_ROMANESQUE_REGEXP);
              }
              var num = state.tmp.just_did_number;
              if (num) {
                  if (flags.condition.valueTerm) {
                      testres = numbersOnly ? false : true;
                  } else if (!locale_term) {
                      testres = true;
                  } else if (termStartAlpha) {
                      testres = numbersOnly ? false : true;
                  } else if (["always", "after-number"].indexOf(state.opt.require_comma_on_symbol) > -1) {
                      testres = true;
                  } else {
                      testres = false;
                  }
              } else {
                  if (flags.condition.valueTerm) {
                      testres = false;
                  } else if (!locale_term) {
                      testres = false;
                  } else if (termStartAlpha) {
                      testres = numbersOnly ? false : true;
                  } else if (state.opt.require_comma_on_symbol === "always") {
                      testres = true;
                  } else {
                      testres = false;
                  }
              }
          }
          if (testres) {
              var force_suppress = false;
          } else {
              var force_suppress = true;
          }
          if (flags.condition.not) {
              force_suppress = !force_suppress;
          }
          return force_suppress;
      },
      
      SYS_OPTIONS: [
          "prioritize_disambiguate_condition",
          "csl_reverse_lookup_support",
          "main_title_from_short_title",
          "uppercase_subtitles",
          "force_short_title_casing_alignment",
          "implicit_short_title",
          "split_container_title"
      ],
  
      TITLE_SPLIT_REGEXP: (function() {
          var splits = [
              "\\.\\s+",
              "\\!\\s+",
              "\\?\\s+",
              "\\s*::*\\s+",
              "\\s*â€”\\s*",
              "\\s+\\-\\s+",
              "\\s*\\-\\-\\-*\\s*"
          ]
          return {
              match: new RegExp("(" + splits.join("|") + ")", "g"),
              matchfirst: new RegExp("^(" + splits.join("|") + ")"),
              split: new RegExp("(?:" + splits.join("|") + ")")
          }
      })(),
  
      TITLE_SPLIT: function(str) {
          if (!str) {
              return str;
          }
          var m = str.match(CSL.TITLE_SPLIT_REGEXP.match);
          var lst = str.split(CSL.TITLE_SPLIT_REGEXP.split);
          for (var i=lst.length-2; i>-1; i--) {
              lst[i] = lst[i].trim();
              if (lst[i] && lst[i].slice(-1).toLowerCase() !== lst[i].slice(-1)) {
                  // recombine
                  lst[i] = lst[i] + m[i] + lst[i+1];
                  lst = lst.slice(0, i+1).concat(lst.slice(i+2))
              } else {
                  // merge
                  lst = lst.slice(0, i+1).concat([m[i]]).concat(lst.slice(i+1))
              }
          }
          return lst;
      },
      
      GET_COURT_CLASS: function(state, Item, sortKey){
          // Get authority as a string
          var cls = "";
          var authority = null;
          var country = Item.jurisdiction ? Item.jurisdiction.split(":")[0] : null;
          // inStyle versus in module
          var classType = "court_condition_classes";
          if (sortKey) {
              classType = "court_key_classes";
          }
          if (country && Item.authority) {
              if ("string" === typeof Item.authority) {
                  authority = Item.authority;
              } else {
                  if (Item.authority[0] && Item.authority[0].literal) {
                      authority = Item.authority[0].literal;
                  }
              }
          }
          if (authority) {
              if (this.lang && state.locale[this.lang].opts[classType] && state.locale[this.lang].opts[classType][country] && state.locale[this.lang].opts[classType][country][authority]) {
                  cls = state.locale[this.lang].opts[classType][country][authority];
              } else if (state.locale[state.opt["default-locale"][0]].opts[classType] && state.locale[state.opt["default-locale"][0]].opts[classType][country] && state.locale[state.opt["default-locale"][0]].opts[classType][country][authority]) {
                  cls = state.locale[state.opt["default-locale"][0]].opts[classType][country][authority]
              }
          }
          return cls;
      },
  
      SET_COURT_CLASSES: function(state, lang, myxml, dataObj) {
          var nodes = myxml.getNodesByName(dataObj, 'court-class');
          for (var pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
              var courtclass = nodes[pos];
              var attributes = myxml.attributes(courtclass);
              var cls = attributes["@name"];
              var country = attributes["@country"];
              var courts = attributes["@courts"];
              
              // Okay, this is a hack.
              // If state.registry IS NOT yet defined, this is an in-style declaration.
              // If state.registry IS defined, this is an in-module declaration.
              var classType = "court_key_classes";
              if (state.registry) {
                  classType = "court_condition_classes";
              }
              
              if (cls && country && courts) {
                  courts = courts.trim().split(/\s+/);
                  if (!state.locale[lang].opts[classType]) {
                      state.locale[lang].opts[classType] = {};
                  }
                  if (!state.locale[lang].opts[classType][country]) {
                      state.locale[lang].opts[classType][country] = {};
                  }
                  for (var i=0,ilen=courts.length;i<ilen;i++) {
                      state.locale[lang].opts[classType][country][courts[i]] = cls;
                  }
              }
          }
      },
  
      INIT_JURISDICTION_MACROS: function (state, Item, item, macroName) {
          if (Item["best-jurisdiction"]) {
              return true;
          }
          if (!state.sys.retrieveStyleModule || !CSL.MODULE_MACROS[macroName] || !Item.jurisdiction) {
              return false;
          }
          var jurisdictionList = state.getJurisdictionList(Item.jurisdiction);
          // Set up a list of jurisdictions here, we will reuse it
          if (!state.opt.jurisdictions_seen[jurisdictionList[0]]) {
              var res = state.retrieveAllStyleModules(jurisdictionList);
              // Okay. We have code for each of the novel modules in the
              // hierarchy. Load them all into the processor.
              for (var jurisdiction in res) {
                  var fallback = state.loadStyleModule(jurisdiction, res[jurisdiction]);
                  if (fallback) {
                      if (!res[fallback]) {
                          Object.assign(res, state.retrieveAllStyleModules([fallback]));
                          state.loadStyleModule(fallback, res[fallback], true);
                      }
                  }
              }
          }
          if (state.opt.parallel.enable) {
              if (!state.parallel) {
                  state.parallel = new CSL.Parallel(state);
              }
          }
          // Identify the best jurisdiction for the item and return true, otherwise return false
          for (var i=0,ilen=jurisdictionList.length;i<ilen;i++) {
              var jurisdiction = jurisdictionList[i];
              if (item) {
                  if (state.juris[jurisdiction] && !item["best-jurisdiction"] && state.juris[jurisdiction].types.locator) {
                      Item["best-jurisdiction"] = jurisdiction;
                  }
              }
              if(state.juris[jurisdiction] && state.juris[jurisdiction].types[Item.type]) {
                  Item["best-jurisdiction"] = jurisdiction;
                  return true;
              }
          }
          return false;
      }
  };
  
  /**
   * Functions for parsing an XML object converted to JSON.
   */
  
  /*
    Style and locale JSON should be formatted as follows. Note that
    an empty literal should be set as an explicit empty strings within
    children:[]
    
    {
      name:"term",
      children:[
        ""
      ],
      attrs:{
        name:"author"
      }
    }
  
    The following script will generate correctly formatted JSON
    from a CSL style or locale file:
  */
  
  CSL.XmlJSON = function (dataObj) {
      this.dataObj = dataObj;
      this.institution = {
          name:"institution",
          attrs:{
              "institution-parts":"long",
              "delimiter":", "
          },
          children:[
              {
                  name:"institution-part",
                  attrs:{
                      name:"long"
                  },
                  children:[]
              }
          ]
      };
  };
  
  /**
   * No need for cleaning with native JSON.
   */
  CSL.XmlJSON.prototype.clean = function (json) {
      return json;
  };
  
  
  /**
   * Methods to call on a node.
   */
  CSL.XmlJSON.prototype.getStyleId = function (myjson, styleName) {
      var tagName = 'id';
      if (styleName) {
          tagName = 'title';
      }
      var ret = "";
      var children = myjson.children;
      for (var i=0,ilen=children.length;i<ilen;i++) {
          if (children[i].name === 'info') {
              var grandkids = children[i].children;
              for (var j=0,jlen=grandkids.length;j<jlen;j++) {
                  if (grandkids[j].name === tagName) {
                      ret = grandkids[j].children[0];
                  }
              }
          }
      }
      return ret;
  };
  
  CSL.XmlJSON.prototype.children = function (myjson) {
      //print("children()");
      if (myjson && myjson.children.length) {
          return myjson.children.slice();
      } else {
          return false;
      }
  };
  
  CSL.XmlJSON.prototype.nodename = function (myjson) {
      //print("nodename()");
      return myjson ? myjson.name : null;
  };
  
  CSL.XmlJSON.prototype.attributes = function (myjson) {
      //print("attributes()");
      var ret = {};
      for (var attrname in myjson.attrs) {
          ret["@"+attrname] = myjson.attrs[attrname];
      }
      return ret;
  };
  
  
  CSL.XmlJSON.prototype.content = function (myjson) {
      //print("content()");
      // xmldom.js and xmle4x.js have "undefined" as default
      var ret = "";
      // This only catches content at first level, but that is good enough
      // for us.
      if (!myjson || !myjson.children) {
          return ret;
      }
      for (var i=0, ilen=myjson.children.length; i < ilen; i += 1) {
          if ("string" === typeof myjson.children[i]) {
              ret += myjson.children[i];
          }
      }
      return ret;
  };
  
  
  CSL.XmlJSON.prototype.namespace = {}
  
  CSL.XmlJSON.prototype.numberofnodes = function (myjson) {
      //print("numberofnodes()");
      if (myjson && "number" == typeof myjson.length) {
          return myjson.length;
      } else {
          return 0;
      }
  };
  
  // getAttributeName() removed. Looks like it was not being used.
  
  CSL.XmlJSON.prototype.getAttributeValue = function (myjson,name,namespace) {
      //print("getAttributeValue()");
      var ret = "";
      if (namespace) {
          name = namespace+":"+name;
      }
      if (myjson) {
          if (myjson.attrs) {
              if (myjson.attrs[name]) {
                  ret = myjson.attrs[name];
              } else {
                  ret = "";
              }
          }
      }
      return ret;
  }
  
  CSL.XmlJSON.prototype.getNodeValue = function (myjson,name) {
      //print("getNodeValue()");
      var ret = "";
      if (name){
          for (var i=0, ilen=myjson.children.length; i < ilen; i += 1) {
              if (myjson.children[i].name === name) {
                  // This will always be Object() unless empty
                  if (myjson.children[i].children.length) {
                      ret = myjson.children[i];
                  } else {
                      ret = "";
                  }
              }
          }
      } else if (myjson) {
          ret = myjson;
      }
      // Just being careful here, following the former DOM code. The JSON object we receive 
      // for this should be fully normalized.
      if (ret && ret.children && ret.children.length == 1 && "string" === typeof ret.children[0]) {
          ret = ret.children[0];
      }
      return ret;
  }
  
  CSL.XmlJSON.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function (myjson,nodename,partname,attrname,val) {
      //print("setAttributeOnNodeIdentifiedByNameAttribute()");
      var pos, len, xml, nodes, node;
      if (attrname.slice(0,1) === '@'){
          attrname = attrname.slice(1);
      }
      // In the one place this is used in citeproc-js code, it doesn't need to recurse.
      for (var i=0,ilen=myjson.children.length; i<ilen; i += 1) {
          if (myjson.children[i].name === nodename && myjson.children[i].attrs.name === partname) {
              myjson.children[i].attrs[attrname] = val;
          }
      }
  }
  
  CSL.XmlJSON.prototype.deleteNodeByNameAttribute = function (myjson,val) {
      //print("deleteNodeByNameAttribute()");
      var i, ilen;
      for (i = 0, ilen = myjson.children.length; i < ilen; i += 1) {
          if (!myjson.children[i] || "string" === typeof myjson.children[i]) {
              continue;
          }
          if (myjson.children[i].attrs.name == val) {
              myjson.children = myjson.children.slice(0,i).concat(myjson.children.slice(i+1));
          }
      }
  }
  
  CSL.XmlJSON.prototype.deleteAttribute = function (myjson,attrname) {
      //print("deleteAttribute()");
      var i, ilen;
      if ("undefined" !== typeof myjson.attrs[attrname]) {
          myjson.attrs.pop(attrname);
      }
  }
  
  CSL.XmlJSON.prototype.setAttribute = function (myjson,attr,val) {
      //print("setAttribute()");
      myjson.attrs[attr] = val;
      return false;
  }
  
  CSL.XmlJSON.prototype.nodeCopy = function (myjson,clone) {
      //print("nodeCopy()");
      if (!clone) {
          var clone = {};
      }
      if ("object" === typeof clone && "undefined" === typeof clone.length) {
          // myjson is an object
          for (var key in myjson) {
              if ("string" === typeof myjson[key]) {
                  clone[key] = myjson[key];
              } else if ("object" === typeof myjson[key]) {
                  if ("undefined" === typeof myjson[key].length) {
                      clone[key] = this.nodeCopy(myjson[key],{});
                  } else {
                      clone[key] = this.nodeCopy(myjson[key],[]);
                  }
              }
          }
      } else {
          // myjson is an array
          for (var i=0,ilen=myjson.length;i<ilen; i += 1) {
              if ("string" === typeof myjson[i]) {
                  clone[i] = myjson[i];
              } else {
                  // If it's at the first level of an array, it's an object.
                  clone[i] = this.nodeCopy(myjson[i],{});
              }
          }
      }
      return clone;
  }
  
  CSL.XmlJSON.prototype.getNodesByName = function (myjson,name,nameattrval,ret) {
      //print("getNodesByName()");
      var nodes, node, pos, len;
      if (!ret) {
          var ret = [];
      }
      if (!myjson || !myjson.children) {
          return ret;
      }
      if (name === myjson.name) {
          if (nameattrval) {
              if (nameattrval === myjson.attrs.name) {
                  ret.push(myjson);
              }
          } else {
              ret.push(myjson);
          }
      }
      for (var i=0,ilen=myjson.children.length;i<ilen;i+=1){
          if ("object" !== typeof myjson.children[i]) {
              continue;
          }
          this.getNodesByName(myjson.children[i],name,nameattrval,ret);
      }
      return ret;
  }
  
  CSL.XmlJSON.prototype.nodeNameIs = function (myjson,name) {
      //print("nodeNameIs()");
      if (typeof myjson === "undefined") {
          return false;
      }
      if (name == myjson.name) {
          return true;
      }
      return false;
  }
  
  CSL.XmlJSON.prototype.makeXml = function (myjson) {
      //print("makeXml()");
      if ("string" === typeof myjson) {
          if (myjson.slice(0, 1) === "<") {
              myjson = this.jsonStringWalker.walkToObject(myjson);
          } else {
              myjson = JSON.parse(myjson);
          }
      }
      return myjson;
  };
  
  CSL.XmlJSON.prototype.insertChildNodeAfter = function (parent,node,pos,datejson) {
      //print("insertChildNodeAfter()");
      // Function is misnamed: this replaces the node
      for (var i=0,ilen=parent.children.length;i<ilen;i+=1) {
          if (node === parent.children[i]) {
              parent.children = parent.children.slice(0,i).concat([datejson]).concat(parent.children.slice(i+1));
              break;
          }
      }
      return parent;
  };
  
  
  CSL.XmlJSON.prototype.insertPublisherAndPlace = function(myjson) {
      if (myjson.name === "group") {
          var useme = true;
          var mustHaves = ["publisher","publisher-place"];
          for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
              var haveVarname = mustHaves.indexOf(myjson.children[i].attrs.variable);
              var isText = myjson.children[i].name === "text";
              if (isText && haveVarname > -1 && !myjson.children[i].attrs.prefix && !myjson.children[i].attrs.suffix) {
                  mustHaves = mustHaves.slice(0,haveVarname).concat(mustHaves.slice(haveVarname+1));
              } else {
                  useme = false;
                  break;
              }
          }
          if (useme && !mustHaves.length) {
              myjson.attrs["has-publisher-and-publisher-place"] = true;
         }
      }
      for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
          if ("object" === typeof myjson.children[i]) {
              this.insertPublisherAndPlace(myjson.children[i]);
          }
      }    
  }
  /*
  CSL.XmlJSON.prototype.insertPublisherAndPlace = function(myxml) {
      var group = myxml.getElementsByTagName("group");
      for (var i = 0, ilen = group.length; i < ilen; i += 1) {
          var node = group.item(i);
          var skippers = [];
          for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
              if (node.childNodes.item(j).nodeType !== 1) {
                  skippers.push(j);
              }
          }
          if (node.childNodes.length - skippers.length === 2) {
              var twovars = [];
              for (var j = 0, jlen = 2; j < jlen; j += 1) {
                  if (skippers.indexOf(j) > -1) {
                      continue;
                  }
                  var child = node.childNodes.item(j);                    
                  var subskippers = [];
                  for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                      if (child.childNodes.item(k).nodeType !== 1) {
                          subskippers.push(k);
                      }
                  }
                  if (child.childNodes.length - subskippers.length === 0) {
                      twovars.push(child.getAttribute('variable'));
                      if (child.getAttribute('suffix')
                          || child.getAttribute('prefix')) {
                          twovars = [];
                          break;
                      }
                  }
              }
              if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
                  node.setAttribute('has-publisher-and-publisher-place', true);
              }
          }
      }
  };
  */
  
  CSL.XmlJSON.prototype.isChildOfSubstitute = function(parents) {
      if (parents.length > 0) {
          var myparents = parents.slice();
          var parent = myparents.pop();
          if (parent === "substitute") {
              return true;
          } else {
              return this.isChildOfSubstitute(myparents);
          }
      }
      return false;
  };
  
  CSL.XmlJSON.prototype.addMissingNameNodes = function(myjson,parents) {
      if (!parents) {
          parents = [];
      }
      if (myjson.name === "names") {
          // Trawl through children to decide whether a name node is needed here
          if (!this.isChildOfSubstitute(parents)) {
              var addName = true;
              for (var i=0,ilen=myjson.children.length;i<ilen;i++) {
                  if (myjson.children[i].name === "name") {
                      addName = false;
                      break;
                  }
              }
              if (addName) {
                  myjson.children = [{name:"name",attrs:{},children:[]}].concat(myjson.children);
              }
          }
      }
      parents.push(myjson.name);
      for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
          if ("object" === typeof myjson.children[i]) {
              this.addMissingNameNodes(myjson.children[i],parents);
          }
      }
      parents.pop();
  }
  
  
  CSL.XmlJSON.prototype.addInstitutionNodes = function(myjson) {
      //print("addInstitutionNodes()");
      var names, thenames, institution, theinstitution, name, thename, xml, pos, len;
      // The idea here is to map relevant attributes from name and nampart=family
      // to the "long" institution-part node, when and only when forcing insert
      // of the default node.
      if (myjson.name === "names") {
          // do stuff
          var attributes = {};
          var insertPos = -1;
          for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
              if (myjson.children[i].name == "name") {
                  for (var key in myjson.children[i].attrs) {
                      attributes[key] = myjson.children[i].attrs[key];
                  }
                  attributes.delimiter = myjson.children[i].attrs.delimiter;
                  attributes.and = myjson.children[i].attrs.and;
                  insertPos = i;
                  for (var k=0,klen=myjson.children[i].children.length;k<klen;k+=1) {
                      if (myjson.children[i].children[k].attrs.name !== 'family') {
                          continue;
                      }
                      for (var key in myjson.children[i].children[k].attrs) {
                          attributes[key] = myjson.children[i].children[k].attrs[key];
                      }
                  }
              }
              if (myjson.children[i].name == "institution") {
                  insertPos = -1;
                  break;
              }
          }
          if (insertPos > -1) {
              var institution = this.nodeCopy(this.institution);
              for (var i=0,ilen = CSL.INSTITUTION_KEYS.length;i<ilen;i+=1) {
                  var attrname = CSL.INSTITUTION_KEYS[i];
                  if ("undefined" !== typeof attributes[attrname]) {
                      institution.children[0].attrs[attrname] = attributes[attrname];
                  }
                  if (attributes.delimiter) {
                      institution.attrs.delimiter = attributes.delimiter;
                  }
                  if (attributes.and) {
                      institution.attrs.and = attributes.and;
                  }
              }
              myjson.children = myjson.children.slice(0,insertPos+1).concat([institution]).concat(myjson.children.slice(insertPos+1));
          }
      }
      for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
          if ("string" === typeof myjson.children[i]) {
              continue;
          }
          // Recurse
          this.addInstitutionNodes(myjson.children[i]);
      }
  }
  CSL.XmlJSON.prototype.flagDateMacros = function(myjson) {
      // print("flagDateMacros()");
      for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
          if (myjson.children[i].name === "macro") {
              if (this.inspectDateMacros(myjson.children[i])) {
                  myjson.children[i].attrs["macro-has-date"] = "true";
              }
          }
      }
  }
  CSL.XmlJSON.prototype.inspectDateMacros = function(myjson) {
      //print("inspectDateMacros()");
      if (!myjson || !myjson.children) {
          return false;
      }
      if (myjson.name === "date") {
          return true;
      } else {
          for (var i=0,ilen=myjson.children.length;i<ilen;i+=1) {
              if (this.inspectDateMacros(myjson.children[i])) {
                  return true;
              }
          }
      }
      return false;
  }
  
  /*
   * Clean serialized XML
   */
  CSL.stripXmlProcessingInstruction = function (xml) {
      if (!xml) {
          return xml;
      }
      xml = xml.replace(/^<\?[^?]+\?>/, "");
      xml = xml.replace(/<!--[^>]+-->/g, "");
      xml = xml.replace(/^\s+/g, "");
      xml = xml.replace(/\s+$/g, "");
      return xml;
  };
  
  
  /*
   * String parser for XML inputs
   */
  CSL.parseXml = function(str) {
  
      var _pos = 0;
      var _obj = {children:[]};
      var _stack = [_obj.children];
  
      function _listifyString(str) {
          str = str.split(/(?:\r\n|\n|\r)/).join(" ").replace(/>[	 ]+</g, "><").replace(/<\!--.*?-->/g, "");
          var lst = str.split("><");
          var stylePos = null;
          for (var i=0,ilen=lst.length;i<ilen;i++) {
              if (i > 0) {
                  lst[i] = "<" + lst[i];
              }
              if (i < (lst.length-1)) {
                  lst[i] = lst[i] + ">";
              }
              if ("number" != typeof stylePos) {
                  if (lst[i].slice(0, 7) === "<style " || lst[i].slice(0, 8) == "<locale ") {
                      stylePos = i;
                  }
              }
          }
          lst = lst.slice(stylePos);
          // Combine open/close elements for empty terms,
          // so that they will be passed through correctly
          // as empty strings.
          for (var i=lst.length-2;i>-1;i--) {
              if (lst[i].slice(1).indexOf("<") === -1) {
                  var stub = lst[i].slice(0, 5);
                  if (lst[i].slice(-2) !== "/>") {
                      if (stub === "<term") {
                          if (lst[i+1].slice(0, 6) === "</term") {
                              lst[i] = lst[i] + lst[i+1];
                              lst = lst.slice(0, i+1).concat(lst.slice(i+2));
                          }
                      } else if (["<sing", "<mult"].indexOf(stub) > -1) {
                          if (lst[i].slice(-2) !== "/>" && lst[i+1].slice(0, 1) === "<") {
                              lst[i] = lst[i] + lst[i+1];
                              lst = lst.slice(0, i+1).concat(lst.slice(i+2));
                          }
                      }
                  }
              }
          }
          return lst;
      }
  
      function _decodeHtmlEntities(str) {
          return str
              .split("&amp;").join("&")
              .split("&quot;").join("\"")
              .split("&gt;").join(">").split("&lt;").join("<")
              .replace(/&#([0-9]{1,6});/gi, function(match, numStr) {
                  var num = parseInt(numStr, 10); // read num as normal number
                  return String.fromCharCode(num);
              })
              .replace(/&#x([a-f0-9]{1,6});/gi, function(match, numStr){
                  var num = parseInt(numStr, 16); // read num as hex
                  return String.fromCharCode(num);
              });
      }
  
      function _getAttributes(elem) {
          var m = elem.match(/([^\'\"=	 ]+)=(?:\"[^\"]*\"|\'[^\']*\')/g);
          if (m) {
              for (var i=0,ilen=m.length;i<ilen;i++) {
                  m[i] = m[i].replace(/=.*/, "");
              }
          }
          return m;
      }
  
      function _getAttribute(elem, attr) {
          var rex = RegExp('^.*[	 ]+' + attr + '=(\"(?:[^\"]*)\"|\'(?:[^\']*)\').*$');
          var m = elem.match(rex);
          return m ? m[1].slice(1, -1) : null;
      }
  
      function _getTagName(elem) {
          var rex = RegExp("^<([^	 />]+)");
          var m = elem.match(rex);
          return m ? m[1] : null;
      }
      
  
      function _castObjectFromOpeningTag(elem) {
          var obj = {};
          obj.name = _getTagName(elem);
          obj.attrs = {};
          var attributes = _getAttributes(elem);
          if (attributes) {
              for (var i=0,ilen=attributes.length;i<ilen;i++) {
                  var attr = {
                      name: attributes[i],
                      value: _getAttribute(elem, attributes[i])
                  }
                  obj.attrs[attr.name] = _decodeHtmlEntities(attr.value);
              }
          }
          obj.children = [];
          return obj;
      }
  
      function _extractTextFromCompositeElement(elem) {
          var m = elem.match(/^.*>([^<]*)<.*$/);
          return _decodeHtmlEntities(m[1]);
      }
  
      function _appendToChildren(obj) {
          _stack.slice(-1)[0].push(obj);
      }
  
      function _extendStackWithNewChildren(obj) {
          _stack.push(obj.children);
      }
  
      function processElement(elem) {
          var obj;
          if (elem.slice(1).indexOf('<') > -1) {
              // withtext
              var tag = elem.slice(0, elem.indexOf('>')+1);
              obj = _castObjectFromOpeningTag(tag);
              obj.children = [_extractTextFromCompositeElement(elem)];
              _appendToChildren(obj);
          } else if (elem.slice(-2) === '/>') {
              // singleton
              obj = _castObjectFromOpeningTag(elem);
              // Empty term as singleton
              if (_getTagName(elem) === 'term') {
                  obj.children.push('');
              }
              _appendToChildren(obj);
          } else if (elem.slice(0, 2) === '</') {
              // close
              _stack.pop();
          } else {
              // open
              obj = _castObjectFromOpeningTag(elem);
              _appendToChildren(obj)
              _extendStackWithNewChildren(obj);
          }
      }
  
      var lst = _listifyString(str);
  
      for (var i=0,ilen=lst.length;i<ilen;i++) {
          var elem = lst[i];
          processElement(elem);
      }
      return _obj.children[0];
  }
  
  /**
   * Functions for parsing an XML object using E4X.
   */
  
  CSL.XmlDOM = function (dataObj) {
      this.dataObj = dataObj;
      if ("undefined" == typeof DOMParser) {
          DOMParser = function() {};
          DOMParser.prototype.parseFromString = function(str, contentType) {
              if ("undefined" != typeof ActiveXObject) {
                  var xmldata = new ActiveXObject('MSXML.DomDocument');
                  xmldata.async = false;
                  xmldata.loadXML(str);
                  return xmldata;
              } else if ("undefined" != typeof XMLHttpRequest) {
                  var xmldata = new XMLHttpRequest;
                  if (!contentType) {
                      contentType = 'text/xml';
                  }
                  xmldata.open('GET', 'data:' + contentType + ';charset=utf-8,' + encodeURIComponent(str), false);
                  if(xmldata.overrideMimeType) {
                      xmldata.overrideMimeType(contentType);
                  }
                  xmldata.send(null);
                  return xmldata.responseXML;
              } else if ("undefined" != typeof marknote) {
                  var parser = new marknote.Parser();
                  return parser.parse(str);
              }
          };
          this.hasAttributes = function (node) {
              var ret;
              if (node.attributes && node.attributes.length) {
                  ret = true;
              } else {
                  ret = false;
              }
              return ret;
          };
      } else {
          /*
          this.hasAttributes = function (node) {
              return node["hasAttributes"]();
          };
          */
          this.hasAttributes = function (node) {
              var ret;
              if (node.attributes && node.attributes.length) {
                  ret = true;
              } else {
                  ret = false;
              }
              return ret;
          };
      }
      this.importNode = function (doc, srcElement) {
          var ret;
          if ("undefined" == typeof doc.importNode) {
              ret = this._importNode(doc, srcElement, true);
          } else {
              ret = doc.importNode(srcElement, true);
          }
          return ret;
      };
      // In case importNode is not available.
      // Thx + hat tip to Anthony T. Holdener III
      // http://www.alistapart.com/articles/crossbrowserscripting
      // cases 3, 4, 8 = text, cdata, comment
      this._importNode = function(doc, node, allChildren) {
          switch (node.nodeType) {
              // element node
              case 1:
                  var newNode = doc.createElement(node.nodeName);
                  if (node.attributes && node.attributes.length > 0)
                      for (var i = 0, il = node.attributes.length; i < il;)
                          newNode.setAttribute(node.attributes[i].nodeName, node.getAttribute(node.attributes[i++].nodeName));
                      if (allChildren && node.childNodes && node.childNodes.length > 0)
                          for (var i = 0, il = node.childNodes.length; i < il;)
                              newNode.appendChild(this._importNode(doc, node.childNodes[i++], allChildren));
                  return newNode;
                  break;
              case 3:
              case 4:
              case 8:
                  // Drop comments on the floor as well.
                  //return doc.createTextNode(node.nodeValue);
                  //break;
          }
      };
      this.parser = new DOMParser();
  
      // This seems horribly tormented, but there might be a reason for it.
      // Perhaps this was the only way I found to get namespacing to work ... ?
      var str = "<docco><institution institution-parts=\"long\" delimiter=\", \" substitute-use-first=\"1\" use-last=\"1\"><institution-part name=\"long\"/></institution></docco>";
      var inst_doc = this.parser.parseFromString(str, "text/xml");
      var inst_node = inst_doc.getElementsByTagName("institution");
      this.institution = inst_node.item(0);
      var inst_part_node = inst_doc.getElementsByTagName("institution-part");
      this.institutionpart = inst_part_node.item(0);
      this.ns = "http://purl.org/net/xbiblio/csl";
  };
  
  /**
   * No need for cleaning with the DOM, I think.  This will probably just be a noop.
   * But first, let's get XML mode switching up and running.
   */
  CSL.XmlDOM.prototype.clean = function (xml) {
      xml = xml.replace(/<\?[^?]+\?>/g, "");
      xml = xml.replace(/<![^>]+>/g, "");
      xml = xml.replace(/^\s+/, "");
      xml = xml.replace(/\s+$/, "");
      xml = xml.replace(/^\n*/, "");
      return xml;
  };
  
  
  /**
   * Methods to call on a node.
   */
  CSL.XmlDOM.prototype.getStyleId = function (myxml, styleName) {
      var text = "";
      var tagName = "id";
      if (styleName) {
          tagName = "title";
      }
      var node = myxml.getElementsByTagName(tagName);
      if (node && node.length) {
          node = node.item(0);
      }
      if (node) {
          // W3C conformant browsers
          text = node.textContent;
      }
      if (!text) {
          // Opera, IE 6 & 7
          text = node.innerText;
      }
      if (!text) {
          // Safari
          text = node.innerHTML;
      }
      return text;
  };
  
  CSL.XmlDOM.prototype.children = function (myxml) {
      var children, pos, len, ret;
      if (myxml) {
          ret = [];
          children = myxml.childNodes;
          for (pos = 0, len = children.length; pos < len; pos += 1) {
              if (children[pos].nodeName != "#text") {
                  ret.push(children[pos]);
              }
          }
          return ret;
      } else {
          return [];
      }
  };
  
  CSL.XmlDOM.prototype.nodename = function (myxml) {
      var ret = myxml.nodeName;
      return ret;
  };
  
  CSL.XmlDOM.prototype.attributes = function (myxml) {
      var ret, attrs, attr, key, xml, pos, len;
      ret = new Object();
      if (myxml && this.hasAttributes(myxml)) {
          attrs = myxml.attributes;
          for (pos = 0, len=attrs.length; pos < len; pos += 1) {
              attr = attrs[pos];
              ret["@" + attr.name] = attr.value;
          }
      }
      return ret;
  };
  
  
  CSL.XmlDOM.prototype.content = function (myxml) {
      var ret;
      if ("undefined" != typeof myxml.textContent) {
          ret = myxml.textContent;
      } else if ("undefined" != typeof myxml.innerText) {
          ret = myxml.innerText;
      } else {
          ret = myxml.txt;
      }
      return ret;
  };
  
  
  CSL.XmlDOM.prototype.namespace = {
      "xml":"http://www.w3.org/XML/1998/namespace"
  }
  
  CSL.XmlDOM.prototype.numberofnodes = function (myxml) {
      if (myxml) {
          return myxml.length;
      } else {
          return 0;
      }
  };
  
  CSL.XmlDOM.prototype.getAttributeName = function (attr) {
      var ret = attr.name;
      return ret;
  }
  
  CSL.XmlDOM.prototype.getAttributeValue = function (myxml,name,namespace) {
      var ret = "";
      if (namespace) {
          name = namespace+":"+name;
      }
      if (myxml && this.hasAttributes(myxml) && myxml.getAttribute(name)) {
          ret = myxml.getAttribute(name);
      }
      return ret;
  }
  
  //
  // Can't this be, you know ... simplified?
  //
  CSL.XmlDOM.prototype.getNodeValue = function (myxml,name) {
      var ret = null;
      if (name){
          var vals = myxml.getElementsByTagName(name);
          if (vals.length > 0) {
              if ("undefined" != typeof vals[0].textContent) {
                  ret = vals[0].textContent;
              } else if ("undefined" != typeof vals[0].innerText) {
                  ret = vals[0].innerText;
              } else {
                  ret = vals[0].text;
              }
          }
      }
      if (ret === null && myxml && myxml.childNodes && (myxml.childNodes.length == 0 || (myxml.childNodes.length == 1 && myxml.firstChild.nodeName == "#text"))) {
          if ("undefined" != typeof myxml.textContent) {
              ret = myxml.textContent;
          } else if ("undefined" != typeof myxml.innerText) {
              ret = myxml.innerText;
          } else {
              ret = myxml.text;
          }
      }
      if (ret === null) {
          ret = myxml;
      }
      return ret;
  }
  
  CSL.XmlDOM.prototype.setAttributeOnNodeIdentifiedByNameAttribute = function (myxml,nodename,partname,attrname,val) {
      var pos, len, xml, nodes, node;
      if (attrname.slice(0,1) === '@'){
          attrname = attrname.slice(1);
      }
      nodes = myxml.getElementsByTagName(nodename);
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (node.getAttribute("name") != partname) {
              continue;
          }
          node.setAttribute(attrname, val);
      }
  }
  
  CSL.XmlDOM.prototype.deleteNodeByNameAttribute = function (myxml,val) {
      var pos, len, node, nodes;
      nodes = myxml.childNodes;
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes[pos];
          if (!node || node.nodeType == node.TEXT_NODE) {
              continue;
          }
          if (this.hasAttributes(node) && node.getAttribute("name") == val) {
              myxml.removeChild(nodes[pos]);
          }
      }
  }
  
  CSL.XmlDOM.prototype.deleteAttribute = function (myxml,attr) {
      myxml.removeAttribute(attr);
  }
  
  CSL.XmlDOM.prototype.setAttribute = function (myxml,attr,val) {
      if (!myxml.ownerDocument) {
          myxml = myxml.firstChild;
      }
      // "unknown" to satisfy IE8, which crashes when setAttribute
      // is checked directly as a property, and report its type as
      // "unknown".
      // Many thanks to Phil Lord for tracing the cause of the fault.
      if (["function", "unknown"].indexOf(typeof myxml.setAttribute) > -1) {
          myxml.setAttribute(attr, val);
      }
      return false;
  }
  
  CSL.XmlDOM.prototype.nodeCopy = function (myxml) {
      var cloned_node = myxml.cloneNode(true);
      return cloned_node;
  }
  
  CSL.XmlDOM.prototype.getNodesByName = function (myxml,name,nameattrval) {
      var ret, nodes, node, pos, len;
      ret = [];
      nodes = myxml.getElementsByTagName(name);
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          node = nodes.item(pos);
          if (nameattrval && !(this.hasAttributes(node) && node.getAttribute("name") == nameattrval)) {
  //        if (nameattrval && !(this.attributes && node.attributes.name && node.attributes.name.value == nameattrval)) {
              continue;
          }
          ret.push(node);
      }
      return ret;
  }
  
  CSL.XmlDOM.prototype.nodeNameIs = function (myxml,name) {
      if (name == myxml.nodeName) {
          return true;
      }
      return false;
  }
  
  CSL.XmlDOM.prototype.makeXml = function (myxml) {
      var ret, topnode;
      if (!myxml) {
          myxml = "<docco><bogus/></docco>";
      }
      myxml = myxml.replace(/\s*<\?[^>]*\?>\s*\n*/g, "");
      var nodetree = this.parser.parseFromString(myxml, "application/xml");
      return nodetree.firstChild;
  };
  
  CSL.XmlDOM.prototype.insertChildNodeAfter = function (parent,node,pos,datexml) {
      var myxml, xml;
      myxml = this.importNode(node.ownerDocument, datexml);
      parent.replaceChild(myxml, node);
       return parent;
  };
  
  CSL.XmlDOM.prototype.insertPublisherAndPlace = function(myxml) {
      var group = myxml.getElementsByTagName("group");
      for (var i = 0, ilen = group.length; i < ilen; i += 1) {
          var node = group.item(i);
          var skippers = [];
          for (var j = 0, jlen = node.childNodes.length; j < jlen; j += 1) {
              if (node.childNodes.item(j).nodeType !== 1) {
                  skippers.push(j);
              }
          }
          if (node.childNodes.length - skippers.length === 2) {
              var twovars = [];
              for (var j = 0, jlen = 2; j < jlen; j += 1) {
                  if (skippers.indexOf(j) > -1) {
                      continue;
                  }
                  var child = node.childNodes.item(j);                    
                  var subskippers = [];
                  for (var k = 0, klen = child.childNodes.length; k < klen; k += 1) {
                      if (child.childNodes.item(k).nodeType !== 1) {
                          subskippers.push(k);
                      }
                  }
                  if (child.childNodes.length - subskippers.length === 0) {
                      twovars.push(child.getAttribute('variable'));
                      if (child.getAttribute('suffix')
                          || child.getAttribute('prefix')) {
                          twovars = [];
                          break;
                      }
                  }
              }
              if (twovars.indexOf("publisher") > -1 && twovars.indexOf("publisher-place") > -1) {
                  node.setAttribute('has-publisher-and-publisher-place', true);
              }
          }
      }
  };
  
  CSL.XmlDOM.prototype.isChildOfSubstitute = function(node) {
      if (node.parentNode) {
          if (node.parentNode.tagName.toLowerCase() === "substitute") {
              return true;
          } else {
              return this.isChildOfSubstitute(node.parentNode);
          }
      }
      return false;
  };
  
  CSL.XmlDOM.prototype.addMissingNameNodes = function(myxml) {
      var nameslist = myxml.getElementsByTagName("names");
      for (var i = 0, ilen = nameslist.length; i < ilen; i += 1) {
          var names = nameslist.item(i);
          var namelist = names.getElementsByTagName("name");
          if ((!namelist || namelist.length === 0)
              && !this.isChildOfSubstitute(names)) {
              
              var doc = names.ownerDocument;
              var name = doc.createElement("name");
              names.appendChild(name);
          }
      }
  };
  
  
  CSL.XmlDOM.prototype.addInstitutionNodes = function(myxml) {
      var names, thenames, institution, theinstitution, theinstitutionpart, name, thename, xml, pos, len;
      names = myxml.getElementsByTagName("names");
      for (pos = 0, len = names.length; pos < len; pos += 1) {
          thenames = names.item(pos);
          name = thenames.getElementsByTagName("name");
          if (name.length == 0) {
              continue;
          }
          institution = thenames.getElementsByTagName("institution");
          if (institution.length == 0) {
              theinstitution = this.importNode(myxml.ownerDocument, this.institution);
              theinstitutionpart = theinstitution.getElementsByTagName("institution-part").item(0);
              thename = name.item(0);
              thenames.insertBefore(theinstitution, thename.nextSibling);
              for (var j = 0, jlen = CSL.INSTITUTION_KEYS.length; j < jlen; j += 1) {
                  var attrname = CSL.INSTITUTION_KEYS[j];
                  var attrval = thename.getAttribute(attrname);
                  if (attrval) {
                      theinstitutionpart.setAttribute(attrname, attrval);
                  }
              }
              var nameparts = thename.getElementsByTagName("name-part");
              for (var j = 0, jlen = nameparts.length; j < jlen; j += 1) {
                  if ('family' === nameparts[j].getAttribute('name')) {
                      for (var k = 0, klen = CSL.INSTITUTION_KEYS.length; k < klen; k += 1) {
                          var attrname = CSL.INSTITUTION_KEYS[k];
                          var attrval = nameparts[j].getAttribute(attrname);
                          if (attrval) {
                              theinstitutionpart.setAttribute(attrname, attrval);
                          }
                      }
                  }
              }
          }
      }
  };
  
  
  CSL.XmlDOM.prototype.flagDateMacros = function(myxml) {
      var pos, len, thenode, thedate;
      var nodes = myxml.getElementsByTagName("macro");
      for (pos = 0, len = nodes.length; pos < len; pos += 1) {
          thenode = nodes.item(pos);
          thedate = thenode.getElementsByTagName("date");
          if (thedate.length) {
              thenode.setAttribute('macro-has-date', 'true');
          }
      }
  };
  
  
  /*global CSL: true */
  
  CSL.setupXml = function(xmlObject) {
      var dataObj = {};
      var parser = null;
      if ("undefined" !== typeof xmlObject) {
          if ("string" === typeof xmlObject) {
              xmlObject = xmlObject.replace("^\uFEFF", "")
                  .replace(/^\s+/, "");
              if (xmlObject.slice(0, 1) === "<") {
                  // Assume serialized XML
                  dataObj = CSL.parseXml(xmlObject);
              } else {
                  // Assume serialized JSON
                  dataObj = JSON.parse(xmlObject);
              }
              parser = new CSL.XmlJSON(dataObj);
          } else if ("undefined" !== typeof xmlObject.getAttribute) {
              // Assume DOM instance
              parser = new CSL.XmlDOM(xmlObject);
          } else if ("undefined" !== typeof xmlObject.toXMLString) {
              // Assume E4X object
              parser = new CSL.XmlE4X(xmlObject);
          } else {
              // Assume JS object
              parser = new CSL.XmlJSON(xmlObject);
          }
      } else {
          CSL.error("unable to parse XML input");
      }
      if (!parser) {
          CSL.error("citeproc-js error: unable to parse CSL style or locale object");
      }
      return parser;
  };
  
  /*global CSL: true */
  
  CSL.getSortCompare = function (default_locale) {
      if (CSL.stringCompare) {
          return CSL.stringCompare;
      }
      var me = this;
      var strcmp;
      var strcmp_opts = {
          sensitivity:"base",
          ignorePunctuation:true,
          numeric:true
      };
      // In order, attempt the following:
      //   (1) Set locale collation from processor language
      //   (2) Use localeCompare()
      if (!default_locale) {
          default_locale = "en-US";
      }
      strcmp = function (a, b) {
          return CSL.toLocaleLowerCase.call(me, a).localeCompare(CSL.toLocaleLowerCase.call(me, b),default_locale,strcmp_opts);
      };
      var stripPunct = function (str) {
          return str.replace(/^[\[\]\'\"]*/g, "");
      };
      var getBracketPreSort = function () {
          if (!strcmp("[x","x")) {
              return false;
          } else {
              return function (a, b) {
                  return strcmp(stripPunct(a), stripPunct(b));
              };
          }
      };
      var bracketPreSort = getBracketPreSort();
      var sortCompare = function (a, b) {
          if (bracketPreSort) {
              return bracketPreSort(a, b);
          } else {
              return strcmp(a, b);
          }
      };
      return sortCompare;
  };
  
  /*global CSL: true */
  
  CSL.ambigConfigDiff = function(a, b) {
      var pos, len, ppos, llen;
      // return of true means the ambig configs differ
      if (a.names.length !== b.names.length) {
          //print("   (1)");
          return 1;
      } else {
          for (pos = 0, len = a.names.length; pos < len; pos += 1) {
              if (a.names[pos] !== b.names[pos]) {
          //print("   (2) "+a.names[pos]+" "+b.names[pos]);
                  return 1;
              } else {
                  for (ppos = 0, llen = a.givens[pos]; ppos < llen; ppos += 1) {
                      if (a.givens[pos][ppos] !== b.givens[pos][ppos]) {
          //print("   (3): "+a.givens[pos][ppos]+" "+b.givens[pos][ppos]+" "+pos+"/"+ppos+" "+b.givens[pos]);
                          return 1;
                      }
                  }
              }
          }
      }
      if (a.disambiguate != b.disambiguate) {
          //print("   (4) "+a.disambiguate+" "+b.disambiguate);
          return 1;
      }
      if (a.year_suffix !== b.year_suffix) {
          //print("   (5) "+a.year_suffix+" "+b.year_suffix);
          return 1;
      }
      return 0;
  };
  
  CSL.cloneAmbigConfig = function (config, oldconfig) {
      var i, ilen, j, jlen, param;
      var ret = {};
      ret.names = [];
      ret.givens = [];
      ret.year_suffix = false;
      ret.disambiguate = false;
      for (i = 0, ilen = config.names.length; i < ilen; i += 1) {
          param = config.names[i];
          // Fixes update bug affecting plugins, without impacting
          // efficiency with update of large numbers of year-suffixed
          // items.
          ret.names[i] = param;
      }
      for (i  = 0, ilen = config.givens.length; i < ilen; i += 1) {
          param = [];
          for (j = 0, jlen = config.givens[i].length; j < jlen; j += 1) {
              // condition at line 312 of disambiguate.js protects against negative
              // values of j
              param.push(config.givens[i][j]);
          }
          ret.givens.push(param);
      }
      // XXXX Is this necessary at all?
      if (oldconfig) {
          ret.year_suffix = oldconfig.year_suffix;
          ret.disambiguate = oldconfig.disambiguate;
      } else {
          ret.year_suffix = config.year_suffix;
          ret.disambiguate = config.disambiguate;
      }
      return ret;
  };
  
  /**
   * Return current base configuration for disambiguation
   */
  CSL.getAmbigConfig = function () {
      var config, ret;
      config = this.tmp.disambig_request;
      if (!config) {
          config = this.tmp.disambig_settings;
      }
      var ret = CSL.cloneAmbigConfig(config);
      return ret;
  };
  
  /**
   * Return max values for disambiguation
   */
  CSL.getMaxVals = function () {
      return this.tmp.names_max.mystack.slice();
  };
  
  /**
   * Return min value for disambiguation
   */
  CSL.getMinVal = function () {
      return this.tmp["et-al-min"];
  };
  
  /*global CSL: true */
  
  /* For node execution pretty-printing (see below) */
  
  /*
  var INDENT = "";
  */
  
  CSL.tokenExec = function (token, Item, item) {
      // Called on state object
      var next, maybenext, exec, debug;
      debug = false;
      next = token.next;
      maybenext = false;
  
      /* Pretty-print node executions */
  
      /*
      if (["if", "else-if", "else"].indexOf(token.name) === -1) {
          if (token.tokentype == 1) {
              INDENT = INDENT.slice(0, -2);
          }
      }
      this.sys.print(INDENT + "---> Token: " + token.name + " (" + token.tokentype + ") in " + this.tmp.area + ", " + this.output.current.mystack.length);
      if (["if", "else-if", "else"].indexOf(token.name) === -1) {
          if (token.tokentype == 0) {
              INDENT += "  ";
          }
      }
      */
  
      var record = function (result) {
          if (result) {
              this.tmp.jump.replace("succeed");
              return token.succeed;
          } else {
              this.tmp.jump.replace("fail");
              return token.fail;
          }
      };
      if (token.test) {
          next = record.call(this,token.test(Item, item));
      }
      for (var i=0,ilen=token.execs.length;i<ilen;i++) {
          exec = token.execs[i];
          maybenext = exec.call(token, this, Item, item);
          if (maybenext) {
              next = maybenext;
          }
      }
      //SNIP-START
      if (debug) {
          CSL.debug(token.name + " (" + token.tokentype + ") ---> done");
      }
      //SNIP-END
      return next;
  };
  
  /**
   * Macro expander.
   * <p>Called on the state object.</p>
   */
  CSL.expandMacro = function (macro_key_token, target) {
      var mkey, macro_nodes, end_of_macro, func;
  
      mkey = macro_key_token.postponed_macro;
  
      var sort_direction = macro_key_token.strings.sort_direction;
      
      // Decorations and affixes are in wrapper applied in cs:text
      macro_key_token = new CSL.Token("group", CSL.START);
      
      var hasDate = false;
      var macroid = false;
      macro_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, 'macro', mkey);
      if (macro_nodes.length) {
          macroid = this.cslXml.getAttributeValue(macro_nodes[0],'cslid');
          hasDate = this.cslXml.getAttributeValue(macro_nodes[0], "macro-has-date");
      }
      if (hasDate) {
          mkey = mkey + "@" + this.build.current_default_locale;
          func = function (state) {
              if (state.tmp.extension) {
                  state.tmp["doing-macro-with-date"] = true;
              }
          };
          macro_key_token.execs.push(func);
      }
  
      if (this.build.macro_stack.indexOf(mkey) > -1) {
          CSL.error("CSL processor error: call to macro \"" + mkey + "\" would cause an infinite loop");
      } else {
          this.build.macro_stack.push(mkey);
      }
  
      macro_key_token.cslid = macroid;
  
      if (CSL.MODULE_MACROS[mkey]) {
          macro_key_token.juris = mkey;
          this.opt.update_mode = CSL.POSITION;
      }
      // Macro group is treated as a real node in the style
      CSL.Node.group.build.call(macro_key_token, this, target, true);
  
      // Node does not exist in the CSL
      if (!this.cslXml.getNodeValue(macro_nodes)) {
          CSL.error("CSL style error: undefined macro \"" + mkey + "\"");
      }
  
      // Let's macro
      var mytarget = CSL.getMacroTarget.call(this, mkey);
      if (mytarget) {
          CSL.buildMacro.call(this, mytarget, macro_nodes);
          CSL.configureMacro.call(this, mytarget);
      }
      if (!this.build.extension) {
          var func = (function(macro_name) {
              return function (state, Item, item) {
                  var next = 0;
                  while (next < state.macros[macro_name].length) {
                      next = CSL.tokenExec.call(state, state.macros[macro_name][next], Item, item);
                  }
              };
          }(mkey));
          var text_node = new CSL.Token("text", CSL.SINGLETON);
          text_node.execs.push(func);
          target.push(text_node);
      }
  
      // Decorations and affixes are in wrapper applied in cs:text
      end_of_macro = new CSL.Token("group", CSL.END);
      end_of_macro.strings.sort_direction = sort_direction;
      
      if (hasDate) {
          func = function (state) {
              if (state.tmp.extension) {
                  state.tmp["doing-macro-with-date"] = false;
              }
          };
          end_of_macro.execs.push(func);
      }
      if (macro_key_token.juris) {
          end_of_macro.juris = mkey;
       }
      // Macro group is treated as a real node in the style
      CSL.Node.group.build.call(end_of_macro, this, target, true);
  
      this.build.macro_stack.pop();
  };
  
  CSL.getMacroTarget = function (mkey) {
      var mytarget = false;
      if (this.build.extension) {
          mytarget = this[this.build.root + this.build.extension].tokens;
      } else if (!this.macros[mkey]) {
          mytarget = [];
          this.macros[mkey] = mytarget;
      }
      return mytarget;
  };
  
  CSL.buildMacro = function (mytarget, macro_nodes) {
      var builder = CSL.makeBuilder(this, mytarget);
      var mynode;
      if ("undefined" === typeof macro_nodes.length) {
          mynode = macro_nodes;
      } else {
          mynode = macro_nodes[0];
      }
      builder(mynode);
  };
  
  CSL.configureMacro = function (mytarget) {
      if (!this.build.extension) {
          this.configureTokenList(mytarget);
      }
  };
  
  
  /**
   * Convert XML node to token.
   * <p>This is called on an XML node.  After extracting the name and attribute
   * information from the node, it performs three operations.  Attribute information
   * relating to output formatting is stored on the node as an array of tuples,
   * which fixes the sequence of execution of output functions to be invoked
   * in the next phase of processing.  Other attribute information is reduced
   * to functions, and is pushed into an array on the token in no particular
   * order, for later execution.  The element name is used as a key to
   * invoke the relevant <code>build</code> method of the target element.
   * Element methods are defined in {@link CSL.Node}.</p>
   * @param {Object} state  The state object returned by {@link CSL.Engine}.
   * @param {Int} tokentype  A CSL namespace constant (<code>CSL.START</code>,
   * <code>CSL.END</code> or <code>CSL.SINGLETON</code>.
   */
  CSL.XmlToToken = function (state, tokentype, explicitTarget, var_stack) {
      var name, txt, attrfuncs, attributes, decorations, token, key, target;
      name = state.cslXml.nodename(this);
      //CSL.debug(tokentype + " : " + name);
      if (state.build.skip && state.build.skip !== name) {
          return;
      }
      if (!name) {
          txt = state.cslXml.content(this);
          if (txt) {
              state.build.text = txt;
          }
          return;
      }
      if (!CSL.Node[state.cslXml.nodename(this)]) {
          CSL.error("Undefined node name \"" + name + "\".");
      }
      attrfuncs = [];
      attributes = state.cslXml.attributes(this);
      decorations = CSL.setDecorations.call(this, state, attributes);
      token = new CSL.Token(name, tokentype);
      if (tokentype !== CSL.END || name === "if" || name === "else-if" || name === "layout") {
          //
          // xml: more xml stuff
          //
          for (var key in attributes) {
              if (attributes.hasOwnProperty(key)) {
                  if (tokentype === CSL.END && key !== "@language" && key !== "@locale") {
                      continue;
                  }
                  if (attributes.hasOwnProperty(key)) {
                      if (CSL.Attributes[key]) {
                          try {
                              CSL.Attributes[key].call(token, state, "" + attributes[key]);
                          } catch (e) {
                              CSL.error(key + " attribute: " + e);
                          }
                      } else {
                          CSL.debug("warning: undefined attribute \""+key+"\" in style");
                      }
                  }
              }
          }
          token.decorations = decorations;
          if (CSL.DATE_VARIABLES.indexOf(attributes['@variable']) > -1) {
              var_stack.push(token.variables);
          }
      } else if (tokentype === CSL.END && attributes['@variable']) {
          token.hasVariable = true;
          if (CSL.DATE_VARIABLES.indexOf(attributes['@variable']) > -1) {
              token.variables = var_stack.pop();
          }
      }
      //
      // !!!!!: eliminate diversion of tokens to separate
      // token list (formerly used for reading in macros
      // and terms).
      //
      if (explicitTarget) {
          target = explicitTarget;
      } else {
          target = state[state.build.area].tokens;
      }
      // True flags real nodes in the style
      CSL.Node[name].build.call(token, state, target, true);
  };
  
  
  
  /*global CSL: true */
  
  
  CSL.DateParser = function () {
  
      /*
       * Fixed values
       */
  
      // jse imperial years
      var epochPairs = [
          ["\u660E\u6CBB", 1867],
          ["\u5927\u6B63", 1911],
          ["\u662D\u548C", 1925],
          ["\u5E73\u6210", 1988]
      ];
  
      // years by jse imperial epoch
      var epochYearByName = {};
      for (var i=0,ilen=epochPairs.length; i<ilen; i++) {
          var key = epochPairs[i][0];
          var val = epochPairs[i][1];
          epochYearByName[key] = val;
      }
      
      var epochMatchStrings = [];
      var epochMap = {};
      for (var i=0,ilen=epochPairs.length; i<ilen; i++) {
          var pair = epochPairs[i];
          var val = pair[0];
          epochMatchStrings.push(val);
          epochMap[pair[0]] = pair[1];
      }
      var epochMatchString = epochMatchStrings.join("|");
  
      // regular expression to trap year name and year
      // (splitter and matcher, to cope with ancient JS implementations)
      var epochSplitter = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)");
      var epochMatcher = new RegExp("(?:" + epochMatchString + ")(?:[0-9]+)", "g");
  
      // regular expression for month or day kanji label
      var kanjiMonthDay = /(\u6708|\u5E74)/g;
  
      // regular expression for year kanji label
      var kanjiYear = /\u65E5/g;
  
      // regular expression for double-width Japanese range marker
      var kanjiRange = /\u301c/g;
  
      // parsing regexps for normalized strings
      //   raw materials
      var yearLast = "(?:[?0-9]{1,2}%%NUMD%%){0,2}[?0-9]{4}(?![0-9])";
      var yearFirst = "[?0-9]{4}(?:%%NUMD%%[?0-9]{1,2}){0,2}(?![0-9])";
      var numberVal = "[?0-9]{1,3}";
      var rangeSeparator = "[%%DATED%%]";
      var fuzzyChar = "[?~]";
      var chars = "[^\-\/\~\?0-9]+";
      var rexString = "(" + yearFirst + "|" + yearLast + "|" + numberVal + "|" + rangeSeparator + "|" + fuzzyChar + "|" + chars + ")";
      //   composed regexps
      var rexDash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "-"));
      var rexDashSlash = new RegExp(rexString.replace(/%%NUMD%%/g, "-").replace(/%%DATED%%/g, "\/"));
      var rexSlashDash = new RegExp(rexString.replace(/%%NUMD%%/g, "\/").replace(/%%DATED%%/g, "-"));
  
      /*
       * Mutable values
       */
  
      // months
      var monthString = "january february march april may june july august september october november december spring summer fall winter spring summer";
      this.monthStrings = monthString.split(" ");
  
      /*
       * Configuration functions
       */
  
      this.setOrderDayMonth = function() {
          // preferred ordering for numeric dates
          this.monthGuess = 1;
          this.dayGuess = 0;
      };
  
      this.setOrderMonthDay = function() {
          // preferred ordering for numeric dates
          this.monthGuess = 0;
          this.dayGuess = 1;
      };
  
      this.resetDateParserMonths = function() {
          // Function to reset months to default.
          this.monthSets = [];
          for (var i=0,ilen=this.monthStrings.length; i<ilen; i++) {
              this.monthSets.push([this.monthStrings[i]]);
          }
          this.monthAbbrevs = [];
          for (var i=0,ilen=this.monthSets.length; i<ilen; i++) {
              this.monthAbbrevs.push([]);
              for (var j=0,jlen=this.monthSets[i].length; j<jlen; j++) {
                  this.monthAbbrevs[i].push(this.monthSets[i][0].slice(0, 3));
              }
          }
          this.monthRexes = [];
          for (var i=0,ilen=this.monthAbbrevs.length; i<ilen; i++) {
              this.monthRexes.push(new RegExp("(?:" + this.monthAbbrevs[i].join("|") + ")"));
          }
      };
  
      this.addDateParserMonths = function(lst) {
          // Extend list of months with an additional set of month abbreviations,
          // extending strings as required to resolve ambiguities.
  
          // Normalize string to list
          if ("string" === typeof lst) {
              lst = lst.split(/\s+/);
          }
  
          // Check that there are twelve (or sixteen) to add
          if (lst.length !== 12 && lst.length !== 16) {
              CSL.debug("month [+season] list of "+lst.length+", expected 12 or 16. Ignoring.");
              return;
          }
  
          // Extend as necessary to resolve ambiguities
          // For each new month string ...
          for (var i=0,ilen=lst.length; i<ilen; i++) {
              var abbrevLength = null;
              var skip = false;
              var insert = 3;
              var extendedSets = {};
              for (var j=0,jlen=this.monthAbbrevs.length; j<jlen; j++) {
                  extendedSets[j] = {};
                  if (j === i) {
                      // Mark for skipping if same as an existing abbreviation of same month
                      for (var k=0,klen=this.monthAbbrevs[i].length; k<klen; k++) {
                          if (this.monthAbbrevs[i][k] === lst[i].slice(0, this.monthAbbrevs[i][k].length)) {
                              skip = true;
                              break;
                          }
                      }
                  } else {
                      // Mark for extending if same as existing abbreviation of any expression of another month
                      for (var k=0,klen=this.monthAbbrevs[j].length; k<klen; k++) {
                          abbrevLength = this.monthAbbrevs[j][k].length;
                          if (this.monthAbbrevs[j][k] === lst[i].slice(0, abbrevLength)) {
                              while (this.monthSets[j][k].slice(0, abbrevLength) === lst[i].slice(0, abbrevLength)) {
                                  // Abort when full length is hit, otherwise extend
                                  if (abbrevLength > lst[i].length || abbrevLength > this.monthSets[j][k].length) {
                                      CSL.debug("unable to disambiguate month string in date parser: "+lst[i]);
                                      break;
                                  } else {
                                      // Mark both new entry and existing abbrev for extension
                                      abbrevLength += 1;
                                  }
                              }
                              insert = abbrevLength;
                              extendedSets[j][k] = abbrevLength;
                          }
                      }
                  }
                  for (var jKey in extendedSets) {
                      for (var kKey in extendedSets[jKey]) {
                          abbrevLength = extendedSets[jKey][kKey];
                          jKey = parseInt(jKey, 10);
                          kKey = parseInt(kKey, 10);
                          this.monthAbbrevs[jKey][kKey] = this.monthSets[jKey][kKey].slice(0, abbrevLength);
                      }
                  }
              }
              // Insert here
              if (!skip) {
                  this.monthSets[i].push(lst[i]);
                  this.monthAbbrevs[i].push(lst[i].slice(0, insert));
              }
          }
  
          // Compose
          this.monthRexes = [];
          this.monthRexStrs = [];
          for (var i=0,ilen=this.monthAbbrevs.length; i<ilen; i++) {
              this.monthRexes.push(new RegExp("^(?:" + this.monthAbbrevs[i].join("|") + ")"));
              this.monthRexStrs.push("^(?:" + this.monthAbbrevs[i].join("|") + ")");
          }
          if (this.monthAbbrevs.length === 18) {
              for (var i=12,ilen=14; i<ilen; i++) {
                  this.monthRexes[i+4] = new RegExp("^(?:" + this.monthAbbrevs[i].join("|") + ")");
                  this.monthRexStrs[i+4] = "^(?:" + this.monthAbbrevs[i].join("|") + ")";
              }
          }
      };
  
      /*
       * Conversion functions
       */
  
      this.convertDateObjectToArray = function (thedate) {
          // Converts object in place and returns object
          thedate["date-parts"] = [];
          thedate["date-parts"].push([]);
          var slicelen = 0;
          var part;
          for (var i=0,ilen=3; i<ilen; i++) {
              part = ["year", "month", "day"][i];
              if (!thedate[part]) {
                  break;
              }
              slicelen += 1;
              thedate["date-parts"][0].push(thedate[part]);
              delete thedate[part];
          }
          thedate["date-parts"].push([]);
          for (var i=0, ilen=slicelen; i<ilen; i++) {
              part = ["year_end", "month_end", "day_end"][i];
              if (!thedate[part]) {
                  break;
              }
              thedate["date-parts"][1].push(thedate[part]);
              delete thedate[part];
          }
          if (thedate["date-parts"][0].length !== thedate["date-parts"][1].length) {
              thedate["date-parts"].pop();
          }
          return thedate;
      };
  
      // XXXX String output is currently unable to represent ranges
      this.convertDateObjectToString = function(thedate) {
          // Returns string
          var ret = [];
          for (var i = 0, ilen = 3; i < ilen; i += 1) {
              if (thedate[CSL.DATE_PARTS_ALL[i]]) {
                  ret.push(thedate[CSL.DATE_PARTS_ALL[i]]);
              } else {
                  break;
              }
          }
          return ret.join("-");
      };
  
      /*
       * Utility function
       */
  
      this._parseNumericDate = function (ret, delim, suff, txt) {
          if (!suff) {
              suff = "";
          }
          var lst = txt.split(delim);
          
          for (var i=0, ilen=lst.length; i<ilen; i++) {
              if (lst[i].length === 4) {
                  ret[("year" + suff)] = lst[i].replace(/^0*/, "");
                  if (!i) {
                      lst = lst.slice(1);
                  } else {
                      lst = lst.slice(0, i);
                  }
                  break;
              }
          }
          for (var i=0,ilen=lst.length; i<ilen; i++) {
              lst[i] = parseInt(lst[i], 10);
          }
          if (lst.length === 1 || (lst.length === 2 && !lst[1])) {
              var month = lst[0];
              if (month) {
                  ret[("month" + suff)] = "" + lst[0];
              }
          } else if (lst.length === 2) {
              if (lst[this.monthGuess] > 12) {
                  var month = lst[this.dayGuess];
                  var day = lst[this.monthGuess];
                  if (month) {
                      ret[("month" + suff)] = "" + month;
                      if (day) {
                          ret[("day" + suff)] = "" + day;
                      }
                  }
              } else {
                  var month = lst[this.monthGuess];
                  var day = lst[this.dayGuess];
                  if (month) {
                      ret[("month" + suff)] = "" + month;
                      if (day) {
                          ret[("day" + suff)] = "" + day;
                      }
                  }
              }
          }
      };
  
      /*
       * Parsing functions
       */
  
      this.parseDateToObject = function (txt) {
          //
          // Normalize the format and the year if it's a Japanese date
          //
          var orig = txt;
          var slashPos = -1;
          var dashPos = -1;
          var yearIsNegative = false;
          var lst;
          if (txt) {
              txt = txt.replace(/^(.*[0-9])T[0-9].*/, "$1");
              // If string leads with a minus sign, strip and memo it.
              if (txt.slice(0, 1) === "-") {
                  yearIsNegative = true;
                  txt = txt.slice(1);
              }
              
              // If string is a number of 1 to 3 characters only, treat as year.
              if (txt.match(/^[0-9]{1,3}$/)) {
                  while (txt.length < 4) {
                      txt = "0" + txt;
                  }
              }
              
              // Normalize to string
              txt = "" + txt;
              // Remove things that look like times
              txt = txt.replace(/\s*[0-9]{2}:[0-9]{2}(?::[0-9]+)/,"");
              var m = txt.match(kanjiMonthDay);
              if (m) {
                  txt = txt.replace(/\s+/g, "");
                  txt = txt.replace(kanjiYear, "");
                  txt = txt.replace(kanjiMonthDay, "-");
                  txt = txt.replace(kanjiRange, "/");
                  txt = txt.replace(/\-\//g, "/");
                  txt = txt.replace(/-$/g,"");
  
                  // Tortuous workaround for IE6
                  var slst = txt.split(epochSplitter);
                  lst = [];
                  var mm = txt.match(epochMatcher);
                  if (mm) {
                      var mmx = [];
                      for (var i=0,ilen=mm.length; i<ilen; i++) {
                          mmx = mmx.concat(mm[i].match(/([^0-9]+)([0-9]+)/).slice(1));
                      }
                      for (var i=0,ilen=slst.length; i<ilen; i++) {
                          lst.push(slst[i]);
                          if (i !== (ilen - 1)) {
                              // pos is undeclared, and multiplying by 2 here is insane.
                              var mmpos = (i * 2);
                              lst.push(mmx[mmpos]);
                              lst.push(mmx[mmpos + 1]);
                          }
                      }
                  } else {
                      lst = slst;
                  }
                  // workaround duly applied, this now works
                  for (var i=1,ilen=lst.length; i<ilen; i+=3) {
                      lst[i + 1] = epochMap[lst[i]] + parseInt(lst[i + 1], 10);
                      lst[i] = "";
                  }
                  txt = lst.join("");
                  txt = txt.replace(/\s*-\s*$/, "").replace(/\s*-\s*\//, "/");
                  //
                  // normalize date and identify delimiters
                  //
                  txt = txt.replace(/\.\s*$/, "");
  
                  // not sure what this is meant to do
                  txt = txt.replace(/\.(?! )/, "");
  
                  slashPos = txt.indexOf("/");
                  dashPos = txt.indexOf("-");
              }
          }
          // drop punctuation from a.d., b.c.
          txt = txt.replace(/([A-Za-z])\./g, "$1");
  
          var number = "";
          var note = "";
          var thedate = {};
          var rangeDelim;
          var dateDelim;
          if (txt.slice(0, 1) === "\"" && txt.slice(-1) === "\"") {
              thedate.literal = txt.slice(1, -1);
              return thedate;
          }
          if (slashPos > -1 && dashPos > -1) {
              var slashCount = txt.split("/");
              if (slashCount.length > 3) {
                  rangeDelim = "-";
                  txt = txt.replace(/\_/g, "-");
                  dateDelim = "/";
                  lst = txt.split(rexSlashDash);
              } else {
                  rangeDelim = "/";
                  txt = txt.replace(/\_/g, "/");
                  dateDelim = "-";
                  lst = txt.split(rexDashSlash);
              }
          } else {
              txt = txt.replace(/\//g, "-");
              txt = txt.replace(/\_/g, "-");
              rangeDelim = "-";
              dateDelim = "-";
              lst = txt.split(rexDash);
          }
          var ret = [];
          for (var i=0,ilen=lst.length; i<ilen; i++) {
              var m = lst[i].match(/^\s*([\-\/]|[^\-\/\~\?0-9]+|[\-~?0-9]+)\s*$/);
              if (m) {
                  ret.push(m[1]);
              }
          }
          //
          // Phase 2
          //
          var delimPos = ret.indexOf(rangeDelim);
          var delims = [];
          var isRange = false;
          if (delimPos > -1) {
              delims.push([0, delimPos]);
              delims.push([(delimPos + 1), ret.length]);
              isRange = true;
          } else {
              delims.push([0, ret.length]);
          }
          //
          // For each side of a range divide ...
          //
          var suff = "";
          
          for (var i=0,ilen=delims.length; i<ilen; i++) {
              var delim = delims[i];
              //
              // Process each element ...
              //
              var date = ret.slice(delim[0], delim[1]);
              outer: 
              for (var j=0,jlen=date.length; j<jlen; j++) {
                  var element = date[j];
                  //
                  // If it's a numeric date, process it.
                  //
                  if (element.indexOf(dateDelim) > -1) {
                      this._parseNumericDate(thedate, dateDelim, suff, element);
                      continue;
                  }
                  //
                  // If it's an obvious year, record it.
                  //
                  if (element.match(/[0-9]{4}/)) {
                      thedate[("year" + suff)] = element.replace(/^0*/, "");
                      continue;
                  }
                  //
                  // If it's a fuzzy marker, record it.
                  //
                  if (element === "~" || element === "?" || element === "c" || element.match(/^cir/)) {
                      thedate.circa = true;
                  }
                  //
                  // If it's a month, record it.
                  //
                  for (var k=0,klen=this.monthRexes.length; k<klen; k++) {
                      if (element.toLocaleLowerCase().match(this.monthRexes[k])) {
                          thedate[("month" + suff)] = "" + (parseInt(k, 10) + 1);
                          continue outer;
                      }
                  }
                  //
                  // If it's a number, make a note of it
                  //
                  if (element.match(/^[0-9]+$/)) {
                      number = element;
                  }
                  //
                  // If it's a BC or AD marker, make a year of
                  // any note.  Separate, reverse the sign of the year
                  // if it's BC.
                  //
                  if (element.toLocaleLowerCase().match(/^bc/) && number) {
                      thedate[("year" + suff)] = "" + (number * -1);
                      number = "";
                      continue;
                  }
                  if (element.toLocaleLowerCase().match(/^ad/) && number) {
                      thedate[("year" + suff)] = "" + number;
                      number = "";
                      continue;
                  }
                  //
                  // If it's cruft, make a note of it
                  //
                  if (element.toLocaleLowerCase().match(/(?:mic|tri|hil|eas)/) && !thedate[("season" + suff)]) {
                      note = element;
                      continue;
                  }
              }
              //
              // If at the end of the string there's still a note
              // hanging around, make a day of it.
              //
              if (number) {
                  thedate[("day" + suff)] = number;
                  number = "";
              }
              //
              // If at the end of the string there's cruft lying
              // around, and the season field is empty, put the
              // cruft there.
              //
              if (note && !thedate[("season" + suff)]) {
                  thedate[("season" + suff)] = note.trim();
                  note = "";
              }
              suff = "_end";
          }
          //
          // update any missing elements on each side of the divide
          // from the other
          //
          if (isRange) {
              for (var j=0,jlen=CSL.DATE_PARTS_ALL.length; j<jlen; j++) {
                  var item = CSL.DATE_PARTS_ALL[j];
                  if (thedate[item] && !thedate[(item + "_end")]) {
                      thedate[(item + "_end")] = thedate[item];
                  } else if (!thedate[item] && thedate[(item + "_end")]) {
                      thedate[item] = thedate[(item + "_end")];
                  }
              }
          }
          //
          // If there's no year, or if there only a year and a day, it's a failure; pass through the literal
          //
          if (!thedate.year || (thedate.year && thedate.day && !thedate.month)) {
              thedate = { "literal": orig };
          }
          var parts = ["year", "month", "day", "year_end", "month_end", "day_end"];
          for (var i=0,ilen=parts.length; i<ilen; i++) {
              var part = parts[i];
              if ("string" === typeof thedate[part] && thedate[part].match(/^[0-9]+$/)) {
                  thedate[part] = parseInt(thedate[part], 10);
              }
              
          }
          if (yearIsNegative && Object.keys(thedate).indexOf("year") > -1) {
              thedate.year = (thedate.year * -1);
          }
          return thedate;
      };
  
      this.parseDateToArray = function(txt) {
          return this.convertDateObjectToArray(this.parseDateToObject(txt));            
      };
  
      this.parseDateToString = function(txt) {
          return this.convertDateObjectToString(this.parseDateToObject(txt));
      };
      
      this.parse = function(txt) {
          return this.parseDateToObject(txt);
      };
      
      /*
  
       * Setup
       */
  
      this.setOrderMonthDay();
      this.resetDateParserMonths();
  };
  CSL.DateParser = new CSL.DateParser();
  
  /*global CSL: true */
  
  CSL.Engine = function (sys, style, lang, forceLang) {
      var attrs, langspec;
      this.processor_version = CSL.PROCESSOR_VERSION;
      this.csl_version = "1.0";
      this.sys = sys;
      
      if (typeof Object.assign != 'function') {
          // Must be writable: true, enumerable: false, configurable: true
          Object.defineProperty(Object, "assign", {
              value: function assign(target) { // .length of function is 2
                  'use strict';
                  if (target == null) { // TypeError if undefined or null
                      throw new TypeError('Cannot convert undefined or null to object');
                  }
  
                  var to = Object(target);
  
                  for (var index = 1; index < arguments.length; index++) {
                      var nextSource = arguments[index];
  
                      if (nextSource != null) { // Skip over if undefined or null
                          for (var nextKey in nextSource) {
                              // Avoid bugs when hasOwnProperty is shadowed
                              if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
                                  to[nextKey] = nextSource[nextKey];
                              }
                          }
                      }
                  }
                  return to;
              },
              writable: true,
              configurable: true
          });
      }
  
      // XXX This may be excess code. Given the normalization performed on
      // XXX the output queue before variableWrapper() is run, a single
      // XXX space should be the most cruft that we ever see before a variable.
      if (sys.variableWrapper) {
          CSL.VARIABLE_WRAPPER_PREPUNCT_REX = new RegExp('^([' + [" "].concat(CSL.SWAPPING_PUNCTUATION).join("") + ']*)(.*)');
      }
      // XXXX This should be restored -- temporarily suspended for testing of JSON style support.
      if (CSL.retrieveStyleModule) {
          this.sys.retrieveStyleModule = CSL.retrieveStyleModule;
      }
      if (CSL.getAbbreviation) {
          this.sys.getAbbreviation = CSL.getAbbreviation;
      }
      if (this.sys.stringCompare) {
          CSL.stringCompare = this.sys.stringCompare;
      }
      this.sys.AbbreviationSegments = CSL.AbbreviationSegments;
  
      this.transform = new CSL.Transform(this);
      // true or false
      this.setParseNames = function (val) {
          this.opt['parse-names'] = val;
      };
      
      this.opt = new CSL.Engine.Opt();
      this.tmp = new CSL.Engine.Tmp();
      this.build = new CSL.Engine.Build();
      this.fun = new CSL.Engine.Fun(this);
  
      this.configure = new CSL.Engine.Configure();
      // Build citation before citation_sort in order to pick up
      // state.opt.update_mode, needed it determine whether
      // a grouped sort should be performed.
      this.citation_sort = new CSL.Engine.CitationSort();
      this.bibliography_sort = new CSL.Engine.BibliographySort();
      this.citation = new CSL.Engine.Citation(this);
      this.bibliography = new CSL.Engine.Bibliography();
      this.intext = new CSL.Engine.InText();
  
      this.output = new CSL.Output.Queue(this);
  
      //this.render = new CSL.Render(this);
      //
      // This latter queue is used for formatting date chunks
      // before they are folded back into the main queue.
      //
      this.dateput = new CSL.Output.Queue(this);
  
      this.cslXml = CSL.setupXml(style);
  
      for (var i in CSL.SYS_OPTIONS) {
          var option = CSL.SYS_OPTIONS[i];
          if ("boolean" === typeof this.sys[option]) {
              this.opt.development_extensions[option] = this.sys[option];
          }
          
      }
      if (this.opt.development_extensions.uppercase_subtitles || this.opt.development_extensions.implicit_short_title) {
          this.opt.development_extensions.main_title_from_short_title = true;
      }
      if (this.opt.development_extensions.csl_reverse_lookup_support) {
          this.build.cslNodeId = 0;
          this.setCslNodeIds = function(myxml, nodename) {
              var children = this.cslXml.children(myxml);
              this.cslXml.setAttribute(myxml, 'cslid', this.build.cslNodeId);
              this.opt.nodenames.push(nodename);
              this.build.cslNodeId += 1;
              for (var i = 0, ilen = this.cslXml.numberofnodes(children); i < ilen; i += 1) {
                  nodename = this.cslXml.nodename(children[i]);
                  if (nodename) {
                      this.setCslNodeIds(children[i], nodename);
                  }
              }
          };
          this.setCslNodeIds(this.cslXml.dataObj, "style");
      }
      // Preprocessing ops for the XML input
      this.cslXml.addMissingNameNodes(this.cslXml.dataObj);
      this.cslXml.addInstitutionNodes(this.cslXml.dataObj);
      this.cslXml.insertPublisherAndPlace(this.cslXml.dataObj);
      this.cslXml.flagDateMacros(this.cslXml.dataObj);
      attrs = this.cslXml.attributes(this.cslXml.dataObj);
      if ("undefined" === typeof attrs["@sort-separator"]) {
          this.cslXml.setAttribute(this.cslXml.dataObj, "sort-separator", ", ");
      }
      // This setting does the right thing and seems not to be side-effects
      this.opt["initialize-with-hyphen"] = true;
  
      // Locale resolution
      //
      // (1) Get three locale strings 
      //     -- default-locale (stripped)
      //     -- processor-locale
      //     -- en_US
      
      this.setStyleAttributes();
  
      this.opt.xclass = this.cslXml.getAttributeValue(this.cslXml.dataObj, "class");
      this.opt["class"] = this.opt.xclass;
      this.opt.styleID = this.cslXml.getStyleId(this.cslXml.dataObj);
      this.opt.styleName = this.cslXml.getStyleId(this.cslXml.dataObj, true);
  
      if (this.opt.version.slice(0,4) === "1.1m") {
          this.opt.development_extensions.consolidate_legal_items = true;
          this.opt.development_extensions.consolidate_container_items = true;
          this.opt.development_extensions.main_title_from_short_title = true;
          this.opt.development_extensions.expect_and_symbol_form = true;
          this.opt.development_extensions.require_explicit_legal_case_title_short = true;
          this.opt.development_extensions.force_jurisdiction = true;
          this.opt.development_extensions.force_title_abbrev_fallback = true;
      }
      // We seem to have two language specs flying around:
      //   this.opt["default-locale"], and this.opt.lang
      // Keeping them aligned for safety's sake, pending
      // eventual cleanup.
      if (lang) {
          lang = lang.replace("_", "-");
          lang = CSL.normalizeLocaleStr(lang);
      }
      if (this.opt["default-locale"][0]) {
          this.opt["default-locale"][0] = this.opt["default-locale"][0].replace("_", "-");
          this.opt["default-locale"][0] = CSL.normalizeLocaleStr(this.opt["default-locale"][0]);
      }
      if (lang && forceLang) {
          this.opt["default-locale"] = [lang];
      }
      if (lang && !forceLang && this.opt["default-locale"][0]) {
          lang = this.opt["default-locale"][0];
      }
      if (this.opt["default-locale"].length === 0) {
          if (!lang) {
              lang = "en-US";
          }
          this.opt["default-locale"].push("en-US");
      }
      if (!lang) {
          lang = this.opt["default-locale"][0];
      }
      langspec = CSL.localeResolve(lang);
      this.opt.lang = langspec.best;
      this.opt["default-locale"][0] = langspec.best;
      this.locale = {};
      if (!this.opt["default-locale-sort"]) {
          this.opt["default-locale-sort"] = this.opt["default-locale"][0];
      }
      // Test processor against JS engine locale mess to find a field separator that works
      if ('dale|'.localeCompare('daleb', this.opt["default-locale-sort"]) > -1) {
          this.opt.sort_sep = "@";
      } else {
          this.opt.sort_sep = "|";
      }
      this.localeConfigure(langspec);
  
      // Build skip-word regexp
      function makeRegExp(lst) {
          var lst = lst.slice();
          var ret = new RegExp( "(?:(?:[?!:]*\\s+|-|^)(?:" + lst.join("|") + ")(?=[!?:]*\\s+|-|$))", "g");
          return ret;
      }
      this.locale[this.opt.lang].opts["skip-words-regexp"] = makeRegExp(this.locale[this.opt.lang].opts["skip-words"]);
  
      this.output.adjust = new CSL.Output.Queue.adjust(this.getOpt('punctuation-in-quote'));
  
      this.registry = new CSL.Registry(this);
  
      // XXX For modular jurisdiction support, parameterize buildTokenLists().
      // XXX Feed as arguments:
      // XXX * actual node to be walked (cslXml)
      // XXX * actual target array
  
      this.macros = {};
  
      this.build.area = "citation";
      var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
      this.buildTokenLists(area_nodes, this[this.build.area].tokens);
  
      this.build.area = "bibliography";
      var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
      this.buildTokenLists(area_nodes, this[this.build.area].tokens);
  
      this.build.area = "intext";
      var area_nodes = this.cslXml.getNodesByName(this.cslXml.dataObj, this.build.area);
      this.buildTokenLists(area_nodes, this[this.build.area].tokens);
  
      if (this.opt.parallel.enable) {
          this.parallel = new CSL.Parallel(this);
      }
  
      this.juris = {};
  
      this.configureTokenLists();
  
      this.disambiguate = new CSL.Disambiguation(this);
  
      this.splice_delimiter = false;
  
      //
      // date parser
      //
      this.fun.dateparser = CSL.DateParser;
      //
      // flip-flopper for inline markup
      //
      this.fun.flipflopper = new CSL.Util.FlipFlopper(this);
      //
      // utility functions for quotes
      //
      this.setCloseQuotesArray();
      //
      // configure ordinal numbers generator
      //
      this.fun.ordinalizer.init(this);
      //
      // configure long ordinal numbers generator
      //
      this.fun.long_ordinalizer.init(this);
      //
      // set up page mangler
      //
      this.fun.page_mangler = CSL.Util.PageRangeMangler.getFunction(this, "page");
      this.fun.year_mangler = CSL.Util.PageRangeMangler.getFunction(this, "year");
  
      this.setOutputFormat("html");
  };
  
  CSL.Engine.prototype.setCloseQuotesArray = function () {
      var ret;
      ret = [];
      ret.push(this.getTerm("close-quote"));
      ret.push(this.getTerm("close-inner-quote"));
      ret.push('"');
      ret.push("'");
      this.opt.close_quotes_array = ret;
  };
  
  // Walker for preparsed XML input
  CSL.makeBuilder = function (me, target) {
      var var_stack = [];
      var node_stack = [];
      function runStart (node) {
          node_stack.push(node);
          CSL.XmlToToken.call(node, me, CSL.START, target, var_stack);
      }
      function runEnd () {
          var node = node_stack.pop();
          CSL.XmlToToken.call(node, me, CSL.END, target, var_stack);
      }
      function runSingle (node) {
          CSL.XmlToToken.call(node, me, CSL.SINGLETON, target, var_stack);
      }
      function buildStyle (nodes, parent, node_stack) {
          if (!node_stack) {
              node_stack = [];
          }
          if (!nodes) {
              nodes = [];
          }
          if ("undefined" === typeof nodes.length) {
              nodes = [nodes];
          }
          for (var i=0; i<nodes.length; i++) {
              var node = nodes[i];
              if (me.cslXml.nodename(node) === null) {
                  continue;
              }
              if (parent && me.cslXml.nodename(node) === "date") {
                  CSL.Util.fixDateNode.call(me, parent, i, node);
                  node = me.cslXml.children(parent)[i];
              }
              if (me.cslXml.numberofnodes(me.cslXml.children(node))) {
                  runStart(node);
                  buildStyle(me.cslXml.children(node), node, node_stack);
                  runEnd();
              } else {
                  runSingle(node);
              }
          }
      }
      return buildStyle;
  };
  
  
  CSL.Engine.prototype.buildTokenLists = function (area_nodes, target) {
      if (!this.cslXml.getNodeValue(area_nodes)) {
          return;
      }
      var builder = CSL.makeBuilder(this, target);
      var mynode;
      if ("undefined" === typeof area_nodes.length) {
          mynode = area_nodes;
      } else {
          mynode = area_nodes[0];
      }
      builder(mynode);
  };
  
  
  CSL.Engine.prototype.setStyleAttributes = function () {
      var dummy, attributes, attrname;
      // Protect against DOM engines that deliver a top-level document
      // (needed for createElement) that does not contain our top-level node.
      // 
      // The string coercion on this.cslXml.tagName addresses a bizarre
      // condition on the top-level node in jsdom running under node.js, in which:
      //   (1) typeof this.cslXml.tagName === "undefined"; and
      //   (2) !this.cslXml.tagName === false
      // Coerced, it becomes an empty string.
      var dummy = {};
      dummy.name = this.cslXml.nodename(this.cslXml.dataObj);
      attributes = this.cslXml.attributes(this.cslXml.dataObj);
      for (attrname in attributes) {
          if (attributes.hasOwnProperty(attrname)) {
              // attr = attributes[key];
              CSL.Attributes[attrname].call(dummy, this, attributes[attrname]);
          }
      }
  };
  
  CSL.Engine.prototype.getTerm = function (term, form, plural, gender, mode, forceDefaultLocale) {
      if (term && term.match(/[A-Z]/) && term === term.toUpperCase()) {
          CSL.debug("Warning: term key is in uppercase form: "+term);
          term = term.toLowerCase();
      }
      var lang;
      if (forceDefaultLocale) {
          lang = this.opt["default-locale"][0];
      } else {
          lang = this.opt.lang;
      }
      var ret = CSL.Engine.getField(CSL.LOOSE, this.locale[lang].terms, term, form, plural, gender);
      // XXXXX Temporary, until locale term is deployed in CSL.
      if (!ret && term === "range-delimiter") {
          ret = "\u2013";
      }
      // XXXXX Not so good if mode is neither strict nor tolerant ...
      if (typeof ret === "undefined") {
          if (mode === CSL.STRICT) {
              CSL.error("Error in getTerm: term \"" + term + "\" does not exist.");
          } else if (mode === CSL.TOLERANT) {
              ret = "";
          }
      }
      if (ret) {
          this.tmp.cite_renders_content = true;
      }
      return ret;
  };
  
  CSL.Engine.prototype.getDate = function (form, forceDefaultLocale) {
      var lang;
      if (forceDefaultLocale) {
          lang = this.opt["default-locale"];
      } else {
          lang = this.opt.lang;
      }
      if (this.locale[lang].dates[form]) {
          return this.locale[lang].dates[form];
      } else {
          return false;
      }
  };
  
  CSL.Engine.prototype.getOpt = function (arg) {
      if ("undefined" !== typeof this.locale[this.opt.lang].opts[arg]) {
          return this.locale[this.opt.lang].opts[arg];
      } else {
          return false;
      }
  };
  
  
  
  CSL.Engine.prototype.getVariable = function (Item, varname, form, plural) {
      return CSL.Engine.getField(CSL.LOOSE, Item, varname, form, plural);
  };
  
  CSL.Engine.prototype.getDateNum = function (ItemField, partname) {
      if ("undefined" === typeof ItemField) {
          return 0;
      } else {
          return ItemField[partname];
      }
  };
  
  CSL.Engine.getField = function (mode, hash, term, form, plural, gender) {
      var ret, forms, f, pos, len, hashterm;
      ret = "";
      if ("undefined" === typeof hash[term]) {
          if (mode === CSL.STRICT) {
              CSL.error("Error in getField: term \"" + term + "\" does not exist.");
          } else {
              return undefined;
          }
      }
      if (gender && hash[term][gender]) {
          hashterm = hash[term][gender];
      } else {
          hashterm = hash[term];
      }
      forms = [];
      if (form === "symbol") {
          forms = ["symbol", "short"];
      } else if (form === "verb-short") {
          forms = ["verb-short", "verb"];
      } else if (form !== "long") {
          forms = [form];
      }
      forms = forms.concat(["long"]);
      len = forms.length;
      for (pos = 0; pos < len; pos += 1) {
          f = forms[pos];
          if ("string" === typeof hashterm || "number" === typeof hashterm) {
              ret = hashterm;
          } else if ("undefined" !== typeof hashterm[f]) {
              if ("string" === typeof hashterm[f] || "number" === typeof hashterm[f]) {
                  ret = hashterm[f];
              } else {
                  if ("number" === typeof plural) {
                      ret = hashterm[f][plural];
                  } else {
                      ret = hashterm[f][0];
                  }
              }
              break;
          }
      }
      return ret;
  };
  
  CSL.Engine.prototype.configureTokenLists = function () {
      var area, pos, len;
      //for each (var area in ["citation", "citation_sort", "bibliography","bibliography_sort"]) {
      len = CSL.AREAS.length;
      for (pos = 0; pos < len; pos += 1) {
          //var ret = [];
          area = CSL.AREAS[pos];
          var tokens = this[area].tokens;
          this.configureTokenList(tokens);
      }
      this.version = CSL.version;
      return this.state;
  };
  
  CSL.Engine.prototype.configureTokenList = function (tokens) {
      var dateparts_master, token, dateparts, part, ppos, pppos, llen, lllen;
      dateparts_master = ["year", "month", "day"];
      llen = tokens.length - 1;
      for (ppos = llen; ppos > -1; ppos += -1) {
          token = tokens[ppos];
          //token.pos = ppos;
          //ret.push(token);
          if ("date" === token.name && CSL.END === token.tokentype) {
              dateparts = [];
          }
          if ("date-part" === token.name && token.strings.name) {
              lllen = dateparts_master.length;
              for (pppos = 0; pppos < lllen; pppos += 1) {
                  part = dateparts_master[pppos];
                  if (part === token.strings.name) {
                      dateparts.push(token.strings.name);
                  }
              }
          }
          if ("date" === token.name && CSL.START === token.tokentype) {
              dateparts.reverse();
              token.dateparts = dateparts;
          }
          token.next = (ppos + 1);
          if (token.name && CSL.Node[token.name].configure) {
              CSL.Node[token.name].configure.call(token, this, ppos);
          }
      }
  };
  
  CSL.Engine.prototype.refetchItems = function (ids) {
      var ret = [];
      for (var i = 0, ilen = ids.length; i < ilen; i += 1) {
          ret.push(this.refetchItem("" + ids[i]));
      }
      return ret;
  };
  
  CSL.ITERATION = 0;
  
  // Wrapper for sys.retrieveItem supplied by calling application.
  // Adds experimental fields embedded in the note field for
  // style development trial and testing purposes.
  CSL.Engine.prototype.retrieveItem = function (id) {
      var Item, m, i;
  
      if (!this.tmp.loadedItemIDs[id]) {
          this.tmp.loadedItemIDs[id] = true;
      } else {
          return this.registry.refhash[id];
      }
  
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase &&
          "boolean" === typeof this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          // This is a hack. Should properly be configured by a processor method after build.
          for (var i=0,ilen=this.opt["default-locale"].length; i<ilen; i+=1) {
              this.opt["default-locale"][i] = this.opt["default-locale"][i].toLowerCase();
          }
          for (var i=0,ilen=this.opt["locale-translit"].length; i<ilen; i+=1) {
              this.opt["locale-translit"][i] = this.opt["locale-translit"][i].toLowerCase();
          }
          for (var i=0,ilen=this.opt["locale-translat"].length; i<ilen; i+=1) {
              this.opt["locale-translat"][i] = this.opt["locale-translat"][i].toLowerCase();
          }
          this.opt.development_extensions.normalize_lang_keys_to_lowercase = 100;
      }
  
      //Zotero.debug("XXX === ITERATION " + CSL.ITERATION + " "+ id +" ===");
      CSL.ITERATION += 1;
  
      Item = JSON.parse(JSON.stringify(this.sys.retrieveItem("" + id)));
  
      // Optionally normalize keys to lowercase()
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          if (Item.multi) {
              if (Item.multi._keys) {
                  for (var field in Item.multi._keys) {
                      for (var key in Item.multi._keys[field]) {
                          if (key !== key.toLowerCase()) {
                              Item.multi._keys[field][key.toLowerCase()] = Item.multi._keys[field][key];
                              delete Item.multi._keys[field][key];
                          }
                      }
                  }
              }
              if (Item.multi.main) {
                  for (var field in Item.multi.main) {
                      Item.multi.main[field] = Item.multi.main[field].toLowerCase();
                  }
              }
          }
          for (var i=0, ilen=CSL.NAME_VARIABLES.length; i>ilen; i+=1) {
              var ctype = CSL.NAME_VARIABLES[i];
              if (Item[ctype] && Item[ctype].multi) {
                  for (var j=0, jlen=Item[ctype].length; j<jlen; j+=1) {
                      var creator = Item[ctype][j];
                      if (creator.multi) {
                          if (creator.multi._key) {
                              for (var key in creator.multi._key) {
                                  if (key !== key.toLowerCase()) {
                                      creator.multi._key[key.toLowerCase()] = creator.multi._key[key];
                                      delete creator.multi._key[key];
                                  }
                              }
                          }
                          if (creator.multi.main) {
                              creator.multi.main = creator.multi.main.toLowerCase();
                          }
                      }
                  }
              }
          }
      }
  
      // Normalize language field into "language" and "language-original"
      if (Item.language && Item.language.match(/[><]/)) {
          // Attempt to split field in two
          var m = Item.language.match(/(.*?)([<>])(.*)/);
          if (m[2] === "<") {
              Item["language-name"] = m[1];
              Item["language-name-original"] = m[3];
          } else {
              Item["language-name"] = m[3];
              Item["language-name-original"] = m[1];
          }
          if (this.opt.multi_layout) {
              if (Item["language-name-original"]) {
                  Item.language = Item["language-name-original"];
              }
          } else {
              if (Item["language-name"]) {
                  Item.language = Item["language-name"];
              }
          }
      }
  
      if (Item.page) {
          Item["page-first"] = Item.page;
          var num = "" + Item.page;
          var m = num.split(/\s*(?:&|, |-|\u2013)\s*/);
          if (m[0].slice(-1) !== "\\") {
              Item["page-first"] = m[0];
          }
      }
      // Optional development extensions
      if (this.opt.development_extensions.field_hack && Item.note) {
          // false is for validFieldsForType (all conforming entries scrubbed when false)
          CSL.parseNoteFieldHacks(Item, false, this.opt.development_extensions.allow_field_hack_date_override);
      }
      // not including locator-date
      for (var key in Item) {
          if (CSL.DATE_VARIABLES.indexOf(key.replace(/^alt-/, "")) > -1) {
              var dateobj = Item[key];
              if (dateobj) {
                  // raw date parsing is harmless, but can be disabled if desired
                  if (this.opt.development_extensions.raw_date_parsing) {
                      if (dateobj.raw && (!dateobj["date-parts"] || dateobj["date-parts"].length === 0)) {
                          dateobj = this.fun.dateparser.parseDateToObject(dateobj.raw);
                      }
                  }
                  Item[key] = this.dateParseArray(dateobj);
              }
          }
      }
      if (this.opt.development_extensions.consolidate_legal_items) {
          if (Item.type && ["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) > -1) {
              var varname;
              var elements = ["type", "title", "jurisdiction", "genre", "volume", "container-title"];
              var legislation_id = [];
              for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
                  varname = elements[i];
          if (Item[varname]) {
            legislation_id.push(Item[varname]);
          }
        }
              elements = ["original-date", "issued"];
        for (var i = 0, ilen=elements.length; i < ilen; i += 1) {
                  varname = elements[i];
          if (Item[varname] && Item[varname].year) {
            var value = Item[varname].year;
            legislation_id.push(value);
            break;
          }
        }
        Item.legislation_id = legislation_id.join("::");
          }
      }
      if (this.bibliography.opt.track_container_items) {
          if (this.bibliography.opt.track_container_items.indexOf(Item.type) > -1) {
              var varname;
              var elements = ["type", "container-title", "publisher", "edition"];
              var container_id = [];
              for (var i = 0, ilen = elements.length; i < ilen; i += 1) {
                  varname = elements[i];
          if (Item[varname]) {
            container_id.push(Item[varname]);
          }
        }
        Item.container_id = container_id.join("::");
          }
      }
      // For authority to name shape in legal styles
      if (this.opt.development_extensions.force_jurisdiction) {
          if ("string" === typeof Item.authority) {
              Item.authority = [
                  {
                      literal: Item.authority,
                      multi: {
                          _key: {}
                      }
                  }
              ];
              if (Item.multi && Item.multi._keys && Item.multi._keys.authority) {
                  Item.authority[0].multi._key = {};
                  for (var key in Item.multi._keys.authority) {
                      Item.authority[0].multi._key[key] = {
                          literal: Item.multi._keys.authority[key]
                      };
                  }
              }
          }
      }
      // Add getAbbreviation() call for title-short and container-title-short
      if (!Item["title-short"]) {
          Item["title-short"] = Item.shortTitle;
      }
      // Add support for main_title_from_short_title
      if (this.opt.development_extensions.main_title_from_short_title) {
          var narrowSpaceLocale = this.opt["default-locale"][0].slice(0, 2).toLowerCase() === "fr";
          CSL.extractTitleAndSubtitle.call(this, Item, narrowSpaceLocale);
      }
      var isLegalType = ["bill","legal_case","legislation","gazette","regulation"].indexOf(Item.type) > -1;
      if (this.opt.development_extensions.force_jurisdiction && isLegalType) {
          if (!Item.jurisdiction) {
              Item.jurisdiction = "us";
          }
      }
      var normalizedKey;
      if (!isLegalType && Item.title && this.sys.getAbbreviation) {
          var noHints = false;
          if (!Item.jurisdiction) {
              noHints = true;
          }
          if (this.sys.normalizeAbbrevsKey) {
               normalizedKey = this.sys.normalizeAbbrevsKey("title", Item.title);
          } else {
              normalizedKey = Item.title;
          }
          var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, "title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction].title) {
              if (this.transform.abbrevs[jurisdiction].title[normalizedKey]) {
                  Item["title-short"] = this.transform.abbrevs[jurisdiction].title[normalizedKey];
              }
          }
      }
      if (!Item["container-title-short"]) {
          Item["container-title-short"] = Item.journalAbbreviation;
      }
      if (Item["container-title"] && this.sys.getAbbreviation) {
          if (this.sys.normalizeAbbrevsKey) {
              normalizedKey = this.sys.normalizeAbbrevsKey(Item["container-title"]);
          } else {
              normalizedKey = Item["container-title"];
          }
          var jurisdiction = this.transform.loadAbbreviation(Item.jurisdiction, "container-title", normalizedKey, Item.language);
          if (this.transform.abbrevs[jurisdiction]["container-title"]) {
              if (this.transform.abbrevs[jurisdiction]["container-title"][normalizedKey]) {
                  Item["container-title-short"] = this.transform.abbrevs[jurisdiction]["container-title"][normalizedKey];
              }
          }
      }
      if (Item.jurisdiction) {
          Item.country = Item.jurisdiction.split(":")[0];
      }
      if (this.registry.refhash[id]) {
          if (JSON.stringify(this.registry.refhash[id]) != JSON.stringify(Item)) {
              for (var key in this.registry.refhash[id]) {
                  delete this.registry.refhash[id][key];
              }
              this.tmp.taintedItemIDs[Item.id] = true;
              Object.assign(this.registry.refhash[id], Item);
          }
      } else {
          this.registry.refhash[id] = Item;
      }
      return this.registry.refhash[id];
  };
  
  CSL.Engine.prototype.refetchItem = function (id) {
      return this.registry.refhash[id];
  };
  
  // Executed during style build
  CSL.Engine.prototype.setOpt = function (token, name, value) {
      if (token.name === "style" || token.name === "cslstyle") {
          this.opt.inheritedAttributes[name] = value;
          this.citation.opt.inheritedAttributes[name] = value;
          this.bibliography.opt.inheritedAttributes[name] = value;
      } else if (["citation", "bibliography"].indexOf(token.name) > -1) {
          this[token.name].opt.inheritedAttributes[name] = value;
      } else {
          token.strings[name] = value;
      }
  };
  
  // Executed at runtime, since macros can occur in the context of citation or bibliography
  CSL.Engine.prototype.inheritOpt = function (token, attrname, parentname, defaultValue) {
      if ("undefined" !== typeof token.strings[attrname]) {
          return token.strings[attrname];
      } else {
          var parentValue = this[this.tmp.root].opt.inheritedAttributes[parentname ? parentname : attrname];
          if ("undefined" !== typeof parentValue) {
              return parentValue;
          } else {
              return defaultValue;
          }
      }
  };
  
  CSL.Engine.prototype.remapSectionVariable = function (inputList) {
      // We have items with a value in the section field (on Item) that must
      // be mapped to the locator field (on item). We simply prepend it as
      // a string here, and handle all parsing of the resulting string
      // in processNumber(). Plurals and numeric are set in processNumber().
      
      // Because the target is in the citation item (lowercase), the
      // remapping cannot take place when the Item data is received.
      // Citation provides a list of Item/item pairs, hence the iteration
      // used here.
      for (var i = 0, ilen = inputList.length; i < ilen; i += 1) {
          var Item = inputList[i][0];
          var item = inputList[i][1];
  
          if (["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) > -1) {
               // If a locator value exists, then
              //   (a) Leave be an overriding label at the start of the locator field, defaulting to label value
              if (item.locator) {
                  item.locator = item.locator.trim();
                  var m = item.locator.match(CSL.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
                  if (!m) {
                      if (item.label) {
                          item.locator = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[item.label] + " " + item.locator;
                      } else {
                          item.locator = "p. " + item.locator;
                      }
                  }
              }
              // If a section value exists, then
              //   (a) Apply an overriding label at the start of the section field, defaulting to sec.
              var sectionMasterLabel = null;
              if (Item.section) {
                  Item.section = Item.section.trim();
                  var m = Item.section.match(CSL.STATUTE_SUBDIV_PLAIN_REGEX_FRONT);
                  if (!m) {
                      Item.section = "sec. " + Item.section;
                      sectionMasterLabel = "sec.";
                  } else {
                      sectionMasterLabel = m[0].trim();
                  }
              }
              // If section is nil, then
              //   (a) Do nothing
              if (Item.section) {
              // If section exists and locator is nil
              //   (a) Set section string in locator field
                  if (!item.locator) {
                      item.locator = Item.section;
                  } else {
              // If both section and locator exist, then
              //   (a) If locator starts with p., remove p., merge with space or no-space, and set in locator field
              //   (b) If locator starts with non-p., prepend section value to locator with space, and set in locator field
                      var m = item.locator.match(/^([^ ]*)\s*(.*)/);
                      var space = " ";
                      if (m) {
                          if (m[1] === "p." && sectionMasterLabel !== "p.") {
                              item.locator = m[2];
                          }
                          if (["[", "(", ".", ",", ";", ":", "?"].indexOf(item.locator.slice(0, 1)) > -1) {
                              space = "";
                          }
                      } else {
                         space = ""; 
                      }
                      item.locator = Item.section + space + item.locator;
                  }
                  //Item.section = "";
              }
              item.label = "";
              // And that's it. Pre-parse complete.
          }
      }
  };
  
  
  CSL.Engine.prototype.setNumberLabels = function (Item) {
       if (Item.number
          && ["bill", "gazette", "legislation","regulation","treaty"].indexOf(Item.type) > -1
          && this.opt.development_extensions.consolidate_legal_items
          && !this.tmp.shadow_numbers["number"]) {
  
          this.tmp.shadow_numbers["number"] = {};
          this.tmp.shadow_numbers["number"].values = [];
          this.tmp.shadow_numbers["number"].plural = 0;
          this.tmp.shadow_numbers["number"].numeric = false;
          this.tmp.shadow_numbers["number"].label = false;
          
          // Labels embedded in number variable
          var value = "" + Item.number;
          value = value.split("\\").join("");
          // Get first word, parse out labels only if it parses
          var firstword = value.split(/\s+/)[0];
          var firstlabel = CSL.STATUTE_SUBDIV_STRINGS[firstword];
          if (firstlabel) {
              // Get list and match
              var splt = value.split(CSL.STATUTE_SUBDIV_PLAIN_REGEX);
              if (splt.length > 1) {
                  // Convert matches to localized form
                  var lst = [];
                  for (var j=1, jlen=splt.length; j < jlen; j += 1) {
                      lst.push(splt[j].replace(/\s*$/, "").replace(/^\s*/, ""));
                  }
                  // Preemptively save to shadow_numbers
                  value = lst.join(" ");
              } else {
                  value = splt[0];
              }
              this.tmp.shadow_numbers["number"].label = firstlabel;
              this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
              this.tmp.shadow_numbers["number"].numeric = false;
          } else {
              this.tmp.shadow_numbers["number"].values.push(["Blob", value, false]);
              this.tmp.shadow_numbers["number"].numeric = true;
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.substituteOne = function (template) {
      return function (state, list) {
          if (!list) {
              return "";
          } else {
              // ("string" === typeof list)
              return template.replace("%%STRING%%", list);
          }
      };
  };
  
  
  /**
   * Two-tiered substitutions gadget.
   * <p>This is used for
   * options like (now defunct) "font-family", where the option value
   * cannot be determined until the attribute is processed.
   * Need for this function might be reviewed at some point ...</p>
   * @param {String} template A template containing
   * <code>%%STRING%%</code> and <code>%%PARAM%%</code>
   * placeholders.  See {@link CSL.Output.Formats.html} for
   * examples.
   */
  CSL.substituteTwo = function (template) {
      return function (param) {
          var template2 = template.replace("%%PARAM%%", param);
          return function (state, list) {
              if (!list) {
                  return "";
              } else {
                  //("string" === typeof list){
                  return template2.replace("%%STRING%%", list);
              }
          };
      };
  };
  
  /**
   * Generate string functions for designated output mode.
   * <p>Only "html" (the default) is supported at present.</p>
   * @param {String} mode Either "html" or "rtf", eventually.
   */
  CSL.Mode = function (mode) {
      var decorations, params, param, func, val, args;
      decorations = {};
      params = CSL.Output.Formats[mode];
      for (param in params) {
          if (true) {
  
              if ("@" !== param.slice(0, 1)) {
                  decorations[param] = params[param];
                  continue;
              }
              func = false;
              val = params[param];
              args = param.split('/');
  
              if (typeof val === "string" && val.indexOf("%%STRING%%") > -1)  {
                  if (val.indexOf("%%PARAM%%") > -1) {
                      func = CSL.substituteTwo(val);
                  } else {
                      func = CSL.substituteOne(val);
                  }
              } else if (typeof val === "boolean" && !val) {
                  func = CSL.Output.Formatters.passthrough;
              } else if (typeof val === "function") {
                  func = val;
              } else {
                  CSL.error("Bad " + mode + " config entry for " + param + ": " + val);
              }
  
              if (args.length === 1) {
                  decorations[args[0]] = func;
              } else if (args.length === 2) {
                  if (!decorations[args[0]]) {
                      decorations[args[0]] = {};
                  }
                  decorations[args[0]][args[1]] = func;
              }
          }
      }
      return decorations;
  };
  
  
  /**
   * Generate a separate list of formatting attributes.
   * <p>This generates a list of tuples containing attribute
   * information relevant to output formatting, in the order
   * fixed in the constant {@link CSL.FORMAT_KEY_SEQUENCE}.
   * This function is called during {@link CSL.Core.Build}.
   * Formatting hints are distilled to functions
   * later, in the second compilation pass ({@link CSL.Core.Configure}).</p>
   * @param {Object} state The state object returned by
   * {@link CSL.Engine}.
   * @param {Object} attributes The hash object containing
   * the attributes and values extracted from an XML node.
   */
  CSL.setDecorations = function (state, attributes) {
      var ret, key, pos;
      // This applies a fixed processing sequence
      ret = [];
      for (pos in CSL.FORMAT_KEY_SEQUENCE) {
          if (true) {
              var key = CSL.FORMAT_KEY_SEQUENCE[pos];
              if (attributes[key]) {
                  ret.push([key, attributes[key]]);
                  delete attributes[key];
              }
          }
      }
      return ret;
  };
  
  CSL.Doppeler = function(rexStr, stringMangler) {
      var matchRex = new RegExp("(" + rexStr + ")", "g");
      var splitRex = new RegExp(rexStr, "g");
      this.split = function (str) {
          // Normalize markup
          if (stringMangler) {
              str = stringMangler(str);
          }
          var match = str.match(matchRex);
          if (!match) {
              return {
                  tags: [],
                  strings: [str]
              };
          }
          var split = str.split(splitRex);
          for (var i=match.length-1; i> -1; i--) {
              if (typeof match[i] === "number") {
                  match[i] = "";
              }
              var tag = match[i];
              if (tag === "\'" && split[i+1].length > 0) {
                  // Fixes https://forums.zotero.org/discussion/comment/294317
                  split[i+1] = match[i] + split[i+1];
                  match[i] = "";
              }
          }
          return {
              tags: match,
              strings: split,
              origStrings: split.slice()
          };
      };
      this.join = function (obj) {
          var lst = obj.strings.slice(-1);
          for (var i=obj.tags.length-1; i>-1; i--) {
              lst.push(obj.tags[i]);
              lst.push(obj.strings[i]);
          }
          lst.reverse();
          return lst.join("");
      };
  };
  
  CSL.Engine.prototype.normalDecorIsOrphan = function (blob, params) {
      //print("params: "+JSON.stringify(params));
      if (params[1] === "normal") {
          var use_param = false;
          var all_the_decor;
          if (this.tmp.area === "citation") {
              all_the_decor = [this.citation.opt.layout_decorations].concat(blob.alldecor);
          } else {
              all_the_decor = blob.alldecor;
          }
          for (var k = all_the_decor.length - 1; k > -1; k += -1) {
              //print("  all decor: "+JSON.stringify(all_the_decor[k]));
              for (var n = all_the_decor[k].length - 1; n > -1; n += -1) {
                  //print("  superior param"+n+": "+all_the_decor[k][n][0]);
                  if (all_the_decor[k][n][0] === params[0]) {
                      //print("  HIT!");
                      if (all_the_decor[k][n][1] !== "normal") {
                          use_param = true;
                      }
                  }
              }
          }
          if (!use_param) {
              return true;
          }
      }
      return false;
  };
  
  /*global CSL: true */
  
  
  CSL.Engine.prototype.getCitationLabel = function (Item) {
      var label = "";
      var params = this.getTrigraphParams();
      var config = params[0];
      var myname = this.getTerm("reference", "short", 0);
      if ("undefined" === typeof myname) {
          myname = "reference";
      }
      myname = myname.replace(".", "");
      myname = myname.slice(0, 1).toUpperCase() + myname.slice(1);
      for (var i = 0, ilen = CSL.NAME_VARIABLES.length; i < ilen; i += 1) {
          var n = CSL.NAME_VARIABLES[i];
          if (Item[n]) {
              var names = Item[n];
              if (names.length > params.length) {
                  config = params[params.length - 1];
              } else {
                  config = params[names.length - 1];
              }
              for (var j = 0, jlen = names.length; j < jlen; j += 1) {
                  if (j === config.authors.length) {
                      break;
                  }
                  var res = this.nameOutput.getName(names[j], "locale-translit", true);
                  var name = res.name;
                  if (name && name.family) {
                      myname = name.family;
                      myname = myname.replace(/^([ \'\u2019a-z]+\s+)/, "");
  
                  } else if (name && name.literal) {
                      myname = name.literal;
                  }
                  var m = myname.toLowerCase().match(/^(a\s+|the\s+|an\s+)/);
                  if (m) {
                      myname = myname.slice(m[1].length);
                  }
                  myname = myname.replace(CSL.ROMANESQUE_NOT_REGEXP, "");
                  if (!myname) {
                      break;
                  }
                  myname = myname.slice(0, config.authors[j]);
                  if (myname.length > 1) {
                      myname = myname.slice(0, 1).toUpperCase() + myname.slice(1).toLowerCase();
                  } else if (myname.length === 1) {
                      myname = myname.toUpperCase();
                  }
                  label += myname;
              }
              break;
          }
      }
      if (!label) {
          // Try for something using title
          if (Item.title) {
              var skipWords = this.locale[this.opt.lang].opts["skip-words"];
              var lst = Item.title.split(/\s+/);
              for (var i = lst.length - 1; i > -1; i--) {
                  if (skipWords.indexOf(lst[i]) > -1) {
                      lst = lst.slice(0, i).concat(lst.slice(i + 1));
                  }
              }
              var str = lst.join('');
              str = str.slice(0, params[0].authors[0]);
              if (str.length > 1) {
                  str = str.slice(0, 1).toUpperCase() + str.slice(1).toLowerCase();
              } else if (str.length === 1) {
                  str = str.toUpperCase();
              }
              label = str;
          }
      }
      var year = "0000";
      if (Item.issued) {
          if (Item.issued.year) {
              year = "" + Item.issued.year;
          }
      }
      year = year.slice((config.year * -1));
      label = label + year;
      return label;
  };
  
  CSL.Engine.prototype.getTrigraphParams = function () {
      var params = [];
      var ilst = this.opt.trigraph.split(":");
      if (!this.opt.trigraph || this.opt.trigraph.slice(0,1) !== "A") {
          CSL.error("Bad trigraph definition: "+this.opt.trigraph);
      }
      for (var i = 0, ilen = ilst.length; i < ilen; i += 1) {
          var str = ilst[i];
          var config = {authors:[], year:0};
          for (var j = 0, jlen = str.length; j < jlen; j += 1) {
              switch (str.slice(j,j+1)) {
              case "A":
                  config.authors.push(1);
                  break;
              case "a":
                  config.authors[config.authors.length - 1] += 1;
                  break;
              case "0":
                  config.year += 1;
                  break;
              default:
                  CSL.error("Invalid character in trigraph definition: "+this.opt.trigraph);
              }
          }
          params.push(config);
      }
      return params;
  };
  
  /*global CSL: true */
  
  CSL.Engine.prototype.setOutputFormat = function (mode) {
      this.opt.mode = mode;
      this.fun.decorate = CSL.Mode(mode);
      if (!this.output[mode]) {
          this.output[mode] = {};
          this.output[mode].tmp = {};
      }
  };
  
  CSL.Engine.prototype.getSortFunc = function () {
      return function (a,b) {
          a = a.split("-");
          b = b.split("-");
          if (a.length < b.length) {
              return 1;
          } else if (a.length > b.length) {
              return -1;
          } else {
              a = a.slice(-1)[0];
              b = b.slice(-1)[0];
              if (a.length < b.length) {
                  return 1;
              } else if (a.length > b.length) {
                  return -1;
              } else {
                  return 0;
              }
          }
      };
  };
  
  CSL.Engine.prototype.setLangTagsForCslSort = function (tags) {
      var i, ilen;
      if (tags) {
          this.opt['locale-sort'] = [];
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
              this.opt['locale-sort'].push(tags[i]);
          }
      }
      this.opt['locale-sort'].sort(this.getSortFunc());
  };
      
  CSL.Engine.prototype.setLangTagsForCslTransliteration = function (tags) {
      var i, ilen;
      this.opt['locale-translit'] = [];
      if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
              this.opt['locale-translit'].push(tags[i]);
          }
      }
      this.opt['locale-translit'].sort(this.getSortFunc());
  };
      
  CSL.Engine.prototype.setLangTagsForCslTranslation = function (tags) {
      var i, ilen;
      this.opt['locale-translat'] = [];
      if (tags) {
          for (i = 0, ilen = tags.length; i < ilen; i += 1) {
              this.opt['locale-translat'].push(tags[i]);
          }
      }
      this.opt['locale-translat'].sort(this.getSortFunc());
  };
  
  CSL.Engine.prototype.setLangPrefsForCites = function (obj, conv) {
      var opt = this.opt['cite-lang-prefs'];
      if (!conv) {
          conv = function (key) {
              return key.toLowerCase();
          };
      }
      var segments = ['Persons', 'Institutions', 'Titles', 'Journals', 'Publishers', 'Places'];
      // Set values in place
      for (var i = 0, ilen = segments.length; i < ilen; i += 1) {
          var clientSegment = conv(segments[i]);
          var citeprocSegment = segments[i].toLowerCase();
          if (!obj[clientSegment]) {
              continue;
          }
          //
          // Normalize the sequence of secondary and tertiary
          // in the provided obj segment list.
          //
          var supplements = [];
          while (obj[clientSegment].length > 1) {
              supplements.push(obj[clientSegment].pop());
          }
          var sortval = {orig:1,translit:2,translat:3};
          if (supplements.length === 2 && sortval[supplements[0]] < sortval[supplements[1]]) {
              supplements.reverse();
          }
          while (supplements.length) {
              obj[clientSegment].push(supplements.pop());
          }
          //
          // normalization done.
          //
          var lst = opt[citeprocSegment];
          while (lst.length) {
              lst.pop();
          }
          for (var j = 0, jlen = obj[clientSegment].length; j < jlen; j += 1) {
              lst.push(obj[clientSegment][j]);
          }
      }
  };
  
  CSL.Engine.prototype.setLangPrefsForCiteAffixes = function (affixList) {
      if (affixList && affixList.length === 48) {
          var affixes = this.opt.citeAffixes;
          var count = 0;
          var settings = ["persons", "institutions", "titles", "journals", "publishers", "places"];
          var forms = ["translit", "orig", "translit", "translat"];
          var value;
          for (var i = 0, ilen = settings.length; i < ilen; i += 1) {
              for (var j = 0, jlen = forms.length; j < jlen; j += 1) {
                  value = "";
                  if ((count % 8) === 4) {
                      if (!affixes[settings[i]]["locale-"+forms[j]].prefix
                          && !affixes[settings[i]]["locale-"+forms[j]].suffix) {
  
                          value = affixList[count] ? affixList[count] : "";
                          affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                          value = affixList[count] ? affixList[count + 1] : "";
                          affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                      }
                  } else {
                      value = affixList[count] ? affixList[count] : "";
                      affixes[settings[i]]["locale-" + forms[j]].prefix = value;
                      value = affixList[count] ? affixList[count + 1] : "";
                      affixes[settings[i]]["locale-" + forms[j]].suffix = value;
                  }
                  count += 2;
              }
          }
          this.opt.citeAffixes = affixes;
      }
  };
  
  CSL.Engine.prototype.setAutoVietnameseNamesOption = function (arg) {
      if (arg) {
          this.opt["auto-vietnamese-names"] = true;
      } else {
          this.opt["auto-vietnamese-names"] = false;
      }
  };
  
  CSL.Engine.prototype.setAbbreviations = function (arg) {
      if (this.sys.setAbbreviations) {
          this.sys.setAbbreviations(arg);
      }
  };
  
  CSL.Engine.prototype.setSuppressTrailingPunctuation = function (arg) {
      this.citation.opt.suppressTrailingPunctuation = !!arg;
  };
  
  /*global CSL: true */
  
  CSL.Output = {};
  /**
   * Output queue object.
   * @class
   */
  CSL.Output.Queue = function (state) {
      this.levelname = ["top"];
      this.state = state;
      this.queue = [];
      this.empty = new CSL.Token("empty");
      var tokenstore = {};
      tokenstore.empty = this.empty;
      this.formats = new CSL.Stack(tokenstore);
      this.current = new CSL.Stack(this.queue);
  };
  
  // XXX This works, but causes a mismatch in api_cite
  // Could insert a placeholder
  // Better to have a function that spits out an independent blob.
  // Is that possible though?
  // Okay. Use queue.append() with fake_queue instead.
  CSL.Output.Queue.prototype.pop = function () {
      // For some reason, state.output.current.value() here can be an array, 
      // not a blob ... ?
      var drip = this.current.value();
      if (drip.length) {
          return drip.pop();
      } else {
          return drip.blobs.pop();
      }
  };
  
  CSL.Output.Queue.prototype.getToken = function (name) {
      var ret = this.formats.value()[name];
      return ret;
  };
  
  CSL.Output.Queue.prototype.mergeTokenStrings = function (base, modifier) {
      var base_token, modifier_token, ret, key;
      base_token = this.formats.value()[base];
      modifier_token = this.formats.value()[modifier];
      ret = base_token;
      if (modifier_token) {
          if (!base_token) {
              base_token = new CSL.Token(base, CSL.SINGLETON);
              base_token.decorations = [];
          }
          ret = new CSL.Token(base, CSL.SINGLETON);
          var key = "";
          for (var key in base_token.strings) {
              if (base_token.strings.hasOwnProperty(key)) {
                  ret.strings[key] = base_token.strings[key];
              }
          }
          for (var key in modifier_token.strings) {
              if (modifier_token.strings.hasOwnProperty(key)) {
                  ret.strings[key] = modifier_token.strings[key];
              }
          }
          ret.decorations = base_token.decorations.concat(modifier_token.decorations);
      }
      return ret;
  };
  
  // Store a new output format token based on another
  CSL.Output.Queue.prototype.addToken = function (name, modifier, token) {
      var newtok, attr;
      newtok = new CSL.Token("output");
      if ("string" === typeof token) {
          token = this.formats.value()[token];
      }
      if (token && token.strings) {
          for (attr in token.strings) {
              if (token.strings.hasOwnProperty(attr)) {
                  newtok.strings[attr] = token.strings[attr];
              }
          }
          newtok.decorations = token.decorations;
  
      }
      if ("string" === typeof modifier) {
          newtok.strings.delimiter = modifier;
      }
      this.formats.value()[name] = newtok;
  };
  
  //
  // newFormat adds a new bundle of formatting tokens to
  // the queue's internal stack of such bundles
  CSL.Output.Queue.prototype.pushFormats = function (tokenstore) {
      if (!tokenstore) {
          tokenstore = {};
      }
      tokenstore.empty = this.empty;
      this.formats.push(tokenstore);
  };
  
  
  CSL.Output.Queue.prototype.popFormats = function () {
      this.formats.pop();
  };
  
  CSL.Output.Queue.prototype.startTag = function (name, token) {
      var tokenstore = {};
      if (this.state.tmp["doing-macro-with-date"] && this.state.tmp.extension) {
          token = this.empty;
          name = "empty";
      }
      tokenstore[name] = token;
      this.pushFormats(tokenstore);
      this.openLevel(name);
  };
  
  CSL.Output.Queue.prototype.endTag = function (name) {
      this.closeLevel(name);
      this.popFormats();
  };
  
  //
  // newlevel adds a new blob object to the end of the current
  // list, and adjusts the current pointer so that subsequent
  // appends are made to blob list of the new object.
  
  CSL.Output.Queue.prototype.openLevel = function (token) {
      var blob, curr;
      if ("object" === typeof token) {
          // delimiter, prefix, suffix, decorations from token
          blob = new CSL.Blob(undefined, token);
      } else if ("undefined" === typeof token) {
          blob = new CSL.Blob(undefined, this.formats.value().empty, "empty");
      } else {
          if (!this.formats.value() || !this.formats.value()[token]) {
              CSL.error("CSL processor error: call to nonexistent format token \"" + token + "\"");
          }
          // delimiter, prefix, suffix, decorations from token
          blob = new CSL.Blob(undefined, this.formats.value()[token], token);
      }
      curr = this.current.value();
      if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.prefix = this.checkNestedBrace.update(blob.strings.prefix);
      }
      curr.push(blob);
      this.current.push(blob);
  };
  
  /**
   * "merge" used to be real complicated, now it's real simple.
   */
  CSL.Output.Queue.prototype.closeLevel = function (name) {
      // CLEANUP: Okay, so this.current.value() holds the blob at the
      // end of the current list.  This is wrong.  It should
      // be the parent, so that we have  the choice of reading
      // the affixes and decorations, or appending to its
      // content.  The code that manipulates blobs will be
      // much simpler that way.
      if (name && name !== this.current.value().levelname) {
          CSL.error("Level mismatch error:  wanted " + name + " but found " + this.current.value().levelname);
      }
      var blob = this.current.pop();
      if (!this.state.tmp.just_looking && this.checkNestedBrace) {
          blob.strings.suffix = this.checkNestedBrace.update(blob.strings.suffix);
      }
  };
  
  //
  // append does the same thing as newlevel, except
  // that the blob it pushes has text content,
  // and the current pointer is not moved after the push.
  
  CSL.Output.Queue.prototype.append = function (str, tokname, notSerious, ignorePredecessor, noStripPeriods) {
      var token, blob, curr;
      var useblob = true;
      if (notSerious) {
          ignorePredecessor = true;
      }
      // XXXXX Nasty workaround, but still an improvement
      // over the reverse calls to the cs:date node build
      // function that we had before.
      if (this.state.tmp["doing-macro-with-date"] && !notSerious) {
          if (tokname !== "macro-with-date") {
              return false;
          }
          if (tokname === "macro-with-date") {
              tokname = "empty";
          }
      }
      if ("undefined" === typeof str) {
          return false;
      }
      if ("number" === typeof str) {
          str = "" + str;
      }
      if (!notSerious 
          && this.state.tmp.element_trace 
          && this.state.tmp.element_trace.value() === "suppress-me") {
          
          return false;
      }
      blob = false;
      if (!tokname) {
          token = this.formats.value().empty;
      } else if (tokname === "literal") {
          token = true;
          useblob = false;
      } else if ("string" === typeof tokname) {
          token = this.formats.value()[tokname];
      } else {
          token = tokname;
      }
      if (!token) {
          CSL.error("CSL processor error: unknown format token name: " + tokname);
      }
      // Unset delimiters must be left undefined until they reach the queue
      // in order to discriminate unset from explicitly empty delimiters
      // when inheriting a default value from a superior node. [??? really ???]
      if (token.strings && "undefined" === typeof token.strings.delimiter) {
          token.strings.delimiter = "";
      }
      if ("string" === typeof str && str.length) {
  
          // Source (;?!Â»Â«): http://en.wikipedia.org/wiki/Space_(punctuation)#Breaking_and_non-breaking_spaces
          // Source (:): http://forums.zotero.org/discussion/4933/localized-quotes/#Comment_88384
          str = str.replace(/ ([:;?!\u00bb])/g, "\u202f$1").replace(/\u00ab /g, "\u00ab\u202f");
  
          this.last_char_rendered = str.slice(-1);
          // This, and not the str argument below on flipflop, is the
          // source of the flipflopper string source.
          str = str.replace(/\s+'/g, " \'");
          if (!notSerious) {
              // this condition for sort_LeadingApostropheOnNameParticle
              str = str.replace(/^'/g, " \'");
          }
  
          // signal whether we end with terminal punctuation?
          if (!ignorePredecessor) {
              this.state.tmp.term_predecessor = true;
              this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
              this.state.tmp.term_predecessor_name = true;
          }
      }
      blob = new CSL.Blob(str, token);
      curr = this.current.value();
      if ("undefined" === typeof curr && this.current.mystack.length === 0) {
          // XXXX An operation like this is missing somewhere, this should NOT be necessary.
          // Addresses error triggered in multi-layouts.
          this.current.mystack.push([]);
          curr = this.current.value();
      }
      if ("string" === typeof blob.blobs) {
          if (!ignorePredecessor) {
              this.state.tmp.term_predecessor = true;
              this.state.tmp.in_cite_predecessor = true;
          } else if (notSerious) {
              this.state.tmp.term_predecessor_name = true;
          }
      }
      //
      // Caution: The parallel detection machinery will blow up if tracking
      // variables are not properly initialized elsewhere.
      //
      if ("string" === typeof str) {
          if ("string" === typeof blob.blobs) {
              if (blob.blobs.slice(0, 1) !== " ") {
                  var blobPrefix = "";
                  var blobBlobs = blob.blobs;
                  while (CSL.TERMINAL_PUNCTUATION.indexOf(blobBlobs.slice(0, 1)) > -1) {
                      blobPrefix = blobPrefix + blobBlobs.slice(0, 1);
                      blobBlobs = blobBlobs.slice(1);
                  }
                  if (blobBlobs && blobPrefix) {
                      blob.strings.prefix = blob.strings.prefix + blobPrefix;
                      blob.blobs = blobBlobs;
                  }
              }
          }
          if (blob.strings["text-case"]) {
              //
              // This one is _particularly_ hard to follow.  It's not obvious,
              // but the blob already contains the input string at this
              // point, as blob.blobs -- it's a terminal node, as it were.
              // The str variable also contains the input string, but
              // that copy is not used for onward processing.  We have to
              // apply our changes to the blob copy.
              //
              blob.blobs = CSL.Output.Formatters[blob.strings["text-case"]](this.state, str);
          }
          if (this.state.tmp.strip_periods && !noStripPeriods) {
              blob.blobs = blob.blobs.replace(/\.([^a-z]|$)/g, "$1");
          }
          for (var i = blob.decorations.length - 1; i > -1; i += -1) {
              if (blob.decorations[i][0] === "@quotes" && blob.decorations[i][1] !== "false") {
                  blob.punctuation_in_quote = this.state.getOpt("punctuation-in-quote");
              }
              if (!blob.blobs.match(CSL.ROMANESQUE_REGEXP)) {
                  if (blob.decorations[i][0] === "@font-style") {
                      blob.decorations = blob.decorations.slice(0, i).concat(blob.decorations.slice(i + 1));
                  }
              }
          }
          //
          // XXX: Beware superfluous code in your code.  str in this
          // case is not the source of the final rendered string.
          // See note above.
          //
          curr.push(blob);
          this.state.fun.flipflopper.processTags(blob);
      } else if (useblob) {
          curr.push(blob);
      } else {
          curr.push(str);
      }
      return true;
  };
  
  CSL.Output.Queue.prototype.string = function (state, myblobs, blob) {
      var i, ilen, j, jlen, b;
      //if (blob && blob.strings.delimiter) {
      //    print("DELIMITER: "+blob.strings.delimiter+" on "+[x.blobs[0].num for each (x in myblobs)]);
      //}
      //var blobs, ret, blob_delimiter, i, params, blobjr, last_str, last_char, b, use_suffix, qres, addtoret, span_split, j, res, blobs_start, blobs_end, key, pos, len, ppos, llen, ttype, ltype, terminal, leading, delimiters, use_prefix, txt_esc;
      var txt_esc = CSL.getSafeEscape(this.state);
      var blobs = myblobs.slice();
      var ret = [];
      
      if (blobs.length === 0) {
          return ret;
      }
  
      var blob_delimiter = "";
      if (blob) {
          blob_delimiter = blob.strings.delimiter;
      } else {
          //print("=== Setting false to start ===");
          state.tmp.count_offset_characters = false;
          state.tmp.offset_characters = 0;
      }
  
      if (blob && blob.new_locale) {
          blob.old_locale = state.opt.lang;
          state.opt.lang = blob.new_locale;
      }
  
      var blobjr, use_suffix, use_prefix, params;
      for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          blobjr = blobs[i];
  
          if (blobjr.strings.first_blob) {
              // Being the Item.id of the the entry being rendered.
              //print("  -- turning on counting");
              state.tmp.count_offset_characters = blobjr.strings.first_blob;
          }
  
          if ("string" === typeof blobjr.blobs) {
              if ("number" === typeof blobjr.num) {
                  ret.push(blobjr);
              } else if (blobjr.blobs) {
                  if (blobjr.particle) {
                      blobjr.blobs = blobjr.particle + blobjr.blobs;
                      blobjr.particle = "";
                  }
                  // (skips empty strings)
                  //b = txt_esc(blobjr.blobs);
                  b = txt_esc(blobjr.blobs);
                  var blen = b.length;
  
                  if (!state.tmp.suppress_decorations) {
                      for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                          params = blobjr.decorations[j];
                          if (params[0] === "@showid") {
                              continue;
                          }
                          if (state.normalDecorIsOrphan(blobjr, params)) {
                              continue;
                          }
                          b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                      }
                  }
                  //
                  // because we will rip out portions of the output
                  // queue before rendering, group wrappers need
                  // to produce no output if they are found to be
                  // empty.
                  if (b && b.length) {
                      b = txt_esc(blobjr.strings.prefix) + b + txt_esc(blobjr.strings.suffix);
                      if (state.opt.development_extensions.csl_reverse_lookup_support && !state.tmp.suppress_decorations) {
                          for (j = 0, jlen = blobjr.decorations.length; j < jlen; j += 1) {
                              params = blobjr.decorations[j];
  
                              if (params[0] === "@showid") {
                                  b = state.fun.decorate[params[0]][params[1]].call(blobjr, state, b, params[2]);
                              }
                          }
                      }
                      ret.push(b);
                      if (state.tmp.count_offset_characters) {
                          state.tmp.offset_characters += (blen + blobjr.strings.suffix.length + blobjr.strings.prefix.length);
                      }
                  }
              }
          } else if (blobjr.blobs.length) {
              var addtoret = state.output.string(state, blobjr.blobs, blobjr);
              if (blob) {
                  // Patch up world-class weird bug in the ill-constructed code of mine.
                  if ("string" !== addtoret && addtoret.length > 1 && blobjr.strings.delimiter) {
                      var numberSeen = false;
                      for (var j=0,jlen=addtoret.length;j<jlen;j++) {
                          if ("string" !== typeof addtoret[j]) {
                              numberSeen = true;
                          } else if (numberSeen) {
                              addtoret[j] = (blobjr.strings.delimiter + addtoret[j]);
                          }
                      }
                  }
              }
              ret = ret.concat(addtoret);
          }
          if (blobjr.strings.first_blob && state.registry.registry[blobjr.strings.first_blob]) {
              // The Item.id of the entry being rendered.
              state.registry.registry[blobjr.strings.first_blob].offset = state.tmp.offset_characters;
              state.tmp.count_offset_characters = false;
          }
      }
  
      // Provide delimiters on adjacent numeric blobs
      for (i=0,ilen=ret.length - 1;i<ilen;i+=1) {
          if ("number" === typeof ret[i].num && "number" === typeof ret[i+1].num && !ret[i+1].UGLY_DELIMITER_SUPPRESS_HACK) {
              // XXX watch this
              ret[i].strings.suffix = ret[i].strings.suffix + (blob_delimiter ? blob_delimiter : "");
              ret[i+1].successor_prefix = "";
              ret[i+1].UGLY_DELIMITER_SUPPRESS_HACK = true;
          }
      }
  
      var span_split = 0;
      for (var i = 0, ilen = ret.length; i < ilen; i += 1) {
          if ("string" === typeof ret[i]) {
              span_split = (parseInt(i, 10) + 1);
              if (i < ret.length - 1  && "object" === typeof ret[i + 1]) {
                  if (blob_delimiter && !ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK) {
                      ret[i] += txt_esc(blob_delimiter);
                  }
                  // One bite of the apple
                  ret[i + 1].UGLY_DELIMITER_SUPPRESS_HACK = true;
              }
              //span_split = ret.length;
              //print("XXX ret: "+ret+" -- "+blob_delimiter);
          }
      }
  /*
      if (blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
          span_split = ret.length;
      }
  */
      if (blob && (blob.decorations.length || blob.strings.suffix)) {
          span_split = ret.length;
      } else if (blob && blob.strings.prefix) {
          for (var i=0,ilen=ret.length;i<ilen;i++) {
              if ("undefined" !== typeof ret[i].num) {
                  span_split = i;
                  if (i === 0) {
                      ret[i].strings.prefix = blob.strings.prefix + ret[i].strings.prefix;
                  }
                  break;
              }
          }
      }
  
      var blobs_start = state.output.renderBlobs(ret.slice(0, span_split), blob_delimiter, false, blob);
      if (blobs_start && blob && (blob.decorations.length || blob.strings.suffix || blob.strings.prefix)) {
          if (!state.tmp.suppress_decorations) {
              for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
                  params = blob.decorations[i];
                  if (["@cite","@bibliography", "@display", "@showid"].indexOf(params[0]) > -1) {
                      continue;
                  }
                  if (state.normalDecorIsOrphan(blobjr, params)) {
                      continue;
                  }
                  if (!params[0]) continue;
                  if ("string" === typeof blobs_start) {
                      blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
                  }
              }
          }
          //
          // XXXX: cut-and-paste warning.  same as a code block above.
          //
          b = blobs_start;
          use_suffix = blob.strings.suffix;
          if (b && b.length) {
              use_prefix = blob.strings.prefix;
              b = txt_esc(use_prefix) + b + txt_esc(use_suffix);
              if (state.tmp.count_offset_characters) {
                  state.tmp.offset_characters += (use_prefix.length + use_suffix.length);
              }
          }
          blobs_start = b;
          if (!state.tmp.suppress_decorations) {
              for (var i = 0, ilen = blob.decorations.length; i < ilen; i += 1) {
                  params = blob.decorations[i];
                  if (["@cite","@bibliography", "@display", "@showid"].indexOf(params[0]) === -1) {
                      continue;
                  }
                  if ("string" === typeof blobs_start) {
                      blobs_start = state.fun.decorate[params[0]][params[1]].call(blob, state, blobs_start, params[2]);
                  }
              }
          }
      }
  
      var blobs_end = ret.slice(span_split, ret.length);
      if (!blobs_end.length && blobs_start) {
          ret = [blobs_start];
      } else if (blobs_end.length && !blobs_start) {
          ret = blobs_end;
      } else if (blobs_start && blobs_end.length) {
          ret = [blobs_start].concat(blobs_end);
      }
      //
      // Blobs is now definitely a string with
      // trailing blobs.  Return it.
      if ("undefined" === typeof blob) {
          this.queue = [];
          this.current.mystack = [];
          this.current.mystack.push(this.queue);
          if (state.tmp.suppress_decorations) {
              ret = state.output.renderBlobs(ret, undefined, false);
          }
      } else if ("boolean" === typeof blob) {
          ret = state.output.renderBlobs(ret, undefined, true);
      }
  
      if (blob && blob.new_locale) {
          state.opt.lang = blob.old_locale;
      }
      //if (!blob && !state.tmp.just_looking) {
      //  print("QUEUE ("+ state.tmp.just_looking +"): "+JSON.stringify(state.output.queue, ["num", "strings", "decorations", "blobs", "prefix", "suffix", "delimiter"], 2));
      //}
      return ret;
  };
  
  CSL.Output.Queue.prototype.clearlevel = function () {
      var blob, pos, len;
      blob = this.current.value();
      len = blob.blobs.length;
      for (pos = 0; pos < len; pos += 1) {
          blob.blobs.pop();
      }
  };
  
  CSL.Output.Queue.prototype.renderBlobs = function (blobs, delim, in_cite, parent) {
      var state, ret, ret_last_char, use_delim, blob, pos, len, ppos, llen, str, params, txt_esc;
      txt_esc = CSL.getSafeEscape(this.state);
      if (!delim) {
          delim = "";
      }
      state = this.state;
      ret = "";
      ret_last_char = [];
      use_delim = "";
      len = blobs.length;
      if (this.state.tmp.area === "citation" && !this.state.tmp.just_looking && len === 1 && typeof blobs[0] === "object" && parent) {
          blobs[0].strings.prefix = parent.strings.prefix + blobs[0].strings.prefix;
          blobs[0].strings.suffix = blobs[0].strings.suffix + parent.strings.suffix;
          blobs[0].decorations = blobs[0].decorations.concat(parent.decorations);
          blobs[0].params = parent.params;
          return blobs[0];
      }
      var start = true;
      for (pos = 0; pos < len; pos += 1) {
          if (blobs[pos].checkNext) {
              blobs[pos].checkNext(blobs[pos + 1],start);
              start = false;
          } else if (blobs[pos+1] && blobs[pos+1].splice_prefix) {
              start = false;
              //blobs[pos+1].checkNext(blobs[pos + 1],start);
          } else {
              start = true;
          }
      }
      
      // print("LEN="+len+" "+JSON.stringify(blobs, null, 2));
      // Fix last non-range join
      var doit = true;
      for (pos = blobs.length - 1; pos > 0; pos += -1) {
          if (blobs[pos].checkLast) {
              if (doit && blobs[pos].checkLast(blobs[pos - 1])) {
                  doit = false;
              }
          } else {
              doit = true;
          }
      }
      len = blobs.length;
      for (pos = 0; pos < len; pos += 1) {
          blob = blobs[pos];
          if (ret) {
              use_delim = delim;
          }
          if ("string" === typeof blob) {
              ret += txt_esc(use_delim);
              // XXX Blob should be run through flipflop and flattened here.
              // (I think it must be a fragment of text around a numeric
              // variable)
              ret += blob;
              if (state.tmp.count_offset_characters) {
                  //state.tmp.offset_characters += (use_delim.length + blob.length);
                  state.tmp.offset_characters += (use_delim.length);
              }
          } else if (in_cite) {
              // pass
              // Okay, so this does it -- but we're now not able to return a string!
              if (ret) {
                  ret = [ret, blob];
              } else {
                  ret = [blob];
              }
          } else if (blob.status !== CSL.SUPPRESS) {
              if (blob.particle) {
                  str = blob.particle + blob.num;
              } else {
                  str = blob.formatter.format(blob.num, blob.gender);
              }
              // Workaround to get a more or less accurate value.
              var strlen = str.replace(/<[^>]*>/g, "").length;
              // notSerious
              this.append(str, "empty", true);
              var str_blob = this.pop();
              var count_offset_characters = state.tmp.count_offset_characters;
              str = this.string(state, [str_blob], false);
              state.tmp.count_offset_characters = count_offset_characters;
              if (blob.strings["text-case"]) {
                  str = CSL.Output.Formatters[blob.strings["text-case"]](this.state, str);
              }
              if (str && this.state.tmp.strip_periods) {
                  str = str.replace(/\.([^a-z]|$)/g, "$1");
              }
              if (!state.tmp.suppress_decorations) {
                  llen = blob.decorations.length;
                  for (ppos = 0; ppos < llen; ppos += 1) {
                      params = blob.decorations[ppos];
                      if (state.normalDecorIsOrphan(blob, params)) {
                          continue;
                      }
                      str = state.fun.decorate[params[0]][params[1]].call(blob, state, str, params[2]);
                  }
              }
              str = txt_esc(blob.strings.prefix) + str + txt_esc(blob.strings.suffix);
              var addme = "";
              if (blob.status === CSL.END) {
                  //print("  CSL.END");
                  addme = txt_esc(blob.range_prefix);
              } else if (blob.status === CSL.SUCCESSOR) {
                  //print("  CSL.SUCCESSOR");
                  addme = txt_esc(blob.successor_prefix);
              } else if (blob.status === CSL.START) {
                  //print("  CSL.START");
                  if (pos > 0 && !blob.suppress_splice_prefix) {
                      addme = txt_esc(blob.splice_prefix);
                  } else {
                      addme = "";
                  }
              } else if (blob.status === CSL.SEEN) {
                  //print("  CSL.SEEN");
  
                  // THIS IS NOT THE PROPER FUNCTION OF CSL.SEEN, IS IT?
  
                  addme = txt_esc(blob.splice_prefix);
              }
              ret += addme;
              ret += str;
              if (state.tmp.count_offset_characters) {
                  state.tmp.offset_characters += (addme.length + blob.strings.prefix.length + strlen + blob.strings.suffix.length);
              }
          }
      }
      return ret;
  };
  
  CSL.Output.Queue.purgeEmptyBlobs = function (parent) {
      //print("START1");
      if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
          return;
      }
      // back-to-front, bottom-first
      for (var i=parent.blobs.length-1;i>-1;i--) {
          CSL.Output.Queue.purgeEmptyBlobs(parent.blobs[i]);
          var child = parent.blobs[i];
          if (!child || !child.blobs || !child.blobs.length) {
              var buf = [];
              while ((parent.blobs.length-1) > i) {
                  buf.push(parent.blobs.pop());
              }
              parent.blobs.pop();
              while (buf.length) {
                  parent.blobs.push(buf.pop());
              }
          }
      }
      //print("   end");
  };
  
  // Adjustments to be made:
  //
  // * Never migrate beyond a @quotes node
  // * Never migrate into a num node.
  
  CSL.Output.Queue.adjust = function (punctInQuote) {
  
      var NO_SWAP_IN = {
          ";": true,
          ":": true
      };
  
      var NO_SWAP_OUT = {
          ".": true,
          "!": true,
          "?": true
      };
  
      var LtoR_MAP = {
          "!": {
              ".": "!",
              "?": "!?",
              ":": "!",
              ",": "!,",
              ";": "!;"
          },
          "?": {
              "!": "?!",
              ".": "?",
              ":": "?",
              ",": "?,",
              ";": "?;"
          },
          ".": {
              "!": ".!",
              "?": ".?",
              ":": ".:",
              ",": ".,",
              ";": ".;"
          },
          ":": {
              "!": "!",
              "?": "?",
              ".": ":",
              ",": ":,",
              ";": ":;"
          },
          ",": {
              "!": ",!",
              "?": ",?",
              ":": ",:",
              ".": ",.",
              ";": ",;"
          },
          ";": {
              "!": "!",
              "?": "?",
              ":": ";",
              ",": ";,",
              ".": ";"
          }
      };
  
      var SWAP_IN = {};
      var SWAP_OUT = {};
      var PUNCT = {};
      var PUNCT_OR_SPACE = {};
      for (var key in LtoR_MAP) {
          PUNCT[key] = true;
          PUNCT_OR_SPACE[key] = true;
          if (!NO_SWAP_IN[key]) {
              SWAP_IN[key] = true;
          }
          if (!NO_SWAP_OUT[key]) {
              SWAP_OUT[key] = true;
          }
      }
      PUNCT_OR_SPACE[" "] = true;
      PUNCT_OR_SPACE["Â "] = true;
  
      var RtoL_MAP = {};
      for (var key in LtoR_MAP) {
          for (var subkey in LtoR_MAP[key]) {
              if (!RtoL_MAP[subkey]) {
                  RtoL_MAP[subkey] = {};
              }
              RtoL_MAP[subkey][key] = LtoR_MAP[key][subkey];
          }
      }
  
      function blobIsNumber(blob) {
          return ("number" === typeof blob.num || (blob.blobs && blob.blobs.length === 1 && "number" === typeof blob.blobs[0].num));
      }
  
      function blobEndsInNumber(blob) {
          if ("number" === typeof blob.num) {
              return true;
          }
          if (!blob.blobs || "object" !==  typeof blob.blobs) {
              return false;
          }
          if (blobEndsInNumber(blob.blobs[blob.blobs.length-1])) {
              return true;
          }
      }
      
      function blobHasDecorations(blob,includeQuotes) {
          var ret = false;
          var decorlist = ['@font-style','@font-variant','@font-weight','@text-decoration','@vertical-align'];
          if (includeQuotes) {
              decorlist.push('@quotes');
          }
          if (blob.decorations) {
              for (var i=0,ilen=blob.decorations.length;i<ilen;i++) {
                  if (decorlist.indexOf(blob.decorations[i][0]) > -1) {
                      ret = true;
                      break;
                  }
              }
          }
          return ret;
      }
      
      function blobHasDescendantQuotes(blob) {
          if (blob.decorations) {
              for (var i=0,ilen=blob.decorations.length;i<ilen;i++) {
                  if (blob.decorations[i][0] === '@quotes' && blob.decorations[i][1] !== "false") {
                      return true;
                  }
              }
          }
          if ("object" !== typeof blob.blobs) {
              return false;
          }
          return blobHasDescendantQuotes(blob.blobs[blob.blobs.length-1]);
          //if (blobHasDescendantQuotes(blob.blobs[blob.blobs.length-1])) {
          //    return true
          //};
          //return false;
      }
      
      function blobHasDescendantMergingPunctuation(parentChar,blob) {
          var childChar = blob.strings.suffix.slice(-1);
          if (!childChar && "string" === typeof blob.blobs) {
              childChar = blob.blobs.slice(-1);
          }
          var mergedChars = RtoL_MAP[parentChar][childChar];
          if (mergedChars && mergedChars.length === 1) {
              return true;
          }
          if ("object" !== typeof blob.blobs) {
              return false;
          }
          if (blobHasDescendantMergingPunctuation(parentChar,blob.blobs[blob.blobs.length-1])) {
              return true;
          }
          return false;
      }
      
      function matchLastChar(blob, chr) {
          if (!PUNCT[chr]) {
              return false;
          }
          if ("string" === typeof blob.blobs) {
  
              if (blob.blobs.slice(-1) === chr) {
                  return true;
              } else {
                  return false;
              }
          } else {
              var child = blob.blobs[blob.blobs.length-1];
              if (child) {
                  var childChar = child.strings.suffix.slice(-1);
                  if (!childChar) {
                      return matchLastChar(child,chr);
                  } else if (child.strings.suffix.slice(-1) == chr) {
                      return true;
                  } else {
                      return false;
                  }
              } else {
                  return false;
              }
          }
      }
      
      function mergeChars (First, first, Second, second, merge_right) {
          var FirstStrings = "blobs" === first ? First : First.strings;
          var SecondStrings = "blobs" === second ? Second: Second.strings;
          var firstChar = FirstStrings[first].slice(-1);
          var secondChar = SecondStrings[second].slice(0,1);
          function cullRight () {
              SecondStrings[second] = SecondStrings[second].slice(1);
          }
          function cullLeft () {
              FirstStrings[first] = FirstStrings[first].slice(0,-1);
          }
          function addRight (chr) {
              SecondStrings[second] = chr + SecondStrings[second];
          }
          function addLeft (chr) {
              FirstStrings[first] += chr;
          }
          var cull = merge_right ? cullLeft : cullRight;
          function matchOnRight () {
              return RtoL_MAP[secondChar];
          }
          function matchOnLeft () {
              return LtoR_MAP[firstChar];
          }
          var match = merge_right ? matchOnLeft : matchOnRight;
          function mergeToRight () {
              var chr = LtoR_MAP[firstChar][secondChar];
              if ("string" === typeof chr) {
                  cullLeft();
                  cullRight();
                  addRight(chr);
              } else {
                  addRight(firstChar);
                  cullLeft();
              }
          }
          function mergeToLeft () {
              var chr = RtoL_MAP[secondChar][firstChar];
              if ("string" === typeof chr) {
                  cullLeft();
                  cullRight();
                  addLeft(chr);
              } else {
                  addLeft(secondChar);
                  cullRight();
              }
          }
          var merge = merge_right ? mergeToRight: mergeToLeft;
  
          var isDuplicate = firstChar === secondChar;
          if (isDuplicate) {
              cull();
          } else {
              if (match()) {
                  merge();
              }
          }
      }
  
      function upward (parent) {
          //print("START2");
          // Terminus if no blobs
          if (parent.blobs && "string" == typeof parent.blobs) {
              if (PUNCT[parent.strings.suffix.slice(0,1)]
                  && parent.strings.suffix.slice(0,1) === parent.blobs.slice(-1)) {
  
                  parent.strings.suffix = parent.strings.suffix.slice(1);
              }
              return;
          } else if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
              return;
          }
  
          // back-to-front, bottom-first
          var parentDecorations = blobHasDecorations(parent,true);
          for (var i=parent.blobs.length-1;i>-1;i--) {
              this.upward(parent.blobs[i]);
              var parentStrings = parent.strings;
              var childStrings = parent.blobs[i].strings;
              if (i === 0) {
                  // Remove leading space on first-position child node prefix if there is a trailing space on the node prefix above 
                  if (" " === parentStrings.prefix.slice(-1) && " " === childStrings.prefix.slice(0, 1)) {
                      childStrings.prefix = childStrings.prefix.slice(1);
                  }
                  // Migrate leading punctuation or space on a first-position prefix upward
                  var childChar = childStrings.prefix.slice(0, 1);
                  if (!parentDecorations && PUNCT_OR_SPACE[childChar] && !parentStrings.prefix) {
                      parentStrings.prefix += childChar;
                      childStrings.prefix = childStrings.prefix.slice(1);
                  }
              }
              if (i === (parent.blobs.length - 1)) {
                  // Migrate trailing space ONLY on a last-position suffix upward, controlling for duplicates
                  var childChar = childStrings.suffix.slice(-1);
                  // ZZZ Loosened to fix initialized names wrapped in a span and followed by a period
                  if (!parentDecorations && [" "].indexOf(childChar) > -1) {
                      if (parentStrings.suffix.slice(0,1) !== childChar) {
                          parentStrings.suffix = childChar + parentStrings.suffix;
                      }
                      childStrings.suffix = childStrings.suffix.slice(0, -1);
                  }
              }
              if (parentStrings.delimiter && i > 0) {
                  // Remove leading space on mid-position child node prefix if there is a trailing space on delimiter above
                  if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(-1)]
                      && parentStrings.delimiter.slice(-1) === childStrings.prefix.slice(0, 1)) {
  
                      childStrings.prefix = childStrings.prefix.slice(1);
                  }
              }
              // Siblings are handled in adjustNearsideSuffixes()
          }
          //print("   end");
      }
  
      function leftward (parent) {
          // Terminus if no blobs
          if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
              return;
          }
  
          for (var i=parent.blobs.length-1;i>-1;i--) {
              this.leftward(parent.blobs[i]);
              // This is a delicate one.
              //
              // Migrate if:
              // * there is no umbrella delimiter [ok]
              // * neither the child nor its sibling is a number [ok]
              // * decorations exist neither on the child nor on the sibling [ok]
              // * sibling prefix char is a swapping char [ok]
              //
              // Suppress without migration if:
              // * sibling prefix char matches child suffix char or
              // * child suffix is empty and sibling prefix char match last field char
              if ((i < parent.blobs.length -1) && !parent.strings.delimiter) {
                  // If there is a trailing swappable character on a sibling prefix with no intervening delimiter, copy it to suffix,
                  // controlling for duplicates
                  var child = parent.blobs[i];
                  var childChar = child.strings.suffix.slice(-1);
                  var sibling = parent.blobs[i+1];
                  var siblingChar = sibling.strings.prefix.slice(0, 1);
                  var hasDecorations = blobHasDecorations(child) || blobHasDecorations(sibling);
                  var hasNumber = "number" === typeof childChar || "number" === typeof siblingChar;
  
                  if (!hasDecorations && !hasNumber && PUNCT[siblingChar] && !hasNumber) {
                      var suffixAndPrefixMatch = siblingChar === child.strings.suffix.slice(-1);
                      var suffixAndFieldMatch = (!child.strings.suffix && "string" === typeof child.blobs && child.blobs.slice(-1) === siblingChar);
                      if (!suffixAndPrefixMatch && !suffixAndFieldMatch) {
                          mergeChars(child, 'suffix', sibling, 'prefix');
                          //child.strings.suffix += siblingChar;
                      } else {
                          sibling.strings.prefix = sibling.strings.prefix.slice(1);
                      }
                  }
              }
          }
      }
  
      function downward (parent) {
          //print("START3");
          // Terminus if no blobs
          if (parent.blobs && "string" == typeof parent.blobs) {
              if (PUNCT[parent.strings.suffix.slice(0,1)]
                  && parent.strings.suffix.slice(0,1) === parent.blobs.slice(-1)) {
  
                  parent.strings.suffix = parent.strings.suffix.slice(1);
              }
              return;
          } else if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
              return;
          }
          //if (top) {
          //    print("JSON "+JSON.stringify(parent, ["strings", "decorations", "blobs", "prefix", "suffix", "delimiter"], 2));
          //}
  
          var parentStrings = parent.strings;
          // Check for numeric child
          var someChildrenAreNumbers = false;
          for (var i=0,ilen=parent.blobs.length;i<ilen;i++) {
              if (blobIsNumber(parent.blobs[i])) {
                  someChildrenAreNumbers = true;
                  break;
              }
          }
          if (true || !someChildrenAreNumbers) {
              // If there is a leading swappable character on delimiter, copy it to suffixes IFF none of the targets are numbers
              if (parentStrings.delimiter && PUNCT[parentStrings.delimiter.slice(0, 1)]) {
                  var delimChar = parentStrings.delimiter.slice(0, 1);
                  for (var i=parent.blobs.length-2;i>-1;i--) {
                      var childStrings = parent.blobs[i].strings;
                      if (childStrings.suffix.slice(-1) !== delimChar) {
                          childStrings.suffix += delimChar;
                      }
                  }
                  parentStrings.delimiter = parentStrings.delimiter.slice(1);
              }
          }
          // back-to-front, top-first
          for (var i=parent.blobs.length-1;i>-1;i--) {
              var child = parent.blobs[i];
              var childStrings = parent.blobs[i].strings;
              var childDecorations = blobHasDecorations(child, true);
              var childIsNumber = blobIsNumber(child);
  
              if (i === (parent.blobs.length - 1)) {
  
                  //if (blobHasDescendantQuotes(child)) {
                  //    print("JSON "+JSON.stringify(parent, ["strings", "decorations", "blobs", "prefix", "suffix", "delimiter"]));
                  //}
  
                  if (true || !someChildrenAreNumbers) {
                      // If we have decorations, drill down to see if there are quotes below.
                      // If so, we allow migration anyway.
                      // Original discussion is here:
                      // https://forums.zotero.org/discussion/37091/citeproc-bug-punctuation-in-quotes/
                      var parentChar = parentStrings.suffix.slice(0, 1);
  
                      // Hmm.
                      // Consider writing out the matching child from blobHasDescendant functions.
                      // It should save some cycles, and produce the same result.
  
                      var allowMigration = false;
                      if (PUNCT[parentChar]) {
                          allowMigration = blobHasDescendantMergingPunctuation(parentChar,child);
                          if (!allowMigration && punctInQuote) {
                              allowMigration = blobHasDescendantQuotes(child);
                          }
                      }
                      if (allowMigration) {
                          if (PUNCT[parentChar]) {
                              if (!blobEndsInNumber(child)) {
                                  if ("string" === typeof child.blobs) {
                                      mergeChars(child, 'blobs', parent, 'suffix');
                                  } else {
                                      mergeChars(child, 'suffix', parent, 'suffix');
                                  }
                                  if (parentStrings.suffix.slice(0,1) === ".") {
                                      childStrings.suffix += parentStrings.suffix.slice(0,1);
                                      parentStrings.suffix = parentStrings.suffix.slice(1);
                                  }
                              }
                          }
                      }
                      if (childStrings.suffix.slice(-1) === "Â " && parentStrings.suffix.slice(0,1) === " ") {
                          parentStrings.suffix = parentStrings.suffix.slice(1);
                      }
                      // More duplicates control
                      if (PUNCT_OR_SPACE[childStrings.suffix.slice(0,1)]) {
                          if ("string" === typeof child.blobs && child.blobs.slice(-1) === childStrings.suffix.slice(0,1)) {
                              // Remove parent punctuation of it duplicates the last character of a field
                              childStrings.suffix = childStrings.suffix.slice(1);
                          }
                          if (childStrings.suffix.slice(-1) === parentStrings.suffix.slice(0, 1)) {
                              // Remove duplicate punctuation on child suffix
                              parentStrings.suffix = parentStrings.suffix.slice(0, -1);
                          }
                      }
                  }
                  // Squash dupes
                  if (matchLastChar(parent,parent.strings.suffix.slice(0,1))) {
                      parent.strings.suffix = parent.strings.suffix.slice(1);
                  }
              } else if (parentStrings.delimiter) {
                  // Remove trailing space on mid-position child node suffix if there is a leading space on delimiter above
                  if (PUNCT_OR_SPACE[parentStrings.delimiter.slice(0,1)]
                      && parentStrings.delimiter.slice(0, 1) === childStrings.suffix.slice(-1)) {
  
                      parent.blobs[i].strings.suffix = parent.blobs[i].strings.suffix.slice(0, -1);
                      
                  }
              } else {
                  // Otherwise it's a sibling. We don't care about moving spaces here, just suppress a duplicate
                  var siblingStrings = parent.blobs[i+1].strings;
                  if (!blobIsNumber(child) 
                      && !childDecorations
                      && PUNCT_OR_SPACE[childStrings.suffix.slice(-1)]
                      && childStrings.suffix.slice(-1) === siblingStrings.prefix.slice(0, 1)) {
  
                      siblingStrings.prefix = siblingStrings.prefix.slice(1);
                  }
              }
              // If field content ends with swappable punctuation, suppress swappable punctuation in style suffix.
              if (!childIsNumber && !childDecorations && PUNCT[childStrings.suffix.slice(0,1)]
                  && "string" === typeof child.blobs) {
                  
                  mergeChars(child, 'blobs', child, 'suffix');
              }
              this.downward(parent.blobs[i]);
          }
  /*
          if (top) {
  
              var seen = [];
              print(JSON.stringify(parent, function(key, val) {
                  if (!val || key === 'alldecor') return;
                  if (typeof val == "object") {
                      if (seen.indexOf(val) >= 0)
                          return
                      seen.push(val)
                  }
                  return val
              },2));
          }
  */
  
          //print("  end");
      }
      // Abstract out a couple of utility functions, used in fix() below.
      function swapToTheLeft (child) {
          var childChar = child.strings.suffix.slice(0,1);
          if ("string" === typeof child.blobs) {
              while (SWAP_IN[childChar]) {
                  mergeChars(child, 'blobs', child, 'suffix');
                  childChar = child.strings.suffix.slice(0,1);
              }                                
          } else {
              while (SWAP_IN[childChar]) {
                  mergeChars(child.blobs[child.blobs.length-1], 'suffix', child, 'suffix');
                  childChar = child.strings.suffix.slice(0,1);
              }
          }
      }
      function swapToTheRight (child) {
          if ("string" === typeof child.blobs) {
              var childChar = child.blobs.slice(-1);
              while (SWAP_OUT[childChar]) {
                  mergeChars(child, 'blobs', child, 'suffix', true);
                  childChar = child.blobs.slice(-1);
              }
          } else {
              var childChar = child.blobs[child.blobs.length-1].strings.suffix.slice(-1);
              while (SWAP_OUT[childChar]) {
                  mergeChars(child.blobs[child.blobs.length-1], 'suffix', child, 'suffix', true);
                  childChar = child.blobs[child.blobs.length-1].strings.suffix.slice(-1);
              }
          }
      }
  
      function fix (parent) {
          // Terminus if no blobs
          if ("object" !== typeof parent || "object" !== typeof parent.blobs || !parent.blobs.length) {
              return;
          }
          
          //print("START4");
          // Do the swap, front-to-back, bottom-first
          var lastChar;
  
          // XXX Two things to fix with this:
          // XXX (1) Stalls after one character
          // XXX (2) Moves colon and semicolon, both of which SHOULD stall
  
          for (var i=0,ilen=parent.blobs.length;i<ilen;i++) {
              var child = parent.blobs[i];
              var quoteSwap = false;
              for (var j=0,jlen=child.decorations.length;j<jlen;j++) {
                  var decoration = child.decorations[j];
                  if (decoration[0] === "@quotes" && decoration[1] !== "false") {
                      quoteSwap = true;
                  }
              }
              if (quoteSwap) {
                  if (punctInQuote) {
                      swapToTheLeft(child);
                  } else {
                      swapToTheRight(child);
                  }
              }
              lastChar = this.fix(parent.blobs[i]);
              if (child.blobs && "string" === typeof child.blobs) {
                  lastChar = child.blobs.slice(-1);
              }
          }
          return lastChar;
      }
      this.upward = upward;
      this.leftward = leftward;
      this.downward = downward;
      this.fix = fix;
  };
  
  /*global CSL: true */
  
  CSL.Engine.Opt = function () {
      this.parallel = {
          enable: false,
      },
      this.has_disambiguate = false;
      this.mode = "html";
      this.dates = {};
      this.jurisdictions_seen = {};
      this.suppressedJurisdictions = {};
      this.inheritedAttributes = {};
      this["locale-sort"] = [];
      this["locale-translit"] = [];
      this["locale-translat"] = [];
      this.citeAffixes = {
          persons:{
              "locale-orig":{
                  prefix:"",
                  suffix:""
              },
              "locale-translit":{
                  prefix:"",
                  suffix:""
              },
              "locale-translat":{
                  prefix:"",
                  suffix:""
              }
          },
          institutions:{
              "locale-orig":{
                  prefix:"",
                  suffix:""
              },
              "locale-translit":{
                  prefix:"",
                  suffix:""
              },
              "locale-translat":{
                  prefix:"",
                  suffix:""
              }
          },
          titles:{
              "locale-orig":{
                  prefix:"",
                  suffix:""
              },
              "locale-translit":{
                  prefix:"",
                  suffix:""
              },
              "locale-translat":{
                  prefix:"",
                  suffix:""
              }
          },
          journals:{
              "locale-orig":{
                  prefix:"",
                  suffix:""
              },
              "locale-translit":{
                  prefix:"",
                  suffix:""
              },
              "locale-translat":{
                  prefix:"",
                  suffix:""
              }
          },
          publishers:{
              "locale-orig":{
                  prefix:"",
                  suffix:""
              },
              "locale-translit":{
                  prefix:"",
                  suffix:""
              },
              "locale-translat":{
                  prefix:"",
                  suffix:""
              }
          },
          places:{
              "locale-orig":{
                  prefix:"",
                  suffix:""
              },
              "locale-translit":{
                  prefix:"",
                  suffix:""
              },
              "locale-translat":{
                  prefix:"",
                  suffix:""
              }
          }
      };
      this["default-locale"] = [];
      this.update_mode = CSL.NONE;
      this.bib_mode = CSL.NONE;
      this.sort_citations = false;
      /*
       * Default values.
       * The various et-al values are set globally,
       * and the appropriate value is set by the names start
       * tag at runtime, depending on whether the Item is a
       * first or a subsequent reference.
       */
      this["et-al-min"] = 0;
      this["et-al-use-first"] = 1;
      this["et-al-use-last"] = false;
      this["et-al-subsequent-min"] = false;
      this["et-al-subsequent-use-first"] = false;
  
      this["demote-non-dropping-particle"] = "display-and-sort";
      // default of true, because none of our consuming
      // applications so far store the various prefixes and 
      // suffixes we support in separate fields.
      this["parse-names"] = true;
      // this["auto-vietnamese-names"] = true;
  
      this.citation_number_slug = false;
      this.trigraph = "Aaaa00:AaAa00:AaAA00:AAAA00";
  
      this.nodenames = [];
  
      this.gender = {};
      this['cite-lang-prefs'] = {
          persons:['orig'],
          institutions:['orig'],
          titles:['orig'],
          journals:['orig'],
          publishers:['orig'],
          places:['orig'],
          number:['orig']
      };
  
      this.has_layout_locale = false;
      this.disable_duplicate_year_suppression = [];
      this.use_context_condition = false;
  
      this.jurisdiction_fallbacks = {};
  
      this.development_extensions = {};
      this.development_extensions.field_hack = true;
      this.development_extensions.allow_field_hack_date_override = true;
      this.development_extensions.locator_date_and_revision = true;
      this.development_extensions.locator_label_parse = true;
      this.development_extensions.raw_date_parsing = true;
      this.development_extensions.clean_up_csl_flaws = true;
      this.development_extensions.consolidate_legal_items = false;
      this.development_extensions.csl_reverse_lookup_support = false;
      this.development_extensions.wrap_url_and_doi = false;
      this.development_extensions.thin_non_breaking_space_html_hack = false;
      this.development_extensions.apply_citation_wrapper = false;
      this.development_extensions.main_title_from_short_title = false;
      this.development_extensions.uppercase_subtitles = false;
      this.development_extensions.normalize_lang_keys_to_lowercase = false;
      this.development_extensions.strict_text_case_locales = false;
      this.development_extensions.expect_and_symbol_form = false;
      this.development_extensions.require_explicit_legal_case_title_short = false;
      this.development_extensions.spoof_institutional_affiliations = false;
      this.development_extensions.force_jurisdiction = false;
      this.development_extensions.parse_names = true;
      this.development_extensions.hanging_indent_legacy_number = false;
      this.development_extensions.throw_on_empty = false;
      this.development_extensions.strict_inputs = true;
      this.development_extensions.prioritize_disambiguate_condition = false;
      this.development_extensions.force_short_title_casing_alignment = true;
      this.development_extensions.implicit_short_title = false;
      this.development_extensions.force_title_abbrev_fallback = false;
      this.development_extensions.split_container_title = false;
      this.development_extensions.legacy_institution_name_ordering = false;
      this.development_extensions.etal_min_etal_usefirst_hack = false;
  };
  
  CSL.Engine.Tmp = function () {
      //
      // scratch variable to display the total
      // number of names in all rendered variables
      // in a cite.  initialized to zero by the
      // citation element, incremented by each
      // name variable actually rendered
      this.names_max = new CSL.Stack();
      this.names_base = new CSL.Stack();
      this.givens_base = new CSL.Stack();
      //
      // this holds the field values collected by the @value
      // and @variable attributes, for processing by the
      // element functions.
      this.value = [];
      /**
       * Object to hold the decorations declared by a name-part
       * element.
       */
      this.namepart_decorations = {};
      /**
       * String variable to hold the type of a name-part
       * element.
       */
      this.namepart_type = false;
      //
      // scratch variable to flag whether we are processing
      // a citation or a bibiliography.  this diverts token and
      // configuration to the appropriateo objects inside
      // state.  the default is "citation".
      this.area = "citation";
      this.root = "citation";
      this.extension = "";
      //
      // controls the implicit conditional wrappers applied
      // to top-level elements inside a names substitute span.
      // false by default, names start tag pushes a new true level,
      // names end tag pops it.  Output value check in @variable
      // function of attributes.js sets level to false.  closing names
      // tag maps a false value to superior level.
      this.can_substitute = new CSL.Stack(0, CSL.LITERAL);
      //
      // notes whether the formatted elements of a date span
      // rendered anything.  controls whether literal fallback
      // is used.
      this.element_rendered_ok = false;
      //
      // element_trace keeps a record of rendered elements.
      // used to implement author-only.
      //
      this.element_trace = new CSL.Stack("style");
      //
      // counter for total namesets
      this.nameset_counter = 0;
      //
      /////  this.fun.check_for_output = CSL.check_for_output;
      //
      // stack flag used for term handling.  Set to true
      // if at least one variable has tried to render, and
      // no variables had content.
      this.group_context = new CSL.Stack({
          term_intended: false,
          variable_attempt: false,
          variable_success: false,
          output_tip: undefined,
          label_form:  undefined,
          parallel_first: undefined,
          parallel_last: undefined,
          parallel_delimiter_override: undefined,
          condition: false,
          force_suppress: false,
          done_vars: []
      });
      //
      // boolean flag used to control first-letter capitalization
      // of terms.  Set to true if any item preceding the term
      // being handled has rendered successfully, otherwise
      // false.
      this.term_predecessor = false;
      //
      // boolean flag to control use of layout delimiter
      // immediately before numbers. This hack is needed for
      // some numeric styles.
      this.in_cite_predecessor = false;
      //
      // stack flag used to control jumps in the closing
      // token of a conditional.
      this.jump = new CSL.Stack(0, CSL.LITERAL);
      //
      // holds string parameters for group formatting, between
      // the start of a group and the closing token.
      this.decorations = new CSL.Stack();
      //
      // token store stack.
      this.tokenstore_stack = new CSL.Stack();
  
      // for collapsing
      this.last_suffix_used = "";
      this.last_names_used = [];
      this.last_years_used = [];
      this.years_used = [];
      this.names_used = [];
  
      this.taintedItemIDs = {};
      this.taintedCitationIDs = {};
      //
      // scratch stack containing initialize-with strings or null values
      this.initialize_with = new CSL.Stack();
      //
      // this is used to set a requested set of
      // disambiguation parameters in the output.
      // for the array elements, the base array
      // (either zero for each nameset, or full-up
      // if givens are already used) is set
      // during names processing, if no value
      // is set in the processor before a rendering
      // run.  to simplify things for the calling
      // function, these are just bog-standard arrays,
      // and can be safely overwritten.
      this.disambig_request = false;
      //
      // scratch variable to toggle an attempt to set a
      // name in sort order rather than display
      // order.
      this["name-as-sort-order"] = false;
      //
      // suppress decorations (used for generating
      // sort keys and disambiguation keys)
      this.suppress_decorations = false;
      //
      // empty settings array, used to report settings used
      // if disambig_request is not set at runtime
      this.disambig_settings = new CSL.AmbigConfig();
      //
      // sort key array
      this.bib_sort_keys = [];
      //
      // holds the prefix between the start of a group
      // and the closing token.
      this.prefix = new CSL.Stack("", CSL.LITERAL);
      //
      // holds the suffix between the start of a group
      // and the closing token.
      this.suffix = new CSL.Stack("", CSL.LITERAL);
      //
      // holds the group delimiter between the start of a group
      // and the closing token.
      this.delimiter = new CSL.Stack("", CSL.LITERAL);
      //
      // Used for conditional locale switching.
      this.cite_locales = [];
      this.cite_affixes = {
          citation: false, 
          bibliography: false,
          citation_sort: false, 
          bibliography_sort: false
      };
      this.strip_periods = 0;
      this.shadow_numbers = {};
      this.authority_stop_last = 0;
      this.loadedItemIDs = {};
      //
      // Push/pop array for set/unset of opt.lang setting, used
      // in if locale="XX" to force terms to language of item.
      // @locale tests track their nesting level in a counter,
      // and push the current value of state.opt.lang to one array,
      // and the counter value to another. On the way back up,
      // closing node decrements the counter, compares its value
      // with the trailing value on the array, and pops both
      // arrays, resetting state.opt.lang to the previous value.
      // A hack to solve a surprisingly difficult problem caused
      // by the use of an execution stack for the nested structure.
      this.condition_counter = 0; //incremented/decremented on ALL conditions
      this.condition_lang_val_arr = [];
      this.condition_lang_counter_arr = [];
  };
  
  
  CSL.Engine.Fun = function (state) {
      //
      // matcher
      this.match = new CSL.Util.Match();
      //
      // utility to get standard suffixes for disambiguation
      this.suffixator = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);
      //
      // utility to romanize a numeric value
      this.romanizer = new CSL.Util.Romanizer();
      //
      // utility to make an ordinal form of a number
      this.ordinalizer = new CSL.Util.Ordinalizer(state);
      //
      // utility to make the long ordinal form of a number, if possible
      this.long_ordinalizer = new CSL.Util.LongOrdinalizer();
  };
  
  
  CSL.Engine.Build = function () {
      // Alternate et-al term
      // Holds the localization key of the alternative term
      // to be used for et-al in a names environment.  Reduced
      // to a term object when the element tag is processed during
      // Build.
      this["alternate-term"] = false;
      //
      // flags that we are in the bibliography area.
      // used by sort.
      this.in_bibliography = false;
      //
      // scratch variable to alter behaviour when processing
      // locale files
      this.in_style = false;
      //
      // used to ignore info
      this.skip = false;
      //
      // the macro ATTRIBUTE stores a macro name on this
      // scratch variable anywhere outside the layout area
      // during build.  The macro name is picked up when
      // the token is encountered inside the layout area,
      // either through a direct call, or as part of a nested
      // macro expansion, and the macro content is exploded
      // into the token list.
      this.postponed_macro = false;
      //
      // used especially for controlling macro expansion
      // during Build.
      this.layout_flag = false;
      //
      // (was buffer_name)
      // scratch variable to hold the name of a macro
      // or a term until its children have been collected.
      this.name = false;
      this.names_variables = [[]];
      this.name_label = [{}];
      //
      // scratch variable to hold the value of a form
      // attribute until other attributes needed for
      // processing have been collected.
      this.form = false;
      this.term = false;
      //
      // the macros themselves are discarded after Build
      this.macro = {};
      //
      // the macro build stack.  used to raise an error
      // when macros would attempt to call themselves.
      this.macro_stack = [];
      //
      // stores the content of an XML text node during processing
      this.text = false;
      //
      // this is a scratch variable for holding an attribute
      // value during processing
      this.lang = false;
      //
      // should be able to run uninitialized; may attract some
      // cruft this way.
      this.area = "citation";
      this.root = "citation";
      this.extension = "";
      //
      // controls the application of implicit conditional wrappers
      // to top-level elements inside a names substitute span.
      // zero by default, build of names tag pushes a
      // new level with value 1.  group start tag increments by 1,
      // group end tag decrements by 1.  conditional wrappers are
      // only applied if value is exactly 1.
      this.substitute_level = new CSL.Stack(0, CSL.LITERAL);
      this.names_level = 0;
      this.render_nesting_level = 0;
      this.render_seen = false;
      this.bibliography_key_pos = 0;
  };
  
  
  CSL.Engine.Configure = function () {
      //
      // the fail and succeed arrays are used for stack
      // processing during configure.
      this.tests = [];
      this.fail = [];
      this.succeed = [];
  };
  
  
  CSL.Engine.Citation = function (state) {
       // Citation options area.
       // Holds a mixture of persistent and ephemeral
       // options and scratch data used during processing of
       // a citation.</p>
      this.opt = {
          inheritedAttributes: {}
      };
  
      this.tokens = [];
      // Placeholder function
      this.srt = new CSL.Registry.Comparifier(state, "citation_sort");
      //
      // configuration array to hold the collapse
      // options, if any.
      this.opt.collapse = [];
      //
      // disambiguate options
      this.opt["disambiguate-add-names"] = false;
      this.opt["disambiguate-add-givenname"] = false;
      this.opt["disambiguate-add-year-suffix"] = false;
      this.opt["givenname-disambiguation-rule"] = "by-cite";
      this.opt["near-note-distance"] = 5;
  
      this.opt.topdecor = [];
      this.opt.layout_decorations = [];
      this.opt.layout_prefix = "";
      this.opt.layout_suffix = "";
      this.opt.layout_delimiter = "";
      //
      // sorting
      this.opt.sort_locales = [];
      this.opt.max_number_of_names = 0;
      this.root = "citation";
  };
  
  
  CSL.Engine.Bibliography = function () {
      this.opt = {
          inheritedAttributes: {}
      };
      this.tokens = [];
  
      this.opt.collapse = [];
  
      this.opt.topdecor = [];
      this.opt.layout_decorations = [];
      this.opt.layout_prefix = "";
      this.opt.layout_suffix = "";
      this.opt.layout_delimiter = "";
      this.opt["line-spacing"] = 1;
      this.opt["entry-spacing"] = 1;
      //
      // sorting
      this.opt.sort_locales = [];
      this.opt.max_number_of_names = 0;
      this.root = "bibliography";
  };
  
  
  CSL.Engine.BibliographySort = function () {
      this.tokens = [];
      this.opt = {};
      this.opt.sort_directions = [];
      this.opt.topdecor = [];
      // Holds the final citation-number sort direction, for use
      // in applying numbers in cs:citation and cs:bibliography.
      // Value is exclusively controlled by cs:key in bibliography_sort
      this.opt.citation_number_sort_direction = CSL.ASCENDING;
      this.opt.citation_number_secondary = false;
      this.tmp = {};
      this.keys = [];
      this.root = "bibliography";
  };
  
  
  CSL.Engine.CitationSort = function () {
      this.tokens = [];
      this.opt = {};
      this.opt.sort_directions = [];
      this.keys = [];
      this.opt.topdecor = [];
      this.root = "citation";
  };
  
  CSL.Engine.InText = function () {
       // InText options area.
       // Holds a mixture of persistent and ephemeral
       // options and scratch data used during processing of
       // a citation.</p>
      this.opt = {
          inheritedAttributes: {}
      };
  
      this.tokens = [];
      // Placeholder function
      //this.srt = new CSL.Registry.Comparifier(state, "citation_sort");
      //
      // configuration array to hold the collapse
      // options, if any.
      this.opt.collapse = [];
      //
      // disambiguate options
      this.opt["disambiguate-add-names"] = false;
      this.opt["disambiguate-add-givenname"] = false;
      this.opt["disambiguate-add-year-suffix"] = false;
      this.opt["givenname-disambiguation-rule"] = "by-cite";
      this.opt["near-note-distance"] = 5;
  
      this.opt.topdecor = [];
      this.opt.layout_decorations = [];
      this.opt.layout_prefix = "";
      this.opt.layout_suffix = "";
      this.opt.layout_delimiter = "";
      //
      // sorting
      this.opt.sort_locales = [];
      this.opt.max_number_of_names = 0;
      this.root = "intext";
  };
  
  /*global CSL: true */
  
  CSL.Engine.prototype.previewCitationCluster = function (citation, citationsPre, citationsPost, newMode) {
      // Generate output for a hypothetical citation at the current position,
      // Leave the registry in the same state in which it was found.
      //print("################### previewCitationCluster() #################");
      var oldMode = this.opt.mode;
      this.setOutputFormat(newMode);
      // Avoids generating unwanted ibids, if the citationID already exists in document
    if (citation.citationID) {
      delete citation.citationID;
    }
      var ret = this.processCitationCluster(citation, citationsPre, citationsPost, CSL.PREVIEW);
  
      this.setOutputFormat(oldMode);
      return ret[1];
  };
  
  CSL.Engine.prototype.appendCitationCluster = function (citation) {
      var citationsPre = [];
      var len = this.registry.citationreg.citationByIndex.length;
      for (var pos = 0; pos < len; pos += 1) {
          var c = this.registry.citationreg.citationByIndex[pos];
          citationsPre.push(["" + c.citationID, c.properties.noteIndex]);
      }
      // Drop the data segment to return a list of pos/string pairs.
      return this.processCitationCluster(citation, citationsPre, [])[1];
  };
  
  
  CSL.Engine.prototype.processCitationCluster = function (citation, citationsPre, citationsPost, flag) {
      var c, preCitation, postCitation, i, ilen, j, jlen, k, klen, n, nlen, key, Item, item, noteCitations, textCitations, m, citationsInNote;
      this.debug = false;
      this.tmp.loadedItemIDs = {};
  
      // Revert citation dereference from 2ffc4664ae
      //citation = JSON.parse(JSON.stringify(citation));
      
      //print("################### processCitationCluster() #################");
      this.tmp.citation_errors = [];
      this.registry.return_data = {"bibchange": false};
  
      // make sure this citation has a unique ID, and register it in citationById.
      this.setCitationId(citation);
  
      var oldCitationList;
      var oldItemList;
      var oldAmbigs;
      if (flag === CSL.PREVIEW) {
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** start state save *********");
          }
          //SNIP-END
          //
          // Simplify.
  
          // Take a slice of existing citations.
          oldCitationList = this.registry.citationreg.citationByIndex.slice();
  
          // Take a slice of current items, for later use with update.
          oldItemList = this.registry.reflist.slice();
  
          // Make a list of preview citation ref objects. Omit the current
          // citation, because it will not exist in registry if: (a) this is
          // a new citation; or (b) the calling application is assigning
          // new citationIDs for every transaction.
          var newCitationList = citationsPre.concat(citationsPost);
  
          // Make a full list of desired ids, for use in preview update,
          // and a hash list of same while we're at it.
          // First step through known citations, then step through
          // the items in the citation for preview.
          var newItemIds = {};
          var newItemIdsList = [];
          for (var i = 0, ilen = newCitationList.length; i < ilen; i += 1) {
              c = this.registry.citationreg.citationById[newCitationList[i][0]];
              for (j = 0, jlen = c.citationItems.length; j < jlen; j += 1) {
                  newItemIds[c.citationItems[j].id] = true;
                  newItemIdsList.push("" + c.citationItems[j].id);
              }
          }
          for (j = 0, jlen = citation.citationItems.length; j < jlen; j += 1) {
              newItemIds[citation.citationItems[j].id] = true;
              newItemIdsList.push("" + citation.citationItems[j].id);
          }
  
          // Clone and save off disambigs of items that will be lost.
          oldAmbigs = {};
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
              if (!newItemIds[oldItemList[i].id]) {
                  var oldAkey = this.registry.registry[oldItemList[i].id].ambig;
                  var ids = this.registry.ambigcites[oldAkey];
                  if (ids) {
                      for (j = 0, jlen = ids.length; j < jlen; j += 1) {
                          oldAmbigs[ids[j]] = CSL.cloneAmbigConfig(this.registry.registry[ids[j]].disambig);
                      }
                  }
              }
          }
  
          // Update items.  This will produce the base name data and sort things.
          // Possibly unnecessary?
          //this.updateItems(this.registry.mylist.concat(tmpItems));
  
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** end state save *********");
          }
          //SNIP-END
      }
  
      this.tmp.taintedCitationIDs = {};
      var sortedItems = [];
  
      // Styles that use note backreferencing with a by-cite
      // givenname disambiguation rule include the note number
      // in the cite for disambiguation purposes. Correct resolution
      // of disambiguate="true" conditions on first-reference cites 
      // in certain editing scenarios (e.g. where a cite is moved across
      // notes) requires that disambiguation be rerun on cites
      // affected by the edit.
      var rerunAkeys = {};
  
      // retrieve item data and compose items for use in rendering
      // attach pointer to item data to shared copy for good measure
      for (var i = 0, ilen = citation.citationItems.length; i < ilen; i += 1) {
          // Protect against caller-side overwrites to locator strings etc
          item = {};
          for (var key in citation.citationItems[i]) {
              item[key] = citation.citationItems[i][key];
          }
          Item = this.retrieveItem("" + item.id);
          if (Item.id) {
              this.transform.loadAbbreviation("default", "hereinafter", Item.id, Item.language);
          }
          item = CSL.parseLocator.call(this, item);
          if (this.opt.development_extensions.consolidate_legal_items) {
              this.remapSectionVariable([[Item,item]]);
          }
          if (this.opt.development_extensions.locator_label_parse) {
              if (item.locator && ["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === 'page')) {
                  var m = CSL.LOCATOR_LABELS_REGEXP.exec(item.locator);
                  if (m) {
                      var tryLabel = CSL.LOCATOR_LABELS_MAP[m[2]];
                      if (this.getTerm(tryLabel)) {
                          item.label = tryLabel;
                          item.locator = m[3];
                      }
                  }
              }
          }
          var newitem = [Item, item];
          sortedItems.push(newitem);
          citation.citationItems[i].item = Item;
      }
  
      // ZZZ sort stuff moved from here.
  
      // attach the sorted list to the citation item
      citation.sortedItems = sortedItems;
  
      // build reconstituted citations list in current document order
      var citationByIndex = [];
      var citationById = {};
      var lastNotePos;
      for (i=0, ilen=citationsPre.length; i<ilen; i += 1) {
          preCitation = citationsPre[i];
          if (this.opt.development_extensions.strict_inputs) {
              if (citationById[preCitation[0]]) {
                  CSL.error("Previously referenced citationID " + preCitation[0] + " encountered in citationsPre");
              }
              if (preCitation[1]) {
                  if (lastNotePos > preCitation[1]) {
                      CSL.debug("Note index sequence is not sane at citationsPre[" + i + "]");
                  }
                  lastNotePos = preCitation[1];
              }
          }
          this.registry.citationreg.citationById[preCitation[0]].properties.noteIndex = preCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[preCitation[0]]);
          citationById[preCitation[0]] = this.registry.citationreg.citationById[preCitation[0]];
      }
      if (!citation.properties) {
          citation.properties = {
              noteIndex: 0
          };
      }
      if (this.opt.development_extensions.strict_inputs) {
          if (citationById[citation.citationID]) {
              CSL.error("Citation with previously referenced citationID " + citation.citationID);
          }
          if (citation.properties.noteIndex) {
              if (lastNotePos > citation.properties.noteIndex) {
                  CSL.debug("Note index sequence is not sane for citation " + citation.citationID);
              }
              lastNotePos = citation.properties.noteIndex;
          }
      }
      citationByIndex.push(citation);
      citationById[citation.citationID] = citation;
      for (i=0, ilen=citationsPost.length; i<ilen; i += 1) {
          postCitation = citationsPost[i];
          if (this.opt.development_extensions.strict_inputs) {
              if (citationById[postCitation[0]]) {
                  CSL.error("Previously referenced citationID " + postCitation[0] + " encountered in citationsPost");
              }
              if (postCitation[1]) {
                  if (lastNotePos > postCitation[1]) {
                      CSL.debug("Note index sequence is not sane at postCitation[" + i + "]");
                  }
                  lastNotePos = postCitation[1];
              }
          }
          this.registry.citationreg.citationById[postCitation[0]].properties.noteIndex = postCitation[1];
          citationByIndex.push(this.registry.citationreg.citationById[postCitation[0]]);
          citationById[postCitation[0]] = this.registry.citationreg.citationById[postCitation[0]];
      }
      this.registry.citationreg.citationByIndex = citationByIndex;
      this.registry.citationreg.citationById = citationById;
  
      //
      // The processor provides three facilities to support
      // updates following position reevaluation.
      //
      // (1) The updateItems() function reports tainted ItemIDs
      // to state.tmp.taintedItemIDs.
      //
      // (2) The processor memos the type of style referencing as
      // CSL.NONE, CSL.NUMERIC or CSL.POSITION in state.opt.update_mode.
      //
      // XXXX: NO LONGER
      // (3) For citations containing cites with backreference note numbers,
      // a string image of the rendered citation is held in
      // citation.properties.backref_citation, and a list of
      // ItemIDs to be used to update the backreference note numbers
      // is memoed at citation.properties.backref_index.  When such
      // citations change position, they can be updated with a
      // series of simple find and replace operations, without
      // need for rerendering.
      //
  
      //
      // Position evaluation!
      //
      // set positions in reconstituted list, noting taints
      this.registry.citationreg.citationsByItemId = {};
      if (this.opt.update_mode === CSL.POSITION) {
          textCitations = [];
          noteCitations = [];
          citationsInNote = {};
      }
      var update_items = [];
      for (var i = 0, ilen = citationByIndex.length; i < ilen; i += 1) {
          citationByIndex[i].properties.index = i;
          for (j = 0, jlen = citationByIndex[i].sortedItems.length; j < jlen; j += 1) {
              item = citationByIndex[i].sortedItems[j];
              if (!this.registry.citationreg.citationsByItemId[item[1].id]) {
                  this.registry.citationreg.citationsByItemId[item[1].id] = [];
                  update_items.push("" + item[1].id);
              }
              if (this.registry.citationreg.citationsByItemId[item[1].id].indexOf(citationByIndex[i]) === -1) {
                  this.registry.citationreg.citationsByItemId[item[1].id].push(citationByIndex[i]);
              }
          }
          if (this.opt.update_mode === CSL.POSITION) {
              if (citationByIndex[i].properties.noteIndex) {
                  noteCitations.push(citationByIndex[i]);
              } else {
                  citationByIndex[i].properties.noteIndex = 0;
                  textCitations.push(citationByIndex[i]);
              }
          }
      }
      //
      // update bibliography items here
      //
      if (flag !== CSL.ASSUME_ALL_ITEMS_REGISTERED) {
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** start update items *********");
          }
          //SNIP-END
          // true signals implicit updateItems (will not rerun sys.retrieveItem())
          this.updateItems(update_items, null, null, true);
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** endo update items *********");
          }
          //SNIP-END
      }
  
      if (!this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
              sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
          }
  
          /* 
           * Grouped sort stuff (start)
           */
  
          if (this.opt.grouped_sort &&  !citation.properties.unsorted) {
              // Insert authorstring as key.
              for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
                  var sortkeys = sortedItems[i][1].sortkeys;
                  this.tmp.authorstring_request = true;
                  // Run getAmbiguousCite() with the current disambig
                  // parameters, and pick up authorstring from the registry.
                  var mydisambig = this.registry.registry[sortedItems[i][0].id].disambig;
                  
                  this.tmp.authorstring_request = true;
                  CSL.getAmbiguousCite.call(this, sortedItems[i][0], mydisambig);
                  var authorstring = this.registry.authorstrings[sortedItems[i][0].id];
                  this.tmp.authorstring_request = false;
  
                  sortedItems[i][1].sortkeys = [authorstring].concat(sortkeys);
              }
  
              sortedItems.sort(this.citation.srt.compareCompositeKeys);
              // Replace authorstring key in items with same (authorstring) with the 
              // keystring of first normal key. This forces grouped sorts,
              // as discussed here:
              // https://github.com/citation-style-language/schema/issues/40
              var lastauthor = false;
              var thiskey = false;
              var thisauthor = false;
              for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
                  if (sortedItems[i][1].sortkeys[0] !== lastauthor) {
                      thisauthor = sortedItems[i][1].sortkeys[0];
                      thiskey =  sortedItems[i][1].sortkeys[1];
                  }
                  sortedItems[i][1].sortkeys[0] = "" + thiskey + i;
                  lastauthor = thisauthor;
              }
          }
          /*
           * Grouped sort stuff (end)
           */
  
          if (!citation.properties.unsorted) {
              sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
      }
  
      // evaluate parallels
  
      if (this.opt.parallel.enable) {
          this.parallel.StartCitation(citation.sortedItems);
      }
  
      var citations;
      if (this.opt.update_mode === CSL.POSITION) {
          for (var i = 0; i < 2; i += 1) {
              var first_ref = {};
              var last_ref = {};
              var first_container_ref = {};
              citations = [textCitations, noteCitations][i];
              for (j = 0, jlen = citations.length; j < jlen; j += 1) {
                  var onecitation = citations[j];
                  if (!citations[j].properties.noteIndex) {
                      citations[j].properties.noteIndex = 0;
                  }
                  citations[j].properties.noteIndex = parseInt(citations[j].properties.noteIndex, 10);
                  if (j > 0 && onecitation.properties.noteIndex && citations[j - 1].properties.noteIndex > onecitation.properties.noteIndex) {
                      citationsInNote = {};
                      first_ref = {};
                      last_ref = {};
                      first_container_ref = {};
                  }
                  for (k = 0, klen = onecitation.sortedItems.length; k < klen; k += 1) {
                      if (onecitation.sortedItems[k][1].parallel && onecitation.sortedItems[k][1].parallel !== "first") {
                          continue;
                      }
                      if (!citationsInNote[onecitation.properties.noteIndex]) {
                          citationsInNote[onecitation.properties.noteIndex] = 1;
                      } else {
                          citationsInNote[onecitation.properties.noteIndex] += 1;
                      }
                  }
                  // Set the following:
                  //
                  // (1) position as required (as per current Zotero)
                  // (2) first-reference-note-number as required (on onecitation item)
                  // (3) near-note as required (on onecitation item, according to
                  //     state.opt["near-note-distance"] parameter)
                  // (4) state.registry.citationreg.citationsByItemId.
                  //
                  // Any state changes caused by unsetting or resetting should
                  // trigger a single entry for the citations in
                  // state.tmp.taintedCitationIDs (can block on presence of
                  // state.registry.citationreg.citationsByItemId).
                  //
                  for (k = 0, klen = citations[j].sortedItems.length; k < klen; k += 1) {
                      item = citations[j].sortedItems[k];
                      // Okay ...
                      // We set up three IDs for use in position evaluation.
                      // item_id is the real Item.id
                      // first_id is the legislation_id or Item.id (so statutes backref to first in set, chapters to specific chapter)
                      // last_id is the legislation_id or container_id (so statute AND chapter distance is from any ref in set)
                      // (replaces myid)
                      var item_id = item[0].id;
                      var first_id = item[0].legislation_id ? item[0].legislation_id : item[0].id;
                      var last_id = item[0].legislation_id ? item[0].legislation_id : item[0].container_id ? item[0].container_id : item[0].id;
                      var myxloc = item[1]["locator-extra"];
                      var mylocator = item[1].locator;
                      var mylabel = item[1].label;
                      var incitationid;
                      var incitationxloc;
                      if (k > 0) {
                          // incitationid is only reached in the else branch
                          // following "undefined" === typeof first_ref[myid]
                          // below
                          if (onecitation.sortedItems[k - 1][0].legislation_id) {
                              incitationid = onecitation.sortedItems[k - 1][0].legislation_id;
                          } else {
                              incitationid = onecitation.sortedItems[k - 1][1].id;
                              incitationxloc = onecitation.sortedItems[k - 1][1]["locator-extra"];
                              //if (onecitation.sortedItems[k-1][1].parallel === "last") {
                                  for (var l=k-2; l>-1; l--) {
                                      if (onecitation.sortedItems[l][1].parallel === "first") {
                                          incitationid = onecitation.sortedItems[l][1].id;
                                          incitationxloc = onecitation.sortedItems[l][1]["locator-extra"];
                                      }
                                  }
                              //}
                          }
                      }
                      // Don't touch item data of other cites when previewing
                      if (flag === CSL.PREVIEW) {
                          if (onecitation.citationID != citation.citationID) {
                              if ("undefined" === typeof first_ref[item[1].id]) {
                                  first_ref[first_id] = onecitation.properties.noteIndex;
                                  last_ref[last_id] = onecitation.properties.noteIndex;
                              } else {
                                  last_ref[last_id] = onecitation.properties.noteIndex;
                              }
                              continue;
                          }
                      }
                      var oldvalue = {};
                      oldvalue.position = item[1].position;
                      oldvalue["first-reference-note-number"] = item[1]["first-reference-note-number"];
                      oldvalue["first-container-reference-note-number"] = item[1]["first-container-reference-note-number"];
                      oldvalue["near-note"] = item[1]["near-note"];
                      item[1]["first-reference-note-number"] = 0;
                      item[1]["first-container-reference-note-number"] = 0;
                      item[1]["near-note"] = false;
                      if (this.registry.citationreg.citationsByItemId[item_id]) {
                          if (this.opt.xclass === 'note' && this.opt.has_disambiguate) {
                              var oldCount = this.registry.registry[item[0].id]["citation-count"];
                              var newCount = this.registry.citationreg.citationsByItemId[item_id].length;
                              this.registry.registry[item[0].id]["citation-count"] = this.registry.citationreg.citationsByItemId[item_id].length;
                              if ("number" === typeof oldCount) {
                                  var oldCountCheck = (oldCount < 2);
                                  var newCountCheck = (newCount < 2);
                                  if (oldCountCheck !== newCountCheck) {
                                      for (var l=0,llen=this.registry.citationreg.citationsByItemId[item_id].length;l<llen;l++) {
                                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                                          this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                                      }
                                  }
                              } else {
                                  for (var l=0,llen=this.registry.citationreg.citationsByItemId[item_id].length;l<llen;l++) {
                                      rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                                      this.tmp.taintedCitationIDs[this.registry.citationreg.citationsByItemId[item_id][l].citationID] = true;
                                  }
                              }
                          }
                      }
                      var oldlastid;
                      var oldlastxloc;
                      
                      // Okay, chill.
                      // The first test needs to be for presence of last_ref[last_id]. Everything
                      // after in subsequent evaluation depends on that.
  
                      // HOWEVER, despite starting with this test, we need to catch every member
                      // of the set, and set its first-container-reference-note-number to point at the
                      // first.
  
                      // ALSO, despite starting with this test, we need to set first-reference-note-number
                      // on every item.
                      
                      // So ... we run an independent test on first_ref[first_id]], and let this ride.
                      
                      if ("undefined" === typeof last_ref[last_id] && onecitation.properties.mode !== "author-only") {
                          first_ref[first_id] = onecitation.properties.noteIndex;
                          last_ref[last_id] = onecitation.properties.noteIndex;
                          first_container_ref[last_id] = onecitation.properties.noteIndex;
                          item[1].position = CSL.POSITION_FIRST;
                      } else {
                          //
                          // backward-looking position evaluation happens here.
                          //
                          //
                          //
                          var ibidme = false;
                          var suprame = false;
                          var prevCitation = null;
                          if (j > 0) {
                              var prevCitation = citations[j-1];
                          }
                          var thisCitation = citations[j];
                          // XXX Ugly, but This is used in the second else-if branch condition below.
                          if (j > 0) {
                              var old_last_id_offset = 1;
                              if (prevCitation.properties.mode === "author-only" && j > 1) {
                                  old_last_id_offset = 2;
                              }
                              var adjusted_offset = (j - old_last_id_offset);
                              if (citations[adjusted_offset].sortedItems.length) {
                                  oldlastid =  citations[adjusted_offset].sortedItems.slice(-1)[0][1].id;
                                  oldlastxloc =  citations[j - old_last_id_offset].sortedItems.slice(-1)[0][1]["locator-extra"];
                              }
                              if (prevCitation.sortedItems.length) {
                                  if (prevCitation.sortedItems[0].slice(-1)[0].legislation_id) {
                                      oldlastid = prevCitation.sortedItems[0].slice(-1)[0].legislation_id;
                                  }
                              }
                          }
                          if (j > 0 && k === 0 && prevCitation.properties.noteIndex !== thisCitation.properties.noteIndex) {
                              // Case 1: source in previous onecitation
                              // (1) Threshold conditions
                              //     (a) there must be a previous onecitation with one item
                              //     (b) this item must be the first in this onecitation
                              //     (c) the previous onecitation must contain a reference
                              //         to the same item ...
                              //     (d) the note numbers must be the same or consecutive.
                              // (this has some jiggery-pokery in it for parallels)
                              var useme = false;
                              // XXX Can oldid be equated with oldlastid, I wonder ...
                              var oldid = prevCitation.sortedItems[0][0].id;
                              if (prevCitation.sortedItems[0][0].legislation_id) {
                                  oldid = prevCitation.sortedItems[0][0].legislation_id;
                              }
                              if ((oldid  == first_id && prevCitation.properties.noteIndex >= (thisCitation.properties.noteIndex - 1))) {
                                  var prevxloc = prevCitation.sortedItems[0][1]["locator-extra"];
                                  var thisxloc = thisCitation.sortedItems[0][1]["locator-extra"];
                                  if ((citationsInNote[prevCitation.properties.noteIndex] === 1 || prevCitation.properties.noteIndex === 0) && prevxloc === thisxloc) {
                                      useme = true;
                                  }
                              }
                              if (useme) {
                                  ibidme = true;
                              } else {
                                  suprame = true;
                              }
                          } else if (k > 0 && incitationid == first_id && incitationxloc == myxloc) {
                              // Case 2: immediately preceding source in this onecitation
                              // (1) Threshold conditions
                              //     (a) there must be an imediately preceding reference to  the
                              //         same item in this onecitation; and
                              ibidme = true;
                          } else if (k === 0 && j > 0 && prevCitation.properties.noteIndex == thisCitation.properties.noteIndex
                                     && prevCitation.sortedItems.length 
                                     && oldlastid == first_id && oldlastxloc == myxloc) {
                              // ... in case there are separate citations in the same note ...
                              // Case 2 [take 2]: immediately preceding source in this onecitation
                              // (1) Threshold conditions
                              //     (a) there must be an imediately preceding reference to  the
                              //         same item in this onecitation; and
                              ibidme = true;
                          } else {
                              // everything else is definitely subsequent
                              suprame = true;
                          }
                          // conditions
                          var prev, prev_locator, prev_label, curr_locator, curr_label;
                          if (ibidme) {
                              if (k > 0) {
                                  prev = onecitation.sortedItems[(k - 1)][1];
                              } else {
                                  prev = citations[(j - 1)].sortedItems[0][1];
                              }
                              if (prev.locator) {
                                  if (prev.label) {
                                      prev_label = prev.label;
                                  } else {
                                      prev_label = "";
                                  }
                                  prev_locator = "" + prev.locator + prev_label;
                              } else {
                                  prev_locator = prev.locator;
                              }
                              if (mylocator) {
                                  if (mylabel) {
                                      curr_label = mylabel;
                                  } else {
                                      curr_label = "";
                                  }
                                  curr_locator = "" + mylocator + curr_label;
                              } else {
                                  curr_locator = mylocator;
                              }
                          }
                          // triage
                          if (ibidme && prev_locator && !curr_locator) {
                              ibidme = false;
                              suprame = true;
  
                          }
                          if (ibidme) {
                              if (!prev_locator && curr_locator) {
                                  //     (a) if the previous onecitation had no locator
                                  //         and this onecitation has one, use ibid+pages
                                  item[1].position = CSL.POSITION_IBID_WITH_LOCATOR;
                              } else if (!prev_locator && !curr_locator) {
                                  //     (b) if the previous onecitation had no locator
                                  //         and this onecitation also has none, use ibid
                                  item[1].position = CSL.POSITION_IBID;
                                  //print("setting ibid in cmd_cite()");
                              } else if (prev_locator && curr_locator === prev_locator) {
                                  //     (c) if the previous onecitation had a locator
                                  //         (page number, etc.) and this onecitation has
                                  //         a locator that is identical, use ibid
  
                                  item[1].position = CSL.POSITION_IBID;
                                  //print("setting ibid in cmd_cite() [2]");
                              } else if (prev_locator && curr_locator && curr_locator !== prev_locator) {
                                  //     (d) if the previous onecitation had a locator,
                                  //         and this onecitation has one that differs,
                                  //         use ibid+pages
                                  item[1].position = CSL.POSITION_IBID_WITH_LOCATOR;
                              } else {
                                  //     (e) if the previous onecitation had a locator
                                  //         and this onecitation has none, use subsequent
                                  //
                                  //     ... and everything else would be subsequent also
                                  ibidme = false; // just to be clear
                                  suprame = true;
                              }
                          }
                          if (suprame) {
                              item[1].position = CSL.POSITION_CONTAINER_SUBSEQUENT;
                              if ("undefined" === typeof first_ref[first_id]) {
                                  first_ref[first_id] = onecitation.properties.noteIndex;
                              } else {
                                  item[1].position = CSL.POSITION_SUBSEQUENT;
                              }
                          }
                          if (suprame || ibidme) {
                              if (onecitation.properties.mode === "author-only") {
                                  item[1].position = CSL.POSITION_FIRST;
                              }
                              if (first_container_ref[last_id] != onecitation.properties.noteIndex) {
                                  item[1]['first-container-reference-note-number'] = first_container_ref[last_id];
                                  if (this.registry.registry[item[0].id]) {
                                      this.registry.registry[item[0].id]['first-container-reference-note-number'] = first_container_ref[last_id];
                                  }
                              }
                              if (first_ref[first_id] != onecitation.properties.noteIndex) {
                                  item[1]["first-reference-note-number"] = first_ref[first_id];
                                  if (this.registry.registry[item[0].id]) {
                                      // This is either the earliest recorded number, or the number of the current citation, whichever is smaller.
                                      /*
                                      var oldFirst = this.registry.citationreg.citationsByItemId[item_id][0].properties.noteIndex;
                                      var newFirst = onecitation.properties.noteIndex;
                                      this.registry.registry[item[0].id]['first-reference-note-number'] = newFirst < oldFirst ? newFirst: oldFirst;
                                       */
                                      // Try this instead?
                                      this.registry.registry[item[0].id]['first-reference-note-number'] = first_ref[first_id];
                                  }
                              }
                          }
                      }
                      if (onecitation.properties.noteIndex) {
                          var note_distance = parseInt(onecitation.properties.noteIndex, 10) - parseInt(last_ref[last_id], 10);
                          if (item[1].position !== CSL.POSITION_FIRST 
                              && note_distance <= this.citation.opt["near-note-distance"]) {
                              item[1]["near-note"] = true;
                          }
                          last_ref[last_id] = onecitation.properties.noteIndex;
                      } else if (item[1].position !== CSL.POSITION_FIRST) {
                          item[1]["near-note"] = true;
                      }
                      if (onecitation.citationID != citation.citationID) {
                          for (n = 0, nlen = CSL.POSITION_TEST_VARS.length; n < nlen; n += 1) {
                              var param = CSL.POSITION_TEST_VARS[n];
                              if (item[1][param] !== oldvalue[param]) {
                                  if (this.registry.registry[item[0].id]) {
                                      if (param === 'first-reference-note-number') {
                                          rerunAkeys[this.registry.registry[item[0].id].ambig] = true;
                                          this.tmp.taintedItemIDs[item[0].id] = true;
                                      }
                                  }
                                  this.tmp.taintedCitationIDs[onecitation.citationID] = true;
                              }
                          }
                      }
                      if (this.sys.variableWrapper) {
                          item[1].index = onecitation.properties.index;
                          item[1].noteIndex = onecitation.properties.noteIndex;
                      }
                  }
              }
          }
      }
      if (this.opt.citation_number_sort && sortedItems && sortedItems.length > 1 && this.citation_sort.tokens.length > 0) {
          if (!citation.properties.unsorted) {
              for (var i = 0, ilen = sortedItems.length; i < ilen; i += 1) {
                  sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, sortedItems[i][0], "citation_sort");
              }
              sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
      }
      for (var key in this.tmp.taintedItemIDs) {
          if (this.tmp.taintedItemIDs.hasOwnProperty(key)) {
              citations = this.registry.citationreg.citationsByItemId[key];
              // Current citation may be tainted but will not exist
              // during previewing.
              if (citations) {
                  for (var i = 0, ilen = citations.length; i < ilen; i += 1) {
                      this.tmp.taintedCitationIDs[citations[i].citationID] = true;
                  }
              }
          }
      }
  
      var ret = [];
      if (flag === CSL.PREVIEW) {
          // If previewing, return only a rendered string
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** start run processor *********");
          }
          //SNIP-END
          try {
              ret = this.process_CitationCluster.call(this, citation.sortedItems, citation);
          } catch (e) {
              CSL.error("Error running CSL processor for preview: "+e);
          }
              
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** end run processor *********");
              CSL.debug("****** start state restore *********");
          }
          //SNIP-END
          // Wind out anything related to new items added for the preview.
          // This means (1) names, (2) disambig state for affected items,
          // (3) keys registered in the ambigs pool arrays, and (4) registry
          // items.
          //
  
          // restore sliced citations
          this.registry.citationreg.citationByIndex = oldCitationList;
          this.registry.citationreg.citationById = {};
          for (var i = 0, ilen = oldCitationList.length; i < ilen; i += 1) {
              this.registry.citationreg.citationById[oldCitationList[i].citationID] = oldCitationList[i];
          }
  
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** start final update *********");
          }
          //SNIP-END
          var oldItemIds = [];
          for (var i = 0, ilen = oldItemList.length; i < ilen; i += 1) {
              oldItemIds.push("" + oldItemList[i].id);
          }
          this.updateItems(oldItemIds, null, null, true);
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** end final update *********");
          }
          //SNIP-END
          // Roll back disambig states
          for (var key in oldAmbigs) {
              if (oldAmbigs.hasOwnProperty(key)) {
                  this.registry.registry[key].disambig = oldAmbigs[key];
              }
          }
          //SNIP-START
          if (this.debug) {
              CSL.debug("****** end state restore *********");
          }
          //SNIP-END
      } else {
          // Rerun cites that have moved across citations or had a change
          // in their number of subsequent references, so that disambiguate
          // and subsequent-reference-count conditions are applied
          // correctly in output.
          for (var rerunAkey in rerunAkeys) {
              this.disambiguate.run(rerunAkey, citation);
          }
          // Run taints only if not previewing
          //
          // Push taints to the return object
          //
          var obj;
          for (var key in this.tmp.taintedCitationIDs) {
              if (key == citation.citationID) {
                  continue;
              }
              var mycitation = this.registry.citationreg.citationById[key];
              if (!mycitation.properties.unsorted) {
                  for (var i = 0, ilen = mycitation.sortedItems.length; i < ilen; i += 1) {
                      mycitation.sortedItems[i][1].sortkeys = CSL.getSortKeys.call(this, mycitation.sortedItems[i][0], "citation_sort");
                  }
                  mycitation.sortedItems.sort(this.citation.srt.compareCompositeKeys);
              }
              // For error reporting
              this.tmp.citation_pos = mycitation.properties.index;
              this.tmp.citation_note_index = mycitation.properties.noteIndex;
              this.tmp.citation_id = "" + mycitation.citationID;
              obj = [];
              obj.push(mycitation.properties.index);
              obj.push(this.process_CitationCluster.call(this, mycitation.sortedItems, mycitation));
              obj.push(mycitation.citationID);
              ret.push(obj);
          }
          this.tmp.taintedItemIDs = {};
          this.tmp.taintedCitationIDs = {};
  
          // For error reporting again
          this.tmp.citation_pos = citation.properties.index;
          this.tmp.citation_note_index = citation.properties.noteIndex;
          this.tmp.citation_id = "" + citation.citationID;
  
          obj = [];
          obj.push(citationsPre.length);
          obj.push(this.process_CitationCluster.call(this, sortedItems, citation));
          obj.push(citation.citationID);
          ret.push(obj);
          //
          // note for posterity: Rhino and Spidermonkey produce different
          // sort results for items with matching keys.  That discrepancy
          // turned up a subtle bug in the parallel detection code, trapped
          // at line 266, above, and in line 94 of util_parallel.js.
          //
          ret.sort(function (a, b) {
              if (a[0] > b[0]) {
                  return 1;
              } else if (a[0] < b[0]) {
                  return -1;
              } else {
                  return 0;
              }
          });
          //
          // In normal rendering, return is a list of two-part arrays, with the first element
          // a citation index number, and the second the text to be inserted.
          //
      }
      this.registry.return_data.citation_errors = this.tmp.citation_errors.slice();
      return [this.registry.return_data, ret];
  };
  
  CSL.Engine.prototype.process_CitationCluster = function (sortedItems, citation) {
      var str = "";
      if (citation && citation.properties && citation.properties.mode === "composite") {
          citation.properties.mode = "author-only";
          var firstChunk = CSL.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "suppress-author";
          var secondChunk = "";
          if (citation.properties.infix) {
              this.output.append(citation.properties.infix);
              secondChunk = this.output.string(this, this.output.queue);
              // Had no idea this could return a single-element array! Go figure.
              if ("object" === typeof secondChunk) {
                  secondChunk = secondChunk.join("");
              }
          }
          var thirdChunk = CSL.getCitationCluster.call(this, sortedItems, citation);
          citation.properties.mode = "composite";
          if (firstChunk && secondChunk && CSL.SWAPPING_PUNCTUATION.concat(["\u2019", "\'"]).indexOf(secondChunk[0]) > -1) {
              firstChunk += secondChunk;
              secondChunk = false;
          }
          str = [firstChunk, secondChunk, thirdChunk].filter(function(obj) {
              return obj;
          }).join(" ");
      } else {
          str = CSL.getCitationCluster.call(this, sortedItems, citation);
      }
      return str;
  };
  
  CSL.Engine.prototype.makeCitationCluster = function (rawList) {
      var inputList, newitem, str, pos, len, item, Item;
      inputList = [];
      len = rawList.length;
      for (pos = 0; pos < len; pos += 1) {
          item = {};
          for (var key in rawList[pos]) {
              item[key] = rawList[pos][key];
          }
          Item = this.retrieveItem("" + item.id);
          // Code block is copied from processCitationCluster() above
          if (this.opt.development_extensions.locator_label_parse) {
              if (item.locator && ["bill","gazette","legislation","regulation","treaty"].indexOf(Item.type) === -1 && (!item.label || item.label === 'page')) {
                  var m = CSL.LOCATOR_LABELS_REGEXP.exec(item.locator);
                  if (m) {
                      var tryLabel = CSL.LOCATOR_LABELS_MAP[m[2]];
                      if (this.getTerm(tryLabel)) {
                          item.label = tryLabel;
                          item.locator = m[3];
                      }
                  }
              }
          }
          if (item.locator) {
              item.locator = ("" + item.locator).replace(/\s+$/, '');
          }
          newitem = [Item, item];
          inputList.push(newitem);
      }
      if (this.opt.development_extensions.consolidate_legal_items) {
          this.remapSectionVariable(inputList);
      }
      if (inputList && inputList.length > 1 && this.citation_sort.tokens.length > 0) {
          len = inputList.length;
          for (pos = 0; pos < len; pos += 1) {
              inputList[pos][1].sortkeys = CSL.getSortKeys.call(this, inputList[pos][0], "citation_sort");
          }
          inputList.sort(this.citation.srt.compareCompositeKeys);
      }
      this.tmp.citation_errors = [];
      var str = CSL.getCitationCluster.call(this, inputList);
      return str;
  };
  
  
  /**
   * Get the undisambiguated version of a cite, without decorations
   * <p>This is used internally by the Registry.</p>
   *
   * [object] CSL Item
   * [object] disambiguation parameters
   * [boolean] If true, include first-reference-note-number value in cite
   */
  CSL.getAmbiguousCite = function (Item, disambig, visualForm, item) {
      var ret;
      var flags = this.tmp.group_context.tip;
      var oldTermSiblingLayer = {
          term_intended: flags.term_intended,
          variable_attempt: flags.variable_attempt,
          variable_success: flags.variable_success,
          output_tip: flags.output_tip,
          label_form: flags.label_form,
          non_parallel: flags.non_parallel,
          parallel_last: flags.parallel_last,
          parallel_first: flags.parallel_first,
          parallel_last_override: flags.parallel_last_override,
          parallel_delimiter_override: flags.parallel_delimiter_override,
          parallel_delimiter_override_on_suppress: flags.parallel_delimiter_override_on_suppress,
          condition: flags.condition,
          force_suppress: flags.force_suppress,
          done_vars: flags.done_vars.slice()
      };
      if (disambig) {
          this.tmp.disambig_request = disambig;
      } else {
          this.tmp.disambig_request = false;
      }
      var itemSupp = {
          position: CSL.POSITION_SUBSEQUENT,
          "near-note": true
      };
  
      if (item) {
          itemSupp.locator = item.locator;
          itemSupp.label = item.label;
      }
  
      if (this.registry.registry[Item.id] 
          && this.registry.citationreg.citationsByItemId
          && this.registry.citationreg.citationsByItemId[Item.id]
          && this.registry.citationreg.citationsByItemId[Item.id].length 
          && visualForm) {
          if (this.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
              itemSupp['first-reference-note-number'] = this.registry.registry[Item.id]['first-reference-note-number'];
          }
      }
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      var origSuppressDecorations = this.tmp.suppress_decorations;
      this.tmp.suppress_decorations = true;
      this.tmp.just_looking = true;
  
      CSL.getCite.call(this, Item, itemSupp, null, false);
      // !!!
      for (var i=0,ilen=this.output.queue.length;i<ilen;i+=1) {
          CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
      }
      if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
              this.output.adjust.upward(this.output.queue[j]);
              this.output.adjust.leftward(this.output.queue[j]);
              this.output.adjust.downward(this.output.queue[j]);
              this.output.adjust.fix(this.output.queue[j]);
          }
      }
      var ret = this.output.string(this, this.output.queue);
      this.tmp.just_looking = false;
      this.tmp.suppress_decorations = origSuppressDecorations;
      // Cache the result.
      this.tmp.group_context.replace(oldTermSiblingLayer);
      return ret;
  };
  
  /**
   * Return delimiter for use in join
   * <p>Splice evaluation is done during cite
   * rendering, and this method returns the
   * result.  Evaluation requires three items
   * of information from the preceding cite, if
   * one is present: the names used; the years
   * used; and the suffix appended to the
   * citation.  These details are copied into
   * the state object before processing begins,
   * and are cleared by the processor on
   * completion of the run.</p>
   */
  
  CSL.getSpliceDelimiter = function (last_locator, last_collapsed, pos) {
      //print(pos +  " after-collapse-delimiter="+this.citation.opt["after-collapse-delimiter"] + "\n  cite_group_delimiter=" + this.tmp.use_cite_group_delimiter + "\n  last_collapsed=" +last_collapsed + "\n  have_collapsed=" +this.tmp.have_collapsed + "\n  last_locator=" + last_locator)
      if (undefined !== this.citation.opt["after-collapse-delimiter"]) {
          if (last_locator) {
              this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (last_collapsed && !this.tmp.have_collapsed) {
              this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else if (!last_collapsed && !this.tmp.have_collapsed && this.citation.opt.collapse !== "year-suffix") {
              this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
          } else {
              this.tmp.splice_delimiter = this.citation.opt.layout_delimiter;
          }
      } else if (this.tmp.use_cite_group_delimiter) {
          this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
      } else {
          if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL.NUMERIC) {
              this.tmp.splice_delimiter = ", ";
          } else if (this.tmp.cite_locales[pos - 1]) {
              //
              // Must have a value to take effect.  Use zero width space to force empty delimiter.
              var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
              if (alt_affixes && alt_affixes.delimiter) {
                  this.tmp.splice_delimiter = alt_affixes.delimiter;
              }
          } else if (!this.tmp.splice_delimiter) {
              // This happens when no delimiter is set on cs:layout under cs:citation
              this.tmp.splice_delimiter = "";
          }
      }
  
  /*
      if (last_locator && "string" === typeof this.citation.opt["after-collapse-delimiter"]) {
          this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
      } else if (last_collapsed && !this.tmp.have_collapsed && "string" === typeof this.citation.opt["after-collapse-delimiter"]) {
          this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
      } else if (!last_collapsed && !this.tmp.have_collapsed && "string" === typeof this.citation.opt["after-collapse-delimiter"] && !this.citation.opt.collapse === "year-suffix") {
          this.tmp.splice_delimiter = this.citation.opt["after-collapse-delimiter"];
      } else if (this.tmp.use_cite_group_delimiter) {
          this.tmp.splice_delimiter = this.citation.opt.cite_group_delimiter;
      } else if (this.tmp.have_collapsed && this.opt.xclass === "in-text" && this.opt.update_mode !== CSL.NUMERIC) {
          this.tmp.splice_delimiter = ", ";
      } else if (this.tmp.cite_locales[pos - 1]) {
          //
          // Must have a value to take effect.  Use zero width space to force empty delimiter.
          var alt_affixes = this.tmp.cite_affixes[this.tmp.area][this.tmp.cite_locales[pos - 1]];
          if (alt_affixes && alt_affixes.delimiter) {
              this.tmp.splice_delimiter = alt_affixes.delimiter;
          }
      } else if (!this.tmp.splice_delimiter) {
          // This happens when no delimiter is set on cs:layout under cs:citation
          this.tmp.splice_delimiter = "";
      }
  */
      // Paranoia
      //if (!this.tmp.splice_delimiter) {
      //    this.tmp.splice_delimiter = "";
      //}
      return this.tmp.splice_delimiter;
  };
  
  /*
   * Compose individual cites into a single string, with
   * flexible inter-cite splicing.
   */
  CSL.getCitationCluster = function (inputList, citation) {
      var result, objects, myparams, len, pos, item, last_collapsed, params, empties, composite, compie, myblobs, Item, llen, ppos, obj, preceding_item, txt_esc, error_object, citationID, authorOnly, suppressAuthor;
      var citation_prefix = "";
      this.output.checkNestedBrace = new CSL.checkNestedBrace(this);
      if (citation) {
          citationID = citation.citationID;
          authorOnly = citation.properties.mode === "author-only" ? !!citation.properties.mode : false;
          if (this.opt.xclass !== "note") {
              suppressAuthor = citation.properties.mode === "suppress-author" ? !!citation.properties.mode : false;
          }
          if (citation.properties.prefix) {
              citation_prefix = CSL.checkPrefixSpaceAppend(this, citation.properties.prefix);
          }
      }
      inputList = inputList ? inputList : [];
      this.tmp.last_primary_names_string = false;
      txt_esc = CSL.getSafeEscape(this);
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      result = "";
      objects = [];
      this.tmp.last_suffix_used = "";
      this.tmp.last_names_used = [];
      this.tmp.last_years_used = [];
      this.tmp.backref_index = [];
      this.tmp.cite_locales = [];
      if (!this.tmp.just_looking) {
          this.tmp.abbrev_trimmer = {
              QUASHES: {}
          };
      }
  
      var use_layout_prefix = this.output.checkNestedBrace.update(this.citation.opt.layout_prefix + citation_prefix);
      //var use_layout_prefix = this.citation.opt.layout_prefix;
  
      var suppressTrailingPunctuation = false;
      if (this.citation.opt.suppressTrailingPunctuation) {
          suppressTrailingPunctuation = true;
      }
      if (citationID) {
          //this.registry.citationreg.citationById[citationID].properties.backref_index = false;
          //this.registry.citationreg.citationById[citationID].properties.backref_citation = false;
          if (this.registry.citationreg.citationById[citationID].properties["suppress-trailing-punctuation"]) {
              suppressTrailingPunctuation = true;
          }
      }
  
      // Adjust locator positions if that looks like a sensible thing to do.
      if (this.opt.xclass === "note") {
          var parasets = [];
          var lastTitle = false;
          var lastPosition = false;
          var lastID = false;
          var lst = [];
          for (var i=0, ilen = inputList.length; i < ilen; i += 1) {
              var type = inputList[i][0].type;
              var title = inputList[i][0].title;
              var position = inputList[i][1].position;
              var id = inputList[i][0].id;
              if (title && type === "legal_case" && id !== lastID && position) {
                  // Start a fresh sublist if the item title does not match the last one
                  if (title !== lastTitle || parasets.length === 0) {
                      lst = [];
                      parasets.push(lst);
                  }
                  lst.push(inputList[i][1]);
              }
              lastTitle = title;
              lastPosition = position;
              lastID = id;
          }
          // We now have a list of sublists, each w/matching titles
          for (i=0, ilen=parasets.length; i < ilen; i += 1) {
              lst = parasets[i];
              if (lst.length < 2) {
                  continue;
              }
              // Get the locator in last position, but only if it's the only one in the set.
              var locatorInLastPosition = lst.slice(-1)[0].locator;
              if (locatorInLastPosition) {
                  for (var j=0, jlen=lst.length - 1; j < jlen; j += 1) {
                      if (lst[j].locator) {
                          locatorInLastPosition = false;
                      }
                  }
              }
              // move the locator here, if it's called for.
              if (locatorInLastPosition) {
                  lst[0].locator = locatorInLastPosition;
                  delete lst.slice(-1)[0].locator;
                  lst[0].label = lst.slice(-1)[0].label;
                  if (lst.slice(-1)[0].label) {
                      delete lst.slice(-1)[0].label;
                  }
              }
         }
      }
      myparams = [];
      len = inputList.length;
      if (inputList[0] && inputList[0][1]) {
          if (authorOnly) {
              delete inputList[0][1]["suppress-author"];
              inputList[0][1]["author-only"] = true;
          } else if (suppressAuthor) {
              delete inputList[0][1]["author-only"];
              inputList[0][1]["suppress-author"] = true;
          }
      }
      if (this.opt.parallel.enable) {
          this.parallel.StartCitation(inputList);
      }
      for (pos = 0; pos < len; pos += 1) {
  
          // Also for parallels only
          this.tmp.cite_index = pos;
  
          Item = inputList[pos][0];
          item = inputList[pos][1];
          item = CSL.parseLocator.call(this, item);
          last_collapsed = this.tmp.have_collapsed;
          var last_locator = false;
          if (pos > 0 && inputList[pos-1][1]) {
              last_locator = !!inputList[pos-1][1].locator;
          }
          params = {};
          
          // Reset shadow_numbers here, suppress reset in getCite()
          this.tmp.shadow_numbers = {};
          if (!this.tmp.just_looking && this.opt.hasPlaceholderTerm) {
              var output = this.output;
              this.output = new CSL.Output.Queue(this);
              this.output.adjust = new CSL.Output.Queue.adjust();
              CSL.getAmbiguousCite.call(this, Item, null, false, item);
              this.output = output;
          }
  
          this.tmp.in_cite_predecessor = false;
          // true is to block reset of shadow numbers
          
          
          if (pos > 0) {
              CSL.getCite.call(this, Item, item, "" + inputList[(pos - 1)][0].id, true);
          } else {
              this.tmp.term_predecessor = false;
              CSL.getCite.call(this, Item, item, null, true);
          }
  
          // Make a note of any errors
          if (!this.tmp.cite_renders_content) {
              error_object = {
                  citationID: "" + this.tmp.citation_id,
                  index: this.tmp.citation_pos,
                  noteIndex: this.tmp.citation_note_index,
                  itemID: "" + Item.id,
                  citationItems_pos: pos,
                  error_code: CSL.ERROR_NO_RENDERED_FORM
              };
              this.tmp.citation_errors.push(error_object);
          }
          params.splice_delimiter = CSL.getSpliceDelimiter.call(this, last_locator, last_collapsed, pos);
          // XXX This appears to be superfluous.
          if (item && item["author-only"]) {
              this.tmp.suppress_decorations = true;
          }
  
          if (pos > 0) {
              preceding_item = inputList[pos - 1][1];
  
              // XXX OR if preceding suffix is empty, and the current prefix begins with a full stop.
  
              var precedingEndsInPeriodOrComma = preceding_item.suffix && [";", ".", ","].indexOf(preceding_item.suffix.slice(-1)) > -1;
              var currentStartsWithPeriodOrComma = !preceding_item.suffix && item.prefix && [";", ".", ","].indexOf(item.prefix.slice(0, 1)) > -1;
              if (precedingEndsInPeriodOrComma || currentStartsWithPeriodOrComma) {
                  var spaceidx = params.splice_delimiter.indexOf(" ");
                  if (spaceidx > -1 && !currentStartsWithPeriodOrComma) {
                      params.splice_delimiter = params.splice_delimiter.slice(spaceidx);
                  } else {
                      params.splice_delimiter = "";
                  }
              }
          }
          params.suppress_decorations = this.tmp.suppress_decorations;
          params.have_collapsed = this.tmp.have_collapsed;
          //
          // XXXXX: capture parameters to an array, which
          // will be of the same length as this.output.queue,
          // corresponding to each element.
          //
          myparams.push(params);
          if (item["author-only"]) {
              break;
          }
      }
      //
      // output.queue is a simple array.  do a slice
      // of it to get each cite item, setting params from
      // the array that was built in the preceding loop.
      //
      empties = 0;
      myblobs = this.output.queue.slice();
  
      var citation_suffix = "";
      if (citation) {
          citation_suffix = CSL.checkSuffixSpacePrepend(this, citation.properties.suffix);
      }
      var suffix = this.citation.opt.layout_suffix;
      var last_locale = this.tmp.cite_locales[this.tmp.cite_locales.length - 1];
      //
      // Must have a value to take effect.  Use zero width space to force empty suffix.
      if (last_locale && this.tmp.cite_affixes[this.tmp.area][last_locale] && this.tmp.cite_affixes[this.tmp.area][last_locale].suffix) {
          suffix = this.tmp.cite_affixes[this.tmp.area][last_locale].suffix;
      }
      if (CSL.TERMINAL_PUNCTUATION.slice(0, -1).indexOf(suffix.slice(0, 1)) > -1) {
          suffix = suffix.slice(0, 1);
      }
      //print("=== FROM CITE ===");
      suffix = this.output.checkNestedBrace.update(citation_suffix + suffix);
  
  
      for (var i=0,ilen=this.output.queue.length;i<ilen;i+=1) {
          CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[i]);
      }
      if (!this.tmp.suppress_decorations && this.output.queue.length) {
          if (!(this.opt.development_extensions.apply_citation_wrapper
                && this.sys.wrapCitationEntry
                 && !this.tmp.just_looking
                && this.tmp.area === "citation")) { 
  
              if (!suppressTrailingPunctuation) {
                  this.output.queue[this.output.queue.length - 1].strings.suffix = suffix;
              }
              this.output.queue[0].strings.prefix = use_layout_prefix;
          }
      }
      if (this.opt.development_extensions.clean_up_csl_flaws) {
          for (var j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
              //print("OUTPUT[5]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
              this.output.adjust.upward(this.output.queue[j]);
              //print("OUTPUT[4]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
              this.output.adjust.leftward(this.output.queue[j]);
              //print("OUTPUT[3]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
              this.output.adjust.downward(this.output.queue[j]);
              //print("OUTPUT[2]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
              this.tmp.last_chr = this.output.adjust.fix(this.output.queue[j]);
              //print("OUTPUT[1]: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations','num'],2))
          }
      }
      //print("this.tmp.last_chr="+this.tmp.last_chr);
      for (pos = 0, len = myblobs.length; pos < len; pos += 1) {
          var buffer = [];
          this.output.queue = [myblobs[pos]];
          this.tmp.suppress_decorations = myparams[pos].suppress_decorations;
          this.tmp.splice_delimiter = myparams[pos].splice_delimiter;
          //
          // oh, one last second thought on delimiters ...
          //
  
          if (myblobs[pos].parallel_delimiter) {
              this.tmp.splice_delimiter = myblobs[pos].parallel_delimiter;
          }
          this.tmp.have_collapsed = myparams[pos].have_collapsed;
  
          composite = this.output.string(this, this.output.queue);
  
          this.tmp.suppress_decorations = false;
          // meaningless assignment
          // this.tmp.handle_ranges = false;
          if ("string" === typeof composite) {
              this.tmp.suppress_decorations = false;
              if (!composite) {
                  if (this.opt.development_extensions.throw_on_empty) {
                      CSL.error("Citation would render no content");
                  } else {
                      composite = "[NO_PRINTED_FORM]";
                  }
              }
              return composite;
          }
          if ("object" === typeof composite && composite.length === 0 && !item["suppress-author"]) {
              if (pos === 0) {
                  var errStr = "[CSL STYLE ERROR: reference with no printed form.]";
                  var preStr = pos === 0 ? txt_esc(this.citation.opt.layout_prefix) : "";
                  var sufStr = pos === (myblobs.length - 1) ? txt_esc(this.citation.opt.layout_suffix) : "";
                  composite.push(preStr + errStr + sufStr);
              } else if (pos === myblobs.length - 1) {
                  var tmpobj = objects[objects.length - 1];
                  if (typeof tmpobj === "string") {
                      objects[objects.length -1] += (txt_esc(this.citation.opt.layout_suffix));
                  } else if (typeof tmpobj === "object") {
                      tmpobj.strings.suffix += (txt_esc(this.citation.opt.layout_suffix));
                  }
              }
          }
          if (buffer.length && "string" === typeof composite[0]) {
              composite.reverse();
              var tmpstr = composite.pop();
              if (tmpstr && tmpstr.slice(0, 1) === ",") {
                  buffer.push(tmpstr);
              } else if ("string" == typeof buffer.slice(-1)[0] && buffer.slice(-1)[0].slice(-1) === ",") {
                  buffer.push(" " + tmpstr);
              } else if (tmpstr) {
                  buffer.push(txt_esc(this.tmp.splice_delimiter) + tmpstr);
              }
          } else {
              composite.reverse();
              compie = composite.pop();
              if ("undefined" !== typeof compie) {
                  if (buffer.length && "string" === typeof buffer[buffer.length - 1]) {
                      buffer[buffer.length - 1] += compie.successor_prefix;
                  }
                  buffer.push(compie);
              }
          }
          // Seems odd, but this was unnecessary and broken.
          //composite.reverse();
          llen = composite.length;
          for (ppos = 0; ppos < llen; ppos += 1) {
              obj = composite[ppos];
              if ("string" === typeof obj) {
                  buffer.push(txt_esc(this.tmp.splice_delimiter) + obj);
                  continue;
              }
              compie = composite.pop();
              if ("undefined" !== typeof compie) {
                  buffer.push(compie);
              }
          }
          if (buffer.length === 0 && !inputList[pos][1]["suppress-author"]) {
              empties += 1;
          }
          if (buffer.length > 1 && typeof buffer[0] !== "string") {
              buffer = [this.output.renderBlobs(buffer)];
          }
          if (buffer.length) {
              if ("string" === typeof buffer[0]) {
                  if (pos > 0) {
                      buffer[0] = txt_esc(this.tmp.splice_delimiter) + buffer[0];
                  }
              } else {
                  if (pos > 0) {
                      buffer[0].splice_prefix = this.tmp.splice_delimiter;
                  } else {
                      buffer[0].splice_prefix = "";
                  }
              }
          }
          objects = objects.concat(buffer);
      }
      // print("OBJECTS="+objects);
      result += this.output.renderBlobs(objects);
  
      if (result) {
          //if (CSL.TERMINAL_PUNCTUATION.indexOf(this.tmp.last_chr) > -1 
          //    && this.tmp.last_chr === use_layout_suffix.slice(0, 1)) {
          //    use_layout_suffix = use_layout_suffix.slice(1);
          //}
          if (!this.tmp.suppress_decorations) {
              len = this.citation.opt.layout_decorations.length;
              for (pos = 0; pos < len; pos += 1) {
                  params = this.citation.opt.layout_decorations[pos];
                  // The "normal" formats in some output modes expect
                  // a superior nested decoration environment, and
                  // so should produce no output here.
                  if (params[1] === "normal") {
                      continue;
                  }
                  if (!item || !item["author-only"]) {
                      result = this.fun.decorate[params[0]][params[1]](this, result);
                  }
              }
          }
      }
      this.tmp.suppress_decorations = false;
      if (!result) {
          if (this.opt.development_extensions.throw_on_empty) {
              CSL.error("Citation would render no content");
          } else {
              result = "[NO_PRINTED_FORM]"
          }
      }
      return result;
  };
  
  /*
   * Render a single cite item.
   *
   * This is called on the state object, with a single
   * Item as input.  It iterates exactly once over the style
   * citation tokens, and leaves the result of rendering in
   * the top-level list in the relevant *.opt.output
   * stack, as a list item consisting of a single string.
   *
   * (This is dual-purposed for generating individual
   * entries in a bibliography.)
   */
  CSL.getCite = function (Item, item, prevItemID, blockShadowNumberReset) {
      var next, error_object;
      var areaOrig = this.tmp.area;
      if (item && item["author-only"] && this.intext && this.intext.tokens.length > 0) {
              this.tmp.area = "intext";
      }
      this.tmp.cite_renders_content = false;
      this.tmp.probably_rendered_something = false;
      this.tmp.prevItemID = prevItemID;
  
      CSL.citeStart.call(this, Item, item, blockShadowNumberReset);
      next = 0;
      this.tmp.name_node = {};
      this.nameOutput = new CSL.NameOutput(this, Item, item);
  
      // rerun?
      while (next < this[this.tmp.area].tokens.length) {
          next = CSL.tokenExec.call(this, this[this.tmp.area].tokens[next], Item, item);
      }
  
      CSL.citeEnd.call(this, Item, item);
      // Odd place for this, but it seems to fit here
      if (!this.tmp.cite_renders_content && !this.tmp.just_looking) {
          if (this.tmp.area === "bibliography") {
              error_object = {
                  index: this.tmp.bibliography_pos,
                  itemID: "" + Item.id,
                  error_code: CSL.ERROR_NO_RENDERED_FORM
              };
              this.tmp.bibliography_errors.push(error_object);
          }
      }
      this.tmp.area = areaOrig;
      return "" + Item.id;
  };
  
  
  CSL.citeStart = function (Item, item, blockShadowNumberReset) {
      this.tmp.lang_array = [];
      if (Item.language) {
          // Guard against garbage locales in user input
          var m = Item.language.match(/^([a-zA-Z]+).*/);
          if (m) {
              this.tmp.lang_array.push(m[1].toLowerCase());
          }
      }
      this.tmp.lang_array.push(this.opt.lang);
      if (!blockShadowNumberReset) {
          this.tmp.shadow_numbers = {};
      }
      
      this.tmp.disambiguate_count = 0;
      this.tmp.disambiguate_maxMax = 0;
      this.tmp.same_author_as_previous_cite = false;
      if (!this.tmp.suppress_decorations) {
          this.tmp.subsequent_author_substitute_ok = true;
      } else {
          this.tmp.subsequent_author_substitute_ok = false;
      }
      this.tmp.lastchr = "";
      if (this.tmp.area === "citation" && this.citation.opt.collapse && this.citation.opt.collapse.length) {
          //this.tmp.have_collapsed = "year";
          this.tmp.have_collapsed = true;
      } else {
          this.tmp.have_collapsed = false;
      }
      this.tmp.render_seen = false;
      if (this.tmp.disambig_request  && ! this.tmp.disambig_override) {
          this.tmp.disambig_settings = this.tmp.disambig_request;
      } else if (this.registry.registry[Item.id] && ! this.tmp.disambig_override) {
          this.tmp.disambig_request = this.registry.registry[Item.id].disambig;
          this.tmp.disambig_settings = this.registry.registry[Item.id].disambig;
      } else {
          this.tmp.disambig_settings = new CSL.AmbigConfig();
      }
      if (this.tmp.area !== 'citation') {
          if (!this.registry.registry[Item.id]) {
              this.tmp.disambig_restore = new CSL.AmbigConfig();
          } else {
              this.tmp.disambig_restore = CSL.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
              if (this.tmp.area === 'bibliography' && this.tmp.disambig_settings && this.tmp.disambig_override) {
                  if (this.opt["disambiguate-add-names"]) {
                      this.tmp.disambig_settings.names = this.registry.registry[Item.id].disambig.names.slice();
                      if (this.tmp.disambig_request) {
                          this.tmp.disambig_request.names = this.registry.registry[Item.id].disambig.names.slice();
                      }
                  }
                  if (this.opt["disambiguate-add-givenname"]) {
                      // This is weird and delicate and not fully understood
                      this.tmp.disambig_request = this.tmp.disambig_settings;
                      this.tmp.disambig_settings.givens = this.registry.registry[Item.id].disambig.givens.slice();
                      this.tmp.disambig_request.givens = this.registry.registry[Item.id].disambig.givens.slice();
                      for (var i=0,ilen=this.tmp.disambig_settings.givens.length;i<ilen;i+=1) {
                          this.tmp.disambig_settings.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                      }
                      for (var i=0,ilen=this.tmp.disambig_request.givens.length;i<ilen;i+=1) {
                          this.tmp.disambig_request.givens[i] = this.registry.registry[Item.id].disambig.givens[i].slice();
                      }
                  }
              }
          }
      }
  
      this.tmp.names_used = [];
      this.tmp.nameset_counter = 0;
      this.tmp.years_used = [];
      this.tmp.names_max.clear();
      if (!this.tmp.just_looking) {
          if (!item || item.parallel === "first" || !item.parallel) {
              this.tmp.abbrev_trimmer = {
                  QUASHES: {}
              };
          }
      }
  
      this.tmp.splice_delimiter = this[this.tmp.area].opt.layout_delimiter;
      //this.tmp.splice_delimiter = this[this.tmp.area].opt.delimiter;
  
      this.bibliography_sort.keys = [];
      this.citation_sort.keys = [];
  
      this.tmp.has_done_year_suffix = false;
      this.tmp.last_cite_locale = false;
      // SAVE PARAMETERS HERE, IF APPROPRIATE
      // (promiscuous addition of global parameters => death by a thousand cuts)
      if (!this.tmp.just_looking && item && !item.position && this.registry.registry[Item.id]) {
          this.tmp.disambig_restore = CSL.cloneAmbigConfig(this.registry.registry[Item.id].disambig);
      }
      // XXX This only applied to the "number" variable itself? Huh?
      //this.setNumberLabels(Item);
      this.tmp.first_name_string = false;
      this.tmp.authority_stop_last = 0;
  };
  
  CSL.citeEnd = function (Item, item) {
      // RESTORE PARAMETERS IF APPROPRIATE
      if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
          this.registry.registry[Item.id].disambig.names = this.tmp.disambig_restore.names.slice();
          this.registry.registry[Item.id].disambig.givens = this.tmp.disambig_restore.givens.slice();
          for (var i=0,ilen=this.registry.registry[Item.id].disambig.givens.length;i<ilen;i+=1) {
              this.registry.registry[Item.id].disambig.givens[i] = this.tmp.disambig_restore.givens[i].slice();
          }
      }
      this.tmp.disambig_restore = false;
  
      if (item && item.suffix) {
          //this.tmp.last_suffix_used = this.tmp.suffix.value();
          this.tmp.last_suffix_used = item.suffix;
      } else {
          this.tmp.last_suffix_used = "";
      }
      this.tmp.last_years_used = this.tmp.years_used.slice();
      this.tmp.last_names_used = this.tmp.names_used.slice();
      this.tmp.cut_var = false;
  
      // This is a hack, in a way; I have lost track of where
      // the disambig (name rendering) settings used for rendering work their way
      // into the registry.  This resets defaults to the subsequent form,
      // when first cites are rendered.
      //if (this.tmp.disambig_restore && this.registry.registry[Item.id]) {
      //    this.registry.registry[Item.id].disambig = this.tmp.disambig_restore;
      //}
      //this.tmp.disambig_restore = false;
      this.tmp.disambig_request = false;
  
      this.tmp.cite_locales.push(this.tmp.last_cite_locale);
  
      if (this.tmp.issued_date && this.tmp.renders_collection_number) {
          var buf = [];
          for (var i = this.tmp.issued_date.list.length - 1; i > this.tmp.issued_date.pos; i += -1) {
              buf.push(this.tmp.issued_date.list.pop());
          }
          // Throw away the unwanted blob
          this.tmp.issued_date.list.pop();
          // Put the other stuff back
          for (i = buf.length - 1; i > -1; i += -1) {
              this.tmp.issued_date.list.push(buf.pop());
          }
      }
      this.tmp.issued_date = false;
      this.tmp.renders_collection_number = false;
  
  };
  
  /*global CSL: true */
  
  CSL.Engine.prototype.makeBibliography = function (bibsection) {
      var debug, ret, params, maxoffset, item, len, pos, tok, tokk, tokkk, entry_ids, entry_strings;
      debug = false;
      if (!bibsection && (this.bibliography.opt.exclude_types || this.bibliography.opt.exclude_with_fields)) {
          bibsection = {
              exclude: []
          };
          if (this.bibliography.opt.exclude_types) {
              for (var i in this.bibliography.opt.exclude_types) {
                  var val = this.bibliography.opt.exclude_types[i];
                  bibsection.exclude.push({
                      field: "type",
                      value: val
                  });
              }
          }
          if (this.bibliography.opt.exclude_with_fields) {
              for (var i in this.bibliography.opt.exclude_with_fields) {
                  var field = this.bibliography.opt.exclude_with_fields[i];
                  bibsection.exclude.push({
                      field: field, value: true
                  });
              }
          }
      }
      // API change: added in version 1.0.51
      if (!this.bibliography.tokens.length) {
          return false;
      }
      if ("string" === typeof bibsection) {
          this.opt.citation_number_slug = bibsection;
          bibsection = false;
      }
      //SNIP-START
      if (debug) {
          len = this.bibliography.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
              tok = this.bibliography.tokens[pos];
              CSL.debug("bibtok: " + tok.name);
          }
          CSL.debug("---");
          len = this.citation.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
              tokk = this.citation.tokens[pos];
              CSL.debug("cittok: " + tok.name);
          }
          CSL.debug("---");
          len = this.bibliography_sort.tokens.length;
          for (pos = 0; pos < len; pos += 1) {
              tokkk = this.bibliography_sort.tokens[pos];
              CSL.debug("bibsorttok: " + tok.name);
          }
      }
      //SNIP-END
  
      // For paged returns
      ret = CSL.getBibliographyEntries.call(this, bibsection);
      entry_ids = ret[0];
      entry_strings = ret[1];
  
      // For paged returns
      var done = ret[2];
  
      params = {
          "maxoffset": 0,
          "entryspacing": this.bibliography.opt["entry-spacing"],
          "linespacing": this.bibliography.opt["line-spacing"],
          "second-field-align": false,
          "entry_ids": entry_ids,
          "bibliography_errors": this.tmp.bibliography_errors.slice(),
          "done": done
      };
      if (this.bibliography.opt["second-field-align"]) {
          params["second-field-align"] = this.bibliography.opt["second-field-align"];
      }
      maxoffset = 0;
      len = this.registry.reflist.length;
      for (pos = 0; pos < len; pos += 1) {
          item = this.registry.reflist[pos];
          if (item.offset > params.maxoffset) {
              params.maxoffset = item.offset;
          }
      }
      if (this.bibliography.opt.hangingindent) {
          params.hangingindent = this.bibliography.opt.hangingindent;
      }
      params.bibstart = this.fun.decorate.bibstart;
      params.bibend = this.fun.decorate.bibend;
  
      this.opt.citation_number_slug = false;
      return [params, entry_strings];
  };
  
  /*
   * Compose individual cites into a single string.
   */
  CSL.getBibliographyEntries = function (bibsection) {
      var ret, input, include, anymatch, allmatch, bib_entry, res, item, spec, lllen, pppos, topblobs, entry_item_ids, debug, i, ilen, siblings, skips, sortedItems, eyetem, entry_item_data, j, jlen;
      ret = [];
      entry_item_data = [];
      this.tmp.area = "bibliography";
      this.tmp.root = "bibliography";
      this.tmp.last_rendered_name = false;
      this.tmp.bibliography_errors = [];
      this.tmp.bibliography_pos = 0;
      
      // For paged returns: disable generated entries and
      // do not fetch full items as a batch (input variable
      // consists of ids only in this case)
      if (bibsection && bibsection.page_start && bibsection.page_length) {
          input = this.registry.getSortedIds();        
      } else {
          input = this.refetchItems(this.registry.getSortedIds());
      }
      
      this.tmp.disambig_override = true;
      function eval_string(a, b) {
          if (a === b) {
              return true;
          }
          return false;
      }
      function eval_list(a, lst) {
          lllen = lst.length;
          for (pppos = 0; pppos < lllen; pppos += 1) {
              if (eval_string(a, lst[pppos])) {
                  return true;
              }
          }
          return false;
      }
      function eval_spec(a, b) {
          if ("boolean" === typeof a || !a) {
              if (a) {
                  return !!b;
              } else {
                  return !b;
              }
          } else {
              if ("string" === typeof b) {
                  return eval_string(a, b);
              } else if (!b) {
                  return false;
              } else {
                  return eval_list(a, b);
              }
          }
      }
  
      skips = {};
  
      // For paged returns
      var page_item_count;
      if (bibsection && bibsection.page_start && bibsection.page_length) {
          page_item_count = 0;
          if (bibsection.page_start !== true) {
              for (i = 0, ilen = input.length; i < ilen; i += 1) {
                  skips[input[i]] = true;
                  if (bibsection.page_start == input[i]) {
                      break;
                  }
              }
          }
      }
  
      var processed_item_ids = [];
  
      var consolidatedIDs = {};
      this.tmp.container_item_count = {};
      input = input.filter(o => {
          var ret = o;
          if (o.legislation_id) {
              if (consolidatedIDs[o.legislation_id]) {
                  ret = false;
              } else {
                  consolidatedIDs[o.legislation_id] = true;
              }
          } else if (o.container_id) {
              if (!this.tmp.container_item_count[o.container_id]) {
                  this.tmp.container_item_count[o.container_id] = 0;
              }
              this.tmp.container_item_count[o.container_id]++;
              if (this.bibliography.opt.consolidate_containers.indexOf(o.type) > -1) {
                  if (consolidatedIDs[o.container_id]) {
                      ret = false;
                  } else {
                      consolidatedIDs[o.container_id] = true;
                  }
              }
          }
          return ret;
      });
  
      this.tmp.container_item_pos = {};
  
      for (i = 0, ilen = input.length; i < ilen; i += 1) {
          
          // For paged returns
          if (bibsection && bibsection.page_start && bibsection.page_length) {
              if (skips[input[i]]) {
                  continue;
              }
              item = this.refetchItem(input[i]);
              if (page_item_count === bibsection.page_length) {
                  break;
              }
          } else {
              item = input[i];
              if (skips[item.id]) {
                  continue;
              }
          }
          if (bibsection) {
              include = true;
              if (bibsection.include) {
                  //
                  // Opt-in: these are OR-ed.
                  //
                  include = false;
                  for (j = 0, jlen = bibsection.include.length; j < jlen; j += 1) {
                      spec = bibsection.include[j];
                      if (eval_spec(spec.value, item[spec.field])) {
                          include = true;
                          break;
                      }
                  }
              } else if (bibsection.exclude) {
                  //
                  // Opt-out: these are also OR-ed.
                  //
                  anymatch = false;
                  for (j = 0, jlen = bibsection.exclude.length; j < jlen; j += 1) {
                      spec = bibsection.exclude[j];
                      if (eval_spec(spec.value, item[spec.field])) {
                          anymatch = true;
                          break;
                      }
                  }
                  if (anymatch) {
                      include = false;
                  }
              } else if (bibsection.select) {
                  //
                  // Multiple condition opt-in: these are AND-ed.
                  //
                  include = false;
                  allmatch = true;
                  for (j = 0, jlen = bibsection.select.length; j < jlen; j += 1) {
                      spec = bibsection.select[j];
                      if (!eval_spec(spec.value, item[spec.field])) {
                          allmatch = false;
                      }
                  }
                  if (allmatch) {
                      include = true;
                  }
              }
              if (bibsection.quash) {
                  //
                  // Stop criteria: These are AND-ed.
                  //
                  allmatch = true;
                  for (j = 0, jlen = bibsection.quash.length; j < jlen; j += 1) {
                      spec = bibsection.quash[j];
                      if (!eval_spec(spec.value, item[spec.field])) {
                          allmatch = false;
                      }
                  }
                  if (allmatch) {
                      include = false;
                  }
              }
              if (!include) {
                  continue;
              }
          }
          //SNIP-START
          if (debug) {
              CSL.debug("BIB: " + item.id);
          }
  
          if (item.container_id) {
              if (!this.tmp.container_item_pos[item.container_id]) {
                  this.tmp.container_item_pos[item.container_id] = 0;
              }
              this.tmp.container_item_pos[item.container_id]++;
          }
          
          //SNIP-END
          bib_entry = new CSL.Token("group", CSL.START);
          bib_entry.decorations = [["@bibliography", "entry"]].concat(this.bibliography.opt.layout_decorations);
          this.output.startTag("bib_entry", bib_entry);
          if (item.system_id && this.sys.embedBibliographyEntry) {
              this.output.current.value().item_id = item.system_id;
          } else {
              this.output.current.value().system_id = item.id;
          }
  
          // 2019-06-25 Hacked to conform to new parallels evaluation method
          // 2020-04-25 Revised to work with latest, and final, parallel-first/parallel-last attributes
          entry_item_ids = [];
          if (this.registry.registry[item.id].master
              && !(bibsection && bibsection.page_start && bibsection.page_length)) {
              // Fetch item content
              sortedItems = [[item, {id: item.id}]];
              siblings = this.registry.registry[item.id].siblings;
              for (var j=0,jlen=siblings.length; j<jlen; j++) {
                 sortedItems.push([this.refetchItem(siblings[j]), {id: siblings[j]}]);
              }
              // Adjust parameters
              this.parallel.StartCitation(sortedItems);
              if (this.registry.registry[item.id].parallel_delimiter_override) {
                  this.output.queue[0].strings.delimiter = this.registry.registry[item.id].parallel_delimiter_override;
              } else {
                  this.output.queue[0].strings.delimiter = ", ";
              }
              this.tmp.term_predecessor = false;
              this.tmp.cite_index = 0;
              // Run cites
              for (j = 0, jlen = sortedItems.length; j < jlen; j += 1) {
                  if (j < (sortedItems.length - 1)) {
                      this.tmp.parallel_and_not_last = true;
                  } else {
                      delete this.tmp.parallel_and_not_last;
                  }
                  entry_item_ids.push("" + CSL.getCite.call(this, sortedItems[j][0], sortedItems[j][1]));
                  this.tmp.cite_index++;
                  skips[sortedItems[j][0].id] = true;
              }
          } else if (!this.registry.registry[item.id].siblings) {
              this.tmp.term_predecessor = false;
              this.tmp.cite_index = 0;
              entry_item_ids.push("" + CSL.getCite.call(this, item));
              if (bibsection && bibsection.page_start && bibsection.page_length) {
                  page_item_count += 1;
              }
              //skips[item.id] = true;
          }
          // For RDF support
          entry_item_data.push("");
  
          this.tmp.bibliography_pos += 1;
  
          processed_item_ids.push(entry_item_ids);
          //
          // XXX: loop to render parallels goes here
          // XXX: just have to mark them somehow ...
          //
          this.output.endTag("bib_entry");
          //
          // place layout prefix on first blob of each cite, and suffix
          // on the last non-empty blob of each cite.  there be dragons
          // here.
          //
          if (this.output.queue[0].blobs.length && this.output.queue[0].blobs[0].blobs.length) {
              // The output queue stuff needs cleaning up.  the result of
              // output.current.value() is sometimes a blob, sometimes its list
              // of blobs.  this inconsistency is a source of confusion, and
              // should be cleaned up across the code base in the first
              // instance, before making any other changes to output code.
              if (!this.output.queue[0].blobs[0].blobs[0].strings) {
                  topblobs = this.output.queue[0].blobs;
              } else {
                  topblobs = this.output.queue[0].blobs[0].blobs;
              }
              topblobs[0].strings.prefix = this.bibliography.opt.layout_prefix + topblobs[0].strings.prefix;
          }
          for (j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
              CSL.Output.Queue.purgeEmptyBlobs(this.output.queue[j]);
              //print("XXX: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
          }
          for (j=0,jlen=this.output.queue.length;j<jlen;j+=1) {
              this.output.adjust.upward(this.output.queue[j]);
              this.output.adjust.leftward(this.output.queue[j]);
              this.output.adjust.downward(this.output.queue[j],true);
              this.output.adjust.fix(this.output.queue[j]);
              //print("OUTPUT: "+JSON.stringify(this.output.queue[j],['strings','prefix','suffix','delimiter','blobs','decorations'],2))
          }
  
          //print("DUMP "+JSON.stringify(this.output.queue, ["strings", "decorations", "prefix", "suffix", "delimiter", "blobs"], 2));
  
          // XXX Need to account for numeric blobs in input.
          // XXX No idea how this could have worked previously.
  
          //print("BLOBS "+this.output.queue[0].blobs[0].blobs);
  
          //print("JSON "+JSON.stringify(this.output.queue[0].blobs, null, 2));
  
          res = this.output.string(this, this.output.queue)[0];
          
          if (!res && this.opt.update_mode === CSL.NUMERIC) {
              var err = (ret.length + 1) + ". [CSL STYLE ERROR: reference with no printed form.]";
              res = CSL.Output.Formats[this.opt.mode]["@bibliography/entry"](this, err);
          }
          if (res) {
              ret.push(res);
          }
      }
  
      var done = false;
      if (bibsection && bibsection.page_start && bibsection.page_length) {
          var last_expected_id = input.slice(-1)[0];
          var last_seen_id = processed_item_ids.slice(-1)[0];
          if (!last_expected_id || !last_seen_id || last_expected_id == last_seen_id) {
              done = true;
          }
      }
      this.tmp.disambig_override = false;
  
      // XXX done
      return [processed_item_ids, ret, done];
  };
  
  /*global CSL: true */
  
  
  CSL.Engine.prototype.setCitationId = function (citation, force) {
      var ret, id, direction;
      ret = false;
      if (!citation.citationID || force) {
          id = Math.floor(Math.random() * 100000000000000);
          while (true) {
              direction = 0;
              if (!this.registry.citationreg.citationById[id]) {
                  // In case the ID is used as an HTML identifier in the
                  // calling application.
                  //   https://github.com/Juris-M/citeproc-js/issues/22
                  citation.citationID = "a" + id.toString(32);
                  break;
              } else if (!direction && id < 50000000000000) {
                  direction = 1;
              } else {
                  direction = -1;
              }
              if (direction === 1) {
                  id += 1;
              } else {
                  id += -1;
              }
          }
          ret = "" + id;
      }
      this.registry.citationreg.citationById[citation.citationID] = citation;
      return ret;
  };
  
  CSL.Engine.prototype.rebuildProcessorState = function (citations, mode, uncitedItemIDs) {
      // Rebuilds the processor from scratch, based on a list of citation
      // objects. In a dynamic application, once the internal state of processor
      // is established, citations should edited with individual invocations
      // of processCitationCluster().
  
      // citations is a list of citation objects in document order.
      // mode is one of "html", "text" or "rtf".
      // uncitedItemIDs is a list of itemIDs or a JS object with itemIDs as keys.
      // Returns a list of [citationID,noteIndex,string] triples in document order.
      // Set citation.properties.noteIndex to 0 for in-text citations.
      // It is not necessary to run updateItems() before this function.
      if (!citations) {
          citations = [];
      }
      if (!mode) {
          mode = 'html';
      }
      var doneIDs = {};
      var itemIDs = [];
      for (var i=0,ilen=citations.length;i<ilen;i+=1) {
          for (var j=0,jlen=citations[i].citationItems.length;j<jlen;j+=1) {
              var itemID = "" + citations[i].citationItems[j].id;
              if (!doneIDs[itemID]) {
                  itemIDs.push(itemID);
              }
              doneIDs[itemID] = true;
          }
      }
      this.updateItems(itemIDs);
      var pre = [];
      var post = [];
      var ret = [];
      var oldMode = this.opt.mode;
      this.setOutputFormat(mode);
      for (var i=0,ilen=citations.length;i<ilen;i+=1) {
          // res contains a result report and a list of [index,string] pairs
          // index begins at 0
          var res = this.processCitationCluster(citations[i],pre,post,CSL.ASSUME_ALL_ITEMS_REGISTERED);
          pre.push([citations[i].citationID,citations[i].properties.noteIndex]);
          for (var j=0,jlen=res[1].length;j<jlen;j+=1) {
              var index = res[1][j][0];
              ret[index] = [
                  pre[index][0],
                  pre[index][1],
                  res[1][j][1]
              ];
          }
      }
      this.updateUncitedItems(uncitedItemIDs);
      this.setOutputFormat(oldMode);
      return ret;
  };
  
  
  CSL.Engine.prototype.restoreProcessorState = function (citations) {
      var i, ilen, j, jlen, item, Item, newitem, citationList, itemList, sortedItems;
      
      // This function is deprecated.
      // Use rebuildProcessorState() instead.
  
      // Quickly restore state from citation details retained by
      // calling application.
      //
      // if citations are provided, position details and sortkeys 
      // on the citation objects are are assumed to be correct.  Item
      // data is retrieved, and sortedItems arrays are created and
      // sorted as required by the current style.
      //
      // If citations is an empty list or nil, reset processor to
      // empty state.
      citationList = [];
      itemList = [];
      if (!citations) {
          citations = [];
      }
      // Adjust citationIDs to avoid duplicates, save off index numbers
      var indexNumbers = [];
      var citationIds = {};
      for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          if (citationIds[citations[i].citationID]) {
              this.setCitationId(citations[i], true);
          }
          citationIds[citations[i].citationID] = true;
          indexNumbers.push(citations[i].properties.index);
      }
      // Slice citations and sort by their declared index positions, if any,
      // then reassign index and noteIndex numbers.
      var oldCitations = citations.slice();
      oldCitations.sort(
          function (a,b) {
              if (a.properties.index < b.properties.index) {
                  return -1;
              } else if (a.properties.index > b.properties.index) {
                  return 1;
              } else {
                  return 0;
              }
          }
      );
      for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          oldCitations[i].properties.index = i;
      }
      for (i = 0, ilen = oldCitations.length; i < ilen; i += 1) {
          sortedItems = [];
          for (j = 0, jlen = oldCitations[i].citationItems.length; j < jlen; j += 1) {
              item = oldCitations[i].citationItems[j];
              if ("undefined" === typeof item.sortkeys) {
                  item.sortkeys = [];
              }
              Item = this.retrieveItem("" + item.id);
              newitem = [Item, item];
              sortedItems.push(newitem);
              oldCitations[i].citationItems[j].item = Item;
              itemList.push("" + item.id);
          }
          if (!oldCitations[i].properties.unsorted) {
              sortedItems.sort(this.citation.srt.compareCompositeKeys);
          }
          oldCitations[i].sortedItems = sortedItems;
          // Save citation data in registry
          this.registry.citationreg.citationById[oldCitations[i].citationID] = oldCitations[i];
      }
      // Register Items
      this.updateItems(itemList);
  
      // Construct citationList from original copy
      for (i = 0, ilen = citations.length; i < ilen; i += 1) {
          citationList.push(["" + citations[i].citationID, citations[i].properties.noteIndex]);
      }
  
      var ret = [];
      if (citations && citations.length) {
          // Rendering one citation restores remainder of processor state.
          // If citations is empty, rest to empty state.
          ret = this.processCitationCluster(citations[0], [], citationList.slice(1));
      } else {
          this.registry = new CSL.Registry(this);
          this.tmp = new CSL.Engine.Tmp();
          this.disambiguate = new CSL.Disambiguation(this);
      }
      return ret;
  };
  
  
  CSL.Engine.prototype.updateItems = function (idList, nosort, rerun_ambigs, implicitUpdate) {
      var debug = false;
      var oldArea = this.tmp.area;
      var oldRoot = this.tmp.root;
      var oldExtension = this.tmp.extension;
      if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
      }
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      this.tmp.extension = "";
      if (!implicitUpdate) {
          this.tmp.loadedItemIDs = {};
      }
      //CSL.debug = print
      //SNIP-START
      if (debug) {
          CSL.debug("--> init <--");
      }
      //SNIP-END
      this.registry.init(idList);
  
    if (rerun_ambigs) {
      for (var ambig in this.registry.ambigcites) {
        this.registry.ambigsTouched[ambig] = true;
      }
    }
  
      this.registry.dodeletes(this.registry.myhash);
      
      this.registry.doinserts(this.registry.mylist);
      
      this.registry.dorefreshes();
  
      // *** affects reflist
      this.registry.rebuildlist(nosort);
      
      this.registry.setsortkeys();
  
      // taints always
      this.registry.setdisambigs();
  
      // *** affects reflist
      this.registry.sorttokens(nosort);
  
      // *** affects reflist
      // taints if numbered style
      this.registry.renumber();
      
      // taints always
      //this.registry.yearsuffix();
  
      this.tmp.extension = oldExtension;
      this.tmp.area = oldArea;
      this.tmp.root = oldRoot;
  
      return this.registry.getSortedIds();
  };
  
  CSL.Engine.prototype.updateUncitedItems = function (idList, nosort) {
      var idHash;
      var oldArea = this.tmp.area;
      var oldRoot = this.tmp.root;
      var oldExtension = this.tmp.extension;
      if (this.bibliography_sort.tokens.length === 0) {
          nosort = true;
      }
      this.tmp.area = "citation";
      this.tmp.root = "citation";
      this.tmp.extension = "";
      this.tmp.loadedItemIDs = {};
      // This should be a utility function
      if (!idList) {
          idList = [];
      }
      if ("object" == typeof idList) {
          if ("undefined" == typeof idList.length) {
              idHash = idList;
              idList = [];
              for (var key in idHash) {
                  idList.push(key);
              }
          } else if ("number" == typeof idList.length) {
              idHash = {};
              for (var i=0,ilen=idList.length;i<ilen;i+=1) {
                  idHash[idList[i]] = true;
              }
          }
      }
  
      // prepare extended list of items
      this.registry.init(idList, true);
  
      // Use purge instead of delete.
      // this.registry.dodeletes(this.registry.myhash);
      this.registry.dopurge(idHash);
  
      // everything else is the same as updateItems()
      this.registry.doinserts(this.registry.mylist);
  
      this.registry.dorefreshes();
  
      this.registry.rebuildlist(nosort);
  
      this.registry.setsortkeys();
  
      this.registry.setdisambigs();
  
      this.registry.sorttokens(nosort);
  
      this.registry.renumber();
  
      this.tmp.extension = oldExtension;
      this.tmp.area = oldArea;
      this.tmp.root = oldRoot;
  
      return this.registry.getSortedIds();
  };
  
  /*global CSL: true */
  
  CSL.localeResolve = function (langstr, defaultLocale) {
      var ret, langlst;
      if (!defaultLocale) {
          defaultLocale = "en-US";
      }
      if (!langstr) {
          langstr = defaultLocale;
      }
      ret = {};
      //if ("undefined" === typeof langstr) {
      //    langstr = "en_US";
      //}
      langlst = langstr.split(/[\-_]/);
      ret.base = CSL.LANG_BASES[langlst[0]];
      if ("undefined" === typeof ret.base) {
          //CSL.debug("Warning: unknown locale "+langstr+", setting fallback to "+defaultLocale);
          return {base:defaultLocale, best:langstr, bare:langlst[0]};
      }
      if (langlst.length === 1) {
          ret.generic = true;
      }
      if (langlst.length === 1 || langlst[1] === "x") {
          ret.best = ret.base.replace("_", "-");
      } else {
          ret.best = langlst.slice(0, 2).join("-");
      }
      ret.base = ret.base.replace("_", "-");
      ret.bare = langlst[0];
      return ret;
  };
  
  // Use call to invoke this.
  CSL.Engine.prototype.localeConfigure = function (langspec, beShy) {
      var localexml;
      if (beShy && this.locale[langspec.best]) {
          return;
      }
      if (langspec.best === "en-US") {
          localexml = CSL.setupXml(this.sys.retrieveLocale("en-US"));
          this.localeSet(localexml, "en-US", langspec.best);
      } else if (langspec.best !== "en-US") {
          if (langspec.base !== langspec.best) {
              localexml = CSL.setupXml(this.sys.retrieveLocale(langspec.base));
              this.localeSet(localexml, langspec.base, langspec.best);
          }
          localexml = CSL.setupXml(this.sys.retrieveLocale(langspec.best));
          this.localeSet(localexml, langspec.best, langspec.best);        
      }
      this.localeSet(this.cslXml, "", langspec.best);
      this.localeSet(this.cslXml, langspec.bare, langspec.best);
      if (langspec.base !== langspec.best) {
          this.localeSet(this.cslXml, langspec.base, langspec.best);
      }
      this.localeSet(this.cslXml, langspec.best, langspec.best);
      if ("undefined" === typeof this.locale[langspec.best].terms["page-range-delimiter"]) {
          if (["fr", "pt"].indexOf(langspec.best.slice(0, 2).toLowerCase()) > -1) {
              this.locale[langspec.best].terms["page-range-delimiter"] = "-";
          } else {
              this.locale[langspec.best].terms["page-range-delimiter"] = "\u2013";
          }
      }
      if ("undefined" === typeof this.locale[langspec.best].terms["year-range-delimiter"]) {
          this.locale[langspec.best].terms["year-range-delimiter"] = "\u2013";
      }
      if ("undefined" === typeof this.locale[langspec.best].terms["citation-range-delimiter"]) {
          this.locale[langspec.best].terms["citation-range-delimiter"] = "\u2013";
      }
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          var localeLists = ["default-locale","locale-sort","locale-translit","locale-translat"];
          for (var i=0,ilen=localeLists.length;i<ilen;i+=1) {
              for (var j=0,jlen=this.opt[localeLists[i]].length;j<jlen;j+=1) {
                  this.opt[localeLists[i]][j] = this.opt[localeLists[i]][j].toLowerCase();
              }
          }
          this.opt.lang = this.opt.lang.toLowerCase();
      }
  };
      
  //
  // XXXXX: Got it.  The locales objects need to be reorganized,
  // with a top-level local specifier, and terms, opts, dates
  // below.
  //
  CSL.Engine.prototype.localeSet = function (myxml, lang_in, lang_out) {
      var blob, locale, nodes, attributes, pos, term, form, termname, styleopts, date, attrname, len, genderform, target, i, ilen;
      lang_in = lang_in.replace("_", "-");
      lang_out = lang_out.replace("_", "-");
  
      if (this.opt.development_extensions.normalize_lang_keys_to_lowercase) {
          lang_in = lang_in.toLowerCase();
          lang_out = lang_out.toLowerCase();
      }
  
      if (!this.locale[lang_out]) {
          this.locale[lang_out] = {};
          this.locale[lang_out].terms = {};
          this.locale[lang_out].opts = {};
          // Set default skip words. Can be overridden in locale by attribute on style-options node.
          this.locale[lang_out].opts["skip-words"] = CSL.SKIP_WORDS;
          // Initialise leading noise word to false. Actual assignment is below. Empty by default, can be overridden in locale by attribute on style-options node.
          if (!this.locale[lang_out].opts["leading-noise-words"]) {
              this.locale[lang_out].opts["leading-noise-words"] = [];
          }
          this.locale[lang_out].dates = {};
          // For ordinals
          this.locale[lang_out].ord = {'1.0.1':false,keys:{}};
          this.locale[lang_out]["noun-genders"] = {};
      }
  
      //
      // Xml: Test if node is "locale" (nb: ns declarations need to be invoked
      // on every access to the xml object; bundle this with the functions
      //
      locale = myxml.makeXml();
      if (myxml.nodeNameIs(myxml.dataObj, 'locale')) {
          locale = myxml.dataObj;
      } else {
          //
          // Xml: get a list of all "locale" nodes
          //
          nodes = myxml.getNodesByName(myxml.dataObj, "locale");
          var foundLocale = false;
          for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
              blob = nodes[pos];
              //
              // Xml: get locale xml:lang
              //
              // Iterate over all locales, but for non-matching nodes,
              // we set jurisdiction_preference only (processing of the
              // chosen one will process the attribute there,
              // separately.
              if (!foundLocale && myxml.getAttributeValue(blob, 'lang', 'xml') === lang_in) {
                  locale = blob;
                  foundLocale = true;
              } else {
                  var lang = myxml.getAttributeValue(blob, 'lang', 'xml');
                  var style_options = myxml.getNodesByName(blob, 'style-options');
                  if (lang && style_options && style_options.length) {
                      var jurispref = myxml.getAttributeValue(style_options[0], 'jurisdiction-preference');
                      if (jurispref) {
                          if (!this.locale[lang]) {
                              this.locale[lang] = {
                                  opts: {}
                              };
                          }
                          this.locale[lang].opts["jurisdiction-preference"] = jurispref.split(/\s+/);
                      }
                  }
              }
          }
      }
      //
      // Xml: get a list of any cs:type nodes within locale
      //
      nodes = myxml.getNodesByName(locale, 'type');
      for (i = 0, ilen = myxml.numberofnodes(nodes); i < ilen; i += 1) {
          var typenode = nodes[i];
          var type = myxml.getAttributeValue(typenode, 'name');
          var gender = myxml.getAttributeValue(typenode, 'gender');
          this.opt.gender[type] = gender;
      }
      //
      // Xml: get a list of term nodes within locale
      //
  
      // If we are setting CSL 1.0.1 ordinals inside a style, wipe the
      // slate clean and start over.
      var hasCslOrdinals101 = myxml.getNodesByName(locale, 'term', 'ordinal').length;
      if (hasCslOrdinals101) {
          for (var key in this.locale[lang_out].ord.keys) {
              delete this.locale[lang_out].terms[key];
          }
          this.locale[lang_out].ord = {"1.0.1":false,keys:{}};
      }
  
      nodes = myxml.getNodesByName(locale, 'term');
      // Collect ordinals info as for 1.0.1, but save only if 1.0.1 toggle triggers
      var ordinals101 = {"last-digit":{},"last-two-digits":{},"whole-number":{}};
      var ordinals101_toggle = false;
      var genderized_terms = {};
      for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          term = nodes[pos];
          //
          // Xml: get string value of attribute
          //
          termname = myxml.getAttributeValue(term, 'name');
          if (termname === "sub verbo") {
              termname = "sub-verbo";
          }
          if (termname.slice(0,7) === "ordinal") {
              if (termname === "ordinal") {
                  ordinals101_toggle = true;
              } else {
                  var match = myxml.getAttributeValue(term, 'match');
                  var termstub = termname.slice(8);
                  var genderform = myxml.getAttributeValue(term, 'gender-form');
                  if (!genderform) {
                      genderform = "neuter";
                  }
                  if (!match) {
                      match = "last-two-digits";
                      if (termstub.slice(0,1) === "0") {
                          match = "last-digit";
                      }
                  }
                  if (termstub.slice(0,1) === "0") {
                      termstub = termstub.slice(1);
                  }
                  if (!ordinals101[match][termstub]) {
                      ordinals101[match][termstub] = {};
                  }
                  ordinals101[match][termstub][genderform] = termname;
              }
              this.locale[lang_out].ord.keys[termname] = true;
          }
          if ("undefined" === typeof this.locale[lang_out].terms[termname]) {
              this.locale[lang_out].terms[termname] = {};
          }
          form = "long";
          genderform = false;
          //
          // Xml: get string value of form attribute, if any
          //
          if (myxml.getAttributeValue(term, 'form')) {
              form = myxml.getAttributeValue(term, 'form');
          }
          //
          // Xml: get string value of gender attribute, if any
          // 
          if (myxml.getAttributeValue(term, 'gender-form')) {
              genderform = myxml.getAttributeValue(term, 'gender-form');
          }
          //
          // Xml: set global gender assignment for variable associated
          // with term name
          // 
          if (myxml.getAttributeValue(term, 'gender')) {
              this.locale[lang_out]["noun-genders"][termname] = myxml.getAttributeValue(term, 'gender');
          }
          // Work on main segment or gender-specific sub-segment as appropriate
          if (genderform) {
              this.locale[lang_out].terms[termname][genderform] = {};
              this.locale[lang_out].terms[termname][genderform][form] = [];
              target = this.locale[lang_out].terms[termname][genderform];
              genderized_terms[termname] = true;
          } else {
              this.locale[lang_out].terms[termname][form] = [];
              target = this.locale[lang_out].terms[termname];
          }
          //
          // Xml: test of existence of node
          //
          if (myxml.numberofnodes(myxml.getNodesByName(term, 'multiple'))) {
              //
              // Xml: get string value of attribute, plus
              // Xml: get string value of node content
              //
              target[form][0] = myxml.getNodeValue(term, 'single');
              if (target[form][0].indexOf("%s") > -1) {
                  this.opt.hasPlaceholderTerm = true;
              }
              //
              // Xml: get string value of attribute, plus
              // Xml: get string value of node content
              //
              target[form][1] = myxml.getNodeValue(term, 'multiple');
              if (target[form][1].indexOf("%s") > -1) {
                  this.opt.hasPlaceholderTerm = true;
              }
          } else {
              //
              // Xml: get string value of attribute, plus
              // Xml: get string value of node content
              //
              target[form] = myxml.getNodeValue(term);
              if (target[form].indexOf("%s") > -1) {
                  this.opt.hasPlaceholderTerm = true;
              }
          }
      }
      if (!this.locale[lang_out].terms.supplement) {
          this.locale[lang_out].terms.supplement = {};
      }
      if (!this.locale[lang_out].terms.supplement["long"]) {
          this.locale[lang_out].terms.supplement["long"] = ["supplement", "supplements"];
      }
      // If locale had a CSL 1.0.1-style ordinal definition, install the logic object
      // and iterate over gendered terms, filling in default values for use by getTerm.
      if (ordinals101_toggle) {
          for (var ikey in genderized_terms) {
              var gender_segments = {};
              var form_segments = 0;
              for (var jkey in this.locale[lang_out].terms[ikey]) {
                  if (["masculine","feminine"].indexOf(jkey) > -1) {
                      gender_segments[jkey] = this.locale[lang_out].terms[ikey][jkey];
                  } else {
                      form_segments += 1;
                  }
              }
              if (!form_segments) {
                  if (gender_segments.feminine) {
                      // Link each feminine form segment to default
                      // (no need to filter, these will not have gender segments mixed in)
                      for (var jkey in gender_segments.feminine) {
                          this.locale[lang_out].terms[ikey][jkey] = gender_segments.feminine[jkey];
                      }
                  } else if (gender_segments.masculine) {
                      // Otherwise link each masculine form segment to default 
                      for (var jkey in gender_segments.masculine) {
                          this.locale[lang_out].terms[ikey][jkey] = gender_segments.masculine[jkey];
                      }
                  }
              }
          }
          this.locale[lang_out].ord['1.0.1'] = ordinals101;
      }
  
      // Iterate over main segments, and fill in any holes in gender-specific data
      // sub-segments
      for (termname in this.locale[lang_out].terms) {
          for (i = 0, ilen = 2; i < ilen; i += 1) {
              genderform = CSL.GENDERS[i];
              if (this.locale[lang_out].terms[termname][genderform]) {
                  for (form in this.locale[lang_out].terms[termname]) {
                      if (!this.locale[lang_out].terms[termname][genderform][form]) {
                          this.locale[lang_out].terms[termname][genderform][form] = this.locale[lang_out].terms[termname][form];
                      }
                  }
              }
          }
      }
      //
      // Xml: get list of nodes by node type
      //
      nodes = myxml.getNodesByName(locale, 'style-options');
      for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
              styleopts = nodes[pos];
              //
              // Xml: get list of attributes on a node
              //
              attributes = myxml.attributes(styleopts);
              for (attrname in attributes) {
                  if (attributes.hasOwnProperty(attrname)) {
                      if (attrname === "@punctuation-in-quote" || attrname === "@limit-day-ordinals-to-day-1") {
                          if (attributes[attrname] === "true") {
                              // trim off leading @
                              this.locale[lang_out].opts[attrname.slice(1)] = true;
                          } else {
                              // trim off leading @
                              this.locale[lang_out].opts[attrname.slice(1)] = false;
                          }
                      } else if (attrname === "@jurisdiction-preference") {
                          var jurisdiction_preference = attributes[attrname].split(/\s+/);
                          this.locale[lang_out].opts[attrname.slice(1)] = jurisdiction_preference;
                      } else if (attrname === "@skip-words") {
                          var skip_words = attributes[attrname].split(/\s*,\s*/);
                          this.locale[lang_out].opts[attrname.slice(1)] = skip_words;
                      } else if (attrname === "@leading-noise-words") {
                          var val = attributes[attrname].split(/\s*,\s*/);
                          this.locale[lang_out].opts["leading-noise-words"] = val;
                      } else if (attrname === "@name-as-sort-order") {
                          // Fallback is okay here.
                          this.locale[lang_out].opts["name-as-sort-order"] = {};
                          var lst = attributes[attrname].split(/\s+/);
                          for (var i=0,ilen=lst.length;i<ilen;i+=1) {
                              this.locale[lang_out].opts["name-as-sort-order"][lst[i]] = true;
                          }
                      } else if (attrname === "@name-as-reverse-order") {
                          // Fallback is okay here.
                          this.locale[lang_out].opts["name-as-reverse-order"] = {};
                          var lst = attributes[attrname].split(/\s+/);
                          for (var i=0,ilen=lst.length;i<ilen;i+=1) {
                              this.locale[lang_out].opts["name-as-reverse-order"][lst[i]] = true;
                          }
                      } else if (attrname === "@name-never-short") {
                          // Here too.
                          this.locale[lang_out].opts["name-never-short"] = {};
                          var lst = attributes[attrname].split(/\s+/);
                          for (var i=0,ilen=lst.length;i<ilen;i+=1) {
                              this.locale[lang_out].opts["name-never-short"][lst[i]] = true;
                          }
                      }
                  }
              }
          }
      }
      //
      // Xml: get list of nodes by type
      //
      nodes = myxml.getNodesByName(locale, 'date');
      for (pos = 0, len = myxml.numberofnodes(nodes); pos < len; pos += 1) {
          if (true) {
              var date = nodes[pos];
              //
              // Xml: get string value of attribute
              //
              this.locale[lang_out].dates[myxml.getAttributeValue(date, "form")] = date;
          }
      }
      //
      // Xml: get list of nodes by node type
      //
      CSL.SET_COURT_CLASSES(this, lang_out, myxml, locale);
  };
  
  
  CSL.getLocaleNames = function (myxml, preferredLocale) {
      var stylexml = CSL.setupXml(myxml);
  
      function extendLocaleList(localeList, locale) {
          var forms = ["base", "best"];
          if (locale) {
              var normalizedLocale = CSL.localeResolve(locale);
              for (var i=0,ilen=forms.length;i<ilen;i++) {
                  if (normalizedLocale[forms[i]] && localeList.indexOf(normalizedLocale[forms[i]]) === -1) {
                      localeList.push(normalizedLocale[forms[i]]);
                  }
              }
          }
      }
      
      var localeIDs = ["en-US"];
      
      function sniffLocaleOnOneNodeName(nodeName) {
          var nodes = stylexml.getNodesByName(stylexml.dataObj, nodeName);
          for (var i=0,ilen=nodes.length;i<ilen;i++) {
              var nodeLocales = stylexml.getAttributeValue(nodes[i], "locale");
              if (nodeLocales) {
                  nodeLocales = nodeLocales.split(/ +/);
                  for (var j=0,jlen=nodeLocales.length;j<jlen;j++) {
                      this.extendLocaleList(localeIDs, nodeLocales[j]);
                  }
              }
          }
      }
  
      extendLocaleList(localeIDs, preferredLocale);
  
      var styleNode = stylexml.getNodesByName(stylexml.dataObj, "style")[0];
      var defaultLocale = stylexml.getAttributeValue(styleNode, "default-locale");
      extendLocaleList(localeIDs, defaultLocale);
  
      var nodeNames = ["layout", "if", "else-if", "condition"];
      for (var i=0,ilen=nodeNames.length;i<ilen;i++) {
          sniffLocaleOnOneNodeName(stylexml, localeIDs, nodeNames[i]);
      }
      return localeIDs;
  };
  
  /*global CSL: true */
  
  CSL.Node = {};
  
  CSL.Node.bibliography = {
      build: function (state, target) {
          if (this.tokentype === CSL.START) {
  
              state.build.area = "bibliography";
              state.build.root = "bibliography";
              state.build.extension = "";
  
              var func = function(state) {
                  state.tmp.area = "bibliography";
                  state.tmp.root = "bibliography";
                  state.tmp.extension = "";
              };
              this.execs.push(func);
  
          }
          target.push(this);
      }
  };
  
  
  /*global CSL: true */
  
  CSL.Node.choose = {
      build: function (state, target) {
          var func;
          if (this.tokentype === CSL.START) {
              //open condition
              func = function (state) {
                  state.tmp.jump.push(undefined, CSL.LITERAL);
              };
          }
          if (this.tokentype === CSL.END) {
              //close condition
              func = function (state) {
                  state.tmp.jump.pop();
              };
          }
          this.execs.push(func);
          target.push(this);
      },
  
      configure: function (state, pos) {
          if (this.tokentype === CSL.END) {
              state.configure.fail.push((pos));
              state.configure.succeed.push((pos));
          } else {
              state.configure.fail.pop();
              state.configure.succeed.pop();
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.citation = {
      build: function (state, target) {
          if (this.tokentype === CSL.START) {
  
              state.build.area = "citation";
              state.build.root = "citation";
              state.build.extension = "";
  
  
              var func = function(state) {
                  state.tmp.area = "citation";
                  state.tmp.root = "citation";
                  state.tmp.extension = "";
              };
              this.execs.push(func);
  
  /*
              state.build.root = "citation";
  
              OK state.fixOpt(this, "names-delimiter", "delimiter");
              OK state.fixOpt(this, "name-delimiter", "delimiter");
              OK state.fixOpt(this, "name-form", "form");
              OK state.fixOpt(this, "and", "and");
              OK state.fixOpt(this, "delimiter-precedes-last", "delimiter-precedes-last");
              OK state.fixOpt(this, "delimiter-precedes-et-al", "delimiter-precedes-et-al");
              OK state.fixOpt(this, "initialize-with", "initialize-with");
              OK state.fixOpt(this, "initialize", "initialize");
              OK state.fixOpt(this, "name-as-sort-order", "name-as-sort-order");
              OK state.fixOpt(this, "sort-separator", "sort-separator");
  
              OK state.fixOpt(this, "et-al-min", "et-al-min");
              OK state.fixOpt(this, "et-al-use-first", "et-al-use-first");
              OK state.fixOpt(this, "et-al-use-last", "et-al-use-last");
              state.fixOpt(this, "et-al-subsequent-min", "et-al-subsequent-min");
              state.fixOpt(this, "et-al-subsequent-use-first", "et-al-subsequent-use-first");
  */
          }
          if (this.tokentype === CSL.END) {
  
              // Open an extra key at first position for use in
              // grouped sorts.
              // print("in cs:citation END");
              state.opt.grouped_sort = state.opt.xclass === "in-text" 
                  && (state.citation.opt.collapse 
                      && state.citation.opt.collapse.length)
                  || (state.citation.opt.cite_group_delimiter
                      && state.citation.opt.cite_group_delimiter.length)
                  && state.opt.update_mode !== CSL.POSITION
                  && state.opt.update_mode !== CSL.NUMERIC;
              
              if (state.opt.grouped_sort 
                  && state.citation_sort.opt.sort_directions.length) {
                  
                  var firstkey = state.citation_sort.opt.sort_directions[0].slice();
                  //print("extending sort keys "+state.citation_sort.opt.sort_directions+" with "+firstkey);
                  state.citation_sort.opt.sort_directions = [firstkey].concat(state.citation_sort.opt.sort_directions);
                  // print("new key directions in effect: "+state.citation_sort.opt.sort_directions);
              }
              // print("creating new comparifier");
              state.citation.srt = new CSL.Registry.Comparifier(state, "citation_sort");
          }
          target.push(this);
      }
  };
  
  
  /*global CSL: true */
  
  CSL.Node["#comment"] = {
         // This is a comment in the CSL file.
         build: function () {
          // Save some space in the log files -- no need to mention this, really.
          // CSL.debug("CSL processor warning: comment node reached");
         }
  };
  
  /*global CSL: true */
  
  CSL.Node.date = {
      build: function (state, target) {
          var func, date_obj, len, pos, part, dpx, parts, mypos, start, end;
          if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {
              // used to collect rendered date part names in node_datepart,
              // for passing through to node_key, for use in dates embedded
              // in macros
              state.dateput.string(state, state.dateput.queue);
              state.tmp.date_token = CSL.Util.cloneToken(this);
              state.tmp.date_token.strings.prefix = "";
              state.tmp.date_token.strings.suffix = "";
              state.dateput.openLevel(this);
              state.build.date_parts = [];
              state.build.date_variables = this.variables;
              if (!state.build.extension) {
                  CSL.Util.substituteStart.call(this, state, target);
              }
              if (state.build.extension) {
                  func = CSL.dateMacroAsSortKey;
              } else {
                  func = function (state, Item, item) {
                      var dp;
                      state.tmp.element_rendered_ok = false;
                      state.tmp.donesies = [];
                      state.tmp.dateparts = [];
                      dp = [];
                      //if (this.variables.length && Item[this.variables[0]]){
                      if (this.variables.length
                          && !(state.tmp.just_looking
                               && this.variables[0] === "accessed")) {
                          
                          date_obj = Item[this.variables[0]];
                          if ("undefined" === typeof date_obj) {
                              date_obj = {"date-parts": [[0]] };
                              if (state.opt.development_extensions.locator_date_and_revision) {
                                  if (item && this.variables[0] === "locator-date" && item["locator-date"]) {
                                      date_obj = item["locator-date"];
                                  }
                              }
                          }
                          state.tmp.date_object = date_obj;
                          //
                          // Call a function here to analyze the
                          // data and set the name of the date-part that
                          // should collapse for this range, if any.
                          //
                          // (1) build a filtered list, in y-m-d order,
                          // consisting only of items that are (a) in the
                          // date-parts and (b) in the *_end data.
                          // (note to self: remember that season is a
                          // fallback var when month and day are empty)
                          
                          //if ("undefined" === typeof this.dateparts) {
                          //    this.dateparts = ["year", "month", "day"];
                          //}
                          len = this.dateparts.length;
                          for (pos = 0; pos < len; pos += 1) {
                              part = this.dateparts[pos];
                              if ("undefined" !== typeof state.tmp.date_object[(part +  "_end")]) {
                                  dp.push(part);
                              } else if (part === "month" && "undefined" !== typeof state.tmp.date_object.season_end) {
                                  dp.push(part);
                              }
                          }
                          dpx = [];
                          parts = ["year", "month", "day"];
                          len = parts.length;
                          for (pos = 0; pos < len; pos += 1) {
                              if (dp.indexOf(parts[pos]) > -1) {
                                  dpx.push(parts[pos]);
                              }
                          }
                          dp = dpx.slice();
                          //
                          // (2) Reverse the list and step through in
                          // reverse order, popping each item if the
                          // primary and *_end data match.
                          mypos = 2;
                          len = dp.length;
                          for (pos = 0; pos < len; pos += 1) {
                              part = dp[pos];
                              start = state.tmp.date_object[part];
                              end = state.tmp.date_object[(part + "_end")];
                              if (start !== end) {
                                  mypos = pos;
                                  break;
                              }
                          }
                          
                          //
                          // (3) When finished, the first item in the
                          // list, if any, is the date-part where
                          // the collapse should occur.
  
                          // XXXXX: was that it?
                          state.tmp.date_collapse_at = dp.slice(mypos);
                          //
                          // The collapse itself will be done by appending
                          // string output for the date, less suffix,
                          // placing a delimiter on output, then then
                          // doing the *_end of the range, dropping only
                          // the prefix.  That should give us concise expressions
                          // of ranges.
                          //
                          // Numeric dates should not collapse, though,
                          // and should probably use a slash delimiter.
                          // Scope for configurability will remain (all over
                          // the place), but this will do to get this feature
                          // started.
                          //
                      } else {
                          state.tmp.date_object = false;
                      }
                  };
              }
              this.execs.push(func);
  
              // newoutput
              func = function (state, Item) {
                  if (!Item[this.variables[0]]) {
                      return;
                  }
                  state.output.startTag("date", this);
                  if (this.variables[0] === "issued"
                      && (Item.type === "legal_case" || Item.type === "legislation")
                      && state.opt.disable_duplicate_year_suppression.indexOf(Item.country) === -1
                      && !state.tmp.extension
                      && "" + Item["collection-number"] === "" + state.tmp.date_object.year
                      && this.dateparts.length === 1
                      && this.dateparts[0] === "year") {
  
                      // Set up to (maybe) suppress the year if we're not sorting, and
                      // it's the same as the collection-number, and we would render
                      // only the year, with not month or day, and this is a legal_case item.
                      // We save a pointer to the blob parent and its position here. The
                      // blob will be popped from output if at the end of processing for
                      // this cite we find that we have rendered the collection-number
                      // variable also.
                      for (var key in state.tmp.date_object) {
                          if (state.tmp.date_object.hasOwnProperty(key)) {
                              if (key.slice(0, 4) === "year") {
                                  state.tmp.issued_date = {};
                                  var lst = state.output.current.mystack.slice(-2)[0].blobs;
                                  state.tmp.issued_date.list = lst;
                                  state.tmp.issued_date.pos = lst.length - 1;
                              }
                          }
                      }
                  }
              };
              this.execs.push(func);
          }
  
          if (!state.build.extension && (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON)) {
              // mergeoutput
              func = function (state, Item) {
                  if (!Item[this.variables[0]]) {
                      return;
                  }
                  state.output.endTag();
              };
              this.execs.push(func);
          }
          target.push(this);
  
          if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {
              if (!state.build.extension) {
                  CSL.Util.substituteEnd.call(this, state, target);
              }
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.Node["date-part"] = {
      build: function (state, target) {
          var func, pos, len, first_date, value, value_end, real, have_collapsed, invoked, precondition, known_year, bc, ad, bc_end, ad_end, ready, curr, dcurr, number, num, formatter, item;
          if (!this.strings.form) {
              this.strings.form = "long";
          }
          // used in node_date, to send a list of rendering date parts
          // to node_key, for dates embedded in macros.
          state.build.date_parts.push(this.strings.name);
          //
          // Set delimiter here, if poss.
          //
  
          var date_variable = state.build.date_variables[0];
  
          function formatAndStrip(myform, gender, val) {
              if (!val) {
                  return val;
              }
              val = "" + CSL.Util.Dates[this.strings.name][myform](state, val, gender, this.default_locale);
              if ("month" === this.strings.name) {
                  if (state.tmp.strip_periods) {
                      val = val.replace(/\./g, "");
                  } else {
                      for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                          if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                              val = val.replace(/\./g, "");
                              break;
                          }
                      }
                  }
              }
              return val;
          }
  
          func = function (state, Item) {
  
              if (!state.tmp.date_object) {
                  return;
              } else {
                  state.tmp.probably_rendered_something = true;
              }
  
              var last_string_output = "";
  
              first_date = true;
              value = "";
              value_end = "";
              state.tmp.donesies.push(this.strings.name);
  
              // Render literal only when year is included in date output
              if (state.tmp.date_object.literal && "year" === this.strings.name) {
                  last_string_output = state.tmp.date_object.literal;
                  state.output.append(state.tmp.date_object.literal, this);
              }
  
              if (state.tmp.date_object) {
                  value = state.tmp.date_object[this.strings.name];
                  value_end = state.tmp.date_object[(this.strings.name + "_end")];
              }
              if ("year" === this.strings.name && value === 0 && !state.tmp.suppress_decorations) {
                  value = false;
              }
              real = !state.tmp.suppress_decorations;
              have_collapsed = state.tmp.have_collapsed;
              invoked = state[state.tmp.area].opt.collapse === "year-suffix" || state[state.tmp.area].opt.collapse === "year-suffix-ranged";
              precondition = state.opt["disambiguate-add-year-suffix"];
              if (real && precondition && invoked) {
                  state.tmp.years_used.push(value);
                  known_year = state.tmp.last_years_used.length >= state.tmp.years_used.length;
                  if (known_year && have_collapsed) {
                      if (state.tmp.last_years_used[(state.tmp.years_used.length - 1)] === value) {
                          value = false;
                      }
                  }
              }
              if ("undefined" !== typeof value) {
                  bc = false;
                  ad = false;
                  bc_end = false;
                  ad_end = false;
                  if ("year" === this.strings.name) {
                      if (parseInt(value, 10) < 500 && parseInt(value, 10) > 0) {
                          ad = state.getTerm("ad");
                      }
                      if (parseInt(value, 10) < 0) {
                          bc = state.getTerm("bc");
                          value = (parseInt(value, 10) * -1);
                      }
                      if (value_end) {
                          if (parseInt(value_end, 10) < 500 && parseInt(value_end, 10) > 0) {
                              ad_end = state.getTerm("ad");
                          }
                          if (parseInt(value_end, 10) < 0) {
                              bc_end = state.getTerm("bc");
                              value_end = (parseInt(value_end, 10) * -1);
                          }
                      }
                  }
  
                  // For gendered locales
                  var monthnameid = ""+state.tmp.date_object.month;
                  while (monthnameid.length < 2) {
                      monthnameid = "0"+monthnameid;
                  }
                  monthnameid = "month-"+monthnameid;
                  var gender = state.locale[state.opt.lang]["noun-genders"][monthnameid];
                  if (this.strings.form) {
                      var myform = this.strings.form;
                      var myform_end = this.strings.form;
                      if (this.strings.name === "day") {
                          if (myform === "ordinal" && state.locale[state.opt.lang].opts["limit-day-ordinals-to-day-1"]) {
                              if (value != 1) {
                                  myform = "numeric";
                              }
                              if (value_end != 1) {
                                  myform_end = "numeric";
                              }
                          }
                      }
                      value = formatAndStrip.call(this, myform, gender, value);
                      value_end = formatAndStrip.call(this, myform_end, gender, value_end);
                  }
                  state.output.openLevel("empty");
                  if (state.tmp.date_collapse_at.length) {
                      //state.output.startTag(this.strings.name,this);
                      ready = true;
                      len = state.tmp.date_collapse_at.length;
                      for (pos = 0; pos < len; pos += 1) {
                          item = state.tmp.date_collapse_at[pos];
                          if (state.tmp.donesies.indexOf(item) === -1) {
                              ready = false;
                              break;
                          }
                      }
                      if (ready) {
                          if ("" + value_end !== "0") {
                              if (state.dateput.queue.length === 0) {
                                  first_date = true;
                              }
  
                              // OK! So if the actual data has no month, day or season,
                              // and we reach this block, then we can combine the dates
                              // to a string, run minimial-two, and output the trailing
                              // year right here. No impact on other functionality.
                              
                              if (state.opt["year-range-format"]
                                  && state.opt["year-range-format"] !== "expanded"
                                  && !state.tmp.date_object.day
                                  && !state.tmp.date_object.month
                                  && !state.tmp.date_object.season
                                  && this.strings.name === "year"
                                  && value && value_end) {
                                  
                                  // second argument adjusts collapse as required for years
                                  // See OSCOLA section 1.3.2
                                  value_end = state.fun.year_mangler(value + "-" + value_end, true);
                                  var range_delimiter = state.getTerm("year-range-delimiter");
                                  value_end = value_end.slice(value_end.indexOf(range_delimiter) + 1);
                              }
                              last_string_output = value_end;
                              state.dateput.append(value_end, this);
                              if (first_date) {
                                  state.dateput.current.value().blobs[0].strings.prefix = "";
                              }
                          }
                          last_string_output = value;
                          state.output.append(value, this);
                          curr = state.output.current.value();
                          curr.blobs[(curr.blobs.length - 1)].strings.suffix = "";
                          if (this.strings["range-delimiter"]) {
                              state.output.append(this.strings["range-delimiter"]);
                          } else {
                              state.output.append(state.getTerm("year-range-delimiter"), "empty");
                          }
                          state.dateput.closeLevel();
                          dcurr = state.dateput.current.value();
                          curr.blobs = curr.blobs.concat(dcurr);
                          // This may leave the stack pointer on a lower level.
                          // It's not a problem because the stack will be clobbered
                          // when the queue is initialized by the next cs:date node.
                          state.dateput.string(state, state.dateput.queue);
                          state.dateput.openLevel(state.tmp.date_token);
                          state.tmp.date_collapse_at = [];
                      } else {
                          last_string_output = value;
                          state.output.append(value, this);
                          // print("collapse_at: "+state.tmp.date_collapse_at);
                          if (state.tmp.date_collapse_at.indexOf(this.strings.name) > -1) {
                              //
                              // Use ghost dateput queue
                              //
                              if ("" + value_end !== "0") {
                                  //
                                  // XXXXX: It's a workaround.  It's ugly.
                                  // There's another one above.
                                  //
                                  if (state.dateput.queue.length === 0) {
                                      first_date = true;
                                  }
                                  state.dateput.openLevel("empty");
                                  last_string_output = value_end;
                                  state.dateput.append(value_end, this);
                                  if (first_date) {
                                      state.dateput.current.value().blobs[0].strings.prefix = "";
                                  }
                                  if (bc) {
                                      last_string_output = bc;
                                      state.dateput.append(bc);
                                  }
                                  if (ad) {
                                      last_string_output = ad;
                                      state.dateput.append(ad);
                                  }
                                  state.dateput.closeLevel();
                              }
                          }
                      }
                  } else {
                      last_string_output = value;
                      state.output.append(value, this);
                  }
  
                  if (bc) {
                      last_string_output = bc;
                      state.output.append(bc);
                  }
                  if (ad) {
                      last_string_output = ad;
                      state.output.append(ad);
                  }
                  state.output.closeLevel();
                  //state.output.endTag();
              } else if ("month" === this.strings.name) {
                  // XXX The simpler solution here will be to
                  // directly install season and season_end on
                  // month, with a value of 13, 14, 15, 16, or
                  // (to allow correct ranging with Down Under
                  // dates) 17 or 18.  That will allow ranging
                  // to take place in the normal way.  With this
                  // "approach", it doesn't.
                  //
                  // No value for this target variable
                  //
                  if (state.tmp.date_object.season) {
                      value = "" + state.tmp.date_object.season;
                      if (value && value.match(/^[1-4]$/)) {
                          // XXXXXXXXXXXXXXXXXXX was replace([false, false, true]);
                          //state.tmp.group_context.replace([false, false, true]);
                          state.tmp.group_context.tip.variable_success = true;
                          last_string_output = "winter";
                          state.output.append(state.getTerm(("season-0" + value)), this);
                      } else if (value) {
                          last_string_output = value;
                          state.output.append(value, this);
                      }
                  }
              }
              state.tmp.value = [];
              if (Item[date_variable] && (value || state.tmp.have_collapsed) && !state.opt.has_year_suffix && "year" === this.strings.name && !state.tmp.just_looking) {
                  if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false && !state.tmp.has_done_year_suffix) {
                      state.tmp.has_done_year_suffix = true;
                      last_string_output = "x";
                      num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);
                      // first argument is for number particle [a-zA-Z], never present on dates
                      number = new CSL.NumericBlob(state, false, num, this, Item.id);
                      this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                      this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                      formatter = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);
                      number.setFormatter(formatter);
                      if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                          number.range_prefix = state.getTerm("citation-range-delimiter");
                      }
                      if (state[state.tmp.area].opt.cite_group_delimiter) {
                          number.successor_prefix = state[state.tmp.area].opt.cite_group_delimiter;
                      } else if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                          number.successor_prefix = state[state.tmp.area].opt["year-suffix-delimiter"];
                      } else {
                          number.successor_prefix = state[state.tmp.area].opt.layout_delimiter;
                      }
                      number.UGLY_DELIMITER_SUPPRESS_HACK = true;
                      state.output.append(number, "literal");
                  }
              }
              if (last_string_output && !state.tmp.group_context.tip.condition) {
                  state.tmp.just_did_number = last_string_output.match(/[0-9]$/);
                  if (state.output.current.tip.strings.suffix) {
                      state.tmp.just_did_number = false;
                  }
              }
          };
          this.execs.push(func);
          target.push(this);
      }
  };
  
  
  
  /*global CSL: true */
  
  CSL.Node["else-if"] = {
      //
      // these function are the same as those in if, might just clone
      build: function (state, target) {
          CSL.Conditions.TopNode.call(this, state, target);
          target.push(this);
      },
      configure: function (state, pos) {
          CSL.Conditions.Configure.call(this, state, pos);
      }
  };
  
  /*global CSL: true */
  
  CSL.Node["else"] = {
      build: function (state, target) {
          target.push(this);
      },
      configure: function (state, pos) {
          if (this.tokentype === CSL.START) {
              state.configure.fail[(state.configure.fail.length - 1)] = pos;
          }
      }
  };
  
  
  /*global CSL: true */
  
  CSL.Node["et-al"] = {
      build: function (state, target) {
          if (state.build.area === "citation" || state.build.area === "bibliography") {
              var func = function (state) {
                  state.tmp.etal_node = this;
                  if ("string" === typeof this.strings.term) {
                      state.tmp.etal_term = this.strings.term;
                  }
              };
              this.execs.push(func);
          }
          target.push(this);
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.group = {
      build: function (state, target, realGroup) {
          var func, execs;
          this.realGroup = realGroup;
          if (this.tokentype === CSL.START) {
              CSL.Util.substituteStart.call(this, state, target);
              if (state.build.substitute_level.value()) {
                  state.build.substitute_level.replace((state.build.substitute_level.value() + 1));
              }
              if (!this.juris) {
                  target.push(this);
              }
  
              // newoutput
              func = function (state) {
                  state.output.startTag("group", this);
                  
                  if (this.strings.label_form_override) {
                      if (!state.tmp.group_context.tip.label_form) {
                          state.tmp.group_context.tip.label_form = this.strings.label_form_override;
                      }
                  }
                  
                  if (this.strings.label_capitalize_if_first_override) {
                      if (!state.tmp.group_context.tip.label_capitalize_if_first) {
                          state.tmp.group_context.tip.label_capitalize_if_first = this.strings.label_capitalize_if_first_override;
                      }
                  }
                  
                  if (this.realGroup) {
                      
                      if (state.tmp.group_context.tip.condition) {
                          CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, this.strings.prefix, null, this);
                      }
                      
                      var condition = false;
                      var force_suppress = false;
  
                      // XXX Can we do something better for length here?
                      if (state.tmp.group_context.mystack.length) {
                          state.output.current.value().parent = state.tmp.group_context.tip.output_tip;
                      }
                      
                      // fieldcontextflag
                      var label_form = state.tmp.group_context.tip.label_form;
                      if (!label_form) {
                          label_form = this.strings.label_form_override;
                      }
                      
                      var label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
                      if (!label_capitalize_if_first) {
                          label_capitalize_if_first = this.strings.label_capitalize_if_first;
                      }
                      if (state.tmp.group_context.tip.condition) {
                          condition = state.tmp.group_context.tip.condition;
                          force_suppress = state.tmp.group_context.tip.force_suppress;
                          //force_suppress: false;
                      } else if (this.strings.reject) {
                          condition = {
                              test: this.strings.reject,
                              not: true
                          };
                      } else if (this.strings.require) {
                          condition = {
                              test: this.strings.require,
                              not: false
                          };
                      }
                      var context = {
                          old_term_predecessor: state.tmp.term_predecessor,
                          term_intended: false,
                          variable_attempt: false,
                          variable_success: false,
                          variable_success_parent: state.tmp.group_context.tip.variable_success,
                          output_tip: state.output.current.tip,
                          label_form: label_form,
                          label_static: state.tmp.group_context.tip.label_static,
                          label_capitalize_if_first: label_capitalize_if_first,
                          parallel_delimiter_override: this.strings.set_parallel_delimiter_override,
                          parallel_delimiter_override_on_suppress: this.strings.set_parallel_delimiter_override_on_suppress,
                          condition: condition,
                          force_suppress: force_suppress,
                          done_vars: state.tmp.group_context.tip.done_vars.slice()
                      };
                      if(this.non_parallel) {
                          var non_parallel = state.tmp.group_context.tip.non_parallel;
                          if (!non_parallel) {
                              non_parallel = {};
                          }
                          Object.assign(non_parallel, this.non_parallel);
                          context.non_parallel = non_parallel;
                      }
                      if(this.parallel_first) {
                          var parallel_first = state.tmp.group_context.tip.parallel_first;
                          if (!parallel_first) {
                              parallel_first = {};
                          }
                          Object.assign(parallel_first, this.parallel_first);
                          context.parallel_first = parallel_first;
                      }
                      if(this.parallel_last) {
                          var parallel_last = state.tmp.group_context.tip.parallel_last;
                          if (!parallel_last) {
                              parallel_last = {};
                          }
                          Object.assign(parallel_last, this.parallel_last);
                          context.parallel_last = parallel_last;
                      }
                      if (state.tmp.abbrev_trimmer && state.tmp.abbrev_trimmer.LAST_TO_FIRST && context.parallel_last) {
                          if (!context.parallel_first) {
                              context.parallel_first = {};
                          }
                          for (var varname in state.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                              if (context.parallel_last[varname]) {
                                  context.parallel_first[varname] = true;
                                  delete context.parallel_last[varname];
                              }
                          }
                      }
                      
                      /*
                      if(this.parallel_last_override) {
                          var parallel_last_override = state.tmp.group_context.tip.parallel_last_override;
                          if (!parallel_last_override) {
                              parallel_last_override = {};
                          }
                          Object.assign(parallel_last_override, this.parallel_last_override);
                          context.parallel_last_override = parallel_last_override;
                      }
                       */
                      state.tmp.group_context.push(context);
  
                      if (state.tmp.abbrev_trimmer && this.parallel_last_to_first) {
                          if (!state.tmp.abbrev_trimmer.LAST_TO_FIRST) {
                              state.tmp.abbrev_trimmer.LAST_TO_FIRST = {};
                          }
                          for (var varname in this.parallel_last_to_first) {
                              state.tmp.abbrev_trimmer.LAST_TO_FIRST[varname] = true;
                          }
                      }
                      
                      //if (!state.tmp.just_looking) {
                      //    print("       flags="+JSON.stringify(state.tmp.group_context.tip, params))
                      //}
                  }
              };
              //
              // Paranoia.  Assure that this init function is the first executed.
              execs = [];
              execs.push(func);
              this.execs = execs.concat(this.execs);
  
              // "Special handling" for nodes that contain only
              // publisher and place, with no affixes. For such
              // nodes only, parallel publisher/place pairs
              // will be parsed out and properly joined, piggybacking on
              // join parameters set on cs:citation or cs:bibliography.
              if (this.strings["has-publisher-and-publisher-place"]) {
                  // Pass variable string values to the closing
                  // tag via a global, iff they conform to expectations.
                  state.build["publisher-special"] = true;
                  if (this.strings["subgroup-delimiter"]) {
                      // Set the handling function only if name-delimiter
                      // is set on the parent cs:citation or cs:bibliography
                      // node.
                      func = function (state, Item) {
                          if (Item.publisher && Item["publisher-place"]) {
                              var publisher_lst = Item.publisher.split(/;\s*/);
                              var publisher_place_lst = Item["publisher-place"].split(/;\s*/);
                              if (publisher_lst.length > 1
                                  && publisher_lst.length === publisher_place_lst.length) {
                                  state.publisherOutput = new CSL.PublisherOutput(state, this);
                                  state.publisherOutput["publisher-list"] = publisher_lst;
                                  state.publisherOutput["publisher-place-list"] = publisher_place_lst;
                              }
                          }
                      };
                      this.execs.push(func);
                  }
              }
  
              if (this.juris) {
                  // "Special handling" for jurisdiction macros
                  // We try to instantiate these as standalone token lists.
                  // If available, the token list is executed,
                  // the result is written directly into output,
                  // and control returns here.
  
                  // So we'll have something like this:
                  // * expandMacro() in util_node.js flags juris- macros
                  //   on build. [DONE]
                  // * Those are picked up here, and
                  //   - A runtime function attempts to fetch and instantiate
                  //     the macros in separate token lists under a segment
                  //     opened for the jurisdiction. We assume that the
                  //     jurisdiction has a full set of macros. That will need
                  //     to be enforced by validation. [DONE HERE, function is TODO]
                  //   - Success or failure is marked in a runtime flag object
                  //     (in citeproc.opt). [DONE]
                  //   - After the instantiation function comes a test, for
                  //     juris- macros only, which either runs diverted code,
                  //     or proceeds as per normal through the token list. [TODO]
                  // I think that's all there is to it.
                  
                  // Code for fetching an instantiating?
  
                  var choose_start = new CSL.Token("choose", CSL.START);
                  CSL.Node.choose.build.call(choose_start, state, target);
                  
                  var if_start = new CSL.Token("if", CSL.START);
  
                  func = (function (macroName) {
                      return function (Item, item) {
                          return CSL.INIT_JURISDICTION_MACROS(state, Item, item, macroName);
                      }
                  }(this.juris));
                  
                  if_start.tests ? {} : if_start.tests = [];
                  if_start.tests.push(func);
                  if_start.test = state.fun.match.any(if_start, state, if_start.tests);
                  target.push(if_start);
                  var text_node = new CSL.Token("text", CSL.SINGLETON);
                  func = function (state, Item, item) {
                      // This will run the juris- token list.
                      var itemItem = Item;
                      if (item && item["best-jurisdiction"] && this.juris === "juris-locator") {
                          itemItem = item;
                      }
                      var next = 0;
                      if (state.juris[itemItem["best-jurisdiction"]][this.juris]) {
                          while (next < state.juris[itemItem["best-jurisdiction"]][this.juris].length) {
                              next = CSL.tokenExec.call(state, state.juris[itemItem["best-jurisdiction"]][this.juris][next], Item, item);
                          }
                      }
                  };
                  text_node.juris = this.juris;
                  text_node.execs.push(func);
                  target.push(text_node);
  
                  var if_end = new CSL.Token("if", CSL.END);
                  CSL.Node["if"].build.call(if_end, state, target);
                  var else_start = new CSL.Token("else", CSL.START);
                  CSL.Node["else"].build.call(else_start, state, target);
              }
          }
  
          if (this.tokentype === CSL.END) {
              
              // Unbundle and print publisher lists
              // Same constraints on creating the necessary function here
              // as above. The full content of the group formatting token
              // is apparently not available on the closing tag here,
              // hence the global flag on state.build.
              if (state.build["publisher-special"]) {
                  state.build["publisher-special"] = false;
                  func = function (state) {
                      if (state.publisherOutput) {
                          state.publisherOutput.render();
                          state.publisherOutput = false;
                      }
                  };
                  this.execs.push(func);
              }
              
              // quashnonfields
              func = function (state, Item, item) {
                  if (!state.tmp.group_context.tip.condition) {
                      if (state.output.current.tip.strings.suffix) {
                          state.tmp.just_did_number = false;
                      }
                  }
                  state.output.endTag();
                  if (this.realGroup) {
                      var flags = state.tmp.group_context.pop();
                      if (flags.parallel_delimiter_override) {
                          state.tmp.group_context.tip.parallel_delimiter_override = flags.parallel_delimiter_override;
                          if (!state.tmp.just_looking && state.registry.registry[Item.id].master) {
                              state.registry.registry[Item.id].parallel_delimiter_override = flags.parallel_delimiter_override;
                          }
                      }
                      if (flags.parallel_delimiter_override_on_suppress) {
                          state.tmp.group_context.tip.parallel_delimiter_override_on_suppress = flags.parallel_delimiter_override_on_suppress;
                      }
                      if (state.tmp.area === "bibliography_sort") {
                          var citationNumberIdx = flags.done_vars.indexOf("citation-number");
                          if (this.strings.sort_direction && citationNumberIdx > -1 && state.tmp.group_context.length() == 1) {
                              if (this.strings.sort_direction === CSL.DESCENDING) {
                                  state.bibliography_sort.opt.citation_number_sort_direction = CSL.DESCENDING;
                              } else {
                                  state.bibliography_sort.opt.citation_number_sort_direction = CSL.ASCENDING;
                              }
                              flags.done_vars = flags.done_vars.slice(0, citationNumberIdx).concat(flags.done_vars.slice(citationNumberIdx + 1))
                          }
                      }
                      //var params = ["condition", "variable_success", "force_suppress","term_intended", "variable_attempt"]
                      //if (!state.tmp.just_looking) {
                      //    print("POP parent="+JSON.stringify(state.tmp.group_context.tip, params))
                      //    print("    flags="+JSON.stringify(flags, params));
                      //}
                      if (flags.condition) {
                          flags.force_suppress = CSL.EVALUATE_GROUP_CONDITION(state, flags);
                      }
                      if (state.tmp.group_context.tip.condition) {
                          state.tmp.group_context.tip.force_suppress = flags.force_suppress;
                      }
                              
                      if (!flags.force_suppress && (flags.variable_success || (flags.term_intended && !flags.variable_attempt))) {
                          if (!this.isJurisLocatorLabel) {
                              state.tmp.group_context.tip.variable_success = true;
                          }
                          var blobs = state.output.current.value().blobs;
                          var pos = state.output.current.value().blobs.length - 1;
  
                          if (!state.tmp.just_looking && (flags.non_parallel || flags.parallel_last || flags.parallel_first || flags.parallel_delimiter_override || flags.parallel_delimiter_override_on_suppress)) {
                              // flags.parallel_last
                              // flags.parallel_first
  
                              // Returns true ONLY if all variables listed on this group are repeats.
                              var hasRepeat = state.parallel.checkRepeats(flags);
                              if (hasRepeat) {
                                  if (blobs) {
                                      blobs.pop();
                                  }
                              }
                              if (state.tmp.cite_index > 0 && (hasRepeat || (!flags.parallel_first && !flags.parallel_last && !flags.non_parallel))) {
                                  //state.sys.print(`${state.tmp.cite_index} ${JSON.stringify(state.tmp.suppress_repeats, null, 2)}`)
                                  var info = state.tmp.suppress_repeats[state.tmp.cite_index-1];
                                  if (hasRepeat && flags.parallel_delimiter_override_on_suppress && (info.SIBLING || info.ORPHAN)) {
                                      state.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override_on_suppress;
                                  } else if (flags.parallel_delimiter_override && info.SIBLING) {
                                      state.output.queue.slice(-1)[0].parallel_delimiter = flags.parallel_delimiter_override;
                                  }
                              }
                          }
                      } else {
                          state.tmp.term_predecessor = flags.old_term_predecessor;
                          state.tmp.group_context.tip.variable_attempt = flags.variable_attempt;
                          if (flags.force_suppress && !state.tmp.group_context.tip.condition) {
                              state.tmp.group_context.tip.variable_attempt = true;
                              state.tmp.group_context.tip.variable_success = flags.variable_success_parent;
                          }
                          if (flags.force_suppress) {
                              // 2019-04-15
                              // This is removing variables done within the group we're leaveing from global
                              // done_vars? How does that make sense?
                              // Ah. This is a FAILURE. So removing from done_vars allows it to re-render
                              // later in the cite if desired.
                              // Currently no tests fail from removing the condition, but leaving it in.
                              for (var i=0,ilen=flags.done_vars.length;i<ilen;i++) {
                                  var doneVar = flags.done_vars[i];
                                  for (var j=0,jlen=state.tmp.done_vars.length; j<jlen; j++) {
                                      if (state.tmp.done_vars[j] === doneVar) {
                                          state.tmp.done_vars = state.tmp.done_vars.slice(0, j).concat(state.tmp.done_vars.slice(j+1));
                                      }
                                  }
                              }
                          }
                          if (state.output.current.value().blobs) {
                              state.output.current.value().blobs.pop();
                          }
                      }
                  }
              };
              this.execs.push(func);
              
              if (this.juris) {
                  var else_end = new CSL.Token("else", CSL.END);
                  CSL.Node["else"].build.call(else_end, state, target);
                  var choose_end = new CSL.Token("choose", CSL.END);
                  CSL.Node.choose.build.call(choose_end, state, target);
              }
          }
  
          if (this.tokentype === CSL.END) {
              if (!this.juris) {
                  target.push(this);
              }
              if (state.build.substitute_level.value()) {
                  state.build.substitute_level.replace((state.build.substitute_level.value() - 1));
              }
              CSL.Util.substituteEnd.call(this, state, target);
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.Node["if"] = {
      build: function (state, target) {
          CSL.Conditions.TopNode.call(this, state, target);
          target.push(this);
      },
      configure: function (state, pos) {
          CSL.Conditions.Configure.call(this, state, pos);
      }
  };
  
  
  CSL.Node["conditions"] = {
      build: function (state) {
          if (this.tokentype === CSL.START) {
              state.tmp.conditions.addMatch(this.match);
          }
          if (this.tokentype === CSL.END) {
              state.tmp.conditions.matchCombine();
          }
      }
  };
  
  CSL.Node["condition"] = {
      build: function (state) {
          if (this.tokentype === CSL.SINGLETON) {
              var test = state.fun.match[this.match](this, state, this.tests);
              state.tmp.conditions.addTest(test);
          }
      }
  };
  
  CSL.Conditions = {};
  
  CSL.Conditions.TopNode = function (state) {
      var func;
      if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {
          if (this.locale) {
              state.opt.lang = this.locale;
          }
          if (!this.tests || !this.tests.length) {
              // Set up the condition compiler with our current context
              state.tmp.conditions = new CSL.Conditions.Engine(state, this);
          } else {
              // The usual.
              this.test = state.fun.match[this.match](this, state, this.tests);
          }
          if (state.build.substitute_level.value() === 0) {
              func = function(state) {
                  state.tmp.condition_counter++;
              }
              this.execs.push(func);
          }
      }
      if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {
          if (state.build.substitute_level.value() === 0) {
              func = function (state) {
                  state.tmp.condition_counter--;
                  if (state.tmp.condition_lang_counter_arr.length > 0) {
                      var counter = state.tmp.condition_lang_counter_arr.slice(-1)[0];
                      if (counter === state.tmp.condition_counter) {
                          state.opt.lang = state.tmp.condition_lang_val_arr.pop();
                          state.tmp.condition_lang_counter_arr.pop();
                      }
                  }
                  if (this.locale_default) {
                      // Open output tag with locale marker
                      state.output.current.value().old_locale = this.locale_default;
                      state.output.closeLevel("empty");
                      state.opt.lang = this.locale_default;
                  }
              };
              this.execs.push(func);
          }
          // closingjump
          func = function (state) {
              var next = this[state.tmp.jump.value()];
              return next;
          };
          this.execs.push(func);
          if (this.locale_default) {
              state.opt.lang = this.locale_default;
          }
      }
  };
  
  CSL.Conditions.Configure = function (state, pos) {
      if (this.tokentype === CSL.START) {
          // jump index on failure
          this.fail = state.configure.fail.slice(-1)[0];
          this.succeed = this.next;
          state.configure.fail[(state.configure.fail.length - 1)] = pos;
      } else if (this.tokentype === CSL.SINGLETON) {
          // jump index on failure
          this.fail = this.next;
          this.succeed = state.configure.succeed.slice(-1)[0];
          state.configure.fail[(state.configure.fail.length - 1)] = pos;
      } else {
          // jump index on success
          this.succeed = state.configure.succeed.slice(-1)[0];
          this.fail = this.next;
      }
  };
  
  CSL.Conditions.Engine = function (state, token) {
      this.token = token;
      this.state = state;
  };
  
  CSL.Conditions.Engine.prototype.addTest = function (test) {
      this.token.tests ? {} : this.token.tests = [];
      this.token.tests.push(test);
  };
  
  CSL.Conditions.Engine.prototype.addMatch = function (match) {
      this.token.match = match;
  };
  
  CSL.Conditions.Engine.prototype.matchCombine = function () {
      this.token.test = this.state.fun.match[this.token.match](this.token, this.state, this.token.tests);
  };
  
  /*global CSL: true */
  
  CSL.Node.info = {
      build: function (state) {
          if (this.tokentype === CSL.START) {
              state.build.skip = "info";
          } else {
              state.build.skip = false;
          }
      }
  };
  
  
  /*global CSL: true */
  
  CSL.Node.institution = {
      build: function (state, target) {
          if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {
  
              var func = function (state) {
                  if ("string" === typeof this.strings.delimiter) {
                      state.tmp.institution_delimiter = this.strings.delimiter;
                  } else {
                      state.tmp.institution_delimiter = state.tmp.name_delimiter;
                  }
  
                  // This is the same code for the same result as in node_name.js, 
                  // but when cs:institution comes on stream, it may produce
                  // different results.
                  if ("text" === state.inheritOpt(this, "and")) {
                      this.and_term = state.getTerm("and", "long", 0);
                  } else if ("symbol" === state.inheritOpt(this, "and")) {
                      if (state.opt.development_extensions.expect_and_symbol_form) {
                          this.and_term = state.getTerm("and", "symbol", 0);
                      } else {
                          this.and_term = "&";
                      }
                  } else if ("none" === state.inheritOpt(this, "and")) {
                      this.and_term = state.tmp.institution_delimiter;
                  }
                  if ("undefined" === typeof this.and_term && state.tmp.and_term) {
                      // this.and_term = state.getTerm("and", "long", 0);
                      this.and_term = state.tmp.and_term;
                  }
                  if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                      this.and_prefix_single = " ";
                      this.and_prefix_multiple = ", ";
                      if ("string" === typeof state.tmp.institution_delimiter) {
                          this.and_prefix_multiple = state.tmp.institution_delimiter;
                      }
                      this.and_suffix = " ";
                  } else {
                      this.and_prefix_single = "";
                      this.and_prefix_multiple = "";
                      this.and_suffix = "";
                  }
                  if (state.inheritOpt(this, "delimiter-precedes-last") === "always") {
                      this.and_prefix_single = state.tmp.institution_delimiter;
                  } else if (state.inheritOpt(this, "delimiter-precedes-last") === "never") {
                      // Slightly fragile: could test for charset here to make
                      // this more certain.
                      if (this.and_prefix_multiple) {
                          this.and_prefix_multiple = " ";
                      }
                  }
                  
                  this.and = {};
                  if ("undefined" !== typeof this.and_term) {
                      state.output.append(this.and_term, "empty", true);
                      this.and.single = state.output.pop();
                      this.and.single.strings.prefix = this.and_prefix_single;
                      this.and.single.strings.suffix = this.and_suffix;
                      state.output.append(this.and_term, "empty", true);
                      this.and.multiple = state.output.pop();
                      this.and.multiple.strings.prefix = this.and_prefix_multiple;
                      this.and.multiple.strings.suffix = this.and_suffix;
                  } else if ("undefined" !== this.strings.delimiter) {
                      this.and.single = new CSL.Blob(state.tmp.institution_delimiter);
                      this.and.single.strings.prefix = "";
                      this.and.single.strings.suffix = "";
                      this.and.multiple = new CSL.Blob(state.tmp.institution_delimiter);
                      this.and.multiple.strings.prefix = "";
                      this.and.multiple.strings.suffix = "";
                  }
                  state.nameOutput.institution = this;
              };
              this.execs.push(func);
          }
          target.push(this);
      },
      configure: function (state) {
          if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {
              state.build.has_institution = true;
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.Node["institution-part"] = {
      build: function (state, target) {
          var func;
          if ("long" === this.strings.name) {
              if (this.strings["if-short"]) {
                  func = function (state) {
                      state.nameOutput.institutionpart["long-with-short"] = this;
                  };
              } else {
                  func = function (state) {
                      state.nameOutput.institutionpart["long"] = this;
                  };
              }
          } else if ("short" === this.strings.name) {
              func = function (state) {
                  state.nameOutput.institutionpart["short"] = this;
              };
          }
          this.execs.push(func);
          target.push(this);
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.key = {
      build: function (state, target) {
          
          target = state[state.build.root + "_sort"].tokens;
  
          var func;
          var debug = false;
          var start_key = new CSL.Token("key", CSL.START);
  
          state.tmp.root = state.build.root;
  
          // The params object for build and runtime (tmp) really shouldn't have been separated.
          // Oh, well.
          start_key.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
          start_key.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
          start_key.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
  
  
          // initialize done vars
          func = function (state) {
              state.tmp.done_vars = [];
          };
          start_key.execs.push(func);
  
          // initialize output queue
          func = function (state) {
              state.output.openLevel("empty");
          };
          start_key.execs.push(func);
  
          // sort direction
          var sort_direction = [];
          if (this.strings.sort_direction === CSL.DESCENDING) {
              //print("sort: descending on "+state.tmp.area);
              sort_direction.push(1);
              sort_direction.push(-1);
          } else {
              //print("sort: ascending");
              sort_direction.push(-1);
              sort_direction.push(1);
          }
          state[state.build.area].opt.sort_directions.push(sort_direction);
  
          if (CSL.DATE_VARIABLES.indexOf(this.variables[0]) > -1) {
              state.build.date_key = true;
          }
  
          // et al init
          func = function (state) {
              state.tmp.sort_key_flag = true;
              //print("== key node function ==");
              if (state.inheritOpt(this, "et-al-min")) {
                  state.tmp["et-al-min"] = state.inheritOpt(this, "et-al-min");
              }
              if (state.inheritOpt(this, "et-al-use-first")) {
                  state.tmp["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
              }
              if ("boolean" === typeof state.inheritOpt(this, "et-al-use-last")) {
                  state.tmp["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
                  //print("  set tmp et-al-use-last: "+this.strings["et-al-use-last"])
              }
          };
          start_key.execs.push(func);
          target.push(start_key);
          
          //
          // ops to initialize the key's output structures
          if (this.variables.length) {
              var variable = this.variables[0];
              if (CSL.NAME_VARIABLES.indexOf(variable) > -1) {
                  //
                  // Start tag
                  var names_start_token = new CSL.Token("names", CSL.START);
                  names_start_token.tokentype = CSL.START;
                  names_start_token.variables = this.variables;
                  CSL.Node.names.build.call(names_start_token, state, target);
                  //
                  // Name tag
                  var name_token = new CSL.Token("name", CSL.SINGLETON);
                  name_token.tokentype = CSL.SINGLETON;
                  name_token.strings["name-as-sort-order"] = "all";
                  name_token.strings["sort-separator"] = " ";
                  name_token.strings["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
                  name_token.strings["et-al-min"] = state.inheritOpt(this, "et-al-min");
                  name_token.strings["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
                  CSL.Node.name.build.call(name_token, state, target);
                  //
                  // Institution tag
                  var institution_token = new CSL.Token("institution", CSL.SINGLETON);
                  institution_token.tokentype = CSL.SINGLETON;
                  CSL.Node.institution.build.call(institution_token, state, target);
                  //
                  // End tag
                  var names_end_token = new CSL.Token("names", CSL.END);
                  names_end_token.tokentype = CSL.END;
                  CSL.Node.names.build.call(names_end_token, state, target);
              } else {
                  var single_text = new CSL.Token("text", CSL.SINGLETON);
                  single_text.strings.sort_direction = this.strings.sort_direction;
                  single_text.dateparts = this.dateparts;
                  if (CSL.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                      // citation-number is virtualized. As a sort key it has no effect on registry
                      // sort order per se, but if set to DESCENDING, it reverses the sequence of numbers representing
                      // bib entries.
                      if (variable === "citation-number") {
                          func = function (state, Item) {
                              if (state.tmp.area === "bibliography_sort") {
                                  if (this.strings.sort_direction === CSL.DESCENDING) {
                                      state.bibliography_sort.opt.citation_number_sort_direction = CSL.DESCENDING;
                                  } else {
                                      state.bibliography_sort.opt.citation_number_sort_direction = CSL.ASCENDING;
                                  }
                              }
                              if (state.tmp.area === "citation_sort" && state.bibliography_sort.tmp.citation_number_map) {
                                  var num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[Item.id].seq];
                              } else {
                                  var num = state.registry.registry[Item.id].seq;
                              }
                              if (num) {
                                  // Code currently in util_number.js
                                  num = CSL.Util.padding("" + num);
                              }
                              state.output.append(num, this);
                          };
                      } else {
                          func = function (state, Item) {
                              var num = false;
                              num = Item[variable];
                              // XXX What if this is NaN?
                              if (num) {
                                  // Code currently in util_number.js
                                  num = CSL.Util.padding(num);
                              }
                              state.output.append(num, this);
                          };
                      }
                  } else if (variable === "citation-label") {
                      func = function (state, Item) {
                          var trigraph = state.getCitationLabel(Item);
                          state.output.append(trigraph, this);
                      };
                  } else if (CSL.DATE_VARIABLES.indexOf(variable) > -1) {
                      func = CSL.dateAsSortKey;
                      single_text.variables = this.variables;
                  } else if ("title" === variable) {
                      var abbrevfam = "title";
                      var abbrfall = false;
                      var altvar = false;
                      var transfall = true;
                      func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                  } else if ("court-class" === variable) {
                      func = function(state, Item, item) {
                          CSL.INIT_JURISDICTION_MACROS(state, Item, item, "juris-main")
                          // true is for sortKey mode
                          var cls = CSL.GET_COURT_CLASS(state, Item, true);
                          state.output.append(cls, "empty");
                      }
                  } else {
                      func = function (state, Item) {
                          var varval = Item[variable];
                          state.output.append(varval, "empty");
                      };
                  }
                  single_text.execs.push(func);
                  target.push(single_text);
              }
          } else { // macro
              //
              // if it's not a variable, it's a macro
              var token = new CSL.Token("text", CSL.SINGLETON);
              token.strings.sort_direction = this.strings.sort_direction;
              token.postponed_macro = this.postponed_macro;
              CSL.expandMacro.call(state, token, target);
          }
          //
          // ops to output the key string result to an array go
          // on the closing "key" tag before it is pushed.
          // Do not close the level.
          var end_key = new CSL.Token("key", CSL.END);
  
          // Eliminated at revision 1.0.159.
          // Was causing non-fatal error "wanted empty but found group".
          // Possible contributor to weird "PAGES" bug?
          //func = function (state, Item) {
          //state.output.closeLevel("empty");
          //};
          //end_key.execs.push(func);
          
          // store key for use
          func = function (state) {
              var keystring = state.output.string(state, state.output.queue);
              if (state.sys.normalizeUnicode) {
                  keystring = state.sys.normalizeUnicode(keystring);
              }
              keystring = keystring ? (keystring.split(" ").join(state.opt.sort_sep) + state.opt.sort_sep) : "";
              //SNIP-START
              if (debug) {
                  CSL.debug("keystring: " + keystring + " " + typeof keystring);
              }
              //print("keystring: (" + keystring + ") " + typeof keystring + " " + state.tmp.area);
              //SNIP-END
              //state.sys.print("keystring: (" + keystring + ") " + typeof keystring + " " + state.tmp.area);
              if ("" === keystring) {
                  keystring = undefined;
              }
              if ("string" !== typeof keystring) {
                  keystring = undefined;
                  //state.tmp.empty_date = false;
              }
              state[state[state.tmp.area].root + "_sort"].keys.push(keystring);
              state.tmp.value = [];
          };
          end_key.execs.push(func);
  
          // Set year-suffix key on anything that looks like a date
          if (state.build.date_key) {
              if (state.build.area === "citation" && state.build.extension === "_sort") {
                  // ascending sort always
                  state[state.build.area].opt.sort_directions.push([-1,1]);
                  func = function (state, Item) {
                      // year-suffix Key
                      var year_suffix = state.registry.registry[Item.id].disambig.year_suffix;
                      if (!year_suffix) {
                          year_suffix = 0;
                      }
                      var key = CSL.Util.padding("" + year_suffix);
                      state[state.tmp.area].keys.push(key);
                  };
                  end_key.execs.push(func);
              }
              state.build.date_key = false;
          }
  
          // reset key params
          func = function (state) {
              // state.tmp.name_quash = new Object();
  
              // XXX This should work, should be necessary, but doesn't and isn't.
              //state.output.closeLevel("empty");
  
              state.tmp["et-al-min"] = undefined;
              state.tmp["et-al-use-first"] = undefined;
              state.tmp["et-al-use-last"] = undefined;
              state.tmp.sort_key_flag = false;
          };
          end_key.execs.push(func);
          target.push(end_key);
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.label = {
      build: function (state, target) {
          
          if (this.strings.term) {
              // Non-names labels
              var func = function (state, Item, item) {
                  // Must accomplish this without touching strings
                  // shared with the calling application: "sub verbo"
                  // and "sub-verbo" must both pass, as they stand.
                  //if (item && item.label === "sub verbo") {
                  //    item.label = "sub-verbo";
                  //}
                  // This is abstracted away, because the same
                  // logic must be run in cs:names.
                  var termtxt = CSL.evaluateLabel(this, state, Item, item);
                  if (item && this.strings.term === "locator") {
  
                      item.section_form_override = this.strings.form;
  
                  }
                  if (termtxt) {
                      state.tmp.group_context.tip.term_intended = true;
                  }
                  CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, termtxt, null, this);
                  if (termtxt.indexOf("%s") === -1) {
                      // ^ Suppress output here if we have an embedded term
                      if (this.strings.capitalize_if_first) {
                          if (!state.tmp.term_predecessor && !(state.opt["class"] === "in-text" && state.tmp.area === "citation")) {
                              termtxt = CSL.Output.Formatters["capitalize-first"](state, termtxt);
                          }
                      }
                      state.output.append(termtxt, this);
                  }
              };
              this.execs.push(func);
          } else {
              if (!this.strings.form) {
                  this.strings.form = "long";
              }
              // Names labels
              // Picked up in names END
              var namevars = state.build.names_variables[state.build.names_variables.length-1];
              var namelabels = state.build.name_label[state.build.name_label.length-1];
              for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                  if (!namelabels[namevars[i]]) {
                      namelabels[namevars[i]] = {};
                  }
              }
              if (!state.build.name_flag) {
                  for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                      namelabels[namevars[i]].before = this;
                  }
              } else {
                  for (var i = 0, ilen = namevars.length; i < ilen; i += 1) {
                      namelabels[namevars[i]].after = this;
                  }
              }
          }
          target.push(this);
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.layout = {
      build: function (state, target) {
          var func, prefix_token, suffix_token, tok;
  
          function setSuffix() {
              if (state.build.area === "bibliography") {
                  suffix_token = new CSL.Token("text", CSL.SINGLETON);
                  func = function(state) {
                      // Suppress suffix on all but the last item in bibliography parallels
                      if (!state.tmp.parallel_and_not_last) {
                          var suffix;
                          if (state.tmp.cite_affixes[state.tmp.area][state.tmp.last_cite_locale]) {
                              suffix = state.tmp.cite_affixes[state.tmp.area][state.tmp.last_cite_locale].suffix;
                          } else {
                              suffix = state.bibliography.opt.layout_suffix;
                          }
  
                          // If @display is used, layout suffix is placed on the last
                          // immediate child of the layout, which we assume will be a
                          // @display group node.
                          var topblob = state.output.current.value();
                          if (state.opt.using_display) {
                              topblob.blobs[topblob.blobs.length-1].strings.suffix = suffix;
                          } else {
                              topblob.strings.suffix = suffix;
                          }
                      }
                      if (state.bibliography.opt["second-field-align"]) {
                          // closes bib_other
                          state.output.endTag("bib_other");
                      }
                  };
                  suffix_token.execs.push(func);
                  target.push(suffix_token);
              }
          }
  
          if (this.tokentype === CSL.START) {
  
              if (this.locale_raw) {
                  state.build.current_default_locale = this.locale_raw;
              } else {
                  state.build.current_default_locale = state.opt["default-locale"];
              }
  
              func = function (state, Item, item) {
                  if (state.opt.development_extensions.apply_citation_wrapper
                      && state.sys.wrapCitationEntry
                      && !state.tmp.just_looking
                      && Item.system_id 
                      && state.tmp.area === "citation") { 
  
                      var cite_entry = new CSL.Token("group", CSL.START);
                      cite_entry.decorations = [["@cite", "entry"]];
                      state.output.startTag("cite_entry", cite_entry);
                      state.output.current.value().item_id = Item.system_id;
                      if (item) {
                          state.output.current.value().locator_txt = item.locator_txt;
                          state.output.current.value().suffix_txt = item.suffix_txt;
                      }
                  }
              };
              this.execs.push(func);
          }
  
          // XXX Works, but using state.tmp looks wrong here? We're in the build layer ...
          if (this.tokentype === CSL.START && !state.tmp.cite_affixes[state.build.area]) {
              //
              // done_vars is used to prevent the repeated
              // rendering of variables
              //
              // initalize done vars
              func = function (state, Item, item) {
  
                  state.tmp.done_vars = [];
                  if (item && item["author-only"]) {
                      state.tmp.done_vars.push("locator");
                  }
                  if (state.opt.suppressedJurisdictions[Item["country"]]
                      && Item["country"]
                      && ["treaty", "patent"].indexOf(Item.type) === -1) {
                      
                      state.tmp.done_vars.push("country");
                  }
                  if (!state.tmp.just_looking && state.registry.registry[Item.id] && state.registry.registry[Item.id].parallel) {
                      state.tmp.done_vars.push("first-reference-note-number");
                  }
                  // trimmer is not available in getAmbiguousCite
                  if (!state.tmp.just_looking && state.tmp.abbrev_trimmer && Item.jurisdiction) {
                      for (var field in state.tmp.abbrev_trimmer.QUASHES[Item.jurisdiction]) {
                          state.tmp.done_vars.push(field);
                      }
                  }
  
                  //CSL.debug(" === init rendered_name === ");
                  state.tmp.rendered_name = false;
              };
              this.execs.push(func);
              // set opt delimiter
              func = function (state) {
                  // just in case
                  state.tmp.sort_key_flag = false;
              };
              this.execs.push(func);
              
              // reset nameset counter [all nodes]
              func = function (state) {
                  state.tmp.nameset_counter = 0;
              };
              this.execs.push(func);
  
              func = function (state, Item) {
                  var tok = new CSL.Token();
                  state.output.openLevel(tok);
              };
              this.execs.push(func);
              target.push(this);
  
              if (state.build.area === "citation") {
                  prefix_token = new CSL.Token("text", CSL.SINGLETON);
                  func = function (state, Item, item) {
                      if (item && item.prefix) {
                          var prefix = CSL.checkPrefixSpaceAppend(state, item.prefix);
                          if (!state.tmp.just_looking) {
                              prefix = state.output.checkNestedBrace.update(prefix);
                          }
                          var ignorePredecessor = CSL.checkIgnorePredecessor(state, prefix);
                          state.output.append(prefix, this, false, ignorePredecessor);
                      }
                  };
                  prefix_token.execs.push(func);
                  target.push(prefix_token);
              }
          }
  
          // Cast token to be used in one of the configurations below.
          var my_tok;
          if (this.locale_raw) {
              my_tok = new CSL.Token("dummy", CSL.START);
              my_tok.locale = this.locale_raw;
              my_tok.strings.delimiter = this.strings.delimiter;
              my_tok.strings.suffix = this.strings.suffix;
              if (!state.tmp.cite_affixes[state.build.area]) {
                  state.tmp.cite_affixes[state.build.area] = {};
              }
          }
  
          if (this.tokentype === CSL.START) {
              state.build.layout_flag = true;
                              
              // Only run the following once, to set up the final layout node ...
              if (!this.locale_raw) {
                  //
                  // save out decorations for flipflop processing [final node only]
                  //
                  state[state.tmp.area].opt.topdecor = [this.decorations];
                  state[(state.tmp.area + "_sort")].opt.topdecor = [this.decorations];
  
                  state[state.build.area].opt.layout_prefix = this.strings.prefix;
                  state[state.build.area].opt.layout_suffix = this.strings.suffix;
                  state[state.build.area].opt.layout_delimiter = this.strings.delimiter;
  
                  state[state.build.area].opt.layout_decorations = this.decorations;
                  
                  // Only do this if we're running conditionals
                  if (state.tmp.cite_affixes[state.build.area]) {
                      // if build_layout_locale_flag is true,
                      // write cs:else START to the token list.
                      tok = new CSL.Token("else", CSL.START);
                      CSL.Node["else"].build.call(tok, state, target);
                  }
  
              } // !this.locale_raw
  
              // Conditionals
              if (this.locale_raw) {
                  if (!state.build.layout_locale_flag) {
                      // if layout_locale_flag is untrue,
                      // write cs:choose START and cs:if START
                      // to the token list.
                      var choose_tok = new CSL.Token("choose", CSL.START);
                      CSL.Node.choose.build.call(choose_tok, state, target);
                      my_tok.name = "if";
                      CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                      CSL.Node["if"].build.call(my_tok, state, target);
                  } else {
                      // if build_layout_locale_flag is true,
                      // write cs:else-if START to the token list.
                      my_tok.name = "else-if";
                      CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                      CSL.Node["else-if"].build.call(my_tok, state, target);
                  }
                  // cite_affixes for this node
                  state.tmp.cite_affixes[state.build.area][my_tok.locale] = {};
                  state.tmp.cite_affixes[state.build.area][my_tok.locale].delimiter = this.strings.delimiter;
                  state.tmp.cite_affixes[state.build.area][my_tok.locale].suffix = this.strings.suffix;
              }
          }
          if (this.tokentype === CSL.END) {
              if (this.locale_raw) {
                  setSuffix();
                  if (!state.build.layout_locale_flag) {
                      // If layout_locale_flag is untrue, write cs:if END
                      // to the token list.
                      my_tok.name = "if";
                      my_tok.tokentype = CSL.END;
                      CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                      CSL.Node["if"].build.call(my_tok, state, target);
                      state.build.layout_locale_flag = true;
                  } else {
                      // If layout_locale_flag is true, write cs:else-if END
                      // to the token list.
                      my_tok.name = "else-if";
                      my_tok.tokentype = CSL.END;
                      CSL.Attributes["@locale-internal"].call(my_tok, state, this.locale_raw);
                      CSL.Node["else-if"].build.call(my_tok, state, target);
                  }
              }
              if (!this.locale_raw) {
                  setSuffix();
                  // Only add this if we're running conditionals
                  if (state.tmp.cite_affixes[state.build.area]) {
                      // If layout_locale_flag is true, write cs:else END
                      // and cs:choose END to the token list.
                      if (state.build.layout_locale_flag) {
                          tok = new CSL.Token("else", CSL.END);
                          CSL.Node["else"].build.call(tok, state, target);
                          tok = new CSL.Token("choose", CSL.END);
                          CSL.Node.choose.build.call(tok, state, target);
                      }
                  }
                  state.build_layout_locale_flag = true;
                  if (state.build.area === "citation") {
                      suffix_token = new CSL.Token("text", CSL.SINGLETON);
                      func = function (state, Item, item) {
                          var sp;
                          if (item && item.suffix) {
                              var suffix = CSL.checkSuffixSpacePrepend(state, item.suffix);
                              if (!state.tmp.just_looking) {
                                  suffix = state.output.checkNestedBrace.update(suffix);
                              }
                              state.output.append((suffix), this);
                          }
                      };
                      suffix_token.execs.push(func);
                      target.push(suffix_token);
                  }
  
                  // Closes wrapper token
                  func = function (state) {
                      state.output.closeLevel();
                  };
                  this.execs.push(func);
                  func = function (state, Item) {
                      if (state.opt.development_extensions.apply_citation_wrapper
                          && state.sys.wrapCitationEntry
                          && !state.tmp.just_looking
                          && Item.system_id 
                          && state.tmp.area === "citation") { 
                          
                          state.output.endTag(); // closes citation link wrapper
                      }
                  };
                  this.execs.push(func);
                  target.push(this);
                  state.build.layout_flag = false;
                  state.build.layout_locale_flag = false;
              } // !this.layout_raw
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.macro = {
      build: function () {}
  };
  
  /*global CSL: true */
  
  CSL.Node.alternative = {
      build: function (state, target) {
          if (this.tokentype === CSL.START) {
  
              var choose_tok = new CSL.Token("choose", CSL.START);
              CSL.Node["choose"].build.call(choose_tok, state, target);
  
              var if_tok = new CSL.Token("if", CSL.START);
              CSL.Attributes["@alternative-node-internal"].call(if_tok, state);
              CSL.Node["if"].build.call(if_tok, state, target);
  
              var func = function(state, Item) {
  
                  state.tmp.oldItem = Item;
                  state.tmp.oldLang = state.opt.lang;
                  state.tmp.abort_alternative = true;
  
                  if (Item["language-name"] && Item["language-name-original"]) {
  
                      var newItem = JSON.parse(JSON.stringify(Item));
  
                      newItem.language = newItem["language-name"];
                      var langspec = CSL.localeResolve(newItem.language, state.opt["default-locale"][0]);
  
                      if (state.opt.multi_layout) {
                          for (var i in state.opt.multi_layout) {
                              var locale_list = state.opt.multi_layout[i];
                              var gotlang = false;
                              for (var j in locale_list) {
                                  var tryspec = locale_list[j];
                                  if (langspec.best === tryspec.best || langspec.base === tryspec.base || langspec.bare === tryspec.bare) {
                                      gotlang = locale_list[0].best;
                                      break;
                                  }
                              }
                              if (!gotlang) {
                                  gotlang = state.opt["default-locale"][0];
                              }
                              state.opt.lang = gotlang;
                          }
                      }
  
                      for (var key in newItem) {
                          if (["id", "type", "language", "multi"].indexOf(key) === -1 && key.slice(0, 4) !== "alt-") {
                              if (newItem.multi && newItem.multi._keys[key]) {
                                  var deleteme = true;
                                  for (var lang in newItem.multi._keys[key]) {
                                      if (langspec.bare === lang.replace(/^([a-zA-Z]+).*/, "$1")) {
                                          deleteme = false;
                                          break;
                                      }
                                  }
                                  if (deleteme) {
                                      delete newItem[key];
                                  }
                              } else {
                                  delete newItem[key];
                              }
                          }
                      }
                      for (var key in newItem) {
                          if (key.slice(0, 4) === "alt-") {
                              newItem[key.slice(4)] = newItem[key];
                              state.tmp.abort_alternative = false;
                          } else {
                              if (newItem.multi && newItem.multi._keys) {
                                  if (!newItem["alt-" + key] && newItem.multi._keys[key]) {
                                      if (newItem.multi._keys[key][langspec.best]) {
                                          newItem[key] = newItem.multi._keys[key][langspec.best];
                                          state.tmp.abort_alternative = false;
                                      } else if (newItem.multi._keys[key][langspec.base]) {
                                          newItem[key] = newItem.multi._keys[key][langspec.base];
                                          state.tmp.abort_alternative = false;
                                      } else if (newItem.multi._keys[key][langspec.bare]) {
                                          newItem[key] = newItem.multi._keys[key][langspec.bare];
                                          state.tmp.abort_alternative = false;
                                      }
                                  }
                              }
                          }
                      }
                  }
  
                  state.output.openLevel(this);
                  state.registry.refhash[Item.id] = newItem;
                  state.nameOutput = new CSL.NameOutput(state, newItem);
              };
              this.execs.push(func);
              target.push(this);
  
              var choose_tok = new CSL.Token("choose", CSL.START);
              CSL.Node["choose"].build.call(choose_tok, state, target);
  
              var if_tok = new CSL.Token("if", CSL.START);
              CSL.Attributes["@alternative-node-internal"].call(if_tok, state);
              var func = function(state) {
                  state.tmp.abort_alternative = true;
              }
              if_tok.execs.push(func);
              CSL.Node["if"].build.call(if_tok, state, target);
  
          } else if (this.tokentype === CSL.END) {
  
              var if_tok = new CSL.Token("if", CSL.END);
              CSL.Node["if"].build.call(if_tok, state, target);
  
              var choose_tok = new CSL.Token("choose", CSL.END);
              CSL.Node["choose"].build.call(choose_tok, state, target);
  
              var func = function(state, Item) {
                  state.output.closeLevel();
                  state.registry.refhash[Item.id] = state.tmp.oldItem;
                  state.opt.lang = state.tmp.oldLang;
                  state.nameOutput = new CSL.NameOutput(state, state.tmp.oldItem);
                  state.tmp.abort_alternative = false;
              };
              this.execs.push(func);
              target.push(this);
  
              var if_tok = new CSL.Token("if", CSL.END);
              CSL.Node["if"].build.call(if_tok, state, target);
  
              var choose_tok = new CSL.Token("choose", CSL.END);
              CSL.Node["choose"].build.call(choose_tok, state, target);
  
          }
      }
  };
  
  CSL.Node["alternative-text"] = {
      build: function (state, target) {
          if (this.tokentype === CSL.SINGLETON) {
              // do stuff
              var func = function(state, Item) {
                  var Item = state.refetchItem(Item.id);
                  CSL.getCite.call(state, Item);
              };
              this.execs.push(func);
          }
          target.push(this);
      }
  };
  
  
  
  /*global CSL: true */
  
  CSL.NameOutput = function(state, Item, item) {
      this.debug = false;
      //SNIP-START
      if (this.debug) {
          print("(1)");
      }
      //SNIP-END
      this.state = state;
      this.Item = Item;
      this.item = item;
      this.nameset_base = 0;
      this.etal_spec = {};
      this._first_creator_variable = false;
      this._please_chop = false;
  };
  
  CSL.NameOutput.prototype.init = function (names) {
      this.requireMatch = names.requireMatch;
      if (this.state.tmp.term_predecessor) {
          this.state.tmp.subsequent_author_substitute_ok = false;
      }
      if (this.nameset_offset) {
          this.nameset_base = this.nameset_base + this.nameset_offset;
      }
      this.nameset_offset = 0;
      this.names = names;
      this.variables = names.variables;
  
      this.state.tmp.value = [];
      this.state.tmp.rendered_name = [];
      this.state.tmp.label_blob = false;
      this.state.tmp.etal_node = false;
      this.state.tmp.etal_term = false;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
              this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
          }
      }
      this["et-al"] = undefined;
      // REMOVE THIS
      this["with"] = undefined;
  
      this.name = undefined;
      // long, long-with-short, short
      this.institutionpart = {};
      // family, given
      //this.namepart = {};
      // before, after
      //this.label = {};
  
      this.state.tmp.group_context.tip.variable_attempt = true;
  
      this.labelVariable = this.variables[0];
  
      if (!this.state.tmp.value.length) {
          return;
      }
  
      // Abort and proceed to the next substitution if a match is required,
      // two variables are called, and they do not match.
      var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
      if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          //this.state.tmp.group_context.mystack[this.state.tmp.group_context.mystack.length-1].variable_success = false;
          for (var i in this.variables) {
              var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
              if (idx > -1) {
                  this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i+1));
              }
          }
          this.state.tmp.common_term_match_fail = true;
          this.variables = [];
      }
  };
  
  
  CSL.NameOutput.prototype.reinit = function (names, labelVariable) {
      this.requireMatch = names.requireMatch;
      this.labelVariable = labelVariable;
  
      if (this.state.tmp.can_substitute.value()) {
          this.nameset_offset = 0;
          // What-all should be carried across from the subsidiary
          // names node, and on what conditions? For each attribute,
          // and decoration, is it an override, or is it additive?
          this.variables = names.variables;
          
          // Not sure why this is necessary. Guards against a memory leak perhaps?
          var oldval = this.state.tmp.value.slice();
          this.state.tmp.value = [];
  
          for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
              if (this.Item[this.variables[i]] && this.Item[this.variables[i]].length) {
                  this.state.tmp.value = this.state.tmp.value.concat(this.Item[this.variables[i]]);
              }
          }
          if (this.state.tmp.value.length) {
              this.state.tmp.can_substitute.replace(false, CSL.LITERAL);
          }
  
          this.state.tmp.value = oldval;
  
      }
      // Abort and proceed to the next substitution if a match is required,
      // two variables are called, and they do not match.
      var checkCommonTerm = this.checkCommonAuthor(this.requireMatch);
      if (checkCommonTerm) {
          this.state.tmp.can_substitute.pop();
          this.state.tmp.can_substitute.push(true);
          for (var i in this.variables) {
              var idx = this.state.tmp.done_vars.indexOf(this.variables[i]);
              if (idx > -1) {
                  this.state.tmp.done_vars = this.state.tmp.done_vars.slice(0, idx).concat(this.state.tmp.done_vars.slice(i+1));
              }
          }
          this.variables = [];
      }
  };
  
  CSL.NameOutput.prototype.outputNames = function () {
      var i, ilen;
      var variables = this.variables;
      if (this.institution.and) {
          if (!this.institution.and.single.blobs || !this.institution.and.single.blobs.length) {
              this.institution.and.single.blobs = this.name.and.single.blobs;
          }
          if (!this.institution.and.multiple.blobs || !this.institution.and.multiple.blobs.length) {
              this.institution.and.multiple.blobs = this.name.and.multiple.blobs;
          }
      }
  
      this.variable_offset = {};
      if (this.family) {
          this.family_decor = CSL.Util.cloneToken(this.family);
          this.family_decor.strings.prefix = "";
          this.family_decor.strings.suffix = "";
          // Sets text-case value (text-case="title" is suppressed for items
          // non-English with non-English value in Item.language)
          for (i = 0, ilen = this.family.execs.length; i < ilen; i += 1) {
              this.family.execs[i].call(this.family_decor, this.state, this.Item);
          }
      } else {
          this.family_decor = false;
      }
  
      if (this.given) {
          this.given_decor = CSL.Util.cloneToken(this.given);
          this.given_decor.strings.prefix = "";
          this.given_decor.strings.suffix = "";
          // Sets text-case value (text-case="title" is suppressed for items
          // non-English with non-English value in Item.language)
          for (i = 0, ilen = this.given.execs.length; i < ilen; i += 1) {
              this.given.execs[i].call(this.given_decor, this.state, this.Item);
          }
      } else {
          this.given_decor = false;
      }
  
      //SNIP-START
      if (this.debug) {
          print("(2)");
      }
      //SNIP-END
      // util_names_etalconfig.js
      this.getEtAlConfig();
      //SNIP-START
      if (this.debug) {
          print("(3)");
      }
      //SNIP-END
      // util_names_divide.js
      this.divideAndTransliterateNames();
      //SNIP-START
      if (this.debug) {
          print("(4)");
      }
      //SNIP-END
      // util_names_truncate.js
  
      this.truncatePersonalNameLists();
      //SNIP-START
      if (this.debug) {
          print("(5)");
      }
      //SNIP-END
  
      //SNIP-START
      if (this.debug) {
          print("(6)");
      }
      //SNIP-END
      // util_names_disambig.js
      this.disambigNames();
  
      // util_names_constraints.js
      this.constrainNames();
      //SNIP-START
      if (this.debug) {
          print("(7)");
      }
      //SNIP-END
      // form="count"
      if (this.name.strings.form === "count") {
          if (this.state.tmp.extension || this.names_count != 0) {
              this.state.output.append(this.names_count, "empty");
              this.state.tmp.group_context.tip.variable_success = true;
          }
          return;
      }
  
      //SNIP-START
      if (this.debug) {
          print("(8)");
      }
      //SNIP-END
      this.setEtAlParameters();
      //SNIP-START
      if (this.debug) {
          print("(9)");
      }
      //SNIP-END
      this.setCommonTerm(this.requireMatch);
      //SNIP-START
      if (this.debug) {
          print("(10)");
      }
      //SNIP-END
      this.renderAllNames();
      //SNIP-START
      if (this.debug) {
          print("(11)");
      }
      //SNIP-END
      var blob_list = [];
      for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          var institution_sets = [];
          var institutions = false;
          var varblob = null;
          if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
              varblob = this._join([this.freeters[v]], "");
          } else {
              //SNIP-START
              if (this.debug) {
                  print("(11a)");
              }
              //SNIP-END
              for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
                  institution_sets.push(this.joinPersonsAndInstitutions([this.persons[v][j], this.institutions[v][j]]));
              }
              //SNIP-START
              if (this.debug) {
                  print("(11b)");
              }
              //SNIP-END
              if (this.institutions[v].length) {
                  var pos = this.nameset_base + this.variable_offset[v];
                  if (this.freeters[v].length) {
                      pos += 1;
                  }
                  institutions = this.joinInstitutionSets(institution_sets, pos);
              }
              //SNIP-START
              if (this.debug) {
                  print("(11c)");
              }
              //SNIP-END
              var varblob = this.joinFreetersAndInstitutionSets([this.freeters[v], institutions]);
              //SNIP-START
              if (this.debug) {
                  print("(11d)");
              }
              //SNIP-END
          }
          if (varblob) {
              // Apply labels, if any
              if (!this.state.tmp.extension) {
                  varblob = this._applyLabels(varblob, v);
              }
              blob_list.push(varblob);
          }
          //SNIP-START
          if (this.debug) {
              print("(11e)");
          }
          //SNIP-END
          if (this.common_term) {
              break;
          }
      }
      //SNIP-START
      if (this.debug) {
          print("(12)");
      }
      //SNIP-END
      this.state.output.openLevel("empty");
      this.state.output.current.value().strings.delimiter = this.state.inheritOpt(this.names, "delimiter", "names-delimiter");
      //SNIP-START
      if (this.debug) {
          print("(13)");
      }
      //SNIP-END
      for (i = 0, ilen = blob_list.length; i < ilen; i += 1) {
          // notSerious
          this.state.output.append(blob_list[i], "literal", true);
      }
      if (!this.state.tmp.just_looking && blob_list.length > 0) {
          this.state.tmp.probably_rendered_something = true;
      }
      //SNIP-START
      if (this.debug) {
          print("(14)");
      }
      //SNIP-END
      this.state.output.closeLevel("empty");
      //SNIP-START
      if (this.debug) {
          print("(15)");
      }
      //SNIP-END
      var blob = this.state.output.pop();
      this.state.tmp.name_node.top = blob;
      //SNIP-START
      if (this.debug) {
          print("(16)");
      }
      //SNIP-END
  
      // Append will drop the names on the floor here if suppress-me is
      // set on element_trace.
      // Need to rescue the value for collapse comparison.
      var namesToken = CSL.Util.cloneToken(this.names);
      if (this.state.tmp.group_context.tip.condition) {
          CSL.UPDATE_GROUP_CONTEXT_CONDITION(this.state, this.names.strings.prefix, null, this.names);
      }
      this.state.output.append(blob, namesToken);
      if (this.state.tmp.term_predecessor_name) {
          this.state.tmp.term_predecessor = true;
      }
      //SNIP-START
      if (this.debug) {
          print("(17)");
      }
      //SNIP-END
      // Also used in CSL.Util.substituteEnd (which could do with
      // some cleanup at this writing).
      //SNIP-START
      if (this.debug) {
          print("(18)");
      }
      //SNIP-END
      if (variables[0] !== "authority") {
          // Just grab the string values in the name
          var name_node_string = [];
          var nameobjs = this.Item[variables[0]];
          if (nameobjs) {
              for (var i = 0, ilen = nameobjs.length; i < ilen; i += 1) {
                  var substring = CSL.Util.Names.getRawName(nameobjs[i]);
                  if (substring) {
                      name_node_string.push(substring);
                  }
              }
          }
          name_node_string = name_node_string.join(", ");
          if (name_node_string) {
              this.state.tmp.name_node.string = name_node_string;
          }
      }
      // for classic support
      // This may be more convoluted than it needs to be. Or maybe not.
      //
      // Check for classic abbreviation
      //
      // If found, then (1) suppress title rendering, (2) replace the node
      // with the abbreviation output [and (3) do not run this._collapseAuthor() ?]
      if (this.state.tmp.name_node.string && !this.state.tmp.first_name_string) {
          this.state.tmp.first_name_string = this.state.tmp.name_node.string;
      }
      if ("classic" === this.Item.type) {
          if (this.state.tmp.first_name_string) {
              var author_title = [];
              author_title.push(this.state.tmp.first_name_string);
              if (this.Item.title) {
                  author_title.push(this.Item.title);
              }
              author_title = author_title.join(", ");
              if (author_title && this.state.sys.getAbbreviation) {
                  if (this.state.sys.normalizeAbbrevsKey) {
                      author_title = this.state.sys.normalizeAbbrevsKey("classic", author_title);
                  }
                  this.state.transform.loadAbbreviation("default", "classic", author_title, this.Item.language);
                  if (this.state.transform.abbrevs["default"].classic[author_title]) {
                      this.state.tmp.done_vars.push("title");
                      this.state.output.append(this.state.transform.abbrevs["default"].classic[author_title], "empty", true);
                      blob = this.state.output.pop();
              this.state.tmp.name_node.top.blobs.pop();
                      this.state.tmp.name_node.top.blobs.push(blob);
                  }
              }
          }
      }
  
      // Let's try something clever here.
      this._collapseAuthor();
  
      // For name_SubstituteOnNamesSpanNamesSpanFail
      this.variables = [];
      
      // Reset stop-last after rendering
      this.state.tmp.authority_stop_last = 0;
  
      //SNIP-START
      if (this.debug) {
          print("(19)");
      }
      //SNIP-END
  };
  
  CSL.NameOutput.prototype._applyLabels = function (blob, v) {
      var txt;
      if (!this.label || !this.label[this.labelVariable]) {
          return blob;
      }
      var plural = 0;
      var num = this.freeters_count[v] + this.institutions_count[v];
      if (num > 1) {
          plural = 1;
      } else {
          for (var i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
              num += this.persons_count[v][i];
          }
          if (num > 1) {
              plural = 1;
          }
      }
      // Some code duplication here, should be factored out.
      if (this.label[this.labelVariable].before) {
          if ("number" === typeof this.label[this.labelVariable].before.strings.plural) {
              plural = this.label[this.labelVariable].before.strings.plural;
          }
          txt = this._buildLabel(v, plural, "before", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(txt, this.label[this.labelVariable].before, true);
          this.state.output.append(blob, "literal", true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
      } else if (this.label[this.labelVariable].after) {
          if ("number" === typeof this.label[this.labelVariable].after.strings.plural) {
              plural = this.label[this.labelVariable].after.strings.plural;
          }
          txt = this._buildLabel(v, plural, "after", this.labelVariable);
          this.state.output.openLevel("empty");
          this.state.output.append(blob, "literal", true);
          this.state.output.append(txt, this.label[this.labelVariable].after, true);
          this.state.tmp.label_blob = this.state.output.pop();
          this.state.output.append(this.state.tmp.label_blob,"literal",true);
          this.state.output.closeLevel("empty");
          blob = this.state.output.pop();
      }
      return blob;
  };
  
  CSL.NameOutput.prototype._buildLabel = function (term, plural, position, v) {
      if (this.common_term) {
          term = this.common_term;
      }
  
      var ret = false;
      var node = this.label[v][position];
      if (node) {
          ret = CSL.castLabel(this.state, node, term, plural, CSL.TOLERANT);
      }
      return ret;
  };
  
  
  CSL.NameOutput.prototype._collapseAuthor = function () {
      var myqueue, mystr, oldchars;
      // collapse can be undefined, an array of length zero, and probably
      // other things ... ugh.
      if (this.state.tmp.name_node.top.blobs.length === 0) {
          return;
      }
      if (this.nameset_base === 0 && this.Item[this.variables[0]] && !this._first_creator_variable) {
          this._first_creator_variable = this.variables[0];
      }
      if ((this.state[this.state.tmp.area].opt.collapse
              && this.state[this.state.tmp.area].opt.collapse.length)
          || (this.state[this.state.tmp.area].opt.cite_group_delimiter 
              && this.state[this.state.tmp.area].opt.cite_group_delimiter.length)) {
  
          if (this.state.tmp.authorstring_request) {
              // Avoid running this on every call to getAmbiguousCite()?
              mystr = "";
              myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
              oldchars = this.state.tmp.offset_characters;
              if (myqueue) {
                  mystr = this.state.output.string(this.state, myqueue, false);
              }
              // Avoid side-effects on character counting: we're only interested
              // in the final rendering.
              this.state.tmp.offset_characters = oldchars;
              this.state.registry.authorstrings[this.Item.id] = mystr;
          } else if (!this.state.tmp.just_looking
                     && !this.state.tmp.suppress_decorations && ((this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length) || this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter)) {
              // XX1 print("RENDER: "+this.Item.id);
              mystr = "";
              myqueue = this.state.tmp.name_node.top.blobs.slice(-1)[0].blobs;
              oldchars = this.state.tmp.offset_characters;
              if (myqueue) {
                  mystr = this.state.output.string(this.state, myqueue, false);
              }
              if (mystr === this.state.tmp.last_primary_names_string) {
                  if (this.item["suppress-author"] || (this.state[this.state.tmp.area].opt.collapse && this.state[this.state.tmp.area].opt.collapse.length)) {
                      // XX1 print("    CUT!");
                      this.state.tmp.name_node.top.blobs.pop();
                      this.state.tmp.name_node.children = [];
                      // If popped, avoid side-effects on character counting: we're only interested
                      // in things that actually render.
                      this.state.tmp.offset_characters = oldchars;
                  }
                  // Needed
                  if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                      this.state.tmp.use_cite_group_delimiter = true;
                  }
              } else {
                  // XX1 print("remembering: "+mystr);
                  this.state.tmp.last_primary_names_string = mystr;
                  // XXXXX A little more precision would be nice.
                  // This will clobber variable="author editor" as well as variable="author".
  
                  if (this.variables.indexOf(this._first_creator_variable) > -1 && this.item && this.item["suppress-author"] && this.Item.type !== "legal_case") {
                      this.state.tmp.name_node.top.blobs.pop();
                      this.state.tmp.name_node.children = [];
                      // If popped, avoid side-effects on character counting: we're only interested
                      // in things that actually render.
                      this.state.tmp.offset_characters = oldchars;
  
                      // A wild guess, but will usually be correct
                      this.state.tmp.term_predecessor = false;
                  }
                  // Arcane and probably unnecessarily complicated?
                  this.state.tmp.have_collapsed = false;
                  // Needed
                  if (this.state[this.state.tmp.area].opt.cite_group_delimiter && this.state[this.state.tmp.area].opt.cite_group_delimiter) {
                      this.state.tmp.use_cite_group_delimiter = false;
                  }
              }
          }
      }
  };
  
  /*
  CSL.NameOutput.prototype.suppressNames = function() {
      suppress_condition = suppress_min && display_names.length >= suppress_min;
      if (suppress_condition) {
          continue;
      }
  }
  */
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.isPerson = function (value) {
      if (value.literal
          || (!value.given && value.family && value.isInstitution)) {
          
          return false;
      } else {
          return true;
      }
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.truncatePersonalNameLists = function () {
      var v, i, ilen, j, jlen, chopvar, values;
      // XXX Before truncation, make a note of the original number
      // of names, for use in et-al evaluation.
      this.freeters_count = {};
      this.persons_count = {};
      this.institutions_count = {};
      // By key is okay here, as we don't care about sequence.
      for (v in this.freeters) {
          if (this.freeters.hasOwnProperty(v)) {
              this.freeters_count[v] = this.freeters[v].length;
              this.freeters[v] = this._truncateNameList(this.freeters, v);
          }
      }
  
      for (v in this.persons) {
          if (this.persons.hasOwnProperty(v)) {
              this.institutions_count[v] = this.institutions[v].length;
              this._truncateNameList(this.institutions, v);
              this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
              this.persons_count[v] = [];
              for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                  this.persons_count[v][j] = this.persons[v][j].length;
                  this.persons[v][j] = this._truncateNameList(this.persons, v, j);
              }
          }
      }
      if (this.state.opt.development_extensions.etal_min_etal_usefirst_hack
          && this.etal_min === 1 && this.etal_use_first === 1 
          && !(this.state.tmp.extension
               || this.state.tmp.just_looking)) {
          chopvar = v;
      } else {
          chopvar = false;
      }
      if (chopvar || this._please_chop) {
          for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
              v = this.variables[i];
              if (this.freeters[v].length) {
                  if (this._please_chop === v) {
                      this.freeters[v] = this.freeters[v].slice(1);
                      this.freeters_count[v] += -1;
                      this._please_chop = false;
                  } else if (chopvar && !this._please_chop) {
                      this.freeters[v] = this.freeters[v].slice(0, 1);
                      this.freeters_count[v] = 1;
                      this.institutions[v] = [];
                      this.persons[v] = [];
                      this._please_chop = chopvar;
                  }
              }
              for (var j=0,jlen = this.persons[v].length;j<jlen;j++) {
                  if (this.persons[v][j].length) {
                      if (this._please_chop === v) {
                          this.persons[v][j] = this.persons[v][j].slice(1);
                          this.persons_count[v][j] += -1;
                          this._please_chop = false;
                          break;
                      } else if (chopvar && !this._please_chop) {
                          this.freeters[v] = this.persons[v][j].slice(0, 1);
                          this.freeters_count[v] = 1;
                          this.institutions[v] = [];
                          this.persons[v] = [];
                          values = [];
                          this._please_chop = chopvar;
                          break;
                      }
                  }
              }
              if (this.institutions[v].length) {
                  if (this._please_chop === v) {
                      this.institutions[v] = this.institutions[v].slice(1);
                      this.institutions_count[v] += -1;
                      this._please_chop = false;
                  } else if (chopvar && !this._please_chop) {
                      this.institutions[v] = this.institutions[v].slice(0, 1);
                      this.institutions_count[v] = 1;
                      values = [];
                      this._please_chop = chopvar;
                  }
              }
          }
      }
  
      // Transliteration and abbreviation mapping
  
      // Hmm. This could produce three lists for each nameset:
      //   - primary (transformed in place)
      //   - secondary
      //   - tertiary
      // with items that produce no result in the secondary and tertiary
      // transforms set to false. Maybe.
  
      // Actually that would be insane, so forget it.
      // What we need is to add suitable parameters to getName(), and merge
      // the single-name-level operations below into that function. Then the
      // operation can be applied in util_names_render.js, and the logic
      // becomes very similar to what we already have running in util_transform.js.
  
  /*
      for (v in this.freeters) {
          this._transformNameset(this.freeters[v]);
      }
      for (v in this.persons) {
          for (i = 0, ilen = this.persons[v].length; i < ilen; i += 1) {
              this._transformNameset(this.persons[v][i]);
          }
          this._transformNameset(this.institutions[v]);
      }
  */
  
      // Could also be factored out to a separate function for clarity.
      // ???? XXX Does this belong?
      for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          if (this.institutions[v].length) {
              this.nameset_offset += 1;
          }
          for (var j=0,jlen=this.persons[v].length;j<jlen;j++) {
              if (this.persons[v][j].length) {
                  this.nameset_offset += 1;
              }
              // this.institutions[v][i] = this._splitInstitution(this.institutions[v][i], v, i);
          }
      }
  };
  
  CSL.NameOutput.prototype._truncateNameList = function (container, variable, index) {
      var lst;
      if ("undefined" === typeof index) {
          lst = container[variable];
      } else {
          lst = container[variable][index];
      }
      if (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names 
          && lst.length > 50 
          && lst.length > (this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names + 2)) {
  
          // Preserve the last name in the list, in case we're rendering with a PI ellipsis (et-al-use-last)
          var limit = this.state[this.state[this.state.tmp.area].root].opt.max_number_of_names;
          lst = lst.slice(0, limit+1).concat(lst.slice(-1));
      }
      return lst;
  };
  
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.divideAndTransliterateNames = function () {
      var i, ilen, j, jlen;
      var Item = this.Item;
      var variables = this.variables;
      this.varnames = variables.slice();
      this.freeters = {};
      this.persons = {};
      this.institutions = {};
      for (i = 0, ilen = variables.length; i < ilen; i += 1) {
          var v = variables[i];
          this.variable_offset[v] = this.nameset_offset;
          var values = this._normalizeVariableValue(Item, v);
          if (this.name.strings["suppress-min"] && values.length >= this.name.strings["suppress-min"]) {
              values = [];
          }
          if (this.name.strings["suppress-max"] && values.length <= this.name.strings["suppress-max"]) {
              values = [];
          }
          this._getFreeters(v, values);
          this._getPersonsAndInstitutions(v, values);
          if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
              if (this.name.strings["suppress-min"] === 0) {
                  this.freeters[v] = [];
                  for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                      this.persons[v][j] = [];
                  }
              } else if (this.institution.strings["suppress-min"] === 0) {
                  this.institutions[v] = [];
                  this.freeters[v] = this.freeters[v].concat(this.persons[v]);
                  for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
                      for (var k = 0, klen = this.persons[v][j].length; k < klen; k += 1) {
                          this.freeters[v].push(this.persons[v][j][k]);
                      }
                  }
                  this.persons[v] = [];
              }
          }
      }
  };
  
  CSL.NameOutput.prototype._normalizeVariableValue = function (Item, variable) {
      var names;
      if ("string" === typeof Item[variable] || "number" === typeof Item[variable]) {
          CSL.debug("name variable \"" + variable + "\" is string or number, not array. Attempting to fix.");
          names = [{literal: Item[variable] + ""}];
      } else if (!Item[variable]) {
          names = [];
      } else if ("number" !== typeof Item[variable].length) {
          CSL.debug("name variable \"" + variable + "\" is object, not array. Attempting to fix.");
          Item[variable] = [Item[variable]];
          names = Item[variable].slice();
      } else {
          names = Item[variable].slice();
      }
      return names;
  };
  
  CSL.NameOutput.prototype._getFreeters = function (v, values) {
      this.freeters[v] = [];
      if (this.state.opt.development_extensions.spoof_institutional_affiliations) {
          for (var i=values.length-1;i>-1;i--) {
              if (this.isPerson(values[i])) {
                  var value = this._checkNickname(values.pop());
                  if (value) {
                      this.freeters[v].push(value);
                  }
              } else {
                  break;
              }
          }
      } else {
          for (var i=values.length-1;i>-1;i--) {
              var value = values.pop();
              if (this.isPerson(value)) {
                  var value = this._checkNickname(value);
              }
              this.freeters[v].push(value);
          }
      }
      this.freeters[v].reverse();
      if (this.freeters[v].length) {
          this.nameset_offset += 1;
      }
  };
  
  CSL.NameOutput.prototype._getPersonsAndInstitutions = function (v, values) {
      this.persons[v] = [];
      this.institutions[v] = [];
      if (!this.state.opt.development_extensions.spoof_institutional_affiliations) {
          return;
      }
      var persons = [];
      var has_affiliates = false;
      var first = true;
      for (var i = values.length - 1; i > -1; i += -1) {
          if (this.isPerson(values[i])) {
              var value = this._checkNickname(values[i]);
              if (value) {
                  persons.push(value);
              }
          } else {
              has_affiliates = true;
              this.institutions[v].push(values[i]);
              if (!first) {
                  persons.reverse();
                  this.persons[v].push(persons);
                  persons = [];
              }
              first = false;
          }
      }
      if (has_affiliates) {
          persons.reverse();
          this.persons[v].push(persons);
          this.persons[v].reverse();
          this.institutions[v].reverse();
      }
  };
  
  CSL.NameOutput.prototype._clearValues = function (values) {
      for (var i = values.length - 1; i > -1; i += -1) {
          values.pop();
      }
  };
  
  CSL.NameOutput.prototype._checkNickname = function (name) {
      if (["interview", "personal_communication"].indexOf(this.Item.type) > -1) {
          var author = "";
          author = CSL.Util.Names.getRawName(name);
          if (author && this.state.sys.getAbbreviation && !(this.item && this.item["suppress-author"])) {
              var normalizedKey = author;
              if (this.state.sys.normalizeAbbrevsKey) {
                  // The first argument does not have to be the exact variable name.
                  normalizedKey = this.state.sys.normalizeAbbrevsKey("author", author);
              }
              this.state.transform.loadAbbreviation("default", "nickname", normalizedKey, this.Item.language);
              // XXX Why does this have to happen here?
              var myLocalName = this.state.transform.abbrevs["default"].nickname[normalizedKey];
              if (myLocalName) {
                  if (myLocalName === "!here>>>") {
                      name = false;
                  } else {
                      name = {family:myLocalName,given:''};
                  }
              }
          }
      }
      return name;
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype._purgeEmptyBlobs = function (blobs) {
      for (var i = blobs.length - 1; i > -1; i += -1) {
          if (!blobs[i] || blobs[i].length === 0 || !blobs[i].blobs.length) {
              blobs = blobs.slice(0, i).concat(blobs.slice(i + 1));
          }
      }
      return blobs;
  };
  
  CSL.NameOutput.prototype.joinPersons = function (blobs, pos, j, tokenname) {
      var ret;
      blobs = this._purgeEmptyBlobs(blobs);
      if (!tokenname) {
          tokenname = "name";
      }
      if ("undefined" === typeof j) {
          if (this.etal_spec[pos].freeters === 1) {
             ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].freeters === 2) {
              ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
              ret = this._joinAnd(blobs);
          } else {
              ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
      } else {
          if (this.etal_spec[pos].persons[j] === 1) {
              ret = this._joinEtAl(blobs);
          } else if (this.etal_spec[pos].persons[j] === 2) {
              ret = this._joinEllipsis(blobs);
          } else if (!this.state.tmp.sort_key_flag) {
              ret = this._joinAnd(blobs);
          } else {
              ret = this._join(blobs, this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", "));
          }
      }
      return ret;
  };
  
  
  CSL.NameOutput.prototype.joinInstitutionSets = function (blobs, pos) {
      var ret;
      blobs = this._purgeEmptyBlobs(blobs);
      if (this.etal_spec[pos].institutions === 1) {
          ret = this._joinEtAl(blobs, "institution");
      } else if (this.etal_spec[pos].institutions === 2) {
          ret = this._joinEllipsis(blobs, "institution");
      } else {
          ret = this._joinAnd(blobs);
      }
      return ret;
  };
  
  
  CSL.NameOutput.prototype.joinPersonsAndInstitutions = function (blobs) {
      //
      blobs = this._purgeEmptyBlobs(blobs);
      var ret = this._join(blobs, this.state.tmp.name_delimiter);
      ret.isInstitution = true;
      return ret;
  };
  
  // LEGACY
  // This should go away eventually
  CSL.NameOutput.prototype.joinFreetersAndInstitutionSets = function (blobs) {
      // Nothing, one or two, never more
      blobs = this._purgeEmptyBlobs(blobs);
      var ret = this._join(blobs, "[never here]", this["with"].single, this["with"].multiple);
      //var ret = this._join(blobs, "");
      return ret;
  };
  
  CSL.NameOutput.prototype._getAfterInvertedName = function(blobs, delimiter, finalJoin) {
      if (finalJoin && blobs.length > 1) {
          if (this.state.inheritOpt(this.name, "delimiter-precedes-last") === "after-inverted-name") {
              var prevBlob = blobs[blobs.length - 2];
              if (prevBlob.blobs.length > 0 && prevBlob.blobs[0].isInverted) {
                  finalJoin.strings.prefix = delimiter;
              }
          }
      }
      return finalJoin;
  }
  
  CSL.NameOutput.prototype._getAndJoin = function (blobs, delimiter) {
      var finalJoin = false;
      if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
              singleOrMultiple = "multiple";
          }
          if (blobs[blobs.length - 1].isInstitution) {
              finalJoin = this.institution.and[singleOrMultiple];
          } else {
              finalJoin = this.name.and[singleOrMultiple];
          }
          // finalJoin = new CSL.Blob(finalJoin);
          finalJoin = JSON.parse(JSON.stringify(finalJoin));
          finalJoin = this._getAfterInvertedName(blobs, delimiter, finalJoin);
      }
      return finalJoin;
  };
  
  CSL.NameOutput.prototype._joinEtAl = function (blobs) {
      var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
      var blob = this._join(blobs, delimiter);
      
      // notSerious
      this.state.output.openLevel(this._getToken("name"));
      // Delimiter is applied from separately saved source in this case,
      // for discriminate application of single and multiple joins.
      this.state.output.current.value().strings.delimiter = "";
      this.state.output.append(blob, "literal", true);
      if (blobs.length > 1) {
          this.state.output.append(this["et-al"].multiple, "literal", true);
      } else if (blobs.length === 1) {
          this.state.output.append(this["et-al"].single, "literal", true);
      }
      this.state.output.closeLevel();
      return this.state.output.pop();
  };
  
  
  CSL.NameOutput.prototype._joinEllipsis = function (blobs) {
      var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
      var finalJoin = false;
      if (blobs.length > 1) {
          var singleOrMultiple = "single";
          if (blobs.length > 2) {
              singleOrMultiple = "multiple";
          }
          finalJoin = JSON.parse(JSON.stringify(this.name.ellipsis[singleOrMultiple]));
          finalJoin = this._getAfterInvertedName(blobs, delimiter , finalJoin);
          
      }
      return this._join(blobs, delimiter, finalJoin);
  };
  
  CSL.NameOutput.prototype._joinAnd = function (blobs) {
      var delimiter = this.state.inheritOpt(this.name, "delimiter", "name-delimiter", ", ");
      var finalJoin = this._getAndJoin(blobs, delimiter);
      return this._join(blobs, delimiter, finalJoin);
  };
  
  
  CSL.NameOutput.prototype._join = function (blobs, delimiter, finalJoin) {
      var i, ilen;
      if (!blobs) {
          return false;
      }
      blobs = this._purgeEmptyBlobs(blobs);
      if (!blobs.length) {
          return false;
      }
      if (blobs.length > 1) {
          if (blobs.length === 2) {
              if (!finalJoin) {
                  blobs[0].strings.suffix += delimiter;
              } else {
                  blobs = [blobs[0], finalJoin, blobs[1]];
              }
          } else {
              var offset;
              if (finalJoin) {
                  offset = 1;
              } else {
                  offset = 0;
              }
              var blob = blobs.pop();
              for (var i=0,ilen=blobs.length - offset;i<ilen;i++) {
                  blobs[i].strings.suffix += delimiter;
              }
              blobs.push(finalJoin);
              blobs.push(blob);
          }
      }
  
      //this.state.output.openLevel(this._getToken(tokenname));
      this.state.output.openLevel();
  
      //this.state.output.openLevel(this._getToken("empty"));
      // Delimiter is applied from separately saved source in this case,
      // for discriminate application of single and multiple joins.
      for (i = 0, ilen = blobs.length; i < ilen; i += 1) {
          this.state.output.append(blobs[i], false, true);
      }
      this.state.output.closeLevel();
      return this.state.output.pop();
  };
  
  
  CSL.NameOutput.prototype._getToken = function (tokenname) {
      var token = this[tokenname];
      if (tokenname === "institution") {
          var newtoken = new CSL.Token();
          // Which, hmm, is the same thing as "empty"
          // Oh, well.
          //newtoken.strings.prefix = token.prefix;
          //newtoken.strings.suffix = token.suffix;
          return newtoken;
      }
      return token;
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.checkCommonAuthor = function(requireMatch) {
      if (!requireMatch) {
          return false;
      }
      var common_term = false;
      if (this.variables.length === 2) {
          var variables = this.variables;
          var varnames = variables.slice();
          varnames.sort();
          common_term = varnames.join("");
      }
      if (!common_term) {
          return false;
      }
      var has_term = false;
      if (this.state.locale[this.state.opt.lang].terms[common_term]) {
          has_term = true;
      }
      if (!has_term) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
          return false;
      }
      var firstSet = this.Item[this.variables[0]];
      var secondSet = this.Item[this.variables[1]];
      var perfectMatch = this._compareNamesets(firstSet, secondSet);
      if (perfectMatch === true) {
          this.state.tmp.done_vars.push(this.variables[0]);
          this.state.tmp.done_vars.push(this.variables[1]);
      }
      // This may be counter-intuitive.
      // This check controls whether we will fail on the this attempt at rendering
      // and proceed with substitution. If the names match exactly (true), then
      // we do *not* want to abort and continue with substitution.
      return !perfectMatch;
  };
  
  CSL.NameOutput.prototype.setCommonTerm = function () {
      var variables = this.variables;
      var varnames = variables.slice();
      varnames.sort();
      this.common_term = varnames.join("");
      // When no varnames are on offer
      if (!this.common_term) {
          return;
      }
      var has_term = false;
      if (this.label && this.label[this.variables[0]]) {
          if (this.label[this.variables[0]].before) {
              has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].before.strings.form, 0);
          } else if (this.label[this.variables[0]].after) {
              has_term = this.state.getTerm(this.common_term, this.label[this.variables[0]].after.strings.form, 0);
          }
       }
  
      // When there is no common term
      if (!this.state.locale[this.state.opt.lang].terms[this.common_term]
          || !has_term
          || this.variables.length < 2) {
          this.common_term = false;
          return;
      }
      var freeters_offset = 0;
      for (var i = 0, ilen = this.variables.length - 1; i < ilen; i += 1) {
          var v = this.variables[i];
          var vv = this.variables[i + 1];
          if (this.freeters[v].length || this.freeters[vv].length) {
              if (this.etal_spec[v].freeters !== this.etal_spec[vv].freeters
                  || !this._compareNamesets(this.freeters[v], this.freeters[vv])) {
                  this.common_term = false;
                  return;
              }
              freeters_offset += 1;
          }
          if (this.persons[v].length !== this.persons[vv].length) {
              this.common_term = false;
              return;
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              if (this.etal_spec[v].persons[j] !== this.etal_spec[vv].persons[j]
                  || !this._compareNamesets(this.persons[v][j], this.persons[vv][j])) {
                  this.common_term = false;
                  return;
              }
          }
      }
  };
  
  CSL.NameOutput.prototype._compareNamesets = function (base_nameset, nameset) {
      if (!base_nameset || !nameset || base_nameset.length !== nameset.length) {
          return false;
      }
      for (var i = 0, ilen = nameset.length; i < ilen; i += 1) {
          for (var j = 0, jlen = CSL.NAME_PARTS.length; j < jlen; j += 1) {
              var part = CSL.NAME_PARTS[j];
              if (!base_nameset[i] || base_nameset[i][part] != nameset[i][part]) {
                  return false;
              }
          }
      }
      return true;
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.constrainNames = function () {
      // figure out how many names to include, in light of the disambig params
      //
      this.names_count = 0;
      //var pos = 0;
      var pos;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          // Constrain independent authors here
          if (this.freeters[v].length) {
              this.state.tmp.names_max.push(this.freeters[v].length, "literal");
              this._imposeNameConstraints(this.freeters, this.freeters_count, v, pos);
              this.names_count += this.freeters[v].length;
          }
  
          // Constrain institutions here
          if (this.institutions[v].length) {
              this.state.tmp.names_max.push(this.institutions[v].length, "literal");
              this._imposeNameConstraints(this.institutions, this.institutions_count, v, pos);
              this.persons[v] = this.persons[v].slice(0, this.institutions[v].length);
              this.names_count += this.institutions[v].length;
          }
  
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              // Constrain affiliated authors here
              if (this.persons[v][j].length) {
                  this.state.tmp.names_max.push(this.persons[v][j].length, "literal");
                  this._imposeNameConstraints(this.persons[v], this.persons_count[v], j, pos);
                  this.names_count += this.persons[v][j].length;
              }
          }
      }
  };
  
  CSL.NameOutput.prototype._imposeNameConstraints = function (lst, count, key, pos) {
      // display_names starts as the original length of this list of names.
      var display_names = lst[key];
      var discretionary_names_length = this.state.tmp["et-al-min"];
      
      // Mappings, to allow existing disambiguation machinery to
      // remain untouched.
      if (this.state.tmp.suppress_decorations) {
          if (this.state.tmp.disambig_request && this.state.tmp.disambig_request.names[pos]) {
              // Oh. Trouble.
              // state.tmp.nameset_counter is the number of the nameset
              // in the disambiguation try-sequence. Ouch.
              discretionary_names_length = this.state.tmp.disambig_request.names[pos];
          } else if (count[key] >= this.etal_min) {
              discretionary_names_length = this.etal_use_first;
          }
      } else {
          if (this.state.tmp.disambig_request 
              && this.state.tmp.disambig_request.names[pos] > this.etal_use_first) {
  
              if (count[key] < this.etal_min) {
                  discretionary_names_length = count[key];
              } else {
                  discretionary_names_length = this.state.tmp.disambig_request.names[pos];
              }
          } else if (count[key] >= this.etal_min) {
              //discretionary_names_length = this.state.tmp["et-al-use-first"];
              discretionary_names_length = this.etal_use_first;
          }
          // XXXX: This is a workaround. Under some conditions.
          // Where namesets disambiguate on one of the two names
          // dropped here, it is possible for more than one
          // in-text citation to be close (and indistinguishable)
          // matches to a single bibliography entry.
          //
          // 
          if (this.etal_use_last && discretionary_names_length > (this.etal_min - 2)) {
              discretionary_names_length = this.etal_min - 2;
          }
      }
      var sane = this.etal_min >= this.etal_use_first;
      var overlength = count[key] > discretionary_names_length;
      // This var is used to control contextual join, and
      // lies about the number of names when forceEtAl is true,
      // unless normalized.
      if (discretionary_names_length > count[key]) {
  
          // Use actual truncated list length, to avoid overrun.
          discretionary_names_length = display_names.length;
      }
      // forceEtAl is relevant when the author list is
      // truncated to eliminate clutter.
      if (sane && overlength) {
          if (this.etal_use_last) {
              lst[key] = display_names.slice(0, discretionary_names_length).concat(display_names.slice(-1));
          } else {
              lst[key] = display_names.slice(0, discretionary_names_length);
          }
      }
      this.state.tmp.disambig_settings.names[pos] = lst[key].length;
      this.state.disambiguate.padBase(this.state.tmp.disambig_settings);
      
  
      // ???
      //if (!this.state.tmp.disambig_request) {
      //    this.state.tmp.disambig_settings.givens[pos] = [];
      //}
  };
  
  // Disambiguate names (the number of names is controlled externally, by successive
  // runs of the processor).
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.disambigNames = function () {
      var pos;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
              this._runDisambigNames(this.freeters[v], pos);
          }
          // Is this even necessary???
          if (this.institutions[v].length) {
              if ("undefined" === typeof this.state.tmp.disambig_settings.givens[pos]) {
                  this.state.tmp.disambig_settings.givens[pos] = [];
              }
              for (var j=0,jlen=this.institutions[v].length;j<jlen;j+=1) {
                  if ("undefined" === typeof this.state.tmp.disambig_settings.givens[pos][j]) {
                      this.state.tmp.disambig_settings.givens[pos].push(2);
                  }
              }
          }
          for (var j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              if (this.persons[v][j].length) {
                  this._runDisambigNames(this.persons[v][j], pos);
              }
          }
      }
  };
  
  CSL.NameOutput.prototype._runDisambigNames = function (lst, pos) {
      var chk, myform, myinitials, param, i, ilen, paramx;
      //if (this.state.tmp.root === "bibliography") {
      //    return;
      //}
      for (i = 0, ilen = lst.length; i < ilen; i += 1) {
          //
          // register the name in the global names disambiguation
          // registry
  
          if (!lst[i].given && !lst[i].family) {
              continue;
          }
  
          myinitials = this.state.inheritOpt(this.name, "initialize-with");
          this.state.registry.namereg.addname("" + this.Item.id, lst[i], i);
          chk = this.state.tmp.disambig_settings.givens[pos];
          if ("undefined" === typeof chk) {
              // Holes can appear in the list, probably due to institutional
              // names that this doesn't touch. Maybe. This fills them up.
              for (var j = 0, jlen = pos + 1; j < jlen; j += 1) {
                  if (!this.state.tmp.disambig_settings.givens[j]) {
                      this.state.tmp.disambig_settings.givens[j] = [];
                  }
              }
          }
          chk = this.state.tmp.disambig_settings.givens[pos][i];
          //if ("undefined" !== typeof chk && this.state.tmp.root === 'citation') {
              //this.state.tmp.disambig_settings.givens[pos] = [];
              //chk = undefined;
          //}
          if ("undefined" === typeof chk) {
              myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
              param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
              this.state.tmp.disambig_settings.givens[pos].push(param);
          }
          //
          // set the display mode default for givennames if required
          myform = this.state.inheritOpt(this.name, "form", "name-form", "long");
          paramx = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
          // this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, 0, myform, myinitials);
          if (this.state.tmp.disambig_request) {
              //
              // fix a request for initials that makes no sense.
              // can't do this in disambig, because the availability
              // of initials is not a global parameter.
              var val = this.state.tmp.disambig_settings.givens[pos][i];
              // This is limited to by-cite disambiguation.
              // 2012-09-13: added lst[i].given check to condition
              if (val === 1 && 
                  this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite" && 
                  ("undefined" === typeof this.state.inheritOpt(this.name, "initialize-with")
                   || "undefined" === typeof lst[i].given)) {
                  val = 2;
              }
              param = val;
              // 2012-09-13: lst[i].given check protects against personal names
              // that have no first name element. These were causing an infinite loop,
              // this prevents that.
              if (this.state.opt["disambiguate-add-givenname"] && lst[i].given) {
                  param = this.state.registry.namereg.evalname("" + this.Item.id, lst[i], i, param, this.state.inheritOpt(this.name, "form", "name-form", "long"), this.state.inheritOpt(this.name, "initialize-with"));
              }
          } else {
              //
              // it clicks.  here is where we will put the
              // call to the names register, to get the floor value
              // for an individual name.
              //
              param = paramx;
          }
          // Need to save off the settings based on subsequent
          // form, when first cites are rendered.
          if (!this.state.tmp.just_looking && this.item && this.item.position === CSL.POSITION_FIRST) {
              if (paramx > param) {
                  param = paramx;
              }
          }
          if (!this.state.tmp.sort_key_flag) {
              this.state.tmp.disambig_settings.givens[pos][i] = param;
              if ("string" === typeof myinitials
                  && ("undefined" === typeof this.name.strings["initialize"]
                      || true === this.name.strings["initialize"])) {
  
                  this.state.tmp.disambig_settings.use_initials = true;
              }
          }
      }
      //this.state.registry.registry[this.Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.getEtAlConfig = function () {
      var item = this.item;
      this["et-al"] = {};
  
      this.state.output.append(this.etal_term, this.etal_style, true);
      this["et-al"].single = this.state.output.pop();
      this["et-al"].single.strings.suffix = this.etal_suffix;
      this["et-al"].single.strings.prefix = this.etal_prefix_single;
      
      this.state.output.append(this.etal_term, this.etal_style, true);
      this["et-al"].multiple = this.state.output.pop();
      this["et-al"].multiple.strings.suffix = this.etal_suffix;
      this["et-al"].multiple.strings.prefix = this.etal_prefix_multiple;
  
      // Et-al style parameters (may be sidestepped by disambiguation
      // in util_names_constraints.js)
      if ("undefined" === typeof item) {
          item = {};
      }
      //print("== getEtAlConfig() == "+this.state.tmp.area);
  
      if (item.position) {
          if (this.state.inheritOpt(this.name, "et-al-subsequent-min")) {
              // XX
              this.etal_min = this.state.inheritOpt(this.name, "et-al-subsequent-min");
          } else {
              // XX
              this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.inheritOpt(this.name, "et-al-subsequent-use-first")) {
              // XX
              this.etal_use_first = this.state.inheritOpt(this.name, "et-al-subsequent-use-first");
          } else {
              // XX
              this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
      } else {
          if (this.state.tmp["et-al-min"]) {
              this.etal_min = this.state.tmp["et-al-min"];
          } else {
              // XX
              this.etal_min = this.state.inheritOpt(this.name, "et-al-min");
          }
          if (this.state.tmp["et-al-use-first"]) {
              this.etal_use_first = this.state.tmp["et-al-use-first"];
          } else {
              // XX
              this.etal_use_first = this.state.inheritOpt(this.name, "et-al-use-first");
          }
          if ("boolean" === typeof this.state.tmp["et-al-use-last"]) {
              //print("  etal_use_last from tmp: "+this.state.tmp["et-al-use-last"]);
              this.etal_use_last = this.state.tmp["et-al-use-last"];
          } else {
              //print("  etal_use_last from name: "+this.name.strings["et-al-use-last"]);
              // XX
              this.etal_use_last = this.state.inheritOpt(this.name, "et-al-use-last");
          }
          //print("  etal_use_last: "+this.etal_use_last);
      }
      // Provided for use as the starting level for disambiguation.
      if (!this.state.tmp["et-al-min"]) {
          this.state.tmp["et-al-min"] = this.etal_min;
      }
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.setEtAlParameters = function () {
      var i, ilen, j, jlen;
      for (i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          if ("undefined" === typeof this.etal_spec[v]) {
              this.etal_spec[v] = {freeters:0,institutions:0,persons:[]};
          }
          this.etal_spec[this.nameset_base + i] = this.etal_spec[v];
          if (this.freeters[v].length) {
              this._setEtAlParameter("freeters", v);
          }
          for (j = 0, jlen = this.persons[v].length; j < jlen; j += 1) {
              if ("undefined" === typeof this.etal_spec[v][j]) {
                  this.etal_spec[v].persons[j] = 0;
              }
              this._setEtAlParameter("persons", v, j);
          }
          if (this.institutions[v].length) {
              this._setEtAlParameter("institutions", v);
          }
      }
  };
  
  CSL.NameOutput.prototype._setEtAlParameter = function (type, v, j) {
      var lst, count;
      if (type === "persons") {
          lst = this.persons[v][j];
          count = this.persons_count[v][j];
      } else {
          lst = this[type][v];
          count = this[type + "_count"][v];
      }
      if (lst.length < count && !this.state.tmp.sort_key_flag) {
          if (this.etal_use_last) {
              if (type === "persons") {
                  this.etal_spec[v].persons[j] = 2;
              } else {
                  this.etal_spec[v][type] = 2;
              }
          } else {
              if (type === "persons") {
                  this.etal_spec[v].persons[j] = 1;
              } else {
                  this.etal_spec[v][type] = 1;
              }
          }
      } else {
          if (type === "persons") {
              this.etal_spec[v].persons[j] = 0;
          } else {
              this.etal_spec[v][type] = 0;
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.NameOutput.prototype.renderAllNames = function () {
      // Note that et-al/ellipsis parameters are set on the basis
      // of rendering order through the whole cite.
      var pos;
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
  
          if (this.freeters[v].length || this.institutions[v].length) {
              if (!this.state.tmp.group_context.tip.condition) {
                  this.state.tmp.just_did_number = false;
              }
          }
          
          pos = this.nameset_base + i;
          if (this.freeters[v].length) {
              this.freeters[v] = this._renderNames(v, this.freeters[v], pos);
          }
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              this.persons[v][j] = this._renderNames(v, this.persons[v][j], pos, j);
          }
      }
      this.renderInstitutionNames();
  };
  
  CSL.NameOutput.prototype.renderInstitutionNames = function () {
      // Institutions are split to string list as
      // this.institutions[v]["long"] and this.institutions[v]["short"]
      for (var i = 0, ilen = this.variables.length; i < ilen; i += 1) {
          var v = this.variables[i];
          for (var j = 0, jlen = this.institutions[v].length; j < jlen; j += 1) {
              var institution;
  
              var name = this.institutions[v][j];
  
              
  
              // XXX Start here for institutions
              // Figure out the three segments: primary, secondary, tertiary
              var j, jlen, localesets;
              if (this.state.tmp.extension) {
                  localesets = ["sort"];
              } else if (name.isInstitution || name.literal) {
                  // Will never hit this in this function, but preserving
                  // in case we factor this out.
                  localesets = this.state.opt['cite-lang-prefs'].institutions;
              } else {
                  localesets = this.state.opt['cite-lang-prefs'].persons;
              }
  
              var slot = {primary:'locale-orig',secondary:false,tertiary:false};
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 <  k) {
                  break;
                }
                      if (localesets[k]) {
                    slot[slotnames[k]] = 'locale-' + localesets[k];
                      }
              }
            } else {
              slot.primary = 'locale-translat';
            }
            if (this.state.tmp.area !== "bibliography"
              && !(this.state.tmp.area === "citation"
                 && this.state.opt.xclass === "note"
                 && this.item && !this.item.position)) {
                  
              slot.secondary = false;
              slot.tertiary = false;
            }
              // Get normalized name object for a start.
              // true invokes fallback
              this.setRenderedName(name);
  
              // XXXX FROM HERE (instututions)
              var institution = this._renderInstitutionName(v, name, slot, j);
  
              //this.institutions[v][j] = this._join(institution, "");
              this.institutions[v][j] = institution;
          }
      }
  };
  
  CSL.NameOutput.prototype._renderInstitutionName = function (v, name, slot, j) {
      var secondary, tertiary, long_style, short_style, institution, institution_short, institution_long;
      var res = this.getName(name, slot.primary, true);
      var primary = res.name;
      var usedOrig = res.usedOrig;
      if (primary) {
          //print("primary, v, j = "+primary+", "+v+", "+j);
          primary = this.fixupInstitution(primary, v, j);
      }
    secondary = false;
    if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, usedOrig);
          var secondary = res.name;
          usedOrig = res.usedOrig;
          if (secondary) {
        secondary = this.fixupInstitution(secondary, v, j);
          }
    }
      //Zotero.debug("XXX [2] secondary: "+secondary["long"].literal+", slot.secondary: "+slot.secondary);
    tertiary = false;
    if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, usedOrig);
          tertiary = res.name;
          if (tertiary) {
        tertiary = this.fixupInstitution(tertiary, v, j);
          }
    }
      var n = {
          l: {
              pri: false,
              sec: false,
              ter: false
          },
          s: {
              pri: false,
              sec: false,
              ter: false
          }
      };
      if (primary) {
          n.l.pri = primary["long"];
          n.s.pri = primary["short"].length ? primary["short"] : primary["long"];
      }
      if (secondary) {
          n.l.sec = secondary["long"];
          n.s.sec = secondary["short"].length ? secondary["short"] : secondary["long"];
      }
      if (tertiary) {
          n.l.ter = tertiary["long"];
          n.s.ter = tertiary["short"].length ? tertiary["short"] : tertiary["long"];
      }
      switch (this.institution.strings["institution-parts"]) {
      case "short":
          // No multilingual for pure short form institution names.
          if (primary["short"].length) {
              short_style = this._getShortStyle();
              institution = [this._composeOneInstitutionPart([n.s.pri, n.s.sec, n.s.ter], slot, short_style, v)];
          } else {
              // Fail over to long.
              long_style = this._getLongStyle(primary, v, j);
              institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
          }
          break;
      case "short-long":
          long_style = this._getLongStyle(primary, v, j);
          short_style = this._getShortStyle();
          institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
          // true is to include multilingual supplement
          institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
          institution = [institution_short, institution_long];
          break;
      case "long-short":
          long_style = this._getLongStyle(primary, v, j);
          short_style = this._getShortStyle();
          institution_short = this._renderOneInstitutionPart(primary["short"], short_style);
          // true is to include multilingual supplement
          institution_long = this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v);
          institution = [institution_long, institution_short];
          break;
      default:
          long_style = this._getLongStyle(primary, v, j);
          // true is to include multilingual supplement
          institution = [this._composeOneInstitutionPart([n.l.pri, n.l.sec, n.l.ter], slot, long_style, v)];
          break;
      }
      var blob = this._join(institution, " ");
      if (blob) {
          blob.isInstitution = true;
      }
      this.state.tmp.name_node.children.push(blob);
      return blob;
  };
  
  CSL.NameOutput.prototype._composeOneInstitutionPart = function (names, slot, style) {
      var primary = false, secondary = false, tertiary = false, primary_tok, secondary_tok, tertiary_tok;
      if (names[0]) {
          primary_tok = CSL.Util.cloneToken(style);
          if (this.state.opt.citeAffixes[slot.primary]){
              if ("<i>" === this.state.opt.citeAffixes.institutions[slot.primary].prefix) {
                  var hasItalic = false;
                  for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                      if (style.decorations[i][0] === "@font-style"
                          && primary_tok.decorations[i][1] === "italic") {
                          hasItalic = true;
                      }
                  }
                  if (!hasItalic) {
                      primary_tok.decorations.push(["@font-style", "italic"]);
                  }
              }
          }
          primary = this._renderOneInstitutionPart(names[0], primary_tok);
       }
      if (names[1]) {
          secondary = this._renderOneInstitutionPart(names[1], style);
      }
      if (names[2]) {
          tertiary = this._renderOneInstitutionPart(names[2], style);
      }
      // Compose
      var institutionblob;
      if (secondary || tertiary) {
          this.state.output.openLevel("empty");
  
          this.state.output.append(primary);
  
          secondary_tok = CSL.Util.cloneToken(style);
          if (slot.secondary) {
              secondary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.secondary].prefix;
              secondary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.secondary].suffix;
              // Add a space if empty
              if (!secondary_tok.strings.prefix) {
                  secondary_tok.strings.prefix = " ";
              }
          }
          var secondary_outer = new CSL.Token();
          secondary_outer.decorations.push(["@font-style", "normal"]);
          secondary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(secondary_outer);
          this.state.output.append(secondary, secondary_tok);
          this.state.output.closeLevel();
  
          tertiary_tok = CSL.Util.cloneToken(style);
          if (slot.tertiary) {
              tertiary_tok.strings.prefix = this.state.opt.citeAffixes.institutions[slot.tertiary].prefix;
              tertiary_tok.strings.suffix = this.state.opt.citeAffixes.institutions[slot.tertiary].suffix;
              // Add a space if empty
              if (!tertiary_tok.strings.prefix) {
                  tertiary_tok.strings.prefix = " ";
              }
          }
          var tertiary_outer = new CSL.Token();
          tertiary_outer.decorations.push(["@font-style", "normal"]);
          tertiary_outer.decorations.push(["@font-weight", "normal"]);
          this.state.output.openLevel(tertiary_outer);
          this.state.output.append(tertiary, tertiary_tok);
          this.state.output.closeLevel();
  
          this.state.output.closeLevel();
  
          institutionblob = this.state.output.pop();
      } else {
          institutionblob = primary;
      }
      return institutionblob;
  };
  
  CSL.NameOutput.prototype._renderOneInstitutionPart = function (blobs, style) {
      for (var i = 0, ilen = blobs.length; i < ilen; i += 1) {
          if (blobs[i]) {
              var str = blobs[i];
              // XXXXX Cut-and-paste code in multiple locations. This code block should be
              // collected in a function.
              // Tag: strip-periods-block
              if (this.state.tmp.strip_periods) {
                  str = str.replace(/\./g, "");
              } else {
                  for (var j = 0, jlen = style.decorations.length; j < jlen; j += 1) {
                      if ("@strip-periods" === style.decorations[j][0] && "true" === style.decorations[j][1]) {
                          str = str.replace(/\./g, "");
                          break;
                      }
                  }
              }
              //this.state.output.append(blobs[i], style, true);
              this.state.tmp.group_context.tip.variable_success = true;
              this.state.tmp.can_substitute.replace(false, CSL.LITERAL);
              if (str === "!here>>>") {
                  blobs[i] = false;
              } else {
                  this.state.output.append(str, style, true);
                  blobs[i] = this.state.output.pop();
              }
          }
      }
      if ("undefined" === typeof this.institution.strings["part-separator"]) {
          this.institution.strings["part-separator"] = this.state.tmp.name_delimiter;
      }
      return this._join(blobs, this.institution.strings["part-separator"]);
  };
  
  CSL.NameOutput.prototype._renderNames = function (v, values, pos, j) {
      //
      var ret = false;
      if (values.length) {
          var names = [];
          for (var i = 0, ilen = values.length; i < ilen; i += 1) {
              var name = values[i];
              
              // XXX We'll start here with attempts.
              // Figure out the three segments: primary, secondary, tertiary
              var ret, localesets;
              
              if (this.state.tmp.extension) {
                  localesets = ["sort"];
              } else if (name.isInstitution || name.literal) {
                  // Will never hit this in this function, but preserving
                  // in case we factor this out.
                  localesets = this.state.opt['cite-lang-prefs'].institutions;
              } else {
                  localesets = this.state.opt['cite-lang-prefs'].persons;
              }
              var slot = {primary:'locale-orig',secondary:false,tertiary:false};
            if (localesets) {
              var slotnames = ["primary", "secondary", "tertiary"];
              for (var k = 0, klen = slotnames.length; k < klen; k += 1) {
                if (localesets.length - 1 <  k) {
                  break;
                }
                slot[slotnames[k]] = 'locale-' + localesets[k];
              }
            } else {
              slot.primary = 'locale-translat';
            }
            if (this.state.tmp.sort_key_flag || (this.state.tmp.area !== "bibliography"
              && !(this.state.tmp.area === "citation"
                 && this.state.opt.xclass === "note"
                 && this.item && !this.item.position))) {
                  
              slot.secondary = false;
              slot.tertiary = false;
            }
  
              // primary
              // true is for fallback
              this.setRenderedName(name);
  
              if (!name.literal && !name.isInstitution) {
                  var nameBlob = this._renderPersonalName(v, name, slot, pos, i, j);
                  var nameToken = CSL.Util.cloneToken(this.name);
                  this.state.output.append(nameBlob, nameToken, true);
                  names.push(this.state.output.pop());
              } else {
                  names.push(this._renderInstitutionName(v, name, slot, j));
              }
          }
          //ret = this._join(names, "");
          ret = this.joinPersons(names, pos, j);
      }
      return ret;
  };
  
  
  CSL.NameOutput.prototype._renderPersonalName = function (v, name, slot, pos, i, j) {
      // XXXX FROM HERE (persons)
  
      var res = this.getName(name, slot.primary, true);
      var primary = this._renderOnePersonalName(res.name, pos, i, j);
    var secondary = false;
    if (slot.secondary) {
          res = this.getName(name, slot.secondary, false, res.usedOrig);
          if (res.name) {
        secondary = this._renderOnePersonalName(res.name, pos, i, j);
          }
    }
    var tertiary = false;
    if (slot.tertiary) {
          res = this.getName(name, slot.tertiary, false, res.usedOrig);
          if (res.name) {
        tertiary = this._renderOnePersonalName(res.name, pos, i, j);
          }
    }
      // Now compose them to a unit
      var personblob;
      if (secondary || tertiary) {
  
          this.state.output.openLevel("empty");
  
          this.state.output.append(primary);
  
          var secondary_tok = new CSL.Token();
          if (slot.secondary) {
              secondary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.secondary].prefix;
              secondary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.secondary].suffix;
              // Add a space if empty
              if (!secondary_tok.strings.prefix) {
                  secondary_tok.strings.prefix = " ";
              }
          }
          this.state.output.append(secondary, secondary_tok);
  
          var tertiary_tok = new CSL.Token();
          if (slot.tertiary) {
              tertiary_tok.strings.prefix = this.state.opt.citeAffixes.persons[slot.tertiary].prefix;
              tertiary_tok.strings.suffix = this.state.opt.citeAffixes.persons[slot.tertiary].suffix;
              // Add a space if empty
              if (!tertiary_tok.strings.prefix) {
                  tertiary_tok.strings.prefix = " ";
              }
          }
          this.state.output.append(tertiary, tertiary_tok);
  
          this.state.output.closeLevel();
  
          personblob = this.state.output.pop();
      } else {
          personblob = primary;
      }
      return personblob;
  };
  
  CSL.NameOutput.prototype._isRomanesque = function (name) {
      // 0 = entirely non-romanesque
      // 1 = mixed content
      // 2 = pure romanesque
      var ret = 2;
      if (!name.family.replace(/\"/g, '').match(CSL.ROMANESQUE_REGEXP)) {
          ret = 0;
      }
      if (!ret && name.given && name.given.match(CSL.STARTSWITH_ROMANESQUE_REGEXP)) {
          ret = 1;
      }
      var top_locale;
      if (ret == 2) {
          if (name.multi && name.multi.main) {
              top_locale = name.multi.main.slice(0, 2);
          } else if (this.Item.language) {
              top_locale = this.Item.language.slice(0, 2);
          }
          if (["ja", "zh"].indexOf(top_locale) > -1) {
              ret = 1;
          }
      }
      //print("name: "+name.given+", multi: "+name.multi+", ret: "+ret);
      return ret;
  };
  
  CSL.NameOutput.prototype._renderOnePersonalName = function (value, pos, i, j) {
      var name = value;
      var dropping_particle = this._droppingParticle(name, pos, j);
      var family = this._familyName(name);
      var non_dropping_particle = this._nonDroppingParticle(name);
      var givenInfo = this._givenName(name, pos, i);
      var given = givenInfo.blob;
      var suffix = this._nameSuffix(name);
      if (given === false) {
          dropping_particle = false;
          suffix = false;
      }
      var sort_sep = this.state.inheritOpt(this.name, "sort-separator");
      if (!sort_sep) {
          sort_sep = "";
      }
      var suffix_sep;
      if (name["comma-suffix"]) {
          suffix_sep = ", ";
      } else {
          suffix_sep = " ";
      }
      var romanesque = this._isRomanesque(name);
      function hasJoiningPunctuation(blob) {
          if (!blob) {
              return false;
          } else if ("string" === typeof blob.blobs) {
              if (["\u2019", "\'", "-", " "].indexOf(blob.blobs.slice(-1)) > -1) {
                  return true;
              } else {
                  return false;
              }
          } else {
              return hasJoiningPunctuation(blob.blobs[blob.blobs.length-1]);
          }
      }
      
      var has_hyphenated_non_dropping_particle = hasJoiningPunctuation(non_dropping_particle);
  
      var nbspace;
      if (["fr", "ru", "cs"].indexOf(this.state.opt["default-locale"][0].slice(0, 2)) > -1) {
          nbspace = "\u00a0";
      } else {
          nbspace = " ";
      }
  
      var blob, merged, first, second;
      if (romanesque === 0) {
          // XXX handle affixes for given and family
          blob = this._join([non_dropping_particle, family, given], "");
      } else if (romanesque === 1 || name["static-ordering"]) { // entry likes sort order
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([merged, given], " ");
      } else if (name["reverse-ordering"]) { // entry likes reverse order
          merged = this._join([non_dropping_particle, family], nbspace);
          blob = this._join([given, merged], " ");
      } else if (this.state.tmp.sort_key_flag) {
          // ok with no affixes here
          if (this.state.opt["demote-non-dropping-particle"] === "never") {
              merged = this._join([non_dropping_particle, family], nbspace);
              merged = this._join([merged, dropping_particle], " ");
              merged = this._join([merged, given], this.state.opt.sort_sep);
              blob = this._join([merged, suffix], " ");
          } else {
              second = this._join([given, dropping_particle, non_dropping_particle], " ");
              merged = this._join([family, second], this.state.opt.sort_sep);
              blob = this._join([merged, suffix], " ");
          }
      } else if (this.state.inheritOpt(this.name, "name-as-sort-order") === "all" || (this.state.inheritOpt(this.name, "name-as-sort-order") === "first" && i === 0 && (j === 0 || "undefined" === typeof j))) {
          //
          // Discretionary sort ordering and inversions
          //
          if (["Lord", "Lady"].indexOf(name.given) > -1) {
              sort_sep = ", ";
          }
  
          // XXX Needs a more robust solution than this
          // XXX See https://forums.zotero.org/discussion/30974/any-idea-why-an-a-author-comes-last-in-the-bibliography/#Item_30
  
          //if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1 && !has_hyphenated_non_dropping_particle) {
          if (["always", "display-and-sort"].indexOf(this.state.opt["demote-non-dropping-particle"]) > -1) {
              // Drop non-dropping particle
              //second = this._join([given, dropping_particle, non_dropping_particle], " ");
              second = this._join([given, dropping_particle], (name["comma-dropping-particle"] + " "));
          
              // This would be a problem with al-Ghazali. Avoided by has_hyphenated_non_dropping_particle check above.
              second = this._join([second, non_dropping_particle], " ");
              if (second && this.given) {
                  second.strings.prefix = this.given.strings.prefix;
                  second.strings.suffix = this.given.strings.suffix;
              }
              if (family && this.family) {
                  family.strings.prefix = this.family.strings.prefix;
                  family.strings.suffix = this.family.strings.suffix;
              }
              merged = this._join([family, second], sort_sep);
              blob = this._join([merged, suffix], sort_sep);
          } else {
              // Don't drop particle.
              // Don't do this
              //if (this.state.tmp.area === "bibliography" && !this.state.tmp.term_predecessor && non_dropping_particle) {
              //    if (!has_hyphenated_non_dropping_particle) {
              //        non_dropping_particle.blobs = CSL.Output.Formatters["capitalize-first"](this.state, non_dropping_particle.blobs)
              //    }
              //}
              if (has_hyphenated_non_dropping_particle) {
                  first = this._join([non_dropping_particle, family], "");
              } else {
                  first = this._join([non_dropping_particle, family], nbspace);
              }
              if (first && this.family) {
                  first.strings.prefix = this.family.strings.prefix;
                  first.strings.suffix = this.family.strings.suffix;
              }
  
              second = this._join([given, dropping_particle], (name["comma-dropping-particle"] + " "));
              //second = this._join([given, dropping_particle], " ");
              if (second && this.given) {
                  second.strings.prefix = this.given.strings.prefix;
                  second.strings.suffix = this.given.strings.suffix;
              }
  
              merged = this._join([first, second], sort_sep);
              blob = this._join([merged, suffix], sort_sep);
          }
          blob.isInverted = true;
      } else { // plain vanilla
          if (name["dropping-particle"] && name.family && !name["non-dropping-particle"]) {
              var dp = name["dropping-particle"];
              var apostrophes = ["'","\u02bc","\u2019","-"];
              if (apostrophes.indexOf(dp.slice(-1)) > -1 && dp.slice(0, -1) !== "de") {
                  family = this._join([dropping_particle, family], "");
                  dropping_particle = false;
              }
          }
  
          if (has_hyphenated_non_dropping_particle) {
              second = this._join([non_dropping_particle, family], "");
              second = this._join([dropping_particle, second], nbspace);
          } else {
              second = this._join([dropping_particle, non_dropping_particle, family], nbspace);
          }
          second = this._join([second, suffix], suffix_sep);
          if (second && this.family) {
              second.strings.prefix = this.family.strings.prefix;
              second.strings.suffix = this.family.strings.suffix;
          }
          if (given && this.given) {
              given.strings.prefix = this.given.strings.prefix;
              given.strings.suffix = this.given.strings.suffix;
          }
          if (second.strings.prefix) {
              name["comma-dropping-particle"] = "";
          }
  
          var space;
          if (this.state.inheritOpt(this.name, "initialize-with")
              && this.state.inheritOpt(this.name, "initialize-with").match(/[\u00a0\ufeff]/)
              && givenInfo.initializationLevel === 1) {
              
              space = nbspace;
          } else {
              space = " ";
          }
          blob = this._join([given, second], (name["comma-dropping-particle"] + space));
      }
      // XXX Just generally assume for the present that personal names render something
      this.state.tmp.group_context.tip.variable_success = true;
      this.state.tmp.can_substitute.replace(false, CSL.LITERAL);
      this.state.tmp.term_predecessor = true;
      // notSerious
      //this.state.output.append(blob, "literal", true);
      //var ret = this.state.output.pop();
      this.state.tmp.name_node.children.push(blob);
      return blob;
  };
  
  /*
          // Do not include given name, dropping particle or suffix in strict short form of name
  
          // initialize if appropriate
  */
  
  // Input names should be touched by _normalizeNameInput()
  // exactly once: this is not idempotent.
  CSL.NameOutput.prototype._normalizeNameInput = function (value) {
      var name = {
          literal:value.literal,
          family:value.family,
          isInstitution:value.isInstitution,
          given:value.given,
          suffix:value.suffix,
          "comma-suffix":value["comma-suffix"],
          "non-dropping-particle":value["non-dropping-particle"],
          "dropping-particle":value["dropping-particle"],
          "static-ordering":value["static-ordering"],
          "static-particles":value["static-particles"],
          "reverse-ordering":value["reverse-ordering"],
          "full-form-always": value["full-form-always"],
          "parse-names":value["parse-names"],
          "comma-dropping-particle": "",
          block_initialize:value.block_initialize,
          multi:value.multi
      };
      this._parseName(name);
      return name;
  };
  
  // _transformNameset() replaced with enhanced transform.name().
  
  CSL.NameOutput.prototype._stripPeriods = function (tokname, str) {
      var decor_tok = this[tokname + "_decor"];
      if (str) {
          if (this.state.tmp.strip_periods) {
              str = str.replace(/\./g, "");
          } else  if (decor_tok) {
              for (var i = 0, ilen = decor_tok.decorations.length; i < ilen; i += 1) {
                  if ("@strip-periods" === decor_tok.decorations[i][0] && "true" === decor_tok.decorations[i][1]) {
                      str = str.replace(/\./g, "");
                      break;
                  }
              }
          }
      }
      return str;
  };
  
  CSL.NameOutput.prototype._nonDroppingParticle = function (name) {
      var ndp = name["non-dropping-particle"];
      if (ndp && this.state.tmp.sort_key_flag) {
          ndp = ndp.replace(/[\'\u2019]/, "");
      }
      var str = this._stripPeriods("family", ndp);
      if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
      }
      return false;
  };
  
  CSL.NameOutput.prototype._droppingParticle = function (name, pos, j) {
      var dp = name["dropping-particle"];
      if (dp && this.state.tmp.sort_key_flag) {
          dp = dp.replace(/[\'\u2019]/, "");
      }
      var str = this._stripPeriods("given", dp);
      if (name["dropping-particle"] && name["dropping-particle"].match(/^et.?al[^a-z]$/)) {
          if (this.state.inheritOpt(this.name, "et-al-use-last")) {
              if ("undefined" === typeof j) { 
                  this.etal_spec[pos].freeters = 2;
              } else {
                  this.etal_spec[pos].persons = 2;
              }
          } else {
              if ("undefined" === typeof j) { 
                  this.etal_spec[pos].freeters = 1;
              } else {
                  this.etal_spec[pos].persons = 1;
              }
          }
          name["comma-dropping-particle"] = "";
      } else if (this.state.output.append(str, this.given_decor, true)) {
          return this.state.output.pop();
      }
      return false;
  };
  
  CSL.NameOutput.prototype._familyName = function (name) {
      var str = this._stripPeriods("family", name.family);
      if (this.state.output.append(str, this.family_decor, true)) {
          return this.state.output.pop();
      }
      return false;
  };
  
  CSL.NameOutput.prototype._givenName = function (name, pos, i) {
      var ret;
      // citation
      //   use disambig as-is
      // biblography
      //   use disambig only if it boosts over the default
      //   SO WHAT IS THE DEFAULT?
      //   A: If "form" is short, it's 0.
      //      If "form" is long, initialize-with exists (and initialize is not false) it's 1
      //      If "form" is long, and initialize_with does not exist, it's 2.
      var formIsShort = this.state.inheritOpt(this.name, "form", "name-form", "long") !== "long";
      var initializeIsTurnedOn = this.state.inheritOpt(this.name, "initialize") !== false;
      var hasInitializeWith = "string" === typeof this.state.inheritOpt(this.name, "initialize-with") && !name.block_initialize;
      var defaultLevel;
      var useLevel;
      if (name["full-form-always"]) {
          useLevel = 2;
      } else {
          if (formIsShort) {
              defaultLevel = 0;
          } else if (hasInitializeWith) {
              defaultLevel = 1;
          } else {
              defaultLevel = 2;
          }
          var requestedLevel = this.state.tmp.disambig_settings.givens[pos][i];
          if (requestedLevel > defaultLevel) {
              useLevel = requestedLevel;
          } else {
              useLevel = defaultLevel;
          }
      }
      var gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
     if (gdropt && gdropt.slice(-14) === "-with-initials") {
          hasInitializeWith = true;
      }
      if (name.family && useLevel === 1) {
          if (hasInitializeWith) {
              var initialize_with = this.state.inheritOpt(this.name, "initialize-with", false, "");
              name.given = CSL.Util.Names.initializeWith(this.state, name.given, initialize_with, !initializeIsTurnedOn);
          } else {
              name.given = CSL.Util.Names.unInitialize(this.state, name.given);
          }
      } else if (useLevel === 0) {
          return {
              blob: false
          }
      } else if (useLevel === 2) {
          name.given = CSL.Util.Names.unInitialize(this.state, name.given);
      }
  
      var str = this._stripPeriods("given", name.given);
      var rendered = this.state.output.append(str, this.given_decor, true);
      if (rendered) {
          ret = this.state.output.pop();
        return {
              blob: ret,
              initializationLevel: useLevel
          };
      }
      return {
          blob: false
      };
  };
  
  CSL.NameOutput.prototype._nameSuffix = function (name) {
  
      var str = name.suffix, ret;
  
      if (str && "string" === typeof this.state.inheritOpt(this.name, "initialize-with")) {
          str = CSL.Util.Names.initializeWith(this.state, str, this.state.inheritOpt(this.name, "initialize-with"), true);
      }
  
      str = this._stripPeriods("family", str);
      var toSuffix = '';
      if (str && str.slice(-1) === '.') {
    str = str.slice(0, -1);
    toSuffix = '.';
      }
      var rendered = this.state.output.append(str, "empty", true);
      if (rendered) {
          ret = this.state.output.pop();
    ret.strings.suffix = toSuffix + ret.strings.suffix;
    return ret;
      }
      return false;
  };
  
  CSL.NameOutput.prototype._getLongStyle = function (name) {
      var long_style;
      if (name["short"].length) {
          if (this.institutionpart["long-with-short"]) {
              long_style = this.institutionpart["long-with-short"];
          } else {
              long_style = this.institutionpart["long"];
          }
      } else {
          long_style = this.institutionpart["long"];
      }
      if (!long_style) {
          long_style = new CSL.Token();
      }
      return long_style;
  };
  
  CSL.NameOutput.prototype._getShortStyle = function () {
      var short_style;
      if (this.institutionpart["short"]) {
          short_style = this.institutionpart["short"];
      } else {
          short_style = new CSL.Token();
      }
      return short_style;
  };
  
  CSL.NameOutput.prototype._parseName = function (name) {
      if (!name["parse-names"] && "undefined" !== typeof name["parse-names"]) {
          return name;
      }
      if (name.family && !name.given && name.isInstitution) {
          name.literal = name.family;
          name.family = undefined;
          name.isInstitution = undefined;
      }
      var noparse;
      if (name.family 
          && (name.family.slice(0, 1) === '"' && name.family.slice(-1) === '"')
          || (!name["parse-names"] && "undefined" !== typeof name["parse-names"])) {
  
          name.family = name.family.slice(1, -1);
          noparse = true;
          name["parse-names"] = 0;
      } else {
          noparse = false;
      }
      if (this.state.opt.development_extensions.parse_names) {
          if (!name["non-dropping-particle"] && name.family && !noparse && name.given) {
              if (!name["static-particles"]) {
                  CSL.parseParticles(name, true);
              }
          }
      }
  };
  
  /*
   * Return a single name object
    */
  
  // The interface is a mess, but this should serve.
  
  CSL.NameOutput.prototype.getName = function (name, slotLocaleset, fallback, stopOrig) {
  
      // Needs to tell us whether we used orig or not.
      
      if (stopOrig && slotLocaleset === 'locale-orig') {
          return {name:false,usedOrig:stopOrig};
      }
  
      // Normalize to string
      if (!name.family) {
          name.family = "";
      }
      if (!name.given) {
          name.given = "";
      }
  
      // Recognized params are:
      //  block-initialize
      //  transliterated
      //  static-ordering
      //  full-form-always
      // All default to false, except for static-ordering, which is initialized
      // with a sniff.
      var name_params = {};
      // Determines the default static-order setting based on the characters
      // used in the headline field. Will be overridden by locale-based
      // parameters evaluated against explicit lang tags set on the (sub)field.
      name_params["static-ordering"] = this.getStaticOrder(name);
  
      var foundTag = true;
      var langTag;
      if (slotLocaleset !== 'locale-orig') {
          foundTag = false;
          if (name.multi) {
              var langTags = this.state.opt[slotLocaleset];
              for (var i = 0, ilen = langTags.length; i < ilen; i += 1) {
                  langTag = langTags[i];
                  if (name.multi._key[langTag]) {
                      foundTag = true;
                      var isInstitution = name.isInstitution;
                      name = name.multi._key[langTag];
                      name.isInstitution = isInstitution;
                      // Set name formatting params
                      name_params = this.getNameParams(langTag);
                      name_params.transliterated = true;
                      break;
                  }
              }
          }
      }
  
      if (!foundTag) {
          langTag = false;
          if (name.multi && name.multi.main) {
              langTag = name.multi.main;
          } else if (this.Item.language) {
              langTag = this.Item.language;
          }
          if (langTag) {
              name_params = this.getNameParams(langTag);
          }
      }
  
      if (!fallback && !foundTag) {
          return {name:false,usedOrig:stopOrig};
      }
      
      // Normalize to string (again)
      if (!name.family) {
          name.family = "";
      }
      if (!name.given) {
          name.given = "";
      }
      if (name.literal) {
          delete name.family;
          delete name.given;
      }
      // var clone the item before writing into it
      name = {
          family:name.family,
          given:name.given,
          "non-dropping-particle":name["non-dropping-particle"],
          "dropping-particle":name["dropping-particle"],
          suffix:name.suffix,
          "static-ordering":name_params["static-ordering"],
          "static-particles":name["static-particles"],
          "reverse-ordering":name_params["reverse-ordering"],
          "full-form-always": name_params["full-form-always"],
          "parse-names":name["parse-names"],
          "comma-suffix":name["comma-suffix"],
          "comma-dropping-particle":name["comma-dropping-particle"],
          transliterated: name_params.transliterated,
          block_initialize: name_params["block-initialize"],
          literal:name.literal,
          isInstitution:name.isInstitution,
          multi:name.multi
      };
      
      if (!name.literal && (!name.given && name.family && name.isInstitution)) {
          name.literal = name.family;
      }
      if (name.literal) {
          delete name.family;
          delete name.given;
      }
      name = this._normalizeNameInput(name);
      var usedOrig;
      if (stopOrig) {
          usedOrig = stopOrig;
      } else {
          usedOrig = !foundTag;
      }
      return {name:name,usedOrig:usedOrig};
  };
  
  CSL.NameOutput.prototype.getNameParams = function (langTag) {
      var ret = {};
      var langspec = CSL.localeResolve(this.Item.language, this.state.opt["default-locale"][0]);
      var try_locale = this.state.locale[langspec.best] ? langspec.best : this.state.opt["default-locale"][0];
      var name_as_sort_order = this.state.locale[try_locale].opts["name-as-sort-order"];
      var name_as_reverse_order = this.state.locale[try_locale].opts["name-as-reverse-order"];
      var name_never_short = this.state.locale[try_locale].opts["name-never-short"];
      var field_lang_bare = langTag.split("-")[0];
      if (name_as_sort_order && name_as_sort_order[field_lang_bare]) {
          ret["static-ordering"] = true;
          ret["reverse-ordering"] = false;
      }
      if (name_as_reverse_order && name_as_reverse_order[field_lang_bare]) {
          ret["reverse-ordering"] = true;
          ret["static-ordering"] = false;
      }
      if (name_never_short && name_never_short[field_lang_bare]) {
          ret["full-form-always"] = true;
      }
      
      if (ret["static-ordering"]) {
          ret["block-initialize"] = true;
      }
      return ret;
  };
  
  CSL.NameOutput.prototype.setRenderedName = function (name) {
      if (this.state.tmp.area === "bibliography") {
          var strname = "";
          for (var j=0,jlen=CSL.NAME_PARTS.length;j<jlen;j+=1) {
              if (name[CSL.NAME_PARTS[j]]) {
                  strname += name[CSL.NAME_PARTS[j]];
              }
          }
          this.state.tmp.rendered_name.push(strname);
      }
  };
  
  CSL.NameOutput.prototype.fixupInstitution = function (name, varname, listpos) {
      if (!name.literal && name.family) {
          name.literal = name.family;
          delete name.family;
      }
      var longNameStr = name.literal;
      var shortNameStr = longNameStr;
      var ret = {
          "long": longNameStr.split(/\s*\|\s*/),
          "short": shortNameStr.split(/\s*\|\s*/),
      };
      if (this.state.sys.getAbbreviation) {
          // Normalize longNameStr and shortNameStr
          if (this.institution.strings.form === "short") {
              let jurisdiction = this.Item.jurisdiction;
              jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-entire", longNameStr, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction]["institution-entire"][longNameStr]) {
                  longNameStr = this.state.transform.abbrevs[jurisdiction]["institution-entire"][longNameStr];
              } else {
                  jurisdiction = this.Item.jurisdiction;
                  jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", longNameStr, this.Item.language);
                  if (this.state.transform.abbrevs[jurisdiction]["institution-part"][longNameStr]) {
                      longNameStr = this.state.transform.abbrevs[jurisdiction]["institution-part"][longNameStr];
                  }
              }
              longNameStr = this._quashChecks(jurisdiction, longNameStr);
          }
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
              let jurisdiction = this.Item.jurisdiction;
              jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", shortNameStr, this.Item.language);
              if (this.state.transform.abbrevs[jurisdiction]["institution-part"][shortNameStr]) {
                  shortNameStr = this.state.transform.abbrevs[jurisdiction]["institution-part"][shortNameStr];
              }
              shortNameStr = this._quashChecks(jurisdiction, shortNameStr);
              if (["short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
                  if (shortNameStr === longNameStr) {
                      shortNameStr = "";
                  }
              }
          }
          // Split abbreviated strings
          // For pure long, split and we're done.
          ret["long"] = longNameStr.split(/\s*\|\s*/);
          // For short, split and then try abbrev with institution-part on each element
          ret["short"] = shortNameStr.split(/\s*\|\s*/);
          if (["short", "short-long", "long-short"].indexOf(this.institution.strings["institution-parts"]) > -1) {
              for (var j=ret["short"].length-1; j>-1; j--) {
                  let jurisdiction = this.Item.jurisdiction;
                  var abbrevKey = ret["short"][j];
                  jurisdiction = this.state.transform.loadAbbreviation(jurisdiction, "institution-part", abbrevKey, this.Item.language);
                  if (this.state.transform.abbrevs[jurisdiction]["institution-part"][abbrevKey]) {
                      ret["short"][j] = this.state.transform.abbrevs[jurisdiction]["institution-part"][abbrevKey];
                  }
                  if (ret["short"][j].indexOf("|") > -1) {
                      let retShort = ret["short"];
                      let splitShort = retShort[j].split(/\s*\|\s*/);
                      ret["short"] = retShort.slice(0, j).concat(splitShort).concat(retShort.slice(j+1));
                  }
              }
          }
          if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
              ret["short"].reverse();
          }
          ret["short"] = this._trimInstitution(ret["short"]);
          if (this.institution.strings["reverse-order"]) {
              ret["short"].reverse();
          }
          // trimmer is not available in getAmbiguousCite
          if (!this.state.tmp.just_looking) {
              if (this.Item.jurisdiction) {
                  let jurisdiction = this.Item.jurisdiction;
                  var trimmer = this.state.tmp.abbrev_trimmer;
                  if (trimmer && trimmer[jurisdiction] && trimmer[jurisdiction][varname]) {
                      for (var i=0,ilen=ret["short"].length;i<ilen;i++) {
                          var frag = ret["short"][i];
                          ret["short"][i] = frag.replace(trimmer[jurisdiction][varname], "").trim();
                      }
                  }
              }
          }
      }
      if (this.state.opt.development_extensions.legacy_institution_name_ordering) {
          ret["long"].reverse();
      }
      ret["long"] = this._trimInstitution(ret["long"]);
      if (this.institution.strings["reverse-order"]) {
          ret["long"].reverse();
      }
  
      return ret;
  };
  
  
  CSL.NameOutput.prototype.getStaticOrder = function (name, refresh) {
      var static_ordering_val = false;
      if (!refresh && name["static-ordering"]) {
          static_ordering_val = true;
      } else if (this._isRomanesque(name) === 0) {
          static_ordering_val = true;
      } else if ((!name.multi || !name.multi.main) && this.Item.language && ['vi', 'hu'].indexOf(this.Item.language) > -1) {
          static_ordering_val = true;
      } else if (name.multi && name.multi.main && ['vi', 'hu'].indexOf(name.multi.main.slice(0,2)) > -1) {
          static_ordering_val = true;
      } else {
          if (this.state.opt['auto-vietnamese-names']
              && (CSL.VIETNAMESE_NAMES.exec(name.family + " " + name.given)
                  && CSL.VIETNAMESE_SPECIALS.exec(name.family + name.given))) {
              
              static_ordering_val = true;
          }
      }
      return static_ordering_val;
  };
  
  CSL.NameOutput.prototype._quashChecks = function (jurisdiction, str) {
      var str = this.state.transform.quashCheck(jurisdiction, str);
      // If the abbreviation has date cut-offs, find the most recent
      // abbreviation within scope.
      var lst = str.split(/>>[0-9]{4}>>/);
      var m = str.match(/>>([0-9]{4})>>/);
      str = lst.pop();
      var date = this.Item["original-date"] ? this.Item["original-date"] : this.Item["issued"];
      if (date) {
          date = parseInt(date.year, 10);
          date = isNaN(date) ? false : date;
      }
      if (date) {
          if (lst.length > 0) {
              for (var k=m.length-1; k>0; k--) {
                  if (date >= parseInt(m[k], 10)) {
                      break;
                  }
                  str = lst.pop();
              }
          }
          str = str.replace(/\s*\|\s*/g, "|");
      }
      return str;
  }
  
  CSL.NameOutput.prototype._trimInstitution = function (subunits) {
    // Oh! Good catch in the tests. This happens before abbrevs.
      // Won't work that way. Need to do abbrev substitute first,
      // and apply this separately to long and to short.
      var use_first = false;
      var stop_last = false;
      var use_last = false;
      var stop_first = false;
      var s = subunits.slice();
      if (this.institution) {
          // If use_first, apply stop_last, then apply use_first;
          // If use_last, apply stop_first, then apply use_last;
          if ("undefined" !== typeof this.institution.strings["use-first"]) {
              // this.state.sys.print("use-first OK");
              use_first = this.institution.strings["use-first"];
          }
          if ("undefined" !== typeof this.institution.strings["use-last"]) {
              // this.state.sys.print("use-last OK");
              use_last = this.institution.strings["use-last"];
          }
          if ("undefined" !== typeof this.institution.strings["stop-first"]) {
              // this.state.sys.print("stop-first OK");
              stop_first = this.institution.strings["stop-first"];
          }
          if ("undefined" !== typeof this.institution.strings["stop-last"]) {
              stop_last = this.institution.strings["stop-last"];
          }
  
          if (use_first) {
              if (stop_last) {
                  s = s.slice(0, stop_last * -1);
              }
              s = s.slice(0, use_first);
          }
          
          if (use_last) {
              var ss = subunits.slice();
              if (use_first) {
                  stop_first = use_first;
              } else {
                  s = [];
              }
              if (stop_first) {
                  ss = ss.slice(stop_first);
              }
              ss = ss.slice(use_last * -1);
              s = s.concat(ss);
          }
          subunits = s;
      }
      return subunits;
  };
  
  /*global CSL: true */
  
  CSL.PublisherOutput = function (state, group_tok) {
      this.state = state;
      this.group_tok = group_tok;
      this.varlist = [];
  };
  
  CSL.PublisherOutput.prototype.render = function () {
      this.clearVars();
      this.composeAndBlob();
      this.composeElements();
      this.composePublishers();
      this.joinPublishers();
  };
  
  
  // XXX Figure out how to adapt this to the House of Lords / House of Commons
  // joint committee case
  
  // name_delimiter
  // delimiter_precedes_last
  // and
  
  CSL.PublisherOutput.prototype.composeAndBlob = function () {
      this.and_blob = {};
      var and_term = false;
      if (this.group_tok.strings.and === "text") {
          and_term = this.state.getTerm("and");
      } else if (this.group_tok.strings.and === "symbol") {
          and_term = "&";
      }
      var tok = new CSL.Token();
      tok.strings.suffix = " ";
      tok.strings.prefix = " ";
      this.state.output.append(and_term, tok, true);
      var no_delim = this.state.output.pop();
  
      tok.strings.prefix = this.group_tok.strings["subgroup-delimiter"];
      this.state.output.append(and_term, tok, true);
      var with_delim = this.state.output.pop();
      
      this.and_blob.single = false;
      this.and_blob.multiple = false;
      if (and_term) {
          if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "always") {
              this.and_blob.single = with_delim;
          } else if (this.group_tok.strings["subgroup-delimiter-precedes-last"] === "never") {
              this.and_blob.single = no_delim;
              this.and_blob.multiple = no_delim;
          } else {
              this.and_blob.single = no_delim;
              this.and_blob.multiple = with_delim;
          }
      }
  };
  
  
  CSL.PublisherOutput.prototype.composeElements = function () {
      for (var i = 0, ilen = 2; i < ilen; i += 1) {
          var varname = ["publisher", "publisher-place"][i];
          for (var j = 0, jlen = this["publisher-list"].length; j < jlen; j += 1) {
              var str = this[varname + "-list"][j];
              var tok = this[varname + "-token"];
              // notSerious
              this.state.output.append(str, tok, true);
              this[varname + "-list"][j] = this.state.output.pop();
          }
      }
  };
  
  
  CSL.PublisherOutput.prototype.composePublishers = function () {
      var blobs;
      for (var i = 0, ilen = this["publisher-list"].length; i < ilen; i += 1) {
          blobs = [this[this.varlist[0] + "-list"][i], this[this.varlist[1] + "-list"][i]];
          this["publisher-list"][i] = this._join(blobs, this.group_tok.strings.delimiter);
      }
  };
  
  
  CSL.PublisherOutput.prototype.joinPublishers = function () {
      var blobs = this["publisher-list"];
      var publishers = this._join(blobs, this.group_tok.strings["subgroup-delimiter"], this.and_blob.single, this.and_blob.multiple, this.group_tok);
      this.state.output.append(publishers, "literal");
  };
  
  
  // blobs, delimiter, single, multiple, tokenname
  // Tokenname is a key at top level of this object.
  CSL.PublisherOutput.prototype._join = CSL.NameOutput.prototype._join;
  CSL.PublisherOutput.prototype._getToken = CSL.NameOutput.prototype._getToken;
  
  
  CSL.PublisherOutput.prototype.clearVars = function () {
      this.state.tmp["publisher-list"] = false;
      this.state.tmp["publisher-place-list"] = false;
      this.state.tmp["publisher-group-token"] = false;
      this.state.tmp["publisher-token"] = false;
      this.state.tmp["publisher-place-token"] = false;
  };
  
  /*global CSL: true */
  
  CSL.evaluateLabel = function (node, state, Item, item) {
      var myterm;
      if ("locator" === node.strings.term) {
          if (item && item.label) {
              if (item.label === "sub verbo") {
                  myterm = "sub-verbo";
              } else {
                  myterm = item.label;
              }
          }
          if (!myterm) {
              myterm = "page";
          }
      } else {
          myterm = node.strings.term;
      }
      
      // Plurals detection.
      var plural = node.strings.plural;
      if ("number" !== typeof plural) {
          // (node, ItemObject, variable, type)
          var theItem = (item && node.strings.term === "locator") ? item : Item;
          if (theItem[node.strings.term]) {
              state.processNumber(false, theItem, node.strings.term, Item.type);
              plural = state.tmp.shadow_numbers[node.strings.term].plural;
              if (!state.tmp.shadow_numbers[node.strings.term].labelForm
                  && !state.tmp.shadow_numbers[node.strings.term].labelDecorations) {
                  if (node.strings.form) {
                      state.tmp.shadow_numbers[node.strings.term].labelForm = node.strings.form;
                  } else if (state.tmp.group_context.tip.label_form) {
                      state.tmp.shadow_numbers[node.strings.term].labelForm = state.tmp.group_context.tip.label_form;
                  }
                  state.tmp.shadow_numbers[node.strings.term].labelCapitalizeIfFirst = node.strings.capitalize_if_first;
                  state.tmp.shadow_numbers[node.strings.term].labelDecorations = node.decorations.slice();
              }
              
              if (["locator", "number", "page"].indexOf(node.strings.term) > -1 && state.tmp.shadow_numbers[node.strings.term].label) {
                  myterm = state.tmp.shadow_numbers[node.strings.term].label;
              }
              if (node.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
                  node.decorations.reverse();
                  node.decorations.push(["@showid","true", node.cslid]);
                  node.decorations.reverse();
              }
          }
      }
      return CSL.castLabel(state, node, myterm, plural, CSL.TOLERANT);
  };
  
  CSL.castLabel = function (state, node, term, plural, mode) {
      var label_form = node.strings.form;
      var label_capitalize_if_first = node.strings.capitalize_if_first;
      if (state.tmp.group_context.tip.label_form) {
          if (label_form === "static") {
              state.tmp.group_context.tip.label_static = true;
          } else {
              label_form = state.tmp.group_context.tip.label_form;
          }
      }
  
      if (state.tmp.group_context.tip.label_capitalize_if_first) {
          label_capitalize_if_first = state.tmp.group_context.tip.label_capitalize_if_first;
      }
      var ret = state.getTerm(term, label_form, plural, false, mode, node.default_locale);
      if (label_capitalize_if_first) {
          ret = CSL.Output.Formatters["capitalize-first"](state, ret);
      }
      // XXXXX Cut-and-paste code in multiple locations. This code block should be
      // collected in a function.
      // Tag: strip-periods-block
      if (state.tmp.strip_periods) {
          ret = ret.replace(/\./g, "");
      } else {
          for (var i = 0, ilen = node.decorations.length; i < ilen; i += 1) {
              if ("@strip-periods" === node.decorations[i][0] && "true" === node.decorations[i][1]) {
                  ret = ret.replace(/\./g, "");
                  break;
              }
          }
      }
      return ret;
  };
  
  /*global CSL: true */
  
  CSL.Node.name = {
      build: function (state, target) {
          var func;
          if ([CSL.SINGLETON, CSL.START].indexOf(this.tokentype) > -1) {
              var oldTmpRoot;
              if ("undefined" === typeof state.tmp.root) {
                  oldTmpRoot = undefined;
                  state.tmp.root = "citation";
              } else {
                  oldTmpRoot = state.tmp.root;
              }
              // Many CSL styles set et-al-[min|use-first]
              // and et-al-subsequent-[min|use-first] to the same
              // value.
              // Set state.opt.update_mode = CSL.POSITION if
              // et-al-subsequent-min or et-al-subsequent-use-first
              // are set AND their value differs from their plain
              // counterparts.
              if (state.inheritOpt(this, "et-al-subsequent-min")
                  && (state.inheritOpt(this, "et-al-subsequent-min") !== state.inheritOpt(this, "et-al-min"))) {
                  
                  state.opt.update_mode = CSL.POSITION;
              }
              if (state.inheritOpt(this, "et-al-subsequent-use-first")
                  && (state.inheritOpt(this, "et-al-subsequent-use-first") !== state.inheritOpt(this, "et-al-use-first"))) {
                  
                  state.opt.update_mode = CSL.POSITION;
              }
  
              state.tmp.root = oldTmpRoot;
  
              func = function (state) {
                  // Et-al (onward processing in node_etal.js and node_names.js)
                  // XXXXX Why is this necessary? This is available on this.name, right?
                  state.tmp.etal_term = "et-al";
  
                  // Use default delimiter as fallback, in a way that allows explicit
                  // empty strings.
                  state.tmp.name_delimiter = state.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                  state.tmp["delimiter-precedes-et-al"] = state.inheritOpt(this, "delimiter-precedes-et-al");
                  
                  // And
                  if ("text" === state.inheritOpt(this, "and")) {
                      this.and_term = state.getTerm("and", "long", 0);
                  } else if ("symbol" === state.inheritOpt(this, "and")) {
                      if (state.opt.development_extensions.expect_and_symbol_form) {
                          this.and_term = state.getTerm("and", "symbol", 0);
                      } else {
                          this.and_term = "&";
                      }
                  }
                  state.tmp.and_term = this.and_term;
                  if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.and_term)) {
                      this.and_prefix_single = " ";
                      this.and_prefix_multiple = ", ";
                      // Workaround to allow explicit empty string
                      // on cs:name delimiter.
                      if ("string" === typeof state.tmp.name_delimiter) {
                          this.and_prefix_multiple = state.tmp.name_delimiter;
                      }
                      this.and_suffix = " ";
  
                      // Really can't inspect these values in the build phase. Sorry.
                      //state.build.name_delimiter = this.strings.delimiter;
  
                  } else {
                      this.and_prefix_single = "";
                      this.and_prefix_multiple = "";
                      this.and_suffix = "";
                  }
                  if (state.inheritOpt(this, "delimiter-precedes-last") === "always") {
                      this.and_prefix_single = state.tmp.name_delimiter;
                  } else if (state.inheritOpt(this, "delimiter-precedes-last") === "never") {
                      // Slightly fragile: could test for charset here to make
                      // this more certain.
                      if (this.and_prefix_multiple) {
                          this.and_prefix_multiple = " ";
                      }
                  } else if (state.inheritOpt(this, "delimiter-precedes-last") === "after-inverted-name") {
                      if (this.and_prefix_single) {
                          this.and_prefix_single = state.tmp.name_delimiter;
                      }
                      if (this.and_prefix_multiple) {
                          this.and_prefix_multiple = " ";
                      }
                  }
  
                  this.and = {};
                  if (state.inheritOpt(this, "and")) {
                      state.output.append(this.and_term, "empty", true);
                      this.and.single = state.output.pop();
                      this.and.single.strings.prefix = this.and_prefix_single;
                      this.and.single.strings.suffix = this.and_suffix;
                      state.output.append(this.and_term, "empty", true);
                      this.and.multiple = state.output.pop();
                      this.and.multiple.strings.prefix = this.and_prefix_multiple;
                      this.and.multiple.strings.suffix = this.and_suffix;
                  } else if (state.tmp.name_delimiter) {
                      // This is a little weird, but it works.
                      this.and.single = new CSL.Blob(state.tmp.name_delimiter);
                      this.and.single.strings.prefix = "";
                      this.and.single.strings.suffix = "";
                      this.and.multiple = new CSL.Blob(state.tmp.name_delimiter);
                      this.and.multiple.strings.prefix = "";
                      this.and.multiple.strings.suffix = "";
                  }
  
                  this.ellipsis = {};
                  if (state.inheritOpt(this, "et-al-use-last")) {
                      // We use the dedicated Unicode ellipsis character because
                      // it is recommended by some editors, and can be more easily
                      // identified for find and replace operations.
                      // Source: http://en.wikipedia.org/wiki/Ellipsis#Computer_representations
                      //
                      
                      // Eventually, this should be localized as a term in CSL, with some
                      // mechanism for triggering appropriate punctuation handling around
                      // the ellipsis placeholder (Polish is a particularly tough case for that).
                      this.ellipsis_term = "\u2026";
                      // Similar treatment to "and", above, will be needed
                      // here when this becomes a locale term.
                      this.ellipsis_prefix_single = " ";
                      this.ellipsis_prefix_multiple =  state.inheritOpt(this, "delimiter", "name-delimiter", ", ");
                      this.ellipsis_suffix = " ";
                      this.ellipsis.single = new CSL.Blob(this.ellipsis_term);
                      this.ellipsis.single.strings.prefix = this.ellipsis_prefix_single;
                      this.ellipsis.single.strings.suffix = this.ellipsis_suffix;
                      this.ellipsis.multiple = new CSL.Blob(this.ellipsis_term);
                      this.ellipsis.multiple.strings.prefix = this.ellipsis_prefix_multiple;
                      this.ellipsis.multiple.strings.suffix = this.ellipsis_suffix;
                  }
  
                  // et-al parameters are annoyingly incomprehensible
                  // again.
                  //
                  // Explanation probably just adds a further layer of
                  // irritation, but what's INTENDED here is that
                  // the state.tmp et-al variables are set from the
                  // cs:key element when composing sort keys, and a
                  // macro containing a name can be called from cs:key.
                  // So when cs:key sets et-al attributes, they are
                  // set on state.tmp, and when the key is finished
                  // processing, the state.tmp variables are reset to
                  // undefined. IN THEORY the state.tmp et-al variables
                  // will not be used in other contexts. I hope.
                  //
                  // Anyway, the current tests now seem to pass.
                  if ("undefined" === typeof state.tmp["et-al-min"]) {
                      state.tmp["et-al-min"] = state.inheritOpt(this, "et-al-min");
                  }
                  if ("undefined" === typeof state.tmp["et-al-use-first"]) {
                      state.tmp["et-al-use-first"] = state.inheritOpt(this, "et-al-use-first");
                  }
                  if ("undefined" === typeof state.tmp["et-al-use-last"]) {
                      //print("  setting et-al-use-last from name: "+this.strings["et-al-use-last"]);
                      state.tmp["et-al-use-last"] = state.inheritOpt(this, "et-al-use-last");
                  }
  
                  state.nameOutput.name = this;
              };
              
              state.build.name_flag = true;
  
              this.execs.push(func);
          }
          target.push(this);
      }
  };
  
  
  
  /*global CSL: true */
  
  CSL.Node["name-part"] = {
      build: function (state) {
          state.build[this.strings.name] = this;
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.names = {
      build: function (state, target) {
          var func;
          // CSL.debug = print;
  
          if (this.tokentype === CSL.START || this.tokentype === CSL.SINGLETON) {
              CSL.Util.substituteStart.call(this, state, target);
              state.build.substitute_level.push(1);
          }
          
          if (this.tokentype === CSL.SINGLETON) {
              state.build.names_variables[state.build.names_variables.length-1].concat(this.variables);
              for (var i in this.variables) {
                  var variable = this.variables[i];
                  var name_labels = state.build.name_label[state.build.name_label.length-1];
                  if (Object.keys(name_labels).length) {
                      name_labels[variable] = name_labels[Object.keys(name_labels)[0]];
                  }
              }
              func = function (state) {
                  state.nameOutput.reinit(this, this.variables_real[0]);
              };
              this.execs.push(func);
          }
  
          if (this.tokentype === CSL.START) {
  
              state.build.names_flag = true;
              state.build.name_flag = false;
              state.build.names_level += 1;
              state.build.names_variables.push(this.variables);
              state.build.name_label.push({});
              // init can substitute
              // init names
              func = function (state) {
                  state.tmp.can_substitute.push(true);
                  state.tmp.name_node = {};
                  state.tmp.name_node.children = [];
                  state.nameOutput.init(this);
              };
              this.execs.push(func);
  
          }
          
          if (this.tokentype === CSL.END) {
  
              // Set/reset name blobs if they exist, for processing
              // by namesOutput()
              for (var i = 0, ilen = 3; i < ilen; i += 1) {
                  var key = ["family", "given", "et-al"][i];
                  this[key] = state.build[key];
                  if (state.build.names_level === 1) {
                      state.build[key] = undefined;
                  }
              }
              // Labels, if any
              this.label = state.build.name_label[state.build.name_label.length-1];
              state.build.names_level += -1;
              state.build.names_variables.pop();
              state.build.name_label.pop();
  
              // The with term. This isn't the right place
              // for this, but it's all hard-wired at the
              // moment.
  
              // "and" and "ellipsis" are set in node_name.js
              func = function (state) {
                  // Et-al (strings only)
                  // Blob production has to happen inside nameOutput()
                  // since proper escaping requires access to the output
                  // queue.
                  if (state.tmp.etal_node) {
                      this.etal_style = state.tmp.etal_node;
                  } else {
                      this.etal_style = "empty";
                  }
  
                  this.etal_term = state.getTerm(state.tmp.etal_term, "long", 0);
                  this.etal_prefix_single = " ";
                  // Should be name delimiter, not hard-wired.
                  this.etal_prefix_multiple = state.tmp.name_delimiter;
                  if (state.tmp["delimiter-precedes-et-al"] === "always") {
                      this.etal_prefix_single = state.tmp.name_delimiter;
                  } else if (state.tmp["delimiter-precedes-et-al"] === "never") {
                      this.etal_prefix_multiple = " ";
                  } else if (state.tmp["delimiter-precedes-et-al"] === "after-inverted-name") {
                      this.etal_prefix_single = state.tmp.name_delimiter;
                      this.etal_prefix_multiple = " ";
                  }
                  this.etal_suffix = "";
                  if (!CSL.STARTSWITH_ROMANESQUE_REGEXP.test(this.etal_term)) {
                      // Not sure what the correct treatment is here, but we should not suppress
                      // a comma-space.
                      // https://forums.zotero.org/discussion/76679/delimiter-precedes-et-al-always-dose-not-work-in-locale-zh-cn
                      if (this.etal_prefix_single === " ") {
                          this.etal_prefix_single = "";
                      }
                      if (this.etal_prefix_multiple === " ") {
                          this.etal_prefix_multiple = "";
                      }
                      if (this.etal_suffix === " ") {
                          this.etal_suffix = "";
                      }
                  }
                  // et-al affixes are further adjusted in nameOutput(),
                  // after the term (possibly changed in cs:et-al) is known.
  
  
                  for (var i = 0, ilen = 3; i < ilen; i += 1) {
                      var key = ["family", "given"][i];
                      state.nameOutput[key] = this[key];
                  }
                  state.nameOutput["with"] = this["with"];
  
                  // REMOVE THIS
                  var mywith = "with";
                  var with_default_prefix = "";
                  var with_suffix = "";
                  if (CSL.STARTSWITH_ROMANESQUE_REGEXP.test(mywith)) {
                      with_default_prefix = " ";
                      with_suffix = " ";
                  }
                  var thewith = {};
                  thewith.single = new CSL.Blob(mywith);
                  thewith.single.strings.suffix = with_suffix;
                  thewith.multiple = new CSL.Blob(mywith);
                  thewith.multiple.strings.suffix = with_suffix;
                  if (state.inheritOpt(state.nameOutput.name, "delimiter-precedes-last") === "always") {
                      thewith.single.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                      thewith.multiple.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                  } else if (state.inheritOpt(state.nameOutput.name, "delimiter-precedes-last") === "contextual") {
                      thewith.single.strings.prefix = with_default_prefix;
                      thewith.multiple.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                  } else if (state.inheritOpt(state.nameOutput.name, "delimiter-precedes-last") === "after-inverted-name") {
                      thewith.single.strings.prefix = state.inheritOpt(this, "delimiter", "names-delimiter");
                      thewith.multiple.strings.prefix = with_default_prefix;
                  } else {
                      thewith.single.strings.prefix = with_default_prefix;
                      thewith.multiple.strings.prefix = with_default_prefix;
                  }
                  state.nameOutput["with"] = thewith;
  
  
                  // XXX label style should be set per variable, since they may differ
                  // XXX with full-form nested names constructs
                  state.nameOutput.label = this.label;
  
                  state.nameOutput.etal_style = this.etal_style;
                  state.nameOutput.etal_term = this.etal_term;
                  state.nameOutput.etal_prefix_single = this.etal_prefix_single;
                  state.nameOutput.etal_prefix_multiple = this.etal_prefix_multiple;
                  state.nameOutput.etal_suffix = this.etal_suffix;
                  state.nameOutput.outputNames();
                  state.tmp["et-al-use-first"] = undefined;
                  state.tmp["et-al-min"] = undefined;
                  state.tmp["et-al-use-last"] = undefined;
              };
              this.execs.push(func);
  
              // unsets
              func = function (state) {
                  if (!state.tmp.can_substitute.pop()) {
                      state.tmp.can_substitute.replace(false, CSL.LITERAL);
                  }
                  
                  // For posterity ...
                  //
                  // This was enough to fix the issue reported here:
                  //
                  //   http://forums.zotero.org/discussion/25223/citeproc-bug-substitute-doesnt-work-correctly-for-title-macro/
                  //
                  // The remainder of the changes applied in the same patch
                  // relate to a label assignments, which were found to be
                  // buggy while working on the issue. The test covering
                  // both problems is here:
                  //
                  //   https://bitbucket.org/bdarcus/citeproc-test/src/ab136a6aa8f2/processor-tests/humans/substitute_SuppressOrdinaryVariable.txt
                  if (state.tmp.can_substitute.mystack.length === 1) {
                      state.tmp.can_block_substitute = false;
                  }
              };
              this.execs.push(func);
  
              state.build.name_flag = false;
          }
          target.push(this);
  
          if (this.tokentype === CSL.END || this.tokentype === CSL.SINGLETON) {
              state.build.substitute_level.pop();
              CSL.Util.substituteEnd.call(this, state, target);
          }
      }
  };
  
  /*global CSL: true */
  
  CSL.Node.number = {
      build: function (state, target) {
          var func;
          CSL.Util.substituteStart.call(this, state, target);
          //
          // This should push a rangeable object to the queue.
          //
          if (this.strings.form === "roman") {
              this.formatter = state.fun.romanizer;
          } else if (this.strings.form === "ordinal") {
              this.formatter = state.fun.ordinalizer;
          } else if (this.strings.form === "long-ordinal") {
              this.formatter = state.fun.long_ordinalizer;
          }
          if ("undefined" === typeof this.successor_prefix) {
              this.successor_prefix = state[state.build.area].opt.layout_delimiter;
          }
          if ("undefined" === typeof this.splice_prefix) {
              this.splice_prefix = state[state.build.area].opt.layout_delimiter;
          }
          // is this needed?
          //if ("undefined" === typeof this.splice_prefix){
          //    this.splice_prefix = state[state.tmp.area].opt.layout_delimiter;
          //}
          //
          // Whether we actually stick a number object on
          // the output queue depends on whether the field
          // contains a pure number.
          //
          // push number or text
          func = function (state, Item, item) {
              // NOTE: this works because this is the ONLY function in this node.
              // If further functions are added, they need to start with the same
              // abort condition.
              if (this.variables.length === 0) {
                  return;
              }
              var varname;
              varname = this.variables[0];
              if ("undefined" === typeof item) {
                  var item = {};
              }
              if (["locator", "locator-extra"].indexOf(varname) > -1) {
                  if (state.tmp.just_looking) {
                      return;
                  }
                  if (!item[varname]) {
                      return;
                  }
              } else {
                  if (!Item[varname]) {
                      return;
                  }
              }
  
              if (varname === 'collection-number' && Item.type === 'legal_case') {
                  state.tmp.renders_collection_number = true;
              }
              
              // For bill or legislation items that have a label-form
              // attribute set on the cs:number node rendering the locator,
              // the form and pluralism of locator terms are controlled
              // separately from those of the initial label. Form is
              // straightforward: the label uses the value set on
              // the cs:label node that renders it, and the embedded
              // labels use the value of label-form set on the cs:number
              // node. Both default to "long".
              //
              // Pluralism is more complicated. For embedded labels,
              // pluralism is evaluated using a simple heuristic that
              // can be found below (it just looks for comma, ampersand etc).
              // The item.label rendered independently via cs:label
              // defaults to singular. It is always singular if embedded
              // labels exist that (when expanded to their valid CSL
              // value) do not match the value of item.label. Otherwise,
              // if one or more matching embedded labels exist, the
              // cs:label is set to plural.
              //
              // The code that does all this is divided between this module,
              // util_static_locator.js, and util_label.js. It's not easy
              // to follow, but seems to do the job. Let's home for good
              // luck out there in the wild.
              
              var node = this;
  
              if (state.tmp.group_context.tip.force_suppress) {
                  return false;
              }
  
              if (["locator", "locator-extra"].indexOf(varname) > -1) {
                  // amazing that we reach this. should abort sooner if no content?
                  state.processNumber.call(state, node, item, varname, Item.type);
              } else {
                  if (!state.tmp.group_context.tip.condition && Item[varname]) {
                      state.tmp.just_did_number = ("" + Item[varname]).match(/[0-9]$/);
                  }
                  // UPDATE_GROUP_CONTEXT_CONDITION is run by processNumber
                  state.processNumber.call(state, node, Item, varname, Item.type);
              }
  
              if (this.substring) {
                  var val = Item[varname].slice(this.substring);
                  state.output.append(val, node);
              } else {
                  CSL.Util.outputNumericField(state, varname, Item.id);
              }
  
              if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1
                 && !state.tmp.just_looking) {
                  state.tmp.done_vars.push(this.variables_real[0]);
                  state.tmp.group_context.tip.done_vars.push(this.variables_real[0]);
              }
          };
          this.execs.push(func);
          target.push(this);
          
          CSL.Util.substituteEnd.call(this, state, target);
      }
  };
  
  /*global CSL: true */
  
  /*
   * Yikes, these functions were running out of scope for yonks.
   * now that they are set in the correct token list,
   * they might be useful for things.
   * FB 2013.11.09
  */
  
  CSL.Node.sort = {
      build: function (state, target) {
          target = state[state.build.root + "_sort"].tokens;
          if (this.tokentype === CSL.START) {
              if (state.build.area === "citation") {
                  state.opt.sort_citations = true;
              }
              state.build.area = state.build.root + "_sort";
              state.build.extension = "_sort";
              
              var func = function (state, Item) {
                  //state.tmp.area = state.tmp.root + "_sort";
                  //state.tmp.extension = "_sort";
                  if (state.opt.has_layout_locale) {
                      var langspec = CSL.localeResolve(Item.language, state.opt["default-locale"][0]);
                      var sort_locales = state[state.tmp.area.slice(0,-5)].opt.sort_locales;
                      var langForItem;
                      for (var i=0,ilen=sort_locales.length;i<ilen;i+=1) {
                          langForItem = sort_locales[i][langspec.bare];
                          if (!langForItem) {
                              langForItem = sort_locales[i][langspec.best];
                          }
                          if (langForItem) {
                              break;
                          }
                      }
                      if (!langForItem) {
                          langForItem = state.opt["default-locale"][0];
                      }
                      state.tmp.lang_sort_hold = state.opt.lang;
                      state.opt.lang = langForItem;
                  }
              };
              this.execs.push(func);
              
          }
          if (this.tokentype === CSL.END) {
              state.build.area = state.build.root;
              state.build.extension = "";
              var func = function (state) {
                  if (state.opt.has_layout_locale) {
                      state.opt.lang = state.tmp.lang_sort_hold;
                      delete state.tmp.lang_sort_hold;
                  }
                  //state.tmp.area = state.tmp.root;
                  //state.tmp.extension = "";
              };
              this.execs.push(func);
              /*
              var func = function (state, Item) {
                  state.tmp.area = state.tmp.root;
                  state.tmp.extension = "";
              }
              this.execs.push(func);
              */
          }
          target.push(this);
      }
  };
  
  
  
  /*global CSL: true */
  
  CSL.Node.substitute = {
      build: function (state, target) {
          var func;
          if (this.tokentype === CSL.START) {
              /* */
              // set conditional
              var choose_start = new CSL.Token("choose", CSL.START);
              CSL.Node.choose.build.call(choose_start, state, target);
              var if_singleton = new CSL.Token("if", CSL.SINGLETON);
              func = function() {
                  if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                      return true;
                  }
                  return false;
              }
              if_singleton.tests = [func];
              if_singleton.test = state.fun.match.any(if_singleton, state, if_singleton.tests);
              target.push(if_singleton);
  
              func = function (state) {
                  state.tmp.can_block_substitute = true;
                  if (state.tmp.value.length && !state.tmp.common_term_match_fail) {
                      state.tmp.can_substitute.replace(false, CSL.LITERAL);
                  }
                  state.tmp.common_term_match_fail = false;
              };
              this.execs.push(func);
              target.push(this);
              /* */
          }
          if (this.tokentype === CSL.END) {
              //var if_end = new CSL.Token("if", CSL.END);
              //CSL.Node["if"].build.call(if_end, state, target);
              /* */
              target.push(this);
              var choose_end = new CSL.Token("choose", CSL.END);
              CSL.Node.choose.build.call(choose_end, state, target);
              /* */
          }
      }
  };
  
  
  
  /*global CSL: true */
  
  CSL.Node.text = {
      build: function (state, target) {
          var func, form, plural, id, num, number, formatter, firstoutput, specialdelimiter, label, suffix, term;
          if (this.postponed_macro) {
              var group_start = CSL.Util.cloneToken(this);
              group_start.name = "group";
              group_start.tokentype = CSL.START;
              CSL.Node.group.build.call(group_start, state, target);
  
              CSL.expandMacro.call(state, this, target);
  
              var group_end = CSL.Util.cloneToken(this);
              group_end.name = "group";
              group_end.tokentype = CSL.END;
              if (this.postponed_macro === 'juris-locator-label') {
                  group_end.isJurisLocatorLabel = true;
              }
              CSL.Node.group.build.call(group_end, state, target);
  
          } else {
              CSL.Util.substituteStart.call(this, state, target);
              // ...
              //
              // Do non-macro stuff
              
              // Guess again. this.variables is ephemeral, adjusted by an initial
              // function set on the node via @variable attribute setup.
              //variable = this.variables[0];
              
              if (!this.variables_real) {
                  this.variables_real = [];
              }
              if (!this.variables) {
                  this.variables = [];
              }
  
              form = "long";
              plural = 0;
              if (this.strings.form) {
                  form = this.strings.form;
              }
              if (this.strings.plural) {
                  plural = this.strings.plural;
              }
              if ("citation-number" === this.variables_real[0] || "year-suffix" === this.variables_real[0] || "citation-label" === this.variables_real[0]) {
                  //
                  // citation-number and year-suffix are super special,
                  // because they are rangeables, and require a completely
                  // different set of formatting parameters on the output
                  // queue.
                  if (this.variables_real[0] === "citation-number") {
  
                      if (state.build.root === "citation") {
                          state.opt.update_mode = CSL.NUMERIC;
                      }
                      if (state.build.root === "bibliography") {
                          state.opt.bib_mode = CSL.NUMERIC;
                      }
                      //this.strings.is_rangeable = true;
                      if ("citation-number" === state[state.tmp.area].opt.collapse) {
                          this.range_prefix = state.getTerm("citation-range-delimiter");
                      }
                      this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                      this.splice_prefix = state[state.build.area].opt.layout_delimiter;
                      func = function (state, Item, item) {
  
                          id = "" + Item.id;
                          if (!state.tmp.just_looking) {
                              if (state.tmp.area.slice(-5) === "_sort" && this.variables[0] === "citation-number") {
                                  if (state.tmp.area === "bibliography_sort") {
                                      state.tmp.group_context.tip.done_vars.push("citation-number");
                                  }
                                  if (state.tmp.area === "citation_sort" && state.bibliography_sort.tmp.citation_number_map) {
                                      var num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[Item.id].seq];
                                  } else {
                                      var num = state.registry.registry[Item.id].seq;
                                  }
                                  if (num) {
                                      // Code currently in util_number.js
                                      num = CSL.Util.padding("" + num);
                                  }
                                  state.output.append(num, this);
                                  return;
                              }
                              if (item && item["author-only"]) {
                                  state.tmp.element_trace.replace("suppress-me");
                              }
                              if (state.tmp.area !== "bibliography_sort" && state.bibliography_sort.tmp.citation_number_map && state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {
                                  num = state.bibliography_sort.tmp.citation_number_map[state.registry.registry[id].seq];
                              } else {
                                  num = state.registry.registry[id].seq;
                              }
                              if (state.opt.citation_number_slug) {
                                  state.output.append(state.opt.citation_number_slug, this);
                              } else {
                                  number = new CSL.NumericBlob(state, false, num, this, Item.id);
                                  if (state.tmp.in_cite_predecessor) {
                                      number.suppress_splice_prefix = true;
                                  }
                                  state.output.append(number, "literal");
                              }
                          }
                      };
                      this.execs.push(func);
                  } else if (this.variables_real[0] === "year-suffix") {
  
                      state.opt.has_year_suffix = true;
  
                      if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                          //this.range_prefix = "-";
                          this.range_prefix = state.getTerm("citation-range-delimiter");
                      }
                      this.successor_prefix = state[state.build.area].opt.layout_delimiter;
                      if (state[state.tmp.area].opt["year-suffix-delimiter"]) {
                          this.successor_prefix = state[state.build.area].opt["year-suffix-delimiter"];
                      }
                      func = function (state, Item) {
                          if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false && !state.tmp.just_looking) {
                              //state.output.append(state.registry.registry[Item.id].disambig[2],this);
                              num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);
  
                              //if (state[state.tmp.area].opt.collapse === "year-suffix-ranged") {
                              //    //this.range_prefix = "-";
                              //    this.range_prefix = state.getTerm("citation-range-delimiter");
                              //}
                              //this.successor_prefix = state[state.tmp.area].opt.layout_delimiter;
                              if (state[state.tmp.area].opt.cite_group_delimiter) {
                                  this.successor_prefix = state[state.tmp.area].opt.cite_group_delimiter;
                              }
                              number = new CSL.NumericBlob(state, false, num, this, Item.id);
                              formatter = new CSL.Util.Suffixator(CSL.SUFFIX_CHARS);
                              number.setFormatter(formatter);
                              state.output.append(number, "literal");
                              firstoutput = false;
                              // XXX Can we do something better for length here?
                              for (var i=0,ilen=state.tmp.group_context.mystack.length; i<ilen; i++) {
                                  var flags = state.tmp.group_context.mystack[i];
                                  if (!flags.variable_success && (flags.variable_attempt || (!flags.variable_attempt && !flags.term_intended))) {
                                      firstoutput = true;
                                      break;
                                  }
                              }
                              specialdelimiter = state[state.tmp.area].opt["year-suffix-delimiter"];
                              if (firstoutput && specialdelimiter && !state.tmp.sort_key_flag) {
                                  state.tmp.splice_delimiter = state[state.tmp.area].opt["year-suffix-delimiter"];
                              }
                          }
                      };
                      this.execs.push(func);
                  } else if (this.variables_real[0] === "citation-label") {
                      if (state.build.root === "bibliography") {
                          state.opt.bib_mode = CSL.TRIGRAPH;
                      }
                      state.opt.has_year_suffix = true;
                      func = function (state, Item) {
                          label = Item["citation-label"];
                          if (!label) {
                              label = state.getCitationLabel(Item);
                          }
                          if (!state.tmp.just_looking) {
                              suffix = "";
                              if (state.registry.registry[Item.id] && state.registry.registry[Item.id].disambig.year_suffix !== false) {
                                  num = parseInt(state.registry.registry[Item.id].disambig.year_suffix, 10);
                                  suffix = state.fun.suffixator.format(num);
                              }
                              label += suffix;
                          }
                          state.output.append(label, this);
                      };
                      this.execs.push(func);
                  }
              } else {
                  if (this.strings.term) {
                      
                      // printterm
                      func = function (state, Item) {
                          var gender = state.opt.gender[Item.type];
                          var term = this.strings.term;
                          term = state.getTerm(term, form, plural, gender, CSL.TOLERANT, this.default_locale);
                          var myterm;
                          // if the term is not an empty string, say
                          // that we rendered a term
                          if (term !== "") {
                              state.tmp.group_context.tip.term_intended = true;
                          }
                          CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, term, null, this);
                          
                          // capitalize the first letter of a term, if it is the
                          // first thing rendered in a citation (or if it is
                          // being rendered immediately after terminal punctuation,
                          // I guess, actually).
                          if (!state.tmp.term_predecessor && !(state.opt["class"] === "in-text" && state.tmp.area === "citation")) {
                              myterm = CSL.Output.Formatters["capitalize-first"](state, term);
                              //CSL.debug("Capitalize");
                          } else {
                              myterm = term;
                          }
                          
                          // XXXXX Cut-and-paste code in multiple locations. This code block should be
                          // collected in a function.
                          // Tag: strip-periods-block
                          if (state.tmp.strip_periods) {
                              myterm = myterm.replace(/\./g, "");
                          } else {
                              for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
                                  if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                                      myterm = myterm.replace(/\./g, "");
                                      break;
                                  }
                              }
                          }
                          state.output.append(myterm, this);
                          if (state.tmp.can_block_substitute) {
                              // Black magic here. This causes the cs:substitution condition to pass,
                              // blocking further rendering within its scope. 
                              state.tmp.can_substitute.replace(false, CSL.LITERAL);
                          }
                      };
                      this.execs.push(func);
                      state.build.term = false;
                      state.build.form = false;
                      state.build.plural = false;
                  } else if (this.variables_real.length) {
                      func = function (state, Item) {
  
                          // If some text variable is rendered, we're not collapsing.
                          if (this.variables_real[0] !== "locator") {
                              state.tmp.have_collapsed = false;
                          }
  
                          if (!state.tmp.group_context.tip.condition && Item[this.variables[0]]) {
                              state.tmp.just_did_number = false;
                          }
                          var val = Item[this.variables[0]];
                          if (val && !state.tmp.group_context.tip.condition) {
                              if (("" + val).slice(-1).match(/[0-9]/)) {
                                  state.tmp.just_did_number = true;
                              } else {
                                  state.tmp.just_did_number = false;
                              }
                          }
                      };
                      this.execs.push(func);
  
                      // plain string fields
  
                      // Deal with multi-fields and ordinary fields separately.
                      if (CSL.MULTI_FIELDS.indexOf(this.variables_real[0]) > -1
                          || this.variables_real[0].indexOf("-main") > -1
                          || this.variables_real[0].indexOf("-sub") > -1
                          || ["language-name", "language-name-original"].indexOf(this.variables_real[0]) > -1
                         ) {
  
                          // multi-fields
                          // Initialize transform factory according to whether
                          // abbreviation is desired.
                          var abbrevfam = this.variables[0];
                          var abbrfall = false;
                          var altvar = false;
                          var transfall = false;
                          if (form === "short") {
                              if (this.variables_real[0].slice(-6) !== "-short") {
                                  altvar = this.variables_real[0] + "-short";
                              }
                          } else {
                              abbrevfam = false;
                          }
                          if (state.build.extension) {
                              // multi-fields for sorting get a sort transform,
                              // (abbreviated if the short form was selected)
                              transfall = true;
                          } else {
                              transfall = true;
                              abbrfall = true;
              }
  
                          func = state.transform.getOutputFunction(this.variables, abbrevfam, abbrfall, altvar, transfall);
                      } else {
                          // ordinary fields
                          if (CSL.CITE_FIELDS.indexOf(this.variables_real[0]) > -1) {
                              // per-cite fields are read from item, rather than Item
                              func = function (state, Item, item) {
                                  if (item && item[this.variables[0]]) {
                                      // Code copied to page variable as well; both
                                      // become cs:number in MLZ extended schema
                                      
                                      // If locator, use cs:number. Otherwise, render
                                      // normally.
  
                                      // XXX The code below is pretty-much copied from
                                      // XXX node_number.js. Should be a common function.
                                      // XXX BEGIN
                                      state.processNumber(this, item, this.variables[0], Item.type);
                                      CSL.Util.outputNumericField(state, this.variables[0], Item.id);
                                      // XXX END
  
                                      if (["locator", "locator-extra"].indexOf(this.variables_real[0]) > -1
                                         && !state.tmp.just_looking) { 
                                          state.tmp.done_vars.push(this.variables_real[0]);
                                      }
                                  }
                              };
                          } else  if (["page", "page-first", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume"].indexOf(this.variables_real[0]) > -1) {
                              // page gets mangled with the correct collapsing
                              // algorithm
                              func = function(state, Item) {
                                  state.processNumber(this, Item, this.variables[0], Item.type);
                                  CSL.Util.outputNumericField(state, this.variables[0], Item.id);
                              };
                          } else if (["URL", "DOI"].indexOf(this.variables_real[0]) > -1) {
                              func = function (state, Item) {
                                  var value;
                                  if (this.variables[0]) {
                                      value = state.getVariable(Item, this.variables[0], form);
                                      if (value) {
                                          if (this.variables[0] === "URL" && form === "short") {
                                              value = value.replace(/(.*\.[^\/]+)\/.*/, "$1");
                                              if (value.match(/\/\/www\./)) {
                                                  value = value.replace(/https?:\/\//, "");
                                              }
                                          }
                                          // true is for non-suppression of periods
                                          if (state.opt.development_extensions.wrap_url_and_doi) {
                                              if (!this.decorations.length || this.decorations[0][0] !== "@" + this.variables[0]) {
                                                  // Special-casing to fix https://github.com/Juris-M/citeproc-js/issues/57
                                                  // clone current token, to avoid collateral damage
                                                  var clonetoken = CSL.Util.cloneToken(this);
                                                  // cast a group blob
                                                  var groupblob = new CSL.Blob(null, null, "url-wrapper");
                                                  // set the DOI decoration on the blob
                                                  groupblob.decorations.push(["@DOI", "true"]);
                                                  if (this.variables_real[0] === "DOI") {
                                                      // strip a proper DOI prefix
                                                      var prefix;
                                                      if (this.strings.prefix && this.strings.prefix.match(/^.*https:\/\/doi\.org\/$/)) {
                                                          value = value.replace(/^https?:\/\/doi\.org\//, "");
                                                          if (value.match(/^https?:\/\//)) {
                                                              // Do not tamper with another protocol + domain if already set in field value
                                                              prefix = "";
                                                          } else {
                                                              // Otherwise https + domain
                                                              prefix = "https://doi.org/";
                                                          }
                                                          // set any string prefix on the clone
                                                          clonetoken.strings.prefix = this.strings.prefix.slice(0, clonetoken.strings.prefix.length-16);
                                                      }
                                                      // cast a text blob
                                                      // set the prefix as the content of the blob
                                                      var prefixblob = new CSL.Blob(prefix);
                                                      // cast another text blob
                                                      // set the value as the content of the second blob
                                                      var valueblob = new CSL.Blob(value);
                                                      // append new text token and clone to group token
                                                      groupblob.push(prefixblob);
                                                      groupblob.push(valueblob);
                                                      // append group token to output
                                                      state.output.append(groupblob, clonetoken, false, false, true);
                                                  } else {
                                                      var valueblob = new CSL.Blob(value);
                                                      // append new text token and clone to group token
                                                      groupblob.push(valueblob);
                                                      // append group token to output
                                                      //this.decorations = [["@" + this.variables[0], "true"]].concat(this.decorations);
                                                      state.output.append(groupblob, clonetoken, false, false, true);
                                                  }
                                              } else {
                                                  state.output.append(value, this, false, false, true);
                                              }
                                          } else {
                                              // This is totally unnecessary, isn't it?
                                              if (this.decorations.length) {
                                                  for (var i=this.decorations.length-1; i>-1; i--) {
                                                      if (this.decorations[i][0] === "@" + this.variables[0]) {
                                                          this.decorations = this.decorations.slice(0, i).concat(this.decorations.slice(i+1));
                                                      }
                                                  }
                                              }
                                              state.output.append(value, this, false, false, true);
                                          }
                                      }
                                  }
                              };
                          } else if (this.variables_real[0] === "section") {
                              // Sections for statutes are special. This is an uncommon
                              // variable, so we save the cost of the runtime check
                              // unless it's being used.
                              func = function (state, Item) {
                                  var value;
                                  value = state.getVariable(Item, this.variables[0], form);
                                  if (value) {
                                      state.output.append(value, this);
                                  }
                              };
                          } else if (this.variables_real[0] === "hereinafter") {
                              func = function (state, Item) {
                                  var value = state.transform.abbrevs["default"]["hereinafter"][Item.id];
                                  if (value) {
                                      state.output.append(value, this);
                                      state.tmp.group_context.tip.variable_success = true;
                                  }
                              };
                          } else {
                              // anything left over just gets output in the normal way.
                              func = function (state, Item) {
                                  var value;
                                  if (this.variables[0]) {
                                      value = state.getVariable(Item, this.variables[0], form);
                                      if (value) {
                                          value = "" + value;
                                          value = value.split("\\").join("");
                                          state.output.append(value, this);
                                      }
                                  }
                              };
                          }
                      }
                      this.execs.push(func);
                  } else if (this.strings.value) {
                      // for the text value attribute.
                      func = function (state) {
                          state.tmp.group_context.tip.term_intended = true;
                          // true flags that this is a literal-value term
                          CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, this.strings.value, true, this);
                          state.output.append(this.strings.value, this);
                          if (state.tmp.can_block_substitute) {
                              // Black magic here. This causes the cs:substitution condition to pass,
                              // blocking further rendering within its scope. 
                              state.tmp.can_substitute.replace(false, CSL.LITERAL);
                          }
                      };
                      this.execs.push(func);
                      // otherwise no output
                  }
              }
              target.push(this);
              CSL.Util.substituteEnd.call(this, state, target);
          }
      }
  };
  
  
  
  /*global CSL: true */
  
  CSL.Node.intext = {
      build: function (state, target) {
          if (this.tokentype === CSL.START) {
  
              state.build.area = "intext";
              state.build.root = "intext";
              state.build.extension = "";
  
              var func = function(state, Item) {
                  state.tmp.area = "intext";
                  state.tmp.root = "intext";
                  state.tmp.extension = "";
              }
              this.execs.push(func);
          }
          if (this.tokentype === CSL.END) {
  
              // Do whatever cs:citation does with sorting.
              state.intext_sort = {
                  opt: {
                      sort_directions: state.citation_sort.opt.sort_directions
                  }
              }
              state.intext.srt = state.citation.srt;
          }
          target.push(this);
      }
  };
  
  
  /*global CSL: true */
  
  CSL.Attributes = {};
  
  CSL.Attributes["@disambiguate"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      if (arg === "true") {
          state.opt.has_disambiguate = true;
          var func = function (Item) {
              if (state.tmp.area === "bibliography") {
                  if (state.tmp.disambiguate_count < state.registry.registry[Item.id].disambig.disambiguate) {
                      state.tmp.disambiguate_count += 1;
                      return true;
                  }
              } else {
                  state.tmp.disambiguate_maxMax += 1;
                  if (state.tmp.disambig_settings.disambiguate
                      && state.tmp.disambiguate_count < state.tmp.disambig_settings.disambiguate) {
                      state.tmp.disambiguate_count += 1;
                      return true;
                  }
              }
              return false;
          };
          this.tests.push(func);
      } else if (arg === "check-ambiguity-and-backreference") {
          var func = function (Item) {
              if (state.registry.registry[Item.id].disambig.disambiguate && state.registry.registry[Item.id]["citation-count"] > 1) {
                  return true;
              }
              return false;
          };
          this.tests.push(func);
      }
  };
  
  CSL.Attributes["@is-numeric"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var variables = arg.split(/\s+/);
      var maketest = function(variable) {
          return function (Item, item) {
              var myitem = Item;
              if (item && ["locator","locator-extra"].indexOf(variable) > -1) {
                  myitem = item;
              }
              if (!myitem[variable]) {
                  return false;
              }
              if (CSL.NUMERIC_VARIABLES.indexOf(variable) > -1) {
                  if (!state.tmp.shadow_numbers[variable]) {
                      state.processNumber(false, myitem, variable, Item.type);
                  }
                  if (state.tmp.shadow_numbers[variable].numeric) {
                      return true;
                  }
              } else if (["title","version"].indexOf(variable) > -1) {
                  if (myitem[variable].slice(-1) === "" + parseInt(myitem[variable].slice(-1), 10)) {
                      return true;
                  }
              }
              return false;
          };
      };
      for (var i=0; i<variables.length; i+=1) {
          this.tests.push(maketest(variables[i]));
      }
  };
  
  
  CSL.Attributes["@is-uncertain-date"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var variables = arg.split(/\s+/);
      // Strip off any boolean prefix.
      var maketest = function (myvariable) {
          return function(Item) {
              if (Item[myvariable] && Item[myvariable].circa) {
                  return true;
              } else {
                  return false;
              }
          };
      };
      for (var i=0,ilen=variables.length;i<ilen;i+=1) {
          this.tests.push(maketest(variables[i]));
      }
  };
  
  
  CSL.Attributes["@locator"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trylabels = arg.replace("sub verbo", "sub-verbo");
      trylabels = trylabels.split(/\s+/);
      // Strip off any boolean prefix.
      var maketest = function (trylabel) {
          return function(Item, item) {
              var label;
              state.processNumber(false, item, "locator");
              label = state.tmp.shadow_numbers.locator.label;
              if (label && trylabel === label) {
                  return true;
              } else {
                  return false;
              }
          };
      };
      for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {
          this.tests.push(maketest(trylabels[i]));
      }
  };
  
  
  CSL.Attributes["@position"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var tryposition;
      state.opt.update_mode = CSL.POSITION;
      var trypositions = arg.split(/\s+/);
      var testSubsequentNear = function (Item, item) {
          if (item && CSL.POSITION_MAP[item.position] >= CSL.POSITION_MAP[CSL.POSITION_SUBSEQUENT] && item["near-note"]) {
              return true;
          }
          return false;
      };
      var testSubsequentNotNear = function (Item, item) {
          if (item && CSL.POSITION_MAP[item.position] == CSL.POSITION_MAP[CSL.POSITION_SUBSEQUENT] && !item["near-note"]) {
              return true;
          }
          return false;
      };
      var maketest = function(tryposition) {
          return function (Item, item) {
              if (state.tmp.area === "bibliography") {
                  return false;
              }
              if (item && "undefined" === typeof item.position) {
                  item.position = 0;
              }
              if (item && typeof item.position === "number") {
                  if (item.position === 0 && tryposition === 0) {
                      return true;
                  } else if (tryposition > 0 && CSL.POSITION_MAP[item.position] >= CSL.POSITION_MAP[tryposition]) {
                      return true;
                  }
              } else if (tryposition === 0) {
                  return true;
              }
              return false;
          };
      };
      for (var i=0,ilen=trypositions.length;i<ilen;i+=1) {
          var tryposition = trypositions[i];
          if (tryposition === "first") {
              tryposition = CSL.POSITION_FIRST;
          } else if (tryposition === "container-subsequent") {
              tryposition = CSL.POSITION_CONTAINER_SUBSEQUENT;
          } else if (tryposition === "subsequent") {
              tryposition = CSL.POSITION_SUBSEQUENT;
          } else if (tryposition === "ibid") {
              tryposition = CSL.POSITION_IBID;
          } else if (tryposition === "ibid-with-locator") {
              tryposition = CSL.POSITION_IBID_WITH_LOCATOR;
          }
          if ("near-note" === tryposition) {
              this.tests.push(testSubsequentNear);
          } else if ("far-note" === tryposition) {
              this.tests.push(testSubsequentNotNear);
          } else {
              this.tests.push(maketest(tryposition));
          }
      }
  };
  
  CSL.Attributes["@type"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      // XXX This is ALWAYS composed as an "any" match
      var types = arg.split(/\s+/);
      // Strip off any boolean prefix.
      var maketest = function (mytype) {
          return function(Item) {
              var ret = (Item.type === mytype);
              if (ret) {
                  return true;
              } else {
                  return false;
              }
          };
      };
      var tests = [];
      for (var i=0,ilen=types.length;i<ilen;i+=1) {
          tests.push(maketest(types[i]));
      }
      this.tests.push(state.fun.match.any(this, state, tests));
  };
  
  CSL.Attributes["@variable"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var func;
      this.variables = arg.split(/\s+/);
      this.variables_real = this.variables.slice();
  
      // First the non-conditional code.
      if ("label" === this.name && this.variables[0]) {
          this.strings.term = this.variables[0];
      } else if (["names", "date", "text", "number"].indexOf(this.name) > -1) {
          //
          // An oddity of variable handling is that this.variables
          // is actually ephemeral; the full list of variables is
          // held in the variables_real var, and pushed into this.variables
          // conditionally in order to suppress repeat renderings of
          // the same item variable.  [STILL FUNCTIONAL? 2010.01.15]
          //
          // set variable names
          func = function (state, Item, item) {
              // Clear this.variables in place
              for (var i = this.variables.length - 1; i > -1; i += -1) {
                  this.variables.pop();
              }
              for (var i=0,ilen=this.variables_real.length;i<ilen;i++) {
                  // set variable name if not quashed, and if not the title of a legal case w/suppress-author
                  if (state.tmp.done_vars.indexOf(this.variables_real[i]) === -1 
  // This looks nuts. Why suppress a case name if not required by context?
  //                    && !(item && Item.type === "legal_case" && item["suppress-author"] && this.variables_real[i] === "title")
                     ) {
                      this.variables.push(this.variables_real[i]);
                  }
                  if (state.tmp.can_block_substitute) {
                      state.tmp.done_vars.push(this.variables_real[i]);
                  }
              }
          };
          this.execs.push(func);
  
          // check for output
          func = function (state, Item, item) {
              var output = false;
              for (var i=0,ilen=this.variables.length;i<ilen;i++) {
                  var variable = this.variables[i];
                  if (["authority", "committee"].indexOf(variable) > -1
                      && "string" === typeof Item[variable]
                      && "names" === this.name) {
  
                      // Great! So for each of these, we split.
                      // And we only recombine everything if the length
                      // of all the splits matches.
                      
                      // Preflight
                      var isValid = true;
                      var rawNames = Item[variable].split(/\s*;\s*/);
                      var rawMultiNames = {};
                      if (Item.multi && Item.multi._keys[variable]) {
                          for (var langTag in Item.multi._keys[variable]) {
                              rawMultiNames[langTag] = Item.multi._keys[variable][langTag].split(/\s*;\s*/);
                              if (rawMultiNames[langTag].length !== rawNames.length) {
                                  isValid = false;
                                  break;
                              }
                          }
                      }
                      if (!isValid) {
                          rawNames = [Item[variable]];
                          rawMultiNames = Item.multi._keys[variable];
                      }
                      for (var j = 0, jlen = rawNames.length; j < jlen; j++) {
                          var creatorParent = {
                              literal:rawNames[j],
                              multi:{
                                  _key:{}
                              }
                          };
                          for (var langTag in rawMultiNames) {
                              var creatorChild = {
                                  literal:rawMultiNames[langTag][j]
                              };
                              creatorParent.multi._key[langTag] = creatorChild;
                          }
                          rawNames[j] = creatorParent;
                      }
                      Item[variable] = rawNames;
                  }
                  if (this.strings.form === "short" && !Item[variable]) {
                      if (variable === "title") {
                          variable = "title-short";
                      } else if (variable === "container-title") {
                          variable = "container-title-short";
                      }
                  }
                  if (variable === "year-suffix") {
                      // year-suffix always signals that it produces output,
                      // even when it doesn't. This permits it to be used with
                      // the "no date" term inside a group used exclusively
                      // to control formatting.
                      output = true;
                      break;
                  } else if (CSL.DATE_VARIABLES.indexOf(variable) > -1) {
                      if (state.opt.development_extensions.locator_date_and_revision && "locator-date" === variable) {
                          // If locator-date is set, it's valid.
                          output = true;
                          break;
                      }
                      if (Item[variable]) {
                          for (var key in Item[variable]) {
                              if (this.dateparts.indexOf(key) === -1 && "literal" !== key) {
                                  continue;
                              }
                              if (Item[variable][key]) {
                                  output = true;
                                  break;
                              }
                          }
                          if (output) {
                              break;
                          }
                      }
                  } else if ("locator" === variable) {
                      if (item && item.locator) {
                          output = true;
                      }
                      break;
                  } else if ("locator-extra" === variable) {
                      if (item && item["locator-extra"]) {
                          output = true;
                      }
                      break;
                  } else if (["citation-number","citation-label"].indexOf(variable) > -1) {
                      output = true;
                      break;
                  } else if ("first-reference-note-number" === variable) {
                      if (item && item["first-reference-note-number"]) {
                          output = true;
                      }
                      break;
                  } else if ("first-container-reference-note-number" === variable) {
                      if (item && item["first-container-reference-note-number"]) {
                          output = true;
                      }
                      break;
                  } else if ("hereinafter" === variable) {
                      if (state.transform.abbrevs["default"].hereinafter[Item.id]
                          && state.sys.getAbbreviation
                          && Item.id) {
              
                          output = true;
                      }
                      break;
                  } else if ("object" === typeof Item[variable]) {
                      break;
                  } else if ("string" === typeof Item[variable] && Item[variable]) {
                      output = true;
                      break;
                  } else if ("number" === typeof Item[variable]) {
                      output = true;
                      break;
                  }
                  if (output) {
                      break;
                  }
              }
              //print("-- VAR: "+variable);
              //flag = state.tmp.group_context.tip;
              if (output) {
                  for (var i=0,ilen=this.variables_real.length;i<ilen;i++) {
                      var variable = this.variables_real[i];
                      if (variable !== "citation-number" || state.tmp.area !== "bibliography") {
                          state.tmp.cite_renders_content = true;
                      }
                      //print("  setting [2] to true based on: " + arg);
                      state.tmp.group_context.tip.variable_success = true;
                      // For util_substitute.js, subsequent-author-substitute
                      if (state.tmp.can_substitute.value() 
                          && state.tmp.area === "bibliography"
                          && "string" === typeof Item[variable]) {
  
                          state.tmp.name_node.top = state.output.current.value();
                          state.tmp.rendered_name.push(Item[variable]);
                      }
                  }
                  state.tmp.can_substitute.replace(false,  CSL.LITERAL);
              } else {
                  //print("  setting [1] to true based on: " + arg);
                  state.tmp.group_context.tip.variable_attempt = true;
              }
              //state.tmp.group_context.replace(flag);
          };
          this.execs.push(func);
      } else if (["if",  "else-if", "condition"].indexOf(this.name) > -1) {
          // Strip off any boolean prefix.
          // Now the conditionals.
          var maketest = function (variable) {
              return function(Item,item){
                  var myitem = Item;
                  if (item && ["locator", "locator-extra", "first-reference-note-number", "first-container-reference-note-number", "locator-date"].indexOf(variable) > -1) {
                      myitem = item;
                  }
                  // We don't run loadAbbreviation() here; it is run by the application-supplied
                  // retrieveItem() if hereinafter functionality is to be used, so this key will
                  // always exist in memory, possibly with a nil value.
                  if (variable === "hereinafter" && state.sys.getAbbreviation && myitem.id) {
                      if (state.transform.abbrevs["default"].hereinafter[myitem.id]) {
                          return true;
                      }
                  } else if (myitem[variable]) {
                      if ("number" === typeof myitem[variable] || "string" === typeof myitem[variable]) {
                          return true;
                      } else if ("object" === typeof myitem[variable]) {
                          //
                          // this will turn true only for hash objects
                          // that have at least one attribute, or for a
                          // non-zero-length list
                          //
                          for (var key in myitem[variable]) {
                              if (myitem[variable][key]) {
                                  return true;
                              }
                          }
                      }
                  }
                  return false;
              };
          };
          for (var i=0,ilen=this.variables.length;i<ilen;i+=1) {
              this.tests.push(maketest(this.variables[i]));
          }
      }
  };
  
  
  CSL.Attributes["@page"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trylabels = arg.replace("sub verbo", "sub-verbo");
      trylabels = trylabels.split(/\s+/);
      // Strip off any boolean prefix.
      var maketest = function (trylabel) {
          return function(Item) {
              var label;
              state.processNumber(false, Item, "page", Item.type);
              if (!state.tmp.shadow_numbers.page.label) {
                  label = "page";
              } else if (state.tmp.shadow_numbers.page.label === "sub verbo") {
                  label = "sub-verbo";
              } else {
                  label = state.tmp.shadow_numbers.page.label;
              }
              if (state.tmp.shadow_numbers.page.values.length > 0) {
                  if (state.tmp.shadow_numbers.page.values[0].gotosleepability) {
                      state.tmp.shadow_numbers.page.values[0].labelVisibility = false;
                  }
              }
              if (trylabel === label) {
                  return true;
              } else {
                  return false;
              }
          };
      };
      for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {
          this.tests.push(maketest(trylabels[i]));
      }
  };
  
  
  // a near duplicate of code above
  CSL.Attributes["@number"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trylabels = arg.split(/\s+/);
      var maketest = function(trylabel) {
          return function (Item) {
              var label;
              state.processNumber(false, Item, "number", Item.type);
              if (!state.tmp.shadow_numbers.number.label) {
                  label = "number";
              } else {
                  label = state.tmp.shadow_numbers.number.label;
              }
              if (trylabel === label) {
                  return true;
              } else {
                  return false;
              }
          };
      };
      for (var i=0,ilen=trylabels.length;i<ilen;i+=1) {
          this.tests.push(maketest(trylabels[i]));
      }
  };
  
  CSL.Attributes["@jurisdiction"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var tryjurisdictions = arg.split(/\s+/);
      
      // This forces a match=any method, similar to @type
      var maketests = function (tryjurisdictions) {
          return function(Item) {
              if (!Item.jurisdiction) {
                  return false;
              }
              var jurisdiction = Item.jurisdiction;
              for (var i=0,ilen=tryjurisdictions.length;i<ilen;i++) {
                  if (jurisdiction === tryjurisdictions[i]) {
                      return true;
                  }
              }
              return false;
          };
      };
      this.tests.push(maketests(tryjurisdictions));
  };
  
  CSL.Attributes["@country"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trycountries = arg.split(/\s+/);
      
      // This forces a match=any method, similar to @type
      var maketests = function (trycountries) {
          return function(Item) {
              if (!Item.country) {
                  return false;
              }
              var country = Item.country;
              for (var i=0,ilen=trycountries.length;i<ilen;i++) {
                  if (country === trycountries[i]) {
                      return true;
                  }
              }
              return false;
          };
      };
      this.tests.push(maketests(trycountries));
  };
  
  CSL.Attributes["@context"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var func = function () {
          if (["bibliography", "citation"].indexOf(arg) > -1) {
          var area = state.tmp.area.slice(0, arg.length);
          if (area === arg) {
            return true;
          }
          return false;
          } else if ("alternative" === arg) {
              return !!state.tmp.abort_alternative;
          }
      };
      this.tests.push(func);
  };
  
  CSL.Attributes["@has-year-only"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trydates = arg.split(/\s+/);
      var maketest = function (trydate) {
          return function(Item) {
              var date = Item[trydate];
              if (!date || date.month || date.season) {
                  return false;
              } else {
                  return true;
              }
          };
      };
      for (var i=0,ilen=trydates.length;i<ilen;i+=1) {
          this.tests.push(maketest(trydates[i]));
      }
  };
  
  CSL.Attributes["@has-to-month-or-season"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trydates = arg.split(/\s+/);
      var maketest = function (trydate) {
          return function(Item) {
              var date = Item[trydate];
              if (!date || (!date.month && !date.season) || date.day) {
                  return false;
              } else {
                  return true;
              }
          };
      };
      for (var i=0,ilen=trydates.length;i<ilen;i+=1) {
          this.tests.push(maketest(trydates[i]));
      }
  };
  
  CSL.Attributes["@has-day"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var trydates = arg.split(/\s+/);
      var maketest = function (trydate) {
          return function(Item) {
              var date = Item[trydate];
              if (!date || !date.day) {
                  return false;
              } else {
                  return true;
              }
          };
      };
      for (var i=0,ilen=trydates.length;i<ilen;i+=1) {
          this.tests.push(maketest(trydates[i]));
      }
  };
  
  CSL.Attributes["@is-plural"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var func = function (Item) {
          var nameList = Item[arg];
          if (nameList && nameList.length) {
              var persons = 0;
              var institutions = 0;
              var last_is_person = false;
              for (var i = 0, ilen = nameList.length; i < ilen; i += 1) {
                  if (state.opt.development_extensions.spoof_institutional_affiliations
                      && (nameList[i].literal || (nameList[i].isInstitution && nameList[i].family && !nameList[i].given))) {
                      institutions += 1;
                      last_is_person = false;
                  } else {
                      persons += 1;
                      last_is_person = true;
                  }
              }
              if (persons > 1) {
                  return true;
              } else if (institutions > 1) {
                  return true;
              } else if (institutions && last_is_person) {
                  return true;
              }
          }
          return false;
      };
      this.tests.push(func);
  };
  
  CSL.Attributes["@is-multiple"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var func = function (Item) {
          var val = ("" + Item[arg]);
          var lst = val.split(/(?:,\s|\s(?:tot\sen\smet|lÄ«dz|oraz|and|bis|Î­Ï‰Ï‚|ÎºÎ±Î¹|och|aÅ¾|do|en|et|in|ir|ja|og|sa|to|un|und|Ã©s|È™i|i|u|y|Ã |e|a|Ð¸|-|â€“)\s|â€”|\&)/);
          if (lst.length > 1) {
              return true;
          }
          return false;
      };
      this.tests.push(func);
  };
  
  
  
  
  CSL.Attributes["@locale"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var ret, langspec, lang, lst, i, ilen;
      // Style default
      var locale_default = state.opt["default-locale"][0];
  
      if (this.name === "layout") {
          // For layout
          this.locale_raw = arg;
          if (this.tokentype === CSL.START) {
              if (!state.opt.multi_layout) {
                  state.opt.multi_layout = [];
              }
              var locale_data = [];
              // Register the primary locale in the set, and others that "map" to it, 
              // so that they can be used when generating sort keys. See node_sort.js.
              // Not idempotent. Only do this once.
              var locales = arg.split(/\s+/);
              var sort_locale = {};
              var localeMaster = CSL.localeResolve(locales[0], locale_default);
              locale_data.push(localeMaster);
              if (localeMaster.generic) {
                  sort_locale[localeMaster.generic] = localeMaster.best;
              } else {
                  sort_locale[localeMaster.best] = localeMaster.best;
              }
              for (var i=1,ilen=locales.length;i<ilen;i+=1) {
                  var localeServant = CSL.localeResolve(locales[i], locale_default);
                  locale_data.push(localeServant);
                  if (localeServant.generic) {
                      sort_locale[localeServant.generic] = localeMaster.best;
                  } else {
                      sort_locale[localeServant.best] = localeMaster.best;
                  }
  
              }
              state[state.build.area].opt.sort_locales.push(sort_locale);
              state.opt.multi_layout.push(locale_data);
          }
          state.opt.has_layout_locale = true;
      } else {
          // For if and if-else
  
          // Split argument
          lst = arg.split(/\s+/);
  
          // Expand each list element
          var locale_bares = [];
          for (i = 0, ilen = lst.length; i < ilen; i += 1) {
              // Parse out language string
              lang = lst[i];
          
              // Analyze the locale
              langspec = CSL.localeResolve(lang, locale_default);
              if (lst[i].length === 2) {
                  // For fallback
                  locale_bares.push(langspec.bare);
              }
              // Load the locale terms etc.
              // (second argument causes immediate return if locale already exists)
              state.localeConfigure(langspec, true);
              
              // Replace string with locale spec object
              lst[i] = langspec;
          }
          // Locales to test
          var locale_list = lst.slice();
  
          // check for variable value
          // Closure probably not necessary here.
          var maketest = function (locale_list, locale_default,locale_bares) {
              return function (Item) {
                  var res;
                  ret = [];
                  res = false;
                  var langspec = false;
  
                  var lang;
                  if (!Item.language) {
                      lang = locale_default;
                  } else {
                      lang = Item.language;
                  }
                  langspec = CSL.localeResolve(lang, locale_default);
                  for (i = 0, ilen = locale_list.length; i < ilen; i += 1) {
                      if (langspec.best === locale_list[i].best) {
                          state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                          state.tmp.condition_lang_val_arr.push(state.opt.lang);
                          state.opt.lang = locale_list[0].best;
                          res = true;
                          break;
                      }
                  }
                  if (!res && locale_bares.indexOf(langspec.bare) > -1) {
                      state.tmp.condition_lang_counter_arr.push(state.tmp.condition_counter);
                      state.tmp.condition_lang_val_arr.push(state.opt.lang);
                      state.opt.lang = locale_list[0].best;
                      res = true;
                  }
                  return res;
              };
          };
          this.tests.push(maketest(locale_list,locale_default,locale_bares));
      }
  };
  
  CSL.Attributes["@alternative-node-internal"] = function (state) {
      if (!this.tests) {this.tests = []; };
      var maketest = function () {
          return function() {
              return !state.tmp.abort_alternative;
          };
      };
      var me = this;
      this.tests.push(maketest(me));
  };
  
  CSL.Attributes["@locale-internal"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var langspec, lang, lst, i, ilen;
          // For if and if-else
  
          // Split argument
          lst = arg.split(/\s+/);
  
          // Expand each list element
          this.locale_bares = [];
          for (i = 0, ilen = lst.length; i < ilen; i += 1) {
              // Parse out language string
              lang = lst[i];
          
              // Analyze the locale
              langspec = CSL.localeResolve(lang, state.opt["default-locale"][0]);
              if (lst[i].length === 2) {
                  // For fallback
                  this.locale_bares.push(langspec.bare);
              }
              // Load the locale terms etc.
              state.localeConfigure(langspec);
              
              // Replace string with locale spec object
              lst[i] = langspec;
          }
          // Set locale tag on node
          this.locale_default = state.opt["default-locale"][0];
          // The locale to set on node children if match is successful
          this.locale = lst[0].best;
          // Locales to test
          this.locale_list = lst.slice();
          
          // check for variable value
          // Closure probably not necessary here.
          var maketest = function (me) {
              return function (Item) {
                  var ret, res;
                  ret = [];
                  res = false;
                  var langspec = false;
                  if (Item.language) {
                      lang = Item.language;
                      langspec = CSL.localeResolve(lang, state.opt["default-locale"][0]);
                      if (langspec.best === state.opt["default-locale"][0]) {
                          langspec = false;
                      }
                  }
                  if (langspec) {
                      // We attempt to match a specific locale from the
                      // list of parameters.  If that fails, we fall back
                      // to the base locale of the first element.  The
                      // locale applied is always the first local 
                      // in the list of parameters (or base locale, for a 
                      // single two-character language code) 
                      for (i = 0, ilen = me.locale_list.length; i < ilen; i += 1) {
                          if (langspec.best === me.locale_list[i].best) {
                              state.opt.lang = me.locale;
                              state.tmp.last_cite_locale = me.locale;
                              // Set empty group open tag with locale set marker
                              state.output.openLevel("empty");
                              state.output.current.value().new_locale = me.locale;
                              res = true;
                              break;
                          }
                      }
                      if (!res && me.locale_bares.indexOf(langspec.bare) > -1) {
                          state.opt.lang = me.locale;
                          state.tmp.last_cite_locale = me.locale;
                          // Set empty group open tag with locale set marker
                          state.output.openLevel("empty");
                          state.output.current.value().new_locale = me.locale;
                          res = true;
                      }
                  }
                  return res;
              };
          };
          var me = this;
          this.tests.push(maketest(me));
  };
  
  
  CSL.Attributes["@court-class"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
    var tryclasses = arg.split(/\s+/);
      var maketest = function (tryclass) {
          return function(Item) {
              var cls = CSL.GET_COURT_CLASS(state, Item);
              if (cls === tryclass) {
                  return true;
              } else {
                  return false;
              }
          };
      };
      for (var i=0,ilen=tryclasses.length; i<ilen; i++) {
          this.tests.push(maketest(tryclasses[i]));
      }
  };
  
  CSL.Attributes["@container-multiple"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
    var retval = "true" === arg ? true : false;
      var maketest = function (retval) {
          return function(Item) {
              if (!state.tmp.container_item_count[Item.container_id]) {
                  return !retval;
              } else if (state.tmp.container_item_count[Item.container_id] > 1) {
                  return retval;
              }
              return !retval;
          };
      };
      this.tests.push(maketest(retval));
  };
  
  CSL.Attributes["@container-subsequent"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
    var retval = "true" === arg ? true : false;
      var maketest = function (retval) {
          return function(Item) {
              if (state.tmp.container_item_pos[Item.container_id] > 1) {
                  return retval;
              }
              return !retval;
          };
      };
      this.tests.push(maketest(retval));
  };
  
  CSL.Attributes["@has-subunit"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var maketest = function(namevar) {
          return function (Item) {
              var subunit_count = 0;
              for (var i in Item[namevar]) {
                  var name = Item[namevar][i];
                  if (!name.given) {
                      var institution = name.literal ? name.literal : name.family;
                      var length = institution.split("|").length;
                      if (subunit_count === 0 || length < subunit_count) {
                          subunit_count = length;
                      }
                  }
              }
              return (subunit_count > 1);
          };
      };
      this.tests.push(maketest(arg));
  }
  
  CSL.Attributes["@cite-form"] = function (state, arg) {
      if (!this.tests) {this.tests = []; };
      var maketest = function(citeForm) {
          return function (Item) {
              if (Item["cite-form"] === citeForm) {
                  return true;
              }
              return false;
          };
      };
      this.tests.push(maketest(arg));
  }
  
  CSL.Attributes["@disable-duplicate-year-suppression"] = function (state, arg) {
    state.opt.disable_duplicate_year_suppression = arg.split(/\s+/);
  }
  
  CSL.Attributes["@consolidate-containers"] = function (state, arg) {
      CSL.Attributes["@track-containers"](state, arg);
      var args = arg.split(/\s+/);
      state.bibliography.opt.consolidate_containers = args;
  }
  
  CSL.Attributes["@track-containers"] = function (state, arg) {
      var args = arg.split(/\s+/);
      if (!state.bibliography.opt.track_container_items) {
          state.bibliography.opt.track_container_items = [];
      }
      if (!state.bibliography.opt.consolidate_containers) {
          state.bibliography.opt.consolidate_containers = [];
      }
      state.bibliography.opt.track_container_items = state.bibliography.opt.track_container_items.concat(args);
  }
  
  // These are not evaluated as conditions immediately: they only
  // set parameters that are picked up during processing.
  CSL.Attributes["@parallel-first"] = function (state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
      }
      this.parallel_first = {};
      for (var i in vars) {
          var v = vars[i];
          this.parallel_first[v] = true;
          state.opt.track_repeat[v] = true;
      }
  };
  CSL.Attributes["@parallel-last"] = function (state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
      }
      this.parallel_last = {};
      for (var i in vars) {
          var v = vars[i];
          this.parallel_last[v] = true;
          state.opt.track_repeat[v] = true;
      }
  };
  CSL.Attributes["@parallel-last-to-first"] = function (state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      this.parallel_last_to_first = {};
      for (var i=0,ilen=vars.length;i<ilen;i++) {
          this.parallel_last_to_first[vars[i]] = true;
      }
  };
  CSL.Attributes["@parallel-delimiter-override"] = function (state, arg) {
      state.opt.parallel.enable = true;
      this.strings.set_parallel_delimiter_override = arg;
  };
  CSL.Attributes["@parallel-delimiter-override-on-suppress"] = function (state, arg) {
      state.opt.parallel.enable = true;
      this.strings.set_parallel_delimiter_override_on_suppress = arg;
  };
  CSL.Attributes["@no-repeat"] = function (state, arg) {
      state.opt.parallel.enable = true;
      var vars = arg.split(/\s+/);
      if (!state.opt.track_repeat) {
          state.opt.track_repeat = {};
      }
      this.non_parallel = {};
      for (var i in vars) {
          var v = vars[i];
          this.non_parallel[v] = true;
          state.opt.track_repeat[v] = true;
      }
  };
  
  CSL.Attributes["@require"] = function (state, arg) {
      state.opt.use_context_condition = true;
      this.strings.require = arg;
  
      // Introduced to constrain rendering of the group with a
      // requirement that it either render an alpha term via cs:label or
      // cs:text at least once, or render without any label. That
      // behaviour is invoked with "label-empty-or-alpha" as arg.
  
      // This attribute is a complement to @label-form and modular
      // jurisdiction support, as it makes macros that adapt to shifting
      // local term definitions possible.
  };
  
  CSL.Attributes["@reject"] = function (state, arg) {
      state.opt.use_context_condition = true;
      this.strings.reject = arg;
  
      // Introduced to constrain rendering of the group with a
      // requirement that it render some label via cs:label or cs:text,
      // and that it NOT be alpha. That behaviour is invoked with
      // "label-empty-or-alpha" as arg.
  
      // This attribute is a complement to @label-form and modular
      // jurisdiction support, as it makes macros that adapt to shifting
      // local term definitions possible.
  };
  
  CSL.Attributes["@require-comma-on-symbol"] = function (state, arg) {
      state.opt.require_comma_on_symbol = arg;
  }
  
  CSL.Attributes["@gender"] = function (state, arg) {
      this.gender = arg;
  };
  
  CSL.Attributes["@cslid"] = function (state, arg) {
      // @cslid is a noop
      // The value set on this attribute is used to
      // generate reverse lookup wrappers on output when 
      // this.development_extensions.csl_reverse_lookup_support is
      // set to true in state.js (there is no runtime option,
      // it must be set in state.js)
      //
      // See the @showid method in the html output
      // section of formats.js for the function that
      // renders the wrappers.
      this.cslid = parseInt(arg, 10);
  };
  
  CSL.Attributes["@capitalize-if-first"] = function (state, arg) {
      this.strings.capitalize_if_first_override = arg;
  };
  
  CSL.Attributes["@label-capitalize-if-first"] = function (state, arg) {
      this.strings.label_capitalize_if_first_override = arg;
  };
  
  CSL.Attributes["@label-form"] = function (state, arg) {
      this.strings.label_form_override = arg;
  };
  
  CSL.Attributes["@part-separator"] = function (state, arg) {
      this.strings["part-separator"] = arg;
  };
  
  CSL.Attributes["@leading-noise-words"] = function (state, arg) {
      this["leading-noise-words"] = arg;
  };
  
  CSL.Attributes["@name-never-short"] = function (state, arg) {
      this["name-never-short"] = arg;
  };
  
  CSL.Attributes["@class"] = function (state, arg) {
      state.opt["class"] = arg;
  };
  
  CSL.Attributes["@version"] = function (state, arg) {
      state.opt.version = arg;
  };
  
  /**
   * Store the value attribute on the token.
   * @name CSL.Attributes.@value
   * @function
   */
  CSL.Attributes["@value"] = function (state, arg) {
      this.strings.value = arg;
  };
  
  
  /**
   * Store the name attribute (of a macro or term node)
   * on the state object.
   * <p>For reference when the closing node of a macro
   * or locale definition is encountered.</p>
   * @name CSL.Attributes.@name
   * @function
   */
  CSL.Attributes["@name"] = function (state, arg) {
      this.strings.name = arg;
  };
  
  /**
   * Store the form attribute (of a term node) on the state object.
   * <p>For reference when the closing node of a macro
   * or locale definition is encountered.</p>
   * @name CSL.Attributes.@form
   * @function
   */
  CSL.Attributes["@form"] = function (state, arg) {
      this.strings.form = arg;
  };
  
  CSL.Attributes["@date-parts"] = function (state, arg) {
      this.strings["date-parts"] = arg;
  };
  
  CSL.Attributes["@range-delimiter"] = function (state, arg) {
      this.strings["range-delimiter"] = arg;
  };
  
  /**
   * Store macro tokens in a buffer on the state object.
   * <p>For reference when the enclosing text token is
   * processed.</p>
   * @name CSL.Attributes.@macro
   * @function
   */
  CSL.Attributes["@macro"] = function (state, arg) {
      this.postponed_macro = arg;
  };
  
  /*
   * CSL.Attributes["@prefer-jurisdiction"] = function (state, arg) {
   *    this.prefer_jurisdiction = true;
   * };
   */
  
  CSL.Attributes["@term"] = function (state, arg) {
      if (arg === "sub verbo") {
          this.strings.term = "sub-verbo";
      } else {
          this.strings.term = arg;
      }
  };
  
  
  /*
   * Ignore xmlns attribute.
   * <p>This should always be <p>http://purl.org/net/xbiblio/csl</code>
   * anyway.  At least for the present we will blindly assume
   * that it is.</p>
   * @name CSL.Attributes.@xmlns
   * @function
   */
  CSL.Attributes["@xmlns"] = function () {};
  
  
  /*
   * Store language attribute to a buffer field.
   * <p>Will be placed in the appropriate location
   * when the element is processed.</p>
   * @name CSL.Attributes.@lang
   * @function
   */
  CSL.Attributes["@lang"] = function (state, arg) {
      if (arg) {
          state.build.lang = arg;
      }
  };
  
  
  // Used as a flag during dates processing
  CSL.Attributes["@lingo"] = function () {};
  
  // Used as a flag during dates processing
  CSL.Attributes["@macro-has-date"] = function () {
      this["macro-has-date"] = true;
  };
  
  /*
   * Store suffix string on token.
   * @name CSL.Attributes.@suffix
   * @function
   */
  CSL.Attributes["@suffix"] = function (state, arg) {
      this.strings.suffix = arg;
  };
  
  
  /*
   * Store prefix string on token.
   * @name CSL.Attributes.@prefix
   * @function
   */
  CSL.Attributes["@prefix"] = function (state, arg) {
      this.strings.prefix = arg;
  };
  
  
  /*
   * Store delimiter string on token.
   * @name CSL.Attributes.@delimiter
   * @function
   */
  CSL.Attributes["@delimiter"] = function (state, arg) {
      this.strings.delimiter = arg;
  };
  
  
  /*
   * Store match evaluator on token.
   */
  CSL.Attributes["@match"] = function (state, arg) {
      this.match = arg;
  };
  
  
  CSL.Attributes["@names-min"] = function (state, arg) {
      var val = parseInt(arg, 10);
      if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
      }
      this.strings["et-al-min"] = val;
  };
  
  CSL.Attributes["@names-use-first"] = function (state, arg) {
      this.strings["et-al-use-first"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@names-use-last"] = function (state, arg) {
      if (arg === "true") {
          this.strings["et-al-use-last"] = true;
      } else {
          this.strings["et-al-use-last"] = false;
      }
  };
  
  CSL.Attributes["@sort"] = function (state, arg) {
      if (arg === "descending") {
          this.strings.sort_direction = CSL.DESCENDING;
      }
  };
  
  CSL.Attributes["@plural"] = function (state, arg) {
      // Accepted values of plural attribute differ on cs:text
      // and cs:label nodes.
      if ("always" === arg || "true" === arg) {
          this.strings.plural = 1;
      } else if ("never" === arg || "false" === arg) {
          this.strings.plural = 0;
      } else if ("contextual" === arg) {
          this.strings.plural = false;
      }
  };
  
  CSL.Attributes["@has-publisher-and-publisher-place"] = function () {
      this.strings["has-publisher-and-publisher-place"] = true;
  };
  
  CSL.Attributes["@publisher-delimiter-precedes-last"] = function (state, arg) {
      this.strings["publisher-delimiter-precedes-last"] = arg;
  };
  
  CSL.Attributes["@publisher-delimiter"] = function (state, arg) {
      this.strings["publisher-delimiter"] = arg;
  };
  
  CSL.Attributes["@publisher-and"] = function (state, arg) {
      this.strings["publisher-and"] = arg;
  };
  
  CSL.Attributes["@givenname-disambiguation-rule"] = function (state, arg) {
      if (CSL.GIVENNAME_DISAMBIGUATION_RULES.indexOf(arg) > -1) {
          state.citation.opt["givenname-disambiguation-rule"] = arg;
      }
  };
  
  CSL.Attributes["@collapse"] = function (state, arg) {
      // only one collapse value will be honoured.
      if (arg) {
          state[this.name].opt.collapse = arg;
      }
  };
  
  CSL.Attributes["@cite-group-delimiter"] = function (state, arg) {
      if (arg) {
          state[state.tmp.area].opt.cite_group_delimiter = arg;
      }
  };
  
  
  
  CSL.Attributes["@names-delimiter"] = function (state, arg) {
      state.setOpt(this, "names-delimiter", arg);
  };
  
  CSL.Attributes["@name-form"] = function (state, arg) {
      state.setOpt(this, "name-form", arg);
  };
  
  CSL.Attributes["@subgroup-delimiter"] = function (state, arg) {
      this.strings["subgroup-delimiter"] = arg;
  };
  
  CSL.Attributes["@subgroup-delimiter-precedes-last"] = function (state, arg) {
      this.strings["subgroup-delimiter-precedes-last"] = arg;
  };
  
  
  CSL.Attributes["@name-delimiter"] = function (state, arg) {
      state.setOpt(this, "name-delimiter", arg);
  };
  
  CSL.Attributes["@et-al-min"] = function (state, arg) {
      var val = parseInt(arg, 10);
      if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
      }
      state.setOpt(this, "et-al-min", val);
  };
  
  CSL.Attributes["@et-al-use-first"] = function (state, arg) {
      state.setOpt(this, "et-al-use-first", parseInt(arg, 10));
  };
  
  CSL.Attributes["@et-al-use-last"] = function (state, arg) {
      if (arg === "true") {
          state.setOpt(this, "et-al-use-last", true);
      } else {
          state.setOpt(this, "et-al-use-last", false);
      }
  };
  
  CSL.Attributes["@et-al-subsequent-min"] = function (state, arg) {
      var val = parseInt(arg, 10);
      if (state[state.build.area].opt.max_number_of_names < val) {
          state[state.build.area].opt.max_number_of_names = val;
      }
      state.setOpt(this, "et-al-subsequent-min", val);
  };
  
  CSL.Attributes["@et-al-subsequent-use-first"] = function (state, arg) {
      state.setOpt(this, "et-al-subsequent-use-first", parseInt(arg, 10));
  };
  
  CSL.Attributes["@suppress-min"] = function (state, arg) {
      this.strings["suppress-min"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@suppress-max"] = function (state, arg) {
      this.strings["suppress-max"] = parseInt(arg, 10);
  };
  
  
  CSL.Attributes["@and"] = function (state, arg) {
      state.setOpt(this, "and", arg);
  };
  
  CSL.Attributes["@delimiter-precedes-last"] = function (state, arg) {
      state.setOpt(this, "delimiter-precedes-last", arg);
  };
  
  CSL.Attributes["@delimiter-precedes-et-al"] = function (state, arg) {
      state.setOpt(this, "delimiter-precedes-et-al", arg);
  };
  
  CSL.Attributes["@initialize-with"] = function (state, arg) {
      state.setOpt(this, "initialize-with", arg);
  };
  
  CSL.Attributes["@initialize"] = function (state, arg) {
      if (arg === "false") {
          state.setOpt(this, "initialize", false);
      }
  };
  
  CSL.Attributes["@name-as-reverse-order"] = function (state, arg) {
      this["name-as-reverse-order"] = arg;
  };
  
  CSL.Attributes["@name-as-sort-order"] = function (state, arg) {
      if (this.name === "style-options") {
          this["name-as-sort-order"] = arg;
      } else {
          state.setOpt(this, "name-as-sort-order", arg);
      }
  };
  
  CSL.Attributes["@sort-separator"] = function (state, arg) {
      state.setOpt(this, "sort-separator", arg);
  };
  
  CSL.Attributes["@require-match"] = function (state, arg) {
      if (arg === "true") {
          this.requireMatch = true;
      }
  };
  
  CSL.Attributes["@exclude-types"] = function (state, arg) {
      state.bibliography.opt.exclude_types = arg.split(/\s+/);
  };
  
  CSL.Attributes["@exclude-with-fields"] = function (state, arg) {
      state.bibliography.opt.exclude_with_fields = arg.split(/\s+/);
  };
  
  
  CSL.Attributes["@year-suffix-delimiter"] = function (state, arg) {
      state[this.name].opt["year-suffix-delimiter"] = arg;
  };
  
  CSL.Attributes["@after-collapse-delimiter"] = function (state, arg) {
      state[this.name].opt["after-collapse-delimiter"] = arg;
  };
  
  CSL.Attributes["@subsequent-author-substitute"] = function (state, arg) {
      state[this.name].opt["subsequent-author-substitute"] = arg;
  };
  
  CSL.Attributes["@subsequent-author-substitute-rule"] = function (state, arg) {
      state[this.name].opt["subsequent-author-substitute-rule"] = arg;
  };
  
  CSL.Attributes["@disambiguate-add-names"] = function (state, arg) {
      if (arg === "true") {
          state.opt["disambiguate-add-names"] = true;
      }
  };
  
  CSL.Attributes["@disambiguate-add-givenname"] = function (state, arg) {
      if (arg === "true") {
          state.opt["disambiguate-add-givenname"] = true;
      }
  };
  
  CSL.Attributes["@disambiguate-add-year-suffix"] = function (state, arg) {
      if (arg === "true" && state.opt.xclass !== "numeric") {
          state.opt["disambiguate-add-year-suffix"] = true;
      }
  };
  
  
  CSL.Attributes["@second-field-align"] = function (state, arg) {
      if (arg === "flush" || arg === "margin") {
          state[this.name].opt["second-field-align"] = arg;
      }
  };
  
  
  CSL.Attributes["@hanging-indent"] = function (state, arg) {
      if (arg === "true") {
          if (state.opt.development_extensions.hanging_indent_legacy_number) {
              state[this.name].opt.hangingindent = 2;
        } else {
              state[this.name].opt.hangingindent = true;
        }
      }
  };
  
  
  CSL.Attributes["@line-spacing"] = function (state, arg) {
      if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["line-spacing"] = parseFloat(arg, 10);
      }
  };
  
  
  CSL.Attributes["@entry-spacing"] = function (state, arg) {
      if (arg && arg.match(/^[.0-9]+$/)) {
          state[this.name].opt["entry-spacing"] = parseFloat(arg, 10);
      }
  };
  
  
  CSL.Attributes["@near-note-distance"] = function (state, arg) {
      state[this.name].opt["near-note-distance"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@substring"] = function (state, arg) {
      this.substring = parseInt(arg, 10);
  };
  
  CSL.Attributes["@text-case"] = function (state, arg) {
      var func = function (state, Item) {
          if (arg === "normal") {
              this.text_case_normal = true;
          } else {
              this.strings["text-case"] = arg;
              if (arg === "title") {
                  if (Item.jurisdiction) {
                      this.strings["text-case"] = "passthrough";
                  }
              }
          }
      };
      this.execs.push(func);
  };
  
  
  CSL.Attributes["@page-range-format"] = function (state, arg) {
      state.opt["page-range-format"] = arg;
  };
  
  
  CSL.Attributes["@year-range-format"] = function (state, arg) {
      state.opt["year-range-format"] = arg;
  };
  
  
  CSL.Attributes["@default-locale"] = function (state, arg) {
      if (this.name === 'style') {
          var lst, len, pos, m, ret;
          //
          // Workaround for Internet Exploder 6 (doesn't recognize
          // groups in str.split(/something(braced-group)something/)
          //
          var m = arg.match(/-x-(sort|translit|translat)-/g);
          if (m) {
              for (pos = 0, len = m.length; pos < len; pos += 1) {
                  m[pos] = m[pos].replace(/^-x-/, "").replace(/-$/, "");
              }
          }
          lst = arg.split(/-x-(?:sort|translit|translat)-/);
          ret = [lst[0]];
          for (pos = 1, len = lst.length; pos < len; pos += 1) {
              ret.push(m[pos - 1]);
              ret.push(lst[pos]);
          }
          lst = ret.slice();
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
              state.opt[("locale-" + lst[pos])].push(lst[(pos + 1)].replace(/^\s*/g, "").replace(/\s*$/g, ""));
          }
          if (lst.length) {
              state.opt["default-locale"] = lst.slice(0, 1);
          } else {
              state.opt["default-locale"] = ["en"];
          }
      } else if (arg === "true") {
          this.default_locale = true;
      }
  };
  
  CSL.Attributes["@default-locale-sort"] = function (state, arg) {
      state.opt["default-locale-sort"] = arg;
  };
  
  CSL.Attributes["@demote-non-dropping-particle"] = function (state, arg) {
      state.opt["demote-non-dropping-particle"] = arg;
  };
  
  CSL.Attributes["@initialize-with-hyphen"] = function (state, arg) {
      if (arg === "false") {
          state.opt["initialize-with-hyphen"] = false;
      }
  };
  
  CSL.Attributes["@institution-parts"] = function (state, arg) {
      this.strings["institution-parts"] = arg;
  };
  
  CSL.Attributes["@if-short"] = function (state, arg) {
      if (arg === "true") {
          this.strings["if-short"] = true;
      }
  };
  
  CSL.Attributes["@substitute-use-first"] = function (state, arg) {
      this.strings["substitute-use-first"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@use-first"] = function (state, arg) {
      this.strings["use-first"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@use-last"] = function (state, arg) {
      this.strings["use-last"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@stop-first"] = function (state, arg) {
      this.strings["stop-first"] = parseInt(arg, 10);
  };
  
  CSL.Attributes["@stop-last"] = function (state, arg) {
      this.strings["stop-last"] = parseInt(arg, 10) * -1;
  };
  
  
  CSL.Attributes["@reverse-order"] = function (state, arg) {
      if ("true" === arg) {
          this.strings["reverse-order"] = true;
      }
  };
  
  CSL.Attributes["@display"] = function (state, arg) {
      if (state.bibliography.tokens.length === 2) {
          state.opt.using_display = true;
      }
      this.strings.cls = arg;
  };
  
  
  /*global CSL: true */
  
  
  /**
   * String stack object.
   * <p>Numerous string stacks are used to track nested
   * parameters at runtime.  This class provides methods
   * that remove some of the aggravation of managing
   * them.</p>
   * @class
   */
  CSL.Stack = function (val, literal) {
      this.mystack = [];
      if (literal || val) {
          this.mystack.push(val);
      }
      this.tip = this.mystack[0];
  };
  
  /**
   * Push a value onto the stack.
   * <p>This just does what it says.</p>
   */
  CSL.Stack.prototype.push = function (val, literal) {
      if (literal || val) {
          this.mystack.push(val);
      } else {
          this.mystack.push("");
      }
      this.tip = this.mystack[this.mystack.length - 1];
  };
  
  /**
   * Clear the stack
   */
  CSL.Stack.prototype.clear = function () {
      this.mystack = [];
      this.tip = {};
  };
  
  /**
   * Replace the top value on the stack.
   * <p>This removes some ugly syntax from the
   * main code.</p>
   */
  CSL.Stack.prototype.replace = function (val, literal) {
      //
      // safety fix after a bug was chased down.  Rhino
      // JS will process a negative index without error (!).
      if (this.mystack.length === 0) {
          CSL.error("Internal CSL processor error: attempt to replace nonexistent stack item with " + val);
      }
      if (literal || val) {
          this.mystack[(this.mystack.length - 1)] = val;
      } else {
          this.mystack[(this.mystack.length - 1)] = "";
      }
      this.tip = this.mystack[this.mystack.length - 1];
  };
  
  
  /**
   * Remove the top value from the stack.
   * <p>Just does what it says.</p>
   */
  CSL.Stack.prototype.pop = function () {
      var ret = this.mystack.pop();
      if (this.mystack.length) {
          this.tip = this.mystack[this.mystack.length - 1];
      } else {
          this.tip = {};
      }
      return ret;
  };
  
  
  /**
   * Return the top value on the stack.
   * <p>Removes a little hideous complication from
   * the main code.</p>
   */
  CSL.Stack.prototype.value = function () {
      return this.mystack.slice(-1)[0];
  };
  
  
  /**
   * Return length (depth) of stack.
   * <p>Used to identify if there is content to
   * be handled on the stack</p>
   */
  CSL.Stack.prototype.length = function () {
      return this.mystack.length;
  };
  
  /*global CSL: true */
  
  /**
   * Initializes the parallel cite tracking arrays
   */
  CSL.Parallel = function (state) {
      this.state = state;
  };
  
  CSL.Parallel.prototype.StartCitation = function (sortedItems, out) {
      // This array carries the repeat markers used in rendering the cite.
      this.state.tmp.suppress_repeats = [];
      if (sortedItems.length < 2) return;
      var idxEnd = 0;
      var parallelMatchList = false;
      var siblingRanges = [];
  
      for (var i=0,ilen=sortedItems.length-1;i<ilen;i++) {
          var currItem = sortedItems[i][0];
          var nextItem = sortedItems[i+1][0];
          var freshMatchList = false;
          var info = {};
          if (sortedItems[i][0].seeAlso && sortedItems[i][0].seeAlso.length > 0 && !parallelMatchList) {
              freshMatchList = true;
              parallelMatchList = [sortedItems[i][0].id].concat(sortedItems[i][0].seeAlso);
              var tempMatchList = parallelMatchList.slice();
              var remainder = sortedItems.slice(i);
              remainder[0][1].parallel = "first";
              for (var j=0,jlen=remainder.length;j<jlen;j++) {
                  var itemID = remainder[j][0].id;
                  var ididx = tempMatchList.indexOf(itemID);
                  idxEnd = false;
                  if (ididx === -1) {
                      idxEnd = (i+j-1);
                  } else if ((i+j) === (sortedItems.length-1)) {
                      idxEnd = (i+j);
                  }
                  if (idxEnd) {
                      siblingRanges.push([i, idxEnd]);
                      break;
                  } else {
                      tempMatchList = tempMatchList.slice(0, ididx).concat(tempMatchList.slice(ididx+1));
                  }
              }
          }
          // parallelMatchList/freshMatchList relate only to parallels.
          // no-repeat non-parallels are handled in a separate block.
          if (i > 0 && freshMatchList) {
              this.state.tmp.suppress_repeats[i-1].START = true;
              freshMatchList = false;
          }
          for (var varname in this.state.opt.track_repeat) {
              if (!currItem[varname] || !nextItem[varname]) {
                  // Go ahead and render any value with an empty partner
                  info[varname] = false;
              } else if ("string" === typeof nextItem[varname] || "number" === typeof nextItem[varname]) {
                  // Simple comparison of string values
                  if (varname === "title" && currItem["title-short"] && nextItem["title-short"]) {
                      var currVal = currItem["title-short"];
                      var nextVal = nextItem["title-short"];
                  } else {
                      var currVal = currItem[varname];
                      var nextVal = nextItem[varname];
                  }
                  if (currVal == nextVal) {
                      info[varname] = true;
                  } else {
                      info[varname] = false;
                  }
              } else if ("undefined" === typeof currItem[varname].length) {
                  // If a date, use only the year
                  info[varname] = false;
                  var currYear = currItem[varname].year;
                  var nextYear = nextItem[varname].year;
                  if (currYear && nextYear) {
                      if (currYear == nextYear) {
                          info[varname] = true;
                      }
                  }
              } else {
                  // If a creator value, kludge it
                  var currVal = JSON.stringify(currItem[varname]);
                  var nextVal = JSON.stringify(nextItem[varname]);
                  if (currVal === nextVal) {
                      info[varname] = true;
                  } else {
                      info[varname] = false;
                  }
              }
          }
          if (!parallelMatchList) {
              info.ORPHAN = true;
          }
          if (idxEnd === i) {
              info.END = true;
              parallelMatchList = false;
          }
          this.state.tmp.suppress_repeats.push(info);
      }
      
      // if (!this.state.tmp.just_looking) {
      //     this.state.sys.print(`${JSON.stringify(this.state.tmp.suppress_repeats, null, 2)}`);
      // }
      
      // Set no-repeat info here?
      for (var j=0,jlen=siblingRanges.length;j<jlen;j++) {
          var masterID = sortedItems[siblingRanges[j][0]][0].id;
          this.state.registry.registry[masterID].master = true;
          this.state.registry.registry[masterID].siblings = [];
          var start = siblingRanges[j][0];
          var end = siblingRanges[j][1];
          for (var k=start; k<end; k++) {
              this.state.tmp.suppress_repeats[k].SIBLING = true;
              var siblingID = sortedItems[k+1][0].id;
              sortedItems[k+1][1].parallel = "other";
              this.state.registry.registry[masterID].siblings.push(siblingID);
          }
      }
      // this.state.sys.print(JSON.stringify(this.state.tmp.suppress_repeats, null, 2));
  };
  
  CSL.Parallel.prototype.checkRepeats = function(params) {
      var idx = this.state.tmp.cite_index;
      if (this.state.tmp.suppress_repeats) {
          if (params.parallel_first && Object.keys(params.parallel_first).length > 0) {
              var arr = [{}].concat(this.state.tmp.suppress_repeats);
              var ret = true;
              for (var varname in params.parallel_first) {
                  if (!arr[idx][varname] || arr[idx].START) {
                      // true --> suppress the entry
                      // Test here evaluates as "all", not "any"
                      ret = false;
                  }
              }
              return ret;
          }
          if (params.parallel_last && Object.keys(params.parallel_last).length > 0) {
              var arr = this.state.tmp.suppress_repeats.concat([{}]);
              var ret = Object.keys(params.parallel_last).length > 0 ? true : false;
              for (var varname in params.parallel_last) {
                  if (!arr[idx][varname] || arr[idx].END) {
                      // "all" match, as above.
                      ret = false;
                  }
              }
              return ret;
          }
          if (params.non_parallel && Object.keys(params.non_parallel).length > 0) {
              var arr = [{}].concat(this.state.tmp.suppress_repeats);
              var ret = true;
              for (var varname in params.non_parallel) {
                  if (!arr[idx][varname]) {
                      ret = false;
                  }
              }
              return ret;
          }
      }
      return false;
  };
  
  /*global CSL: true */
  
  
  CSL.Util = {};
  
  CSL.Util.Match = function () {
  
      this.any = function (token, state, tests) {
          return function (Item, item) {
              for (var i=0, ilen=tests.length; i < ilen; i += 1) {
                  var result = tests[i](Item, item);
                  if (result) {
                      return true;
                  }
              }
              return false;
          };
      };
  
      this.none = function (token, state, tests) {
          return function (Item, item) {
              for (var i=0,ilen=tests.length;i<ilen;i+=1) {
                  var result = tests[i](Item,item);
                  if (result) {
                      return false;
                  }
              }
              return true;
          };
      };
  
      this.all = function (token, state, tests) {
          return function (Item, item) {
              for (var i=0,ilen=tests.length;i<ilen;i+=1) {
                  var result = tests[i](Item,item);
                  if (!result) {
                      return false;
                  }
              }
              return true;
          };
      };
  
      this[undefined] = this.all;
  
      this.nand = function (token, state, tests) {
          return function (Item, item) {
              for (var i=0,ilen=tests.length;i<ilen;i+=1) {
                  var result = tests[i](Item,item);
                  if (!result) {
                      return true;
                  }
              }
              return false;
          };
      };
  
  };
  
  /*global CSL: true */
  
  /*
   * Fields can be transformed by translation/transliteration, or by
   * abbreviation.  Transformations are performed in that order.
   *
   * Renderings of original, translated or transliterated content
   * (followed by abbreviation if requested) are placed in the primary
   * output slot or the (implicitly punctuated) secondary and tertiary
   * output slots according to the settings registered in the
   * state.opt['cite-lang-prefs'] arrays. The array has six segments:
   * 'persons', 'institutions', 'titles', 'journals', 'publishers', and
   * 'places'. Each segment always contains at least one item, and may
   * hold values 'orig', 'translit' or 'translat'. The array defaults to
   * a single item 'orig'.
   *
   * All multilingual variables are associated with segments,
   * with the exception of 'edition' and 'genre'. These two
   * exceptions are always rendered with the first matching
   * language form found in state.opt['locale-translit'] or, if
   * composing a sort key, state.opt['locale-sort']. No secondary
   * slot rendering is performed for this two variables.
   *
   * The balance of multilingual variables are rendered with
   * the first matching value in the transform locales spec
   * (no transform, state.opt['locale-translit'], or 
   * state.opt['locale-translat']) mapped to the target
   * slot.
   *
   * Full primary+secondary+tertiary rendering is performed only in
   * note-style citations and the bibliography.  In-text citations are
   * rendered in the primary output slot only, following the same spec
   * parameters.
   *
   *   Optional setters:
   *     .setAbbreviationFallback(); fallback flag
   *       (if true, a failed abbreviation will fallback to long)
   *
   *     .setAlternativeVariableName(): alternative variable name in Item,
   *       for use as a fallback abbreviation source
   *
   * Translation/transliteration
   *
   *   Optional setter:
   *     .setTransformFallback():
   *       default flag (if true, the original field value will be used as a fallback)
   *
   * The getTextSubField() method may be used to obtain a string transform
   * of a field, without abbreviation, as needed for setting sort keys
   * (for example).
   *
   */
  
  CSL.Transform = function (state) {
      // Abbreviation families
      this.abbrevs = {};
      this.abbrevs["default"] = new state.sys.AbbreviationSegments();
  
      function getCountryOrJurisdiction(variable, normalizedKey, quashCountry) {
          var value = "";
          if (state.sys.getHumanForm) {
              if (variable === "country") {
                  value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
                  value = value.split("|")[0];
              } else if (variable === "jurisdiction") {
                  value = state.sys.getHumanForm(normalizedKey.toLowerCase(), false, true);
                  if (!quashCountry) {
                      value = value.split("|").slice(1).join(", ");
                  } else {
                      // Bare country name is rendered by "country", not "jurisdiction"
                      value = "";
                  }
              }
        }
        return value;
      }
      
      // Internal function
      function abbreviate(state, tok, Item, altvar, basevalue, family_var, use_field) {
  
          var value = "";
          var myabbrev_family = CSL.FIELD_CATEGORY_REMAP[family_var];
          var preferredJurisdiction;
          if (!myabbrev_family) {
              return basevalue;
          }
  
          var variable = family_var;
          var normalizedKey = basevalue;
  
          if (state.sys.normalizeAbbrevsKey) {
              normalizedKey = state.sys.normalizeAbbrevsKey(family_var, basevalue);
          }
          var quashCountry = false;
          if (variable === "jurisdiction" && normalizedKey) {
              quashCountry = normalizedKey.indexOf(":") === -1;
          }
          // Fix up jurisdiction codes
          if (["jurisdiction", "country"].indexOf(family_var) > -1 && basevalue === basevalue.toLowerCase()) {
              normalizedKey = basevalue.toUpperCase();
          }
          
          
          // Lazy retrieval of abbreviations.
          if (state.sys.getAbbreviation) {
  
              if (["jurisdiction", "country", "language-name", "language-name-original"].indexOf(variable) > -1) {
                  preferredJurisdiction = "default";
              } else if (Item.jurisdiction) {
                  preferredJurisdiction = Item.jurisdiction;
              } else {
                  preferredJurisdiction = "default";
              }
              var jurisdiction = state.transform.loadAbbreviation(preferredJurisdiction, myabbrev_family, normalizedKey, Item.language);
  
              // Some rules:
              // # variable === "country"
              // (1) If an abbreviation is associated with the code, then:
              //     (a) return the abbreviated form if form="short"
              // (2) Otherwise:
              //     (a) return the human-readable country name, or whatever is there if it's not a code
              // # variable === "jurisdiction"
              // (1) If !!getHumanForm(jurisdictionID, false, false):
              //     (a) If the code is top-level (i.e. a country):
              //         (i) return nothing -- this is what the "country" variable is for.
              //     (b) otherwise:
              //         (i) If an abbreviation is associated with the code, then:
              //             (A) return the abbreviated form
              //         (ii) Otherwise
              //             (A) return the human-readable form, with the country name & code removed from the front
              // (2) Otherwise:
              //     (a) abbreviate as per normal.
              // # other variables
              // (1) Abbreviate as per normal.
  
              if (state.transform.abbrevs[jurisdiction][myabbrev_family] && normalizedKey) {
                  // Safe to test presence of abbrev against raw object in this block
                  var abbrev = state.transform.abbrevs[jurisdiction][myabbrev_family][normalizedKey];
                  if (tok.strings.form === "short" && abbrev) {
                      if (quashCountry) {
                          value = "";
                      } else {
                          value = abbrev;
                      }
                  } else {
                    value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
                  }
              }
          }
          
          // Was for: 
          if (!value 
              && (!state.opt.development_extensions.require_explicit_legal_case_title_short || Item.type !== 'legal_case') 
              && altvar && Item[altvar] && use_field) {
              value = Item[altvar];
          }
          if (!value && !state.sys.getAbbreviation && state.sys.getHumanForm) {
            value = getCountryOrJurisdiction(variable, normalizedKey, quashCountry);
        }
          if (!value && !quashCountry && (!state.sys.getHumanForm || variable !== "jurisdiction")) {
              value = basevalue;
          }
          if (state.opt.development_extensions.force_title_abbrev_fallback) {
              if (variable === "title" && value === basevalue && Item["title-short"]) {
                  value = Item["title-short"];
              }
          }
          return value;
      }
  
      function getFieldLocale(Item,field) {
          var ret = state.opt["default-locale"][0].slice(0, 2);
          var localeRex;
          if (state.opt.development_extensions.strict_text_case_locales) {
              localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*| .*)");
          } else {
              localeRex = new RegExp("^([a-zA-Z]{2})(?:$|-.*|.*)");
          }
          if (Item.language) {
              var m = ("" + Item.language).match(localeRex);
              if (m) {
                  ret = m[1];
              } else {
                  // Set garbage to "Klingon".
                  ret = "tlh";
              }
          }
          if (Item.multi && Item.multi && Item.multi.main && Item.multi.main[field]) {
              ret = Item.multi.main[field];
          }
          if (!state.opt.development_extensions.strict_text_case_locales
              || state.opt.development_extensions.normalize_lang_keys_to_lowercase) {
  
              ret = ret.toLowerCase();
          }
          return ret;
      }
  
      // Internal functions
      function getTextSubField (Item, field, locale_type, use_default, stopOrig, family_var) {
          var opt, o, ret, opts;
          var usedOrig = stopOrig;
          var usingOrig = false;
  
          if (!Item[field]) {
              return {
                  name:"",
                  usedOrig:stopOrig,
                  token: CSL.Util.cloneToken(this)
              };
          }
          // If form="short" is selected ("family_var" is a misnomer
          // here, it means short-form requested), and the variable
          // has a short-form partner (i.e. it is in array
          // VARIABLES_WITH_SHORT_FORM), then it is run here as *-short".
          var stickyLongForm = false;
          if (CSL.VARIABLES_WITH_SHORT_FORM.indexOf(field) > -1
              && family_var) {
  
              field = field + "-short";
              stickyLongForm = true;
          }
          var breakMe = false;
          var firstValue = null;
          var fieldsToTry = [];
          if (field.slice(-6) === "-short") {
              fieldsToTry.push(field);
              fieldsToTry.push(field.slice(0, -6))
          } else {
              fieldsToTry.push(field);
          }
  
          for (var h=0,hlen=fieldsToTry.length; h<hlen; h++) {
              var variantMatch = false;
              var field = fieldsToTry[h];
  
              ret = {name:"", usedOrig:stopOrig,locale:getFieldLocale(Item,field)};
  
              opts = state.opt[locale_type] ? state.opt[locale_type].slice() : [];
              var hasVal = false;
  
              if (locale_type === 'locale-orig') {
                  if (!stopOrig) {
                      ret.name = Item[field];
                      ret.usedOrig = false;
                  }
                  hasVal = true;
                  usingOrig = true;
              } else if (use_default && ("undefined" === typeof opts || opts.length === 0)) {
                  // If we want the original, or if we don't have any specific guidance and we 
                  // definitely want output, just return the original value.
                  ret.name = Item[field];
                  ret.usedOrig = true;
                  hasVal = true;
                  usingOrig = true;
              }
  
              if (!hasVal) {
                  for (var i = 0, ilen = opts.length; i < ilen; i += 1) {
                      opt = opts[i];
                      o = opt.split(/[\-_]/)[0];
                      if (opt && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][opt]) {
                          ret.name = Item.multi._keys[field][opt];
                          ret.locale = opt;
                          hasVal = true;
                          variantMatch = true;
                          usingOrig = false;
                          break;
                      } else if (o && Item.multi && Item.multi._keys[field] && Item.multi._keys[field][o]) {
                          ret.name = Item.multi._keys[field][o];
                          ret.locale = o;
                          hasVal = true;
                          variantMatch = true;
                          usingOrig = false;
                          break;
                      }
                  }
                  if (!ret.name && use_default) {
                      ret = {name:Item[field], usedOrig:true, locale:getFieldLocale(Item,field)};
                      usingOrig = true;
                  }
              }
              ret.token = CSL.Util.cloneToken(this);
              if (h === 0) {
                  if (variantMatch) {
                      ret.found_variant_ok = true;
                  }
                  firstValue = ret;
                  if (!stickyLongForm && ("undefined" === typeof opts || opts.length === 0)) {
                      breakMe = true;
                  }
                  if (variantMatch) {
                      breakMe = true;
                  }
              } else {
                  if (!stickyLongForm && !variantMatch && firstValue) {
                      ret = firstValue;
                      field = fieldsToTry[0];
                  } else if (variantMatch) {
                      ret.found_variant_ok = true;
                  }
              }
              if (["title", "container-title"].indexOf(field) > -1) {
                  if (!usedOrig
                      && (!ret.token.strings["text-case"]
                          || ret.token.strings["text-case"] === "sentence"
                          || ret.token.strings["text-case"] === "normal")) {
                      var locale = state.opt.lang;
                      var lang;
                      if (usingOrig) {
                          lang = false;
                      } else {
                          lang = ret.locale;
                      }
                      var seg = field.slice(0,-5);
                      var sentenceCase = ret.token.strings["text-case"] === "sentence" ? true : false;
                      ret.name = CSL.titlecaseSentenceOrNormal(state, Item, seg, lang, sentenceCase);
                      delete ret.token.strings["text-case"];
                  }
              }
              if (breakMe) {
                  break;
              }
          }
          return ret;
      }
      this.getTextSubField = getTextSubField;
      
      // Setter for abbreviation lists
      // This initializes a single abbreviation based on known
      // data.
      function loadAbbreviation(jurisdiction, category, orig, lang) {
          if (!jurisdiction) {
              jurisdiction = "default";
          }
          var country = jurisdiction.split(":")[0];
          var domain = CSL.getAbbrevsDomain(state, country, lang);
          if (domain) {
              jurisdiction += ("@" + domain);
          }
          if (!orig) {
              if (!state.transform.abbrevs[jurisdiction]) {
                  state.transform.abbrevs[jurisdiction] = new state.sys.AbbreviationSegments();
              }
              if (!state.transform.abbrevs[jurisdiction][category]) {
                  state.transform.abbrevs[jurisdiction][category] = {};
              }
              return jurisdiction;
          }
          // The getAbbreviation() function should check the
          // external DB for the content key. If a value exists
          // in this[category] and no value exists in DB, the entry
          // in memory is left untouched. If a value does exist in
          // DB, the memory value is created.
          //
          // See testrunner_stdrhino.js for an example.
          if (state.sys.getAbbreviation) {
              jurisdiction = state.sys.getAbbreviation(state.opt.styleID, state.transform.abbrevs, jurisdiction, category, orig);
              if (!jurisdiction) {
                  jurisdiction = "default";
                  if (domain) {
                      jurisdiction += ("@" + domain);
                  }
              }
          }
          return jurisdiction;
      }
      this.loadAbbreviation = loadAbbreviation;
  
      function publisherCheck (tok, Item, primary, family_var) {
          var varname = tok.variables[0];
          if (state.publisherOutput && primary) {
              if (["publisher","publisher-place"].indexOf(varname) === -1) {
                  return false;
              } else {
                  // In this case, the publisher bundle will be rendered
                  // at the close of the group, by the closing group node.
                  state.publisherOutput[varname + "-token"] = tok;
                  state.publisherOutput.varlist.push(varname);
                  var lst = primary.split(/;\s*/);
                  if (lst.length === state.publisherOutput[varname + "-list"].length) {
                      state.publisherOutput[varname + "-list"] = lst;
                  }
                  // Abbreviate each of the items in the list here!
                  for (var i = 0, ilen = lst.length; i < ilen; i += 1) {
                      lst[i] = abbreviate(state, tok, Item, false, lst[i], family_var, true);
                  }
                  state.tmp[varname + "-token"] = tok;
                  return true;
              }
          }
          return false;
      }
  
      function citeFormCheck(Item, value) {
          var m = value.match(/^#([0-9]+).*>>>/);
          if (m && m[1]) {
              Item["cite-form"] = m[1];
          }
      }
      
      // The name transform code is placed here to keep similar things
      // in one place.  Obviously this module could do with a little
      // tidying up.
      function quashCheck(jurisdiction, value) {
          var m = value.match(/^(?:#[0-9]+)*(?:!((?:[-_a-z]+(?:(?:.*)))(?:,(?:[-_a-z]+(?:(?:.*))))*))*>>>/);
          if (m) {
              value = value.slice(m[0].length);
              if (m[1]) {
                  var fields = m[1].split(",");
                  for (var i = 0, ilen = fields.length; i < ilen; i += 1) {
                      var rawField = fields[i];
                      var mm = rawField.match(/^([-_a-z]+)(?:\:(.*))*$/);
                      var field = mm[1];
                      // trimmer is not available in getAmbiguousCite
                      var trimmer = state.tmp.abbrev_trimmer;
                      if (mm[2]) {
                          if (trimmer && jurisdiction) {
                              if (!trimmer[jurisdiction]) {
                                  trimmer[jurisdiction] = {};
                              }
                              trimmer[jurisdiction][field] = mm[2];
                          }
                      } else if (state.tmp.done_vars.indexOf(field) === -1) {
                          if (trimmer && jurisdiction) {
                              if (!trimmer.QUASHES[jurisdiction]) {
                                  trimmer.QUASHES[jurisdiction] = {};
                              }
                              trimmer.QUASHES[jurisdiction][field] = true;
                          }
                          state.tmp.done_vars.push(field);
                      }
                  }
              }
          }
          return value;
      }
      this.quashCheck = quashCheck;
  
      // Return function appropriate to selected options
      function getOutputFunction(variables, family_var, abbreviation_fallback, alternative_varname) {
          // var mytoken;
  
          // Set the primary_locale and secondary_locale lists appropriately.
          // No instance helper function for this; everything can be derived
          // from processor settings and rendering context.
  
          var localesets;
          var langPrefs = CSL.LangPrefsMap[variables[0]];
          if (!langPrefs) {
              localesets = false;
          } else {
              localesets = state.opt['cite-lang-prefs'][langPrefs];
          }
  
          return function (state, Item, item) {
              var primary, primary_locale, secondary, secondary_locale, tertiary, tertiary_locale, primary_tok;
              if (!variables[0] || (!Item[variables[0]] && !Item[alternative_varname])) {
                  return null;
              }
              //
              // Exploring the edges here.
              // "suppress-author" for string variables (mostly titles).
              //
              if (!state.tmp.just_looking && item && item["suppress-author"]) {
                  if (!state.tmp.probably_rendered_something && state.tmp.can_substitute.length() > 1) {
                      return null;
                  }
              }
              var slot = {primary:false, secondary:false, tertiary:false};
              if (state.tmp.area.slice(-5) === "_sort") {
                  slot.primary = 'locale-sort';
              } else {
                  if (localesets && localesets.length === 1 && localesets[0] === "locale-orig") {
                      slot.primary = "locale-orig";
                      localesets = false;
                  } else if (localesets && !state.tmp.multi_layout) {
                      var slotnames = ["primary", "secondary", "tertiary"];
                      for (var i = 0, ilen = slotnames.length; i < ilen; i += 1) {
                          if (localesets.length - 1 <  i) {
                              break;
                          }
                          if (localesets[i]) {
                              slot[slotnames[i]] = 'locale-' + localesets[i];
                          }
                      }
                  } else {
                      slot.primary = 'locale-orig';
                  }
              }
              
              if (variables[0] === "title-short" 
                  || (state.tmp.area !== "bibliography"
                      && !(state.tmp.area === "citation"
                           && state.opt.xclass === "note"
                           && item && !item.position))) {
                  
                  slot.secondary = false;
                  slot.tertiary = false;
              }
  
              if (state.tmp.multi_layout) {
                  slot.secondary = false;
                  slot.tertiary = false;
              }
              
              // Problem for multilingual: we really should be
              // checking for sanity on the basis of the output
              // strings to be actually used. (also below)
              if (state.tmp["publisher-list"]) {
                  if (variables[0] === "publisher") {
                      state.tmp["publisher-token"] = this;
                  } else if (variables[0] === "publisher-place") {
                      state.tmp["publisher-place-token"] = this;
                  }
                  return null;
              }
              
              // tmp.lang_array carries the current locale IDs of the style
              // and the item. Field-level locale IDs are added here, so
              // we clone it to allow reset.
              var oldLangArray = state.tmp.lang_array.slice();
  
              // True is for transform fallback
              var res = getTextSubField.call(this, Item, variables[0], slot.primary, true, null, family_var);
              primary = res.name;
              primary_locale = res.locale;
              var primary_tok = res.token;
              var primaryUsedOrig = res.usedOrig;
              if (family_var && !res.found_variant_ok) {
                  primary = abbreviate(state, primary_tok, Item, alternative_varname, primary, family_var, true);
                  // Suppress subsequent use of another variable if requested by
                  // hack syntax in this abbreviation short form.
                  if (primary) {
                      // We run quash-check in getAmbiguousCite, to possibly pick up a cite-form value.
                      citeFormCheck(Item, primary);
                      if (!state.tmp.just_looking) {
                          primary = quashCheck(Item.jurisdiction, primary);
                      }
                  }
              }
              if (publisherCheck(this, Item, primary, family_var)) {
                  state.tmp.lang_array = oldLangArray;
                  return null;
              }
  
              // No fallback for secondary and tertiary
              secondary = false;
              tertiary = false;
              var secondary_tok;
              var tertiary_tok;
              if (slot.secondary) {
                  res = getTextSubField.call(this, Item, variables[0], slot.secondary, false, res.usedOrig, null, family_var);
                  secondary = res.name;
                  secondary_locale = res.locale;
                  secondary_tok = res.token;
                  if (family_var && !res.found_variant_ok) {
                      if (secondary) {
                          // The abbreviate() function could use a cleanup, after Zotero correct to use title-short
                          secondary = abbreviate(state, secondary_tok, Item, false, secondary, family_var, true);
                      }
                  }
                  //print("XXX secondary_locale: "+secondary_locale);
              }
              if (slot.tertiary) {
                  res = getTextSubField.call(this, Item, variables[0], slot.tertiary, false, res.usedOrig, null, family_var);
                  tertiary = res.name;
                  tertiary_locale = res.locale;
                  tertiary_tok = res.token;
                  if (family_var && !res.found_variant_ok) {
                      if (tertiary) {
                          // The abbreviate() function could use a cleanup, after Zotero correct to use title-short
                          tertiary = abbreviate(state, tertiary_tok, Item, false, tertiary, family_var, true);
                      }
                  }
                  //print("XXX tertiary_locale: "+tertiary_locale);
              }
              
              // Decoration of primary (currently translit only) goes here
              var primaryPrefix;
              if (slot.primary === "locale-translit") {
                  primaryPrefix = state.opt.citeAffixes[langPrefs][slot.primary].prefix;
              }                
              // XXX This should probably protect against italics at higher
              // levels.
  
              if (primaryPrefix === "<i>" && variables[0] === 'title' && !primaryUsedOrig) {
                  var hasItalic = false;
                  for (var i = 0, ilen = primary_tok.decorations.length; i < ilen; i += 1) {
                      if (primary_tok.decorations[i][0] === "@font-style"
                          && primary_tok.decorations[i][1] === "italic") {
                          
                          hasItalic = true;
                      }
                  }
                  if (!hasItalic) {
                      primary_tok.decorations.push(["@font-style", "italic"]);
                  }
              }
  
              //print("XXX "+primary_tok.strings["text-case"]);
              if (primary_locale !== "en" && primary_tok.strings["text-case"] === "title") {
                  primary_tok.strings["text-case"] = "passthrough";
              }
              
              if ("title" === variables[0]) {
                  primary = CSL.demoteNoiseWords(state, primary, this["leading-noise-words"]);
              }
              if (secondary || tertiary) {
  
                  state.output.openLevel("empty");
  
                  // A little too aggressive maybe.
                  primary_tok.strings.suffix = primary_tok.strings.suffix.replace(/[ .,]+$/,"");
                  if (primary_locale) {
                      state.tmp.lang_array = [primary_locale].concat(oldLangArray);
                  }
                  CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, null, null, primary_tok, primary_tok.strings.prefix + primary);
                  state.output.append(primary, primary_tok);
                  state.tmp.probably_rendered_something = true;
  
                  if (primary === secondary) {
                      secondary = false;
                  }
                  if (secondary) {
                      secondary_tok.strings.prefix = state.opt.citeAffixes[langPrefs][slot.secondary].prefix;
                      secondary_tok.strings.suffix = state.opt.citeAffixes[langPrefs][slot.secondary].suffix;
                      // Add a space if empty
                      if (!secondary_tok.strings.prefix) {
                          secondary_tok.strings.prefix = " ";
                      }
                      // Remove quotes
                      for (var i = secondary_tok.decorations.length - 1; i > -1; i += -1) {
                          if (['@quotes/true', '@font-style/italic', '@font-style/oblique', '@font-weight/bold'].indexOf(secondary_tok.decorations[i].join('/')) > -1) {
                              secondary_tok.decorations = secondary_tok.decorations.slice(0, i).concat(secondary_tok.decorations.slice(i + 1));
                          }
                      }
                      if (secondary_locale !== "en" && secondary_tok.strings["text-case"] === "title") {
                          secondary_tok.strings["text-case"] = "passthrough";
                      }
                      if (secondary_locale) {
                          state.tmp.lang_array = [secondary_locale].concat(oldLangArray);
                      }
                      var secondary_outer = new CSL.Token();
                      secondary_outer.decorations.push(["@font-style", "normal"]);
                      secondary_outer.decorations.push(["@font-weight", "normal"]);
                      state.output.openLevel(secondary_outer);
                      state.output.append(secondary, secondary_tok);
                      state.output.closeLevel();
  
                      var blob_obj = state.output.current.value();
                      var blobs_pos = state.output.current.value().blobs.length - 1;
                      // Suppress supplementary multilingual info on subsequent
                      // partners of a parallel cite?
                  }
                  if (primary === tertiary) {
                      tertiary = false;
                  }
                  
                  if (tertiary) {
                      tertiary_tok.strings.prefix = state.opt.citeAffixes[langPrefs][slot.tertiary].prefix;
                      tertiary_tok.strings.suffix = state.opt.citeAffixes[langPrefs][slot.tertiary].suffix;
                      // Add a space if empty
                      if (!tertiary_tok.strings.prefix) {
                          tertiary_tok.strings.prefix = " ";
                      }
                      // Remove quotes
                      for (var i = tertiary_tok.decorations.length - 1; i > -1; i += -1) {
                          if (['@quotes/true', '@font-style/italic', '@font-style/oblique', '@font-weight/bold'].indexOf(tertiary_tok.decorations[i].join('/')) > -1) {
                              tertiary_tok.decorations = tertiary_tok.decorations.slice(0, i).concat(tertiary_tok.decorations.slice(i + 1));
                          }
                      }
                      if (tertiary_locale !== "en" && tertiary_tok.strings["text-case"] === "title") {
                          tertiary_tok.strings["text-case"] = "passthrough";
                      }
                      if (tertiary_locale) {
                          state.tmp.lang_array = [tertiary_locale].concat(oldLangArray);
                      }
                      var tertiary_outer = new CSL.Token();
                      tertiary_outer.decorations.push(["@font-style", "normal"]);
                      tertiary_outer.decorations.push(["@font-weight", "normal"]);
                      state.output.openLevel(tertiary_outer);
                      state.output.append(tertiary, tertiary_tok);
                      state.output.closeLevel();
  
                      var blob_obj = state.output.current.value();
                      var blobs_pos = state.output.current.value().blobs.length - 1;
                      // Suppress supplementary multilingual info on subsequent
                      // partners of a parallel cite?
                      // See note above.
                  }
  
                  state.output.closeLevel();
              } else {
                  if (primary_locale) {
                      state.tmp.lang_array = [primary_locale].concat(oldLangArray);
                  }
                  CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, null, null, primary_tok, primary_tok.strings.prefix + primary);
                  state.output.append(primary, primary_tok);
                  state.tmp.probably_rendered_something = true;
              }
  
              state.tmp.lang_array = oldLangArray;
                  
              if (state.tmp.can_block_substitute) {
                  state.tmp.name_node.children.push(state.output.current.value());
              }
              return null;
          };
      }
      this.getOutputFunction = getOutputFunction;
  };
  
  /*global CSL: true */
  
  /**
   * Style token.
   * <p>This class provides the tokens that define
   * the runtime version of the style.  The tokens are
   * instantiated by {@link CSL.Core.Build}, but the token list
   * must be post-processed with
   * {@link CSL.Core.Configure} before it can be used to generate
   * citations.</p>
   * @param {String} name The node name represented by this token.
   * @param {Int} tokentype A flag indicating whether this token
   * marks the start of a node, the end of a node, or is a singleton.
   * @class
   */
  CSL.Token = function (name, tokentype, conditional) {
      /**
       * Name of the element.
       * <p>This corresponds to the element name of the
       * relevant tag in the CSL file.
       */
      this.name = name;
      /**
       * Strings and other static content specific to the element.
       */
      this.strings = {};
      this.strings.delimiter = undefined;
      this.strings.prefix = "";
      this.strings.suffix = "";
      /**
       * Formatting parameters.
       * <p>This is a placeholder at instantiation.  It is
       * replaced by the result of {@link CSL.setDecorations}
       * when the tag is created and configured during {@link CSL.Core.Build}
       * by {@link CSL.XmlToToken}.  The parameters for particular
       * formatting attributes are stored as string arrays, which
       * map to formatting functions at runtime,
       * when the output format is known.  Note that the order in which
       * parameters are registered is fixed by the constant
       * {@link CSL.FORMAT_KEY_SEQUENCE}.
       */
      this.decorations = [];
      this.variables = [];
      /**
       * Element functions.
       * <p>Functions implementing the styling behaviour of the element
       * are pushed into this array in the {@link CSL.Core.Build} phase.
       */
      this.execs = [];
      /**
       * Token type.
       * <p>This is a flag constant indicating whether the token represents
       * a start tag, an end tag, or is a singleton.</p>
       */
      this.tokentype = tokentype;
  
      // Conditional attributes added to bare tokens at runtime
      
      /**
       * Condition evaluator.
       * <p>This is a placeholder that receives a single function, and is
       * only relevant for a conditional branching tag (<code>if</code> or
       * <code>else-if</code>).  The function implements the argument to
       * the <code>match=</code> attribute (<code>any</code>, <code>all</code>
       * or <code>none</code>), by executing the functions registered in the
       * <code>tests</code> array (see below), and reacting accordingly.  This
       * function is invoked by the execution wrappers found in
       * {@link CSL.Engine}.</p>
       */
      // this.evaluator = false;
      /**
       * Conditions.
       * <p>Functions that evaluate to true or false, implementing
       * various posisble attributes to the conditional branching tags,
       * are registered here during {@link CSL.Core.Build}.
       * </p>
       */
      // this.tests = [];
      /**
       * Jump point on success.
       * <p>This holds the list jump point to be used when the
       * <code>evaluator</code> function of a conditional tag
       * returns true (success).  The jump index value is set during the
       * back-to-front token pass performed during {@link CSL.Core.Configure}.
       * </p>
       */
      // this.succeed = false;
      /**
       * Jump point on failure.
       * <p>This holds the list jump point to be used when the
       * <code>evaluator</code> function of a conditional tag
       * returns false (failure).  Jump index values are set during the
       * back-to-front token pass performed during {@link CSL.Core.Configure}.
       * </p>
       */
      // this.fail = false;
      /**
       * Index of next token.
       * <p>This holds the index of the next token in the
       * token list, which is the default "jump-point" for ordinary
       * processing.  Jump index values are set during the
       * back-to-front token pass performed during {@link CSL.Core.Configure}.
       * </p>
       */
      // this.next = false;
  };
  
  // Have needed this for yonks
  CSL.Util.cloneToken = function (token) {
      var newtok, key, pos, len;
      if ("string" === typeof token) {
          return token;
      }
      newtok = new CSL.Token(token.name, token.tokentype);
      for (var key in token.strings) {
          if (token.strings.hasOwnProperty(key)) {
              newtok.strings[key] = token.strings[key];
          }
      }
      if (token.decorations) {
          newtok.decorations = [];
          for (pos = 0, len = token.decorations.length; pos < len; pos += 1) {
              newtok.decorations.push(token.decorations[pos].slice());
          }
      }
      if (token.variables) {
          newtok.variables = token.variables.slice();
      }
      // Probably overkill; this is only used for cloning formatting
      // tokens.
      if (token.execs) {
          newtok.execs = token.execs.slice();
          if (token.tests) {
              newtok.tests = token.tests.slice();
          }
      }
      return newtok;
  };
  
  /*global CSL: true */
  
  /**
   * Ambiguous Cite Configuration Object
   * @class
   */
  CSL.AmbigConfig = function () {
      this.maxvals = [];
      this.minval = 1;
      this.names = [];
      this.givens = [];
      this.year_suffix = false;
      this.disambiguate = 0;
  };
  
  /*global CSL: true */
  
  CSL.Blob = function (str, token, levelname) {
      var len, pos, key;
      this.levelname = levelname;
      //print(levelname);
      if (token) {
          this.strings = {"prefix":"","suffix":""};
          for (var key in token.strings) {
              if (token.strings.hasOwnProperty(key)) {
                  this.strings[key] = token.strings[key];
              }
          }
          this.decorations = [];
          if (token.decorations === undefined) {
              len = 0;
          } else {
              len = token.decorations.length;
          }
          for (pos = 0; pos < len; pos += 1) {
              this.decorations.push(token.decorations[pos].slice());
          }
      } else {
          this.strings = {};
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.strings.delimiter = "";
          this.decorations = [];
      }
      if ("string" === typeof str) {
          this.blobs = str;
      } else if (str) {
          this.blobs = [str];
      } else {
          this.blobs = [];
      }
      this.alldecor = [this.decorations];
  };
  
  
  CSL.Blob.prototype.push = function (blob) {
      if ("string" === typeof this.blobs) {
          CSL.error("Attempt to push blob onto string object");
      } else if (false !== blob) {
          blob.alldecor = blob.alldecor.concat(this.alldecor);
          this.blobs.push(blob);
      }
  };
  
  /*global CSL: true */
  
  /**
   * An output instance object representing a number or a range
   *
   * with attributes next and start, and
   * methods isRange(), renderStart(), renderEnd() and renderRange().
   * At render time, the output queue will perform optional
   * collapsing of these objects in the queue, according to
   * configurable options, and apply any decorations registered
   * in the object to the output elements.
   * @namespace Range object and friends.
   */
  
  CSL.NumericBlob = function (state, particle, num, mother_token, id) {
      // item id is used to assure that prefix delimiter is invoked only
      // when joining blobs across items
      this.id = id;
      this.alldecor = [];
      this.num = num;
      this.particle = particle;
      this.blobs = num.toString();
      this.status = CSL.START;
      this.strings = {};
      if (mother_token) {
          if (mother_token.strings["text-case"]) {
              var textCase = mother_token.strings["text-case"];
              this.particle = CSL.Output.Formatters[textCase](state, this.particle);
              this.blobs = CSL.Output.Formatters[textCase](state, this.blobs);
          }
          this.gender = mother_token.gender;
          this.decorations = mother_token.decorations;
          this.strings.prefix = mother_token.strings.prefix;
          this.strings.suffix = mother_token.strings.suffix;
          this.strings["text-case"] = mother_token.strings["text-case"];
          this.successor_prefix = mother_token.successor_prefix;
          this.range_prefix = mother_token.range_prefix;
          this.splice_prefix = mother_token.splice_prefix;
          this.formatter = mother_token.formatter;
          if (!this.formatter) {
              this.formatter =  new CSL.Output.DefaultFormatter();
          }
          if (this.formatter) {
              this.type = this.formatter.format(1);
          }
      } else {
          this.decorations = [];
          this.strings.prefix = "";
          this.strings.suffix = "";
          this.successor_prefix = "";
          this.range_prefix = "";
          this.splice_prefix = "";
          this.formatter = new CSL.Output.DefaultFormatter();
      }
  };
  
  
  CSL.NumericBlob.prototype.setFormatter = function (formatter) {
      this.formatter = formatter;
      this.type = this.formatter.format(1);
  };
  
  
  CSL.Output.DefaultFormatter = function () {};
  
  CSL.Output.DefaultFormatter.prototype.format = function (num) {
      return num.toString();
  };
  
  CSL.NumericBlob.prototype.checkNext = function (next,start) {
      if (start) {
          this.status = CSL.START;
          if ("object" === typeof next) {
              if (next.num === (this.num + 1)) {
                  next.status = CSL.SUCCESSOR;
              } else {
                  next.status = CSL.SEEN;
              }
          }
      } else if (! next || !next.num || this.type !== next.type || next.num !== (this.num + 1)) {
          if (this.status === CSL.SUCCESSOR_OF_SUCCESSOR) {
              this.status = CSL.END;
          }
          if ("object" === typeof next) { 
             next.status = CSL.SEEN;
          }
      } else { // next number is in the sequence
          if (this.status === CSL.START || this.status === CSL.SEEN) {
              next.status = CSL.SUCCESSOR;
          } else if (this.status === CSL.SUCCESSOR || this.status === CSL.SUCCESSOR_OF_SUCCESSOR) {
              if (this.range_prefix) {
                  next.status = CSL.SUCCESSOR_OF_SUCCESSOR;
                  this.status = CSL.SUPPRESS;
              } else {
                  next.status = CSL.SUCCESSOR;
              }
          }
          // wakes up the correct delimiter.
          //if (this.status === CSL.SEEN) {
          //    this.status = CSL.SUCCESSOR;
          //}
      }
  };
  
  
  CSL.NumericBlob.prototype.checkLast = function (last) {
      // Used to adjust final non-range join
      if (this.status === CSL.SEEN 
      || (last.num !== (this.num - 1) && this.status === CSL.SUCCESSOR)) {
          this.status = CSL.SUCCESSOR;
          return true;
      }
      return false;
  };
  
  /*global CSL: true */
  
  CSL.Util.fixDateNode = function (parent, pos, node) {
      var form, variable, datexml, subnode, partname, attr, val, prefix, suffix, children, subchildren, display, cslid;
      
      var lingo = this.cslXml.getAttributeValue(node, "lingo");
  
      var default_locale = this.cslXml.getAttributeValue(node, "default-locale");
  
      // Raise date flag, used to control inclusion of year-suffix key in sorts
      // This may be a little reckless: not sure what happens on no-date conditions
      this.build.date_key = true;
  
      form = this.cslXml.getAttributeValue(node, "form");
      var lingo;
      if (default_locale) {
          lingo = this.opt["default-locale"][0];
      } else {
          lingo = this.cslXml.getAttributeValue(node, "lingo");
      }
  
      if (!this.getDate(form, default_locale)) {
          return parent;
      }
  
      var dateparts = this.cslXml.getAttributeValue(node, "date-parts");
  
      variable = this.cslXml.getAttributeValue(node, "variable");
      prefix = this.cslXml.getAttributeValue(node, "prefix");
      suffix = this.cslXml.getAttributeValue(node, "suffix");
      display = this.cslXml.getAttributeValue(node, "display");
      cslid = this.cslXml.getAttributeValue(node, "cslid");
  
      //
      // Xml: Copy a node
      //
      datexml = this.cslXml.nodeCopy(this.getDate(form, default_locale));
      this.cslXml.setAttribute(datexml, 'lingo', this.opt.lang);
      this.cslXml.setAttribute(datexml, 'form', form);
      this.cslXml.setAttribute(datexml, 'date-parts', dateparts);
      this.cslXml.setAttribute(datexml, "cslid", cslid);
      //
      // Xml: Set attribute
      //
      this.cslXml.setAttribute(datexml, 'variable', variable);
      this.cslXml.setAttribute(datexml, 'default-locale', default_locale);
      //
      // Xml: Set flag
      //
      if (prefix) {
          //
          // Xml: Set attribute
          //
          this.cslXml.setAttribute(datexml, "prefix", prefix);
      }
      if (suffix) {
          //
          // Xml: Set attribute
          //
          this.cslXml.setAttribute(datexml, "suffix", suffix);
      }
      if (display) {
          //
          // Xml: Set attribute
          //
          this.cslXml.setAttribute(datexml, "display", display);
      }
      //
      // Step through any date-part children of the layout date node,
      // and lay their attributes onto the corresponding node in the
      // locale template node copy.
      //
      // tests: language_BaseLocale
      // tests: date_LocalizedTextInStyleLocaleWithTextCase
      //
      children = this.cslXml.children(datexml);
      for (var key in children) {
          subnode = children[key];
          if ("date-part" === this.cslXml.nodename(subnode)) {
              partname = this.cslXml.getAttributeValue(subnode, "name");
              if (default_locale) {
                  this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, "@default-locale", "true");
              }
          }
      }
  
      children = this.cslXml.children(node);
      for (var key in children) {
          subnode = children[key];
          if ("date-part" === this.cslXml.nodename(subnode)) {
              partname = this.cslXml.getAttributeValue(subnode, "name");
              subchildren = this.cslXml.attributes(subnode);
              for (attr in subchildren) {
                  if ("@name" === attr) {
                      continue;
                  }
                  if (lingo && lingo !== this.opt.lang) {
                      if (["@suffix", "@prefix", "@form"].indexOf(attr) > -1) {
                          continue;
                      }
                  }
                  val = subchildren[attr];
                  this.cslXml.setAttributeOnNodeIdentifiedByNameAttribute(datexml, "date-part", partname, attr, val);
              }
          }
      }
      
      if ("year" === this.cslXml.getAttributeValue(node, "date-parts")) {
  
          //
          // Xml: Find one node by attribute and delete
          //
          this.cslXml.deleteNodeByNameAttribute(datexml, 'month');
          //
          // Xml: Find one node by attribute and delete
          //
          this.cslXml.deleteNodeByNameAttribute(datexml, 'day');
          
      } else if ("year-month" === this.cslXml.getAttributeValue(node, "date-parts")) {
          //
          // Xml: Find one node by attribute and delete
          //
          this.cslXml.deleteNodeByNameAttribute(datexml, 'day');
      } else if ("month-day" === this.cslXml.getAttributeValue(node, "date-parts")) {
          //
          // Xml: Get child nodes
          //
          var childNodes = this.cslXml.children(datexml);
          for (var i=1,ilen=this.cslXml.numberofnodes(childNodes);i<ilen;i++) {
              //
              // Xml: Get attribute value (for string comparison)
              //
              if (this.cslXml.getAttributeValue(childNodes[i], 'name') === "year") {
                  //
                  // Xml: Set attribute value
                  //
                  this.cslXml.setAttribute(childNodes[i-1], "suffix", "");
                  break;
              }
          }
          //
          // Xml: Find one node by attribute and delete
          //
          this.cslXml.deleteNodeByNameAttribute(datexml, 'year');
      }
      return this.cslXml.insertChildNodeAfter(parent, node, pos, datexml);
  };
  
  /*global CSL: true */
  
  CSL.dateMacroAsSortKey = function (state, Item) {
      CSL.dateAsSortKey.call(this, state, Item, true);
  };
  
  
  CSL.dateAsSortKey = function (state, Item, isMacro) {
      var dp, elem, value, e, yr, prefix, i, ilen;
      var variable = this.variables[0];
      var macroFlag = "empty";
      if (isMacro && state.tmp.extension) {
          macroFlag = "macro-with-date";
      }
      dp = Item[variable];
      if ("undefined" === typeof dp) {
          dp = {"date-parts": [[0]] };
      }
      if ("undefined" === typeof this.dateparts) {
          this.dateparts = ["year", "month", "day"];
      }
      if (dp.raw) {
          dp = state.fun.dateparser.parseDateToArray(dp.raw);
      } else if (dp["date-parts"]) {
          dp = state.dateParseArray(dp);
      }
      if ("undefined" === typeof dp) {
          dp = {};
      }
      if (dp.year) {
          for (i = 0, ilen = CSL.DATE_PARTS_INTERNAL.length; i < ilen; i += 1) {
              elem = CSL.DATE_PARTS_INTERNAL[i];
              value = 0;
              e = elem;
              if (e.slice(-4) === "_end") {
                  e = e.slice(0, -4);
              }
              if (dp[elem] && this.dateparts.indexOf(e) > -1) {
                  value = dp[elem];
              }
              if (elem.slice(0, 4) === "year") {
                  yr = CSL.Util.Dates[e].numeric(state, value);
                  var prefix = "1";
                  if (yr[0] === "-") {
                      prefix = "0";
                      yr = yr.slice(1);
                      yr = 9999 - parseInt(yr, 10);
                  }
                  state.output.append(CSL.Util.Dates[elem.slice(0, 4)].numeric(state, (prefix + yr)), macroFlag);
              } else {
                  value = CSL.Util.Dates[e]["numeric-leading-zeros"](state, value);
                  // Ugh.
                  if (!value) {
                      value = "00";
                  }
                  state.output.append(value, macroFlag);
              }
          }
      }
  };
  
  CSL.Engine.prototype.dateParseArray = function (date_obj) {
      var ret, field, dp, exts;
      ret = {};
      for (field in date_obj) {
          if (field === "date-parts") {
              dp = date_obj["date-parts"];
              if (dp.length > 1) {
                  if (dp[0].length !== dp[1].length) {
                      CSL.error("CSL data error: element mismatch in date range input.");
                  }
              }
              exts = ["", "_end"];
              for (var i = 0, ilen = dp.length; i < ilen; i += 1) {
                  for (var j = 0, jlen = CSL.DATE_PARTS.length; j < jlen; j += 1) {
                      if (isNaN(parseInt(dp[i][j], 10))) {
                          ret[(CSL.DATE_PARTS[j] + exts[i])] = undefined;
                      } else {
                          ret[(CSL.DATE_PARTS[j] + exts[i])] = parseInt(dp[i][j], 10);
                      }
                  }
              }
          } else if (date_obj.hasOwnProperty(field)) {
  
              // XXXX: temporary workaround
  
              if (field === "literal" && "object" === typeof date_obj.literal && "string" === typeof date_obj.literal.part) {
                  CSL.debug("Warning: fixing up weird literal date value");
                  ret.literal = date_obj.literal.part;
              } else {
                  ret[field] = date_obj[field];
              }
          }
      }
      return ret;
  };
  
  /*global CSL: true */
  
  CSL.Util.Names = {};
  
  CSL.Util.Names.compareNamesets = CSL.NameOutput.prototype._compareNamesets;
  
  /**
   * Un-initialize a name (quash caps after first character)
   */
  CSL.Util.Names.unInitialize = function (state, name) {
      var i, ilen, namelist, punctlist, ret;
      if (!name) {
          return "";
      }
      namelist = name.split(/(?:\-|\s+)/);
      punctlist = name.match(/(\-|\s+)/g);
      ret = "";
      for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          // if (CSL.ALL_ROMANESQUE_REGEXP.exec(namelist[i].slice(0,-1)) 
          //    && namelist[i] 
          //    && namelist[i] !== namelist[i].toUpperCase()) {
  
              // More or less like this, to address the following fault report:
              // http://forums.zotero.org/discussion/17610/apsa-problems-with-capitalization-of-mc-mac-etc/
  
              // Leaving the name string untouched because name capitalization is varied and wonderful.
              // https://github.com/Juris-M/citeproc-js/issues/43
              
              //namelist[i] = namelist[i].slice(0, 1) + namelist[i].slice(1, 2).toLowerCase() + namelist[i].slice(2);
          // }
          ret += namelist[i];
          if (i < ilen - 1) {
              ret += punctlist[i];
          }
      }
      return ret;
  };
  
  /**
   * Initialize a name.
   */
  CSL.Util.Names.initializeWith = function (state, name, terminator, normalizeOnly) {
      var i, ilen, mm, lst, ret;
      if (!name) {
          return "";
      }
      if (!terminator) {
          terminator = "";
      }
      if (["Lord", "Lady"].indexOf(name) > -1
          || (!name.replace(/^(?:<[^>]+>)*/, "").match(CSL.STARTSWITH_ROMANESQUE_REGEXP)
              && !terminator.match("%s"))) {
          return name;
      }
  
      if (state.opt["initialize-with-hyphen"] === false) {
          name = name.replace(/\-/g, " ");
      }
  
      // We need to suss out what is a set of initials or abbreviation,
      // so that they can be selectively normalized. Steps might be:
      //   (1) Split the string
      //   (2) Step through the string, deleting periods and, if initalize="false", then
      //       (a) note abbreviations and initials (separately).
      //   (3) If initialize="false" then:
      //       (a) Do the thing below, but only pushing terminator; or else
      //       (b) Do the thing below
  
      name = name.replace(/\s*\-\s*/g, "-").replace(/\s+/g, " ");
      name = name.replace(/-([a-z])/g, "\u2013$1");
  
      for (var i=name.length-2; i>-1; i += -1) {
          if (name.slice(i, i+1) === "." && name.slice(i+1, i+2) !== " ") {
              name = name.slice(0, i) + ". " + name.slice(i+1);
          }
      }
  
      // (1) Split the string
      var nameSplits = CSL.Output.Formatters.nameDoppel.split(name);
      var namelist = [];
      namelist = [nameSplits.strings[0]];
  
      if (nameSplits.tags.length === 0) {
          var mmm = namelist[0].match(/[^\.]+$/);
          if (mmm && mmm[0].length === 1 && mmm[0] !== mmm[0].toLowerCase()) {
              namelist[0] += ".";
          }
      }
  
      for (i = 1, ilen = nameSplits.strings.length; i < ilen; i += 1) {
          namelist.push(nameSplits.tags[i - 1]);
          namelist.push(nameSplits.strings[i]);
      }
  
      // Use doInitializeName or doNormalizeName, depending on requirements.
      if (normalizeOnly) {
          ret = this.doNormalize(state, namelist, terminator);
      } else {
          ret = this.doInitialize(state, namelist, terminator);
      }
      ret = ret.replace(/\u2013([a-z])/g, "-$1");
      return ret;
  };
  
  CSL.Util.Names.notag = function(str) {
      return str.replace(/^(?:<[^>]+>)*/, "");
  };
  
  CSL.Util.Names.mergetag = function(state, tagstr, newstr) {
      var m = tagstr.match(/(?:-*<[^>]+>-*)/g);
      if (!m) {
          return newstr;
      } else {
          tagstr = m.join("");
      }
      m = newstr.match(/^(.*[^\s])*(\s+)$/);
      if (m) {
          m[1] = m[1] ? m[1] : "";
          newstr = m[1] + tagstr + m[2];
      } else {
          newstr = newstr + tagstr;
      }
      return newstr;
  };
  
  CSL.Util.Names.tagonly = function(state, str) {
      var m = str.match(/(?:<[^>]+>)+/);
      if (!m) {
          return str;
      } else {
          return m.join("");
      }
  };
  
  CSL.Util.Names.doNormalize = function (state, namelist, terminator) {
      var i, ilen;
      // namelist is a flat list of given-name elements and space-like separators between them
      terminator = terminator ? terminator : "";
      // Flag elements that look like abbreviations
      var isAbbrev = [];
      for (i = 0, ilen = namelist.length; i < ilen; i += 1) {
          if (this.notag(namelist[i]).length > 1 && this.notag(namelist[i]).slice(-1) === ".") {
              // namelist[i] = namelist[i].slice(0, -1);
              namelist[i] = namelist[i].replace(/^(.*)\.(.*)$/, "$1$2");
              isAbbrev.push(true);
          } else if (namelist[i].length === 1 && namelist[i].toUpperCase() === namelist[i]) {
              isAbbrev.push(true);
          } else {
              isAbbrev.push(false);
          }
      }
      // Step through the elements of the givenname array
      for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          // If the element is not an abbreviation, leave it and its trailing spaces alone
          if (isAbbrev[i]) {
              // For all elements but the last
              if (i < namelist.length - 2) {
                  // Start from scratch on space-like things following an abbreviation
                  namelist[i + 1] = this.tagonly(state, namelist[i+1]);
                  if (!isAbbrev[i+2]) {
                      namelist[i + 1] = this.tagonly(state, namelist[i+1]) + " ";
                  }
                  
                  // Add the terminator to the element
                  // If the following element is not a single-character abbreviation, remove a trailing zero-width non-break space, if present
                  // These ops may leave some duplicate cruft in the elements and separators. This will be cleaned at the end of the function.
                  if (namelist[i + 2].length > 1) {
                      namelist[i+1] = terminator.replace(/\ufeff$/, "") + namelist[i+1];
                  } else {
                      namelist[i+1] = this.mergetag(state, namelist[i+1], terminator);
                  }
              }
              // For the last element (if it is an abbreviation), just append the terminator
              if (i === namelist.length - 1) {
                  namelist[i] = namelist[i] + terminator;
              }
          }
      }
      // Remove trailing cruft and duplicate spaces, and return
      return namelist.join("").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/,"").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
  };
  
  CSL.Util.Names.doInitialize = function (state, namelist, terminator) {
      var i, ilen, m, j, jlen, lst, n;
      for (i = 0, ilen = namelist.length; i < ilen; i += 2) {
          n = namelist[i];
          if (!n) {
              continue;
          }
          m = n.match(CSL.NAME_INITIAL_REGEXP);
          if (!m && (!n.match(CSL.STARTSWITH_ROMANESQUE_REGEXP) && n.length > 1 && terminator.match("%s"))) {
              m = n.match(/(.)(.*)/);
          }
          if (m && m[2] && m[3]) {
              m[1] = m[1] + m[2];
              m[2] = "";
          }
          if (m && m[1].slice(0, 1) === m[1].slice(0, 1).toUpperCase()) {
              var extra = "";
              if (m[2]) {
                  var s = "";
                  lst = m[2].split("");
                  for (j = 0, jlen = lst.length; j < jlen; j += 1) {
                      var c = lst[j];
                      if (c === c.toUpperCase()) {
                          s += c;
                      } else {
                          break;
                      }
                  }
                  if (s.length < m[2].length) {
                      extra = CSL.toLocaleLowerCase.call(state, s);
                  }
              }
              namelist[i] = m[1] + extra;
              if (i < (ilen - 1)) {
                  if (terminator.match("%s")) {
                      namelist[i] = terminator.replace("%s", namelist[i]);
                  } else {
                      if (namelist[i + 1].indexOf("-") > -1) {
                          namelist[i + 1] = this.mergetag(state, namelist[i+1].replace("-", ""), terminator) + "-";
                      } else {
                          namelist[i + 1] = this.mergetag(state, namelist[i+1], terminator);
                      }
                  }
              } else {
                  if (terminator.match("%s")) {
                      namelist[i] = terminator.replace("%s", namelist[i]);
                  } else {
                      namelist.push(terminator);
                  }
              }
          } else if (n.match(CSL.ROMANESQUE_REGEXP) && (!m || !m[3])) {
              namelist[i] = " " + n;
          }
      }
      var ret = namelist.join("");
      ret = ret.replace(/[\u0009\u000a\u000b\u000c\u000d\u0020\ufeff\u00a0]+$/,"").replace(/\s*\-\s*/g, "-").replace(/[\u0009\u000a\u000b\u000c\u000d\u0020]+/g, " ");
      return ret;
  };
  
  CSL.Util.Names.getRawName = function (name) {
      var ret = [];
      if (name.literal) {
          ret.push(name.literal);
      } else {
          if (name.given) {
              ret.push(name.given);
          }
          if (name.family) {
              ret.push(name.family);
          }
      }
      return ret.join(" ");
  };
  
  /*global CSL: true */
  
  /**
   * Date mangling functions.
   * @namespace Date construction utilities
   */
  CSL.Util.Dates = {};
  
  /**
   * Year manglers
   * <p>short, long</p>
   */
  CSL.Util.Dates.year = {};
  
  /**
   * Convert year to long form
   * <p>This just passes the number back as a string.</p>
   */
  CSL.Util.Dates.year["long"] = function (state, num) {
      if (!num) {
          if ("boolean" === typeof num) {
              num = "";
          } else {
              num = 0;
          }
      }
      return num.toString();
  };
  
  /**
   * Crudely convert to Japanese Imperial form.
   * <p>Returns the result as a string.</p>
   */
  CSL.Util.Dates.year.imperial = function (state, num, end) {
      var year = "";
      if (!num) {
          if ("boolean" === typeof num) {
              num = "";
          } else {
              num = 0;
          }
      }
      end = end ? "_end" : "";
      var month = state.tmp.date_object["month" + end];
      month = month ? ""+month : "1";
      while (month.length < 2) {
          month = "0" + month;
      }
      var day = state.tmp.date_object["day" + end];
      day = day ? ""+day : "1";
      while (day.length < 2) {
          day = "0" + day;
      }
      var date = parseInt(num + month + day, 10);
      var label;
      var offset;
      if (date >= 18680908 && date < 19120730) {
          label = '\u660e\u6cbb';
          offset = 1867;
      } else if (date >= 19120730 && date < 19261225) {
          label = '\u5927\u6b63';
          offset = 1911;
      } else if (date >= 19261225 && date < 19890108) {
          label = '\u662d\u548c';
          offset = 1925;
      } else if (date >= 19890108) {
          label = '\u5e73\u6210';
          offset = 1988;
      }
      // This entire "imperial" code block should be cut. Scraped input
      // for this will be too ratty to be useful anyway.
      if (label && offset) {
          var normalizedKey = label;
          if (state.sys.normalizeAbbrevsKey) {
              // The first argument does not need to specify the exact variable
              // name.
              normalizedKey = state.sys.normalizeAbbrevsKey("number", label);
          }
          if (!state.transform.abbrevs['default']['number'][normalizedKey]) {
              // loadAbbreviation normally takes an item as fourth argument.
              // It is not available here, 
              state.transform.loadAbbreviation('default', "number", normalizedKey, null);
          }
          if (state.transform.abbrevs['default']['number'][normalizedKey]) {
              label = state.transform.abbrevs['default']['number'][normalizedKey];
          }
          year = label + (num - offset);
      }
      return year;
  };
  
  /**
   * Convert year to short form
   * <p>Just crops any 4-digit year to the last two digits.</p>
   */
  CSL.Util.Dates.year["short"] = function (state, num) {
      num = num.toString();
      if (num && num.length === 4) {
          return num.substr(2);
      }
  };
  
  
  /**
   * Convert year to short form
   * <p>Just crops any 4-digit year to the last two digits.</p>
   */
  CSL.Util.Dates.year.numeric = function (state, num) {
      var m, pre;
      num = "" + num;
      var m = num.match(/([0-9]*)$/);
      if (m) {
          pre = num.slice(0, m[1].length * -1);
          num = m[1];
      } else {
          pre = num;
          num = "";
      }
      while (num.length < 4) {
          num = "0" + num;
      }
      return (pre + num);
  };
  
  
  /*
   * MONTH manglers
   * normalize
   * long, short, numeric, numeric-leading-zeros
   */
  CSL.Util.Dates.normalizeMonth = function (num, useSeason) {
      var ret;
      if (!num) {
          num = 0;
      }
      num = "" + num;
      if (!num.match(/^[0-9]+$/)) {
          num = 0;
      }
      num = parseInt(num, 10);
      if (useSeason) {
          var res = {stub: "month-", num: num};
          if (res.num < 1 || res.num > 24) {
              res.num = 0;
          } else {
              while (res.num > 16) {
                  res.num = res.num - 4;
              }
              if (res.num > 12) {
                  res.stub = "season-";
                  res.num = res.num - 12;
              }
          }
          ret = res;
      } else {
          if (num < 1 || num > 12) {
              num = 0;
          }
          ret = num;
      }
      return ret;
  };
  
  CSL.Util.Dates.month = {};
  
  /**
   * Convert month to numeric form
   * <p>This just passes the number back as a string.</p>
   */
  CSL.Util.Dates.month.numeric = function (state, num) {
      var num = CSL.Util.Dates.normalizeMonth(num);
      if (!num) {
          num = "";
      }
      return num;
  };
  
  /**
   * Convert month to numeric-leading-zeros form
   * <p>This just passes the number back as string padded with zeros.</p>
   */
  CSL.Util.Dates.month["numeric-leading-zeros"] = function (state, num) {
      var num = CSL.Util.Dates.normalizeMonth(num);
      if (!num) {
          num = "";
      } else {
          num = "" + num;
          while (num.length < 2) {
              num = "0" + num;
          }
      }
      return num;
  };
  
  /**
   * Convert month to long form
   * <p>This passes back the month of the locale in long form.</p>
   */
  
  // Gender is not currently used. Is it needed?
  
  CSL.Util.Dates.month["long"] = function (state, num, gender, forceDefaultLocale) {
      var res = CSL.Util.Dates.normalizeMonth(num, true);
      var num = res.num;
      if (!num) {
          num = "";
      } else {
          num = "" + num;
          while (num.length < 2) {
              num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "long", 0, 0, false, forceDefaultLocale);
      }
      return num;
  };
  
  /**
   * Convert month to long form
   * <p>This passes back the month of the locale in short form.</p>
   */
  
  // See above.
  
  CSL.Util.Dates.month["short"] = function (state, num, gender, forceDefaultLocale) {
      var res = CSL.Util.Dates.normalizeMonth(num, true);
      var num = res.num;
      if (!num) {
          num = "";
      } else {
          num = "" + num;
          while (num.length < 2) {
              num = "0" + num;
          }
          num = state.getTerm(res.stub + num, "short", 0, 0, false, forceDefaultLocale);
      }
      return num;
  };
  
  /*
   * DAY manglers
   * numeric, numeric-leading-zeros, ordinal
   */
  CSL.Util.Dates.day = {};
  
  /**
   * Convert day to numeric form
   * <p>This just passes the number back as a string.</p>
   */
  CSL.Util.Dates.day.numeric = function (state, num) {
      return num.toString();
  };
  
  CSL.Util.Dates.day["long"] = CSL.Util.Dates.day.numeric;
  
  /**
   * Convert day to numeric-leading-zeros form
   * <p>This just passes the number back as a string padded with zeros.</p>
   */
  CSL.Util.Dates.day["numeric-leading-zeros"] = function (state, num) {
      if (!num) {
          num = 0;
      }
      num = num.toString();
      while (num.length < 2) {
          num = "0" + num;
      }
      return num.toString();
  };
  
  /**
   * Convert day to ordinal form
   * <p>This will one day pass back the number as a string with the
   * ordinal suffix appropriate to the locale.  For the present,
   * it just does what is most of the time right for English.</p>
   */
  CSL.Util.Dates.day.ordinal = function (state, num, gender) {
      return state.fun.ordinalizer.format(num, gender);
  };
  
  /*global CSL: true */
  
  /**
   * Helper functions for constructing sort keys.
   * @namespace Sort key utilities
   */
  CSL.Util.Sort = {};
  
  /**
   * Strip prepositions from a string
   * <p>Used when generating sort keys.</p>
   */
  CSL.Util.Sort.strip_prepositions = function (str) {
      var m;
      if ("string" === typeof str) {
          m = str.match(/^(([aA]|[aA][nN]|[tT][hH][eE])\s+)/);
      }
      if (m) {
          str = str.substr(m[1].length);
      }
      return str;
  };
  
  /*global CSL: true */
  
  CSL.Util.substituteStart = function (state, target) {
      var element_trace, display, bib_first, func, choose_start, if_start, nodetypes;
      func = function (state, Item, item) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
              if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                  state.tmp.strip_periods += 1;
                  break;
              }
          }
      };
      this.execs.push(func);
      if (this.decorations && state.opt.development_extensions.csl_reverse_lookup_support) {
          this.decorations.reverse();
          this.decorations.push(["@showid","true", this.cslid]);
          this.decorations.reverse();
      }
      //
      // Contains body code for both substitute and first-field/remaining-fields
      // formatting.
      //
  
      nodetypes = ["number", "date", "names"];
      if (("text" === this.name && !this.postponed_macro) || nodetypes.indexOf(this.name) > -1) {
          element_trace = function (state, Item, item) {
              if (state.tmp.element_trace.value() === "author" || "names" === this.name) {
                  if (!state.tmp.just_looking && item && item["author-only"] && state.tmp.area !== "intext") {
                      if (!state.tmp.probably_rendered_something) {
                      } else {
                          state.tmp.element_trace.push("suppress-me");
                      }
                  }
                  if (!state.tmp.just_looking && item && item["suppress-author"]) {
                      if (!state.tmp.probably_rendered_something) {
                          state.tmp.element_trace.push("suppress-me");
                      }
                  }
              }
              else if ("date" === this.name) {
                  if (!state.tmp.just_looking && item && item["author-only"] && state.tmp.area !== "intext") {
                      if (state.tmp.probably_rendered_something) {
                          state.tmp.element_trace.push("suppress-me");
                      }
                  }
                  /*
                  if (!state.tmp.just_looking && item && item["suppress-author"]) {
                      if (state.tmp.probably_rendered_something) {
                          //state.tmp.element_trace.push("suppress-me");
                      }
                  }
                  */
              } else {
                  if (!state.tmp.just_looking && item && item["author-only"] && state.tmp.area !== "intext") {
                      // XXX can_block_substitute probably is doing nothing here. The value is always true.
                      if (!state.tmp.probably_rendered_something && state.tmp.can_block_substitute) {
                      } else {
                          state.tmp.element_trace.push("suppress-me");
                      }
                  } else if (item && item["suppress-author"]) {
                      state.tmp.element_trace.push("do-not-suppress-me");
                  }
              }
          };
          this.execs.push(element_trace);
      }
      display = this.strings.cls;
      this.strings.cls = false;
      if (state.build.render_nesting_level === 0) {
          //
          // The markup formerly known as @bibliography/first
          //
          // Separate second-field-align from the generic display logic.
          // There will be some code replication, but not in the
          // assembled style.
          //
          if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
              bib_first = new CSL.Token("group", CSL.START);
              bib_first.decorations = [["@display", "left-margin"]];
              func = function (state, Item) {
                  if (!state.tmp.render_seen) {
                      bib_first.strings.first_blob = Item.id;
                      state.output.startTag("bib_first", bib_first);
                  }
              };
              bib_first.execs.push(func);
              target.push(bib_first);
          } else if (CSL.DISPLAY_CLASSES.indexOf(display) > -1) {
              bib_first = new CSL.Token("group", CSL.START);
              bib_first.decorations = [["@display", display]];
              func = function (state, Item) {
                  bib_first.strings.first_blob = Item.id;
                  state.output.startTag("bib_first", bib_first);
              };
              bib_first.execs.push(func);
              target.push(bib_first);
          }
          state.build.cls = display;
      }
      state.build.render_nesting_level += 1;
      // Should this be render_nesting_level, with the increment
      // below? ... ?
      if (state.build.substitute_level.value() === 1) {
          //
          // All top-level elements in a substitute environment get
          // wrapped in conditionals.  The substitute_level variable
          // is a stack, because spanned names elements (with their
          // own substitute environments) can be nested inside
          // a substitute environment.
          //
          // (okay, we use conditionals a lot more than that.
          // we slot them in for author-only as well...)
          choose_start = new CSL.Token("choose", CSL.START);
          CSL.Node.choose.build.call(choose_start, state, target);
          if_start = new CSL.Token("if", CSL.START);
          //
          // Set a test of the shadow if token to skip this
          // macro if we have acquired a name value.
  
          // check for variable
          func = function () {
              if (state.tmp.can_substitute.value()) {
                  return true;
              }
              return false;
          };
          if_start.tests ? {} : if_start.tests = [];
          if_start.tests.push(func);
          if_start.test = state.fun.match.any(this, state, if_start.tests);
          target.push(if_start);
      }
  
      if (state.sys.variableWrapper
          && this.variables_real
          && this.variables_real.length) {
  
          func = function (state, Item, item) {
              if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
                  // Attach item data and variable names.
                  // Do with them what you will.
                  var variable_entry = new CSL.Token("text", CSL.START);
                  variable_entry.decorations = [["@showid", "true"]];
                  state.output.startTag("variable_entry", variable_entry);
                  var position = null;
                  if (item) {
                      position = item.position;
                  }
                  if (!position) {
                      position = 0;
                  }
                  var positionMap = [
                      "first",
                      "container-subsequent",
                      "subsequent",
                      "ibid",
                      "ibid-with-locator"
                  ];
                  var noteNumber = 0;
                  if (item && item.noteIndex) {
                      noteNumber = item.noteIndex;
                  }
                  var firstReferenceNoteNumber = 0;
                  if (item && item['first-reference-note-number']) {
                      firstReferenceNoteNumber = item['first-reference-note-number'];
                  }
                  var firstContainerReferenceNoteNumber = 0;
                  if (item && item['first-container-reference-note-number']) {
                      firstContainerReferenceNoteNumber = item['first-container-reference-note-number'];
                  }
                  var citationNumber = 0;
                  // XXX Will this EVER happen?
                  if (item && item['citation-number']) {
                      citationNumber = item['citation-number'];
                  }
                  var index = 0;
                  if (item && item.index) {
                      index = item.index;
                  }
                  var params = {
                      itemData: Item,
                      variableNames: this.variables,
                      context: state.tmp.area,
                      xclass: state.opt.xclass,
                      position: positionMap[position],
                      "note-number": noteNumber,
                      "first-reference-note-number": firstReferenceNoteNumber,
                      "first-container-reference-note-number": firstContainerReferenceNoteNumber,
                      "citation-number": citationNumber,
                      "index": index,
                      "mode": state.opt.mode
                  };
                  state.output.current.value().params = params;
              }
          };
          this.execs.push(func);
      }
  };
  
  
  CSL.Util.substituteEnd = function (state, target) {
      var func, bib_first_end, bib_other, if_end, choose_end, author_substitute, str;
  
      if (state.sys.variableWrapper
          && (this.hasVariable || (this.variables_real && this.variables_real.length))) {
          
          func = function (state) {
              if (!state.tmp.just_looking && !state.tmp.suppress_decorations) {
                  state.output.endTag("variable_entry");
              }
          };
          this.execs.push(func);
      }
  
      func = function (state) {
          for (var i = 0, ilen = this.decorations.length; i < ilen; i += 1) {
              if ("@strip-periods" === this.decorations[i][0] && "true" === this.decorations[i][1]) {
                  state.tmp.strip_periods += -1;
                  break;
              }
          }
      };
      this.execs.push(func);
  
      state.build.render_nesting_level += -1;
      if (state.build.render_nesting_level === 0) {
          if (state.build.cls) {
              func = function (state) {
                  state.output.endTag("bib_first");
              };
              this.execs.push(func);
              state.build.cls = false;
          } else if (state.build.area === "bibliography" && state.bibliography.opt["second-field-align"]) {
              bib_first_end = new CSL.Token("group", CSL.END);
              // first func end
              func = function (state) {
                  if (!state.tmp.render_seen) {
                      state.output.endTag("bib_first"); // closes bib_first
                  }
              };
              bib_first_end.execs.push(func);
              target.push(bib_first_end);
              bib_other = new CSL.Token("group", CSL.START);
              bib_other.decorations = [["@display", "right-inline"]];
              func = function (state) {
                  if (!state.tmp.render_seen) {
                      state.tmp.render_seen = true;
                      state.output.startTag("bib_other", bib_other);
                  }
              };
              bib_other.execs.push(func);
              target.push(bib_other);
          }
      }
      if (state.build.substitute_level.value() === 1) {
          if_end = new CSL.Token("if", CSL.END);
          target.push(if_end);
          choose_end = new CSL.Token("choose", CSL.END);
          CSL.Node.choose.build.call(choose_end, state, target);
      }
  
      if ("names" === this.name || ("text" === this.name && this.variables_real !== "title")) {
          author_substitute = new CSL.Token("text", CSL.SINGLETON);
          var substitution_name = this.name;
          func = function (state, Item) {
              if (state.tmp.area !== "bibliography") {
                  return;
              }
              if ("string" !== typeof state.bibliography.opt["subsequent-author-substitute"]) {
                  return;
              }
              if (this.variables_real && !Item[this.variables_real]) {
                  return;
              }
              // The logic of these two is not obvious. The effect is to enable placeholder substitution
              // on a text macro name substitution, without printing both the text macro AND the placeholder.
              // See https://forums.zotero.org/discussion/comment/350407
              if (this.variables_real && substitution_name === "names") {
                  return;
              }
  
              var subrule = state.bibliography.opt["subsequent-author-substitute-rule"];
              var i, ilen;
              //var text_esc = CSL.getSafeEscape(state);
              var printing = !state.tmp.suppress_decorations;
              if (printing && state.tmp.subsequent_author_substitute_ok) {
                  if (state.tmp.rendered_name) {
                      if ("partial-each" === subrule || "partial-first" === subrule) {
                          var dosub = true;
                          var rendered_name = [];
                          // This is a wee bit risky, as we're assuming that the name
                          // children and the list of stringified names are congruent.
                          // That *should* always be true, but you never know.
                          for (i = 0, ilen = state.tmp.name_node.children.length; i < ilen; i += 1) {
                              var name = state.tmp.rendered_name[i];
                              if (dosub
                                  && state.tmp.last_rendered_name && state.tmp.last_rendered_name.length > (i - 1)
                                  && name && !name.localeCompare(state.tmp.last_rendered_name[i])) {
                                  str = new CSL.Blob(state[state.tmp.area].opt["subsequent-author-substitute"]);
                                  state.tmp.name_node.children[i].blobs = [str];
                                  if ("partial-first" === subrule) {
                                      dosub = false;
                                  }
                              } else {
                                  dosub = false;
                              }
                              rendered_name.push(name);
                          }
                          // might want to slice this?
                          state.tmp.last_rendered_name = rendered_name;
                      } else if ("complete-each" === subrule) {
                          var rendered_name = state.tmp.rendered_name.join(",");
                          if (rendered_name) {
                              if (state.tmp.last_rendered_name && !rendered_name.localeCompare(state.tmp.last_rendered_name)) {
                                  for (i = 0, ilen = state.tmp.name_node.children.length; i < ilen; i += 1) {
                                      str = new CSL.Blob(state[state.tmp.area].opt["subsequent-author-substitute"]);
                                      state.tmp.name_node.children[i].blobs = [str];
                                  }
                              }
                              state.tmp.last_rendered_name = rendered_name;
                          }
                      } else {
                          var rendered_name = state.tmp.rendered_name.join(",");
                          if (rendered_name) {
                              if (state.tmp.last_rendered_name && !rendered_name.localeCompare(state.tmp.last_rendered_name)) {
                                  str = new CSL.Blob(state[state.tmp.area].opt["subsequent-author-substitute"]);
                                  if (state.tmp.label_blob) {
                                      state.tmp.name_node.top.blobs = [str,state.tmp.label_blob];
                                  } else if (state.tmp.name_node.top.blobs.length) {
                                      state.tmp.name_node.top.blobs[0].blobs = [str];
                                  } else {
                                      state.tmp.name_node.top.blobs = [str];
                                  }
                                  state.tmp.substituted_variable = substitution_name;
                              }
                              state.tmp.last_rendered_name = rendered_name;
                          }
                      }
                      state.tmp.subsequent_author_substitute_ok = false;
                  }
              }
          };
          this.execs.push(func);
      }
  
      if (("text" === this.name && !this.postponed_macro) || ["number", "date", "names"].indexOf(this.name) > -1) {
          // element trace
          func = function (state, Item) {
              // element_trace is a mess, but it's trying to do something simple.
              // A queue append is done, and element_trace.value() returns "suppress-me"
              // the append is aborted. That's it.
              // It seems only to be used on numeric elements of numeric styles ATM.
              // If used only for that purpose, it could be greatly simplified.
              // If cleaned up, it could do more interesting things, like control
              // the suppression of names set later than first position.
              if (state.tmp.element_trace.mystack.length>1) {
                  state.tmp.element_trace.pop();
              }
          };
          this.execs.push(func);
      }
  };
  
  /*global CSL: true */
  
  CSL.Util.padding = function (num) {
      var m = num.match(/\s*(-{0,1}[0-9]+)/);
      if (m) {
          num = parseInt(m[1], 10);
          if (num < 0) {
              num = 99999999999999999999 + num;
          }
          num = "" + num;
          while (num.length < 20) {
              num = "0" + num;
          }
      }
      return num;
  };
  
  CSL.Util.LongOrdinalizer = function () {};
  
  CSL.Util.LongOrdinalizer.prototype.init = function (state) {
      this.state = state;
  };
  
  CSL.Util.LongOrdinalizer.prototype.format = function (num, gender) {
      if (num < 10) {
          num = "0" + num;
      }
      // Argument true means "loose".
      var ret = CSL.Engine.getField(
          CSL.LOOSE, 
          this.state.locale[this.state.opt.lang].terms,
          "long-ordinal-" + num,
          "long", 
          0, 
          gender
      );
      if (!ret) {
          ret = this.state.fun.ordinalizer.format(num, gender);
      }
      // Probably too optimistic -- what if only renders in _sort?
      this.state.tmp.cite_renders_content = true;
      return ret;
  };
  
  
  CSL.Util.Ordinalizer = function (state) {
      this.state = state;
      this.suffixes = {};
  };
  
  CSL.Util.Ordinalizer.prototype.init = function () {
      if (!this.suffixes[this.state.opt.lang]) {
          this.suffixes[this.state.opt.lang] = {};
          for (var i = 0, ilen = 3; i < ilen; i += 1) {
              var gender = [undefined, "masculine", "feminine"][i];
              this.suffixes[this.state.opt.lang][gender] = [];
              for (var j = 1; j < 5; j += 1) {
                  var ordinal = this.state.getTerm("ordinal-0" + j, "long", false, gender);
                  if ("undefined" === typeof ordinal) {
                      delete this.suffixes[this.state.opt.lang][gender];
                      break;
                  }
                  this.suffixes[this.state.opt.lang][gender].push(ordinal);
              }
          }
      }
  };
  
  CSL.Util.Ordinalizer.prototype.format = function (num, gender) {
      var str;
      num = parseInt(num, 10);
      str = "" + num;
      var suffix = "";
      var trygenders = [];
      if (gender) {
          trygenders.push(gender);
      }
      trygenders.push("neuter");
      if (this.state.locale[this.state.opt.lang].ord["1.0.1"]) {
          suffix = this.state.getTerm("ordinal",false,0,gender);
          var trygender;
          for (var i = 0, ilen = trygenders.length; i < ilen; i += 1) {
              trygender = trygenders[i];
              var ordinfo = this.state.locale[this.state.opt.lang].ord["1.0.1"];
              if (ordinfo["whole-number"][str] && ordinfo["whole-number"][str][trygender]) {
                  suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["whole-number"][str][trygender],false,0,gender);
              } else if (ordinfo["last-two-digits"][str.slice(str.length - 2)] && ordinfo["last-two-digits"][str.slice(str.length - 2)][trygender]) {
                  suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-two-digits"][str.slice(str.length - 2)][trygender],false,0,gender);
              } else if (ordinfo["last-digit"][str.slice(str.length - 1)] && ordinfo["last-digit"][str.slice(str.length - 1)][trygender]) {
                  suffix = this.state.getTerm(this.state.locale[this.state.opt.lang].ord["1.0.1"]["last-digit"][str.slice(str.length - 1)][trygender],false,0,gender);
              }
              if (suffix) {
                  break;
              }
          }
      } else {
          if (!gender) {
              // XXX hack to prevent crash on CSL 1.0 styles.
              // Reported by Carles.
              gender = undefined;
          }
          this.state.fun.ordinalizer.init();
          if ((num / 10) % 10 === 1 || (num > 10 && num < 20)) {
              suffix = this.suffixes[this.state.opt.lang][gender][3];
          } else if (num % 10 === 1 && num % 100 !== 11) {
              suffix = this.suffixes[this.state.opt.lang][gender][0];
          } else if (num % 10 === 2 && num % 100 !== 12) {
              suffix = this.suffixes[this.state.opt.lang][gender][1];
          } else if (num % 10 === 3 && num % 100 !== 13) {
              suffix = this.suffixes[this.state.opt.lang][gender][2];
          } else {
              suffix = this.suffixes[this.state.opt.lang][gender][3];
          }
      }
      str = str += suffix;
      return str;
  };
  
  CSL.Util.Romanizer = function () {};
  
  CSL.Util.Romanizer.prototype.format = function (num) {
      var ret, pos, n, numstr, len;
      ret = "";
      if (num < 6000) {
          numstr = num.toString().split("");
          numstr.reverse();
          pos = 0;
          n = 0;
          len = numstr.length;
          for (pos = 0; pos < len; pos += 1) {
              n = parseInt(numstr[pos], 10);
              ret = CSL.ROMAN_NUMERALS[pos][n] + ret;
          }
      }
      return ret;
  };
  
  
  /**
   * Create a suffix formed from a list of arbitrary characters of arbitrary length.
   * <p>This is a <i>lot</i> harder than it seems.</p>
   */
  CSL.Util.Suffixator = function (slist) {
      if (!slist) {
          slist = CSL.SUFFIX_CHARS;
      }
      this.slist = slist.split(",");
  };
  
  /**
   * The format method.
   * <p>This method is used in generating ranges.  Every numeric
   * formatter (of which Suffixator is one) must be an instantiated
   * object with such a "format" method.</p>
   */
  
  CSL.Util.Suffixator.prototype.format = function (N) {
      // Many thanks to Avram Lyon for this code, and good
      // riddance to the several functions that it replaces.
      var X;
      N += 1;
      var key = "";
      do {
          X = ((N % 26) === 0) ? 26 : (N % 26);
          var key = this.slist[X-1] + key;
          N = (N - X) / 26;
      } while ( N !== 0 );
      return key;
  };
  
  
  CSL.Engine.prototype.processNumber = function (node, ItemObject, variable) {
      //print("** processNumber() ItemObject[variable]="+ItemObject[variable]);
      var val;
  
      var me = this;
  
      var realVariable = variable;
      variable = (variable === "page-first") ? "page" : variable;
  
      var fullformAnd = ",\\s+and\\s+|\\s+and\\s+";
      if (this.opt.lang.slice(0, 2) !== "en") {
          fullformAnd += "|,\\s+" + this.getTerm("and") + "\\s+|\\s+" + this.getTerm("and") + "\\s+";
      }
      var symbolAnd = "\\s*&\\s*";
      var andRex = new RegExp("^" + symbolAnd+ "$");
      var joinerMatchRex = new RegExp("(" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)", "g");
      var joinerSplitRex = new RegExp("(?:" + symbolAnd + "|" + fullformAnd + "|;\\s+|,\\s+|\\s*\\\\*[\\-\\u2013]+\\s*)");
  
      // This guesses whether the symbol form is defined or not.
      // It's the best we can do, because when locales are built, all of the
      // holes are filled explictly with fallback values: the symbol form is never undefined.
      var localeAnd = this.getTerm("and");
      var localeAmpersand = this.getTerm("and", "symbol");
      if (localeAnd === localeAmpersand) {
          localeAmpersand = "&";
      }
  
      // XXXX shadow_numbers should carry an array of objects with
      // XXXX full data for each. The test of a number should be
      // XXXX a separate function, possibly supported by a splitter
      // XXXX method also used here. Keep code for each action in one place,
      // XXXX to prevent debugging from becoming a nightmare.
  
      // The capture pattern below would apply affixes to all sub-elements,
      // which is not what we want. Sub-elements should nest within, or
      // affixes should be edited. The latter is probably easier to handle.
      
      // values = [
      //   {
      //     label: "sec.",
      //     label-form: "plural",
      //     value: 100,
      //     styling: [object],
      //     numeric: true
      //     joiningSuffix: " & ",
      //   },
      //   {
      //     label: "sec.",
      //     label-form: "none",
      //     value: 103,
      //     styling: [object],
      //     numeric: true,
      //     joiningSuffix: ""
      //   }
      // ]
      
      function normalizeFieldValue(str) {
          str = str.trim();
          var m = str.match(/^([^ ]+)/);
          if (m && !CSL.STATUTE_SUBDIV_STRINGS[m[1]]) {
              var embeddedLabel = null;
              if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
                  if (ItemObject.label) {
                      embeddedLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[ItemObject.label];
                  } else {
                      embeddedLabel = "p.";
                  }
              } else {
                  embeddedLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
              }
              if (embeddedLabel) {
                  str = embeddedLabel + " " + str;
              }
          }
          return str;
      }
      
  
      function composeNumberInfo(origLabel, label, val, joiningSuffix, parsePosition) {
          joiningSuffix = joiningSuffix ? joiningSuffix : "";
          var info = {};
  
          if (!label && !CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable]) {
              label = "var:"+ variable;
          }
  
          if (label) {
              var m = label.match(/(\s*)([^\s]+)(\s*)/);
              if (realVariable === "page" && parsePosition === 0 && ["p.", "pp."].indexOf(m[2]) === -1) {
                  info.gotosleepability = true;
                  info.labelVisibility = true;
              } else {
                  info.labelVisibility = false;
              }
              info.label = m[2];
              info.origLabel = origLabel;
              info.labelSuffix = m[3] ? m[3] : "";
              info.plural = 0;
          }
          
          var m = val.match(/^([0-9]*[a-zA-Z]+0*)?([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
          //var m = val.match(/^([0-9]*[a-zA-Z]0*)([0-9]+(?:[a-zA-Z]*|[-,a-zA-Z]+))$/);
          if (m) {
              info.particle = m[1] ? m[1] : "";
              info.value = m[2];
          } else {
              info.particle = "";
              info.value = val;
          }
          info.joiningSuffix = joiningSuffix.replace(/\s*-\s*/, "-");
          return info;
      }
  
      function fixupSubsections(elems) {
          // This catches things like p. 12a-c, recombining content to yield
          // numeric true despite the hyphen.
          for (var i=elems.length-2;i>-1;i-=2) {
              if (elems[i] === "-"
                 && elems[i-1].match(/^(?:(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z])\.  *)*[0-9]+[,a-zA-Z]+$/)
                 && elems[i+1].match(/^[,a-zA-Z]+$/)) {
                  elems[i-1] = elems.slice(i-1,i+2).join("");
                  elems = elems.slice(0,i).concat(elems.slice(i+2));
              }
          }
          return elems;
      }
  
      function parseString(str, defaultLabel) {
          defaultLabel = defaultLabel ? defaultLabel : "";
          
          str = normalizeFieldValue(str, defaultLabel);
  
          var jmrex, jsrex, mystr;
          if ("page" === variable) {
              if (str.indexOf("\u2013") > -1) {
                  str = str.replace(/\u2013/g, "-");
              }
          }
          if (str.indexOf("\\-") > -1) {
              jmrex = new RegExp(joinerMatchRex.source.replace("\\-", ""));
              jsrex = new RegExp(joinerSplitRex.source.replace("\\-", ""));
              var lst = str.split("\\-");
              for (var i=0,ilen=lst.length;i<ilen;i++) {
                  lst[i] = lst[i].replace(/\-/g, "\u2013");
              }
              mystr = lst.join("\\-");
              mystr = mystr.replace(/\\/g, "");
          } else {
              jmrex = joinerMatchRex;
              jsrex = joinerSplitRex;
              mystr = str;
          }
          // jmrex = joinerMatchRex;
          // jsrex = joinerSplitRex;
          
          // Split chunks and collate delimiters.
          var elems = [];
          var m = mystr.match(jmrex);
          if (m) {
              var lst = mystr.split(jsrex);
              for (var i=0, ilen=m.length; i<ilen; i++) {
                  if (m[i].match(andRex)) {
                      if (lst[i].match(/[a-zA-Z]$/) && lst[i].match(/^[a-zA-Z]/)) {
                          m[i] = localeAmpersand;
                      } else {
                          m[i] = " " + localeAmpersand + " ";
                      }
                  }
              }
              var recombine = false;
              for (var i in lst) {
                  if (("" + lst[i]).replace(/^[a-z]\.\s+/, "").match(/[^\s0-9ivxlcmIVXLCM]/)) {
                      //recombine = true;
                      break;
                  }
              }
              if (recombine) {
                  elems = [mystr];
              } else {
                  for (var i=0,ilen=lst.length-1; i<ilen; i++) {
                      elems.push(lst[i]);
                      elems.push(m[i]);
                  }
                  elems.push(lst[lst.length-1]);
                  //print("ELEMS: "+elems);
                  elems = fixupSubsections(elems);
                  //print("  fixup: "+elems);
              }
          } else {
              var elems = [mystr];
          }
          // Split elements within each chunk build list of value objects.
          var values = [];
          var label = defaultLabel;
          var origLabel = "";
          for (var i=0,ilen=elems.length;i<ilen;i += 2) {
              
              // AHA! HERE'S THE CULPRIT!!!
              // Words up to four characters are treated as honorary short-form labels.
              // Some valid labels are longer than four chars, so we stir those in explicitly
              
              var m = elems[i].match(/((?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/g);
              if (m) {
                  var lst = elems[i].split(/(?:(?:^| )(?:[a-z]|[a-z][a-z]|[a-z][a-z][a-z]|[a-z][a-z][a-z][a-z]|subpara|subch|amend|bibliog|annot|illus|princ|intro|sched|subdiv|subsec)(?:\.| ) *)/);
                  // Head off disaster by merging parsed labels on non-numeric values into content
                  for (var j=lst.length-1;j>0;j--) {
                      if (lst[j-1] && (!lst[j].match(/^[0-9]+([-;,:a-zA-Z]*)$/) || !lst[j-1].match(/^[0-9]+([-;,:a-zA-Z]*)$/))) {
                          lst[j-1] = lst[j-1] + m[j-1] + lst[j];
                          lst = lst.slice(0,j).concat(lst.slice(j+1));
                          m = m.slice(0,j-1).concat(m.slice(j));
                      }
                  }
                  // merge bad leading label into content
                  if (m.length > 0) {
                      var slug = m[0].trim();
                      var notAlabel = !CSL.STATUTE_SUBDIV_STRINGS[slug]
                          || "undefined" === typeof me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[slug])
                          || (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1 && CSL.STATUTE_SUBDIV_STRINGS[slug] !== variable);
                      if (notAlabel) {
                          if (i === 0) {
                              m = m.slice(1);
                              lst[0] = lst[0] + " " + slug + " " + lst[1];
                              lst = lst.slice(0,1).concat(lst.slice(2));
                          }
                      } else {
                          origLabel = slug;
                      }
                  }
  
                  for (var j=0,jlen=lst.length; j<jlen; j++) {
                      if (lst[j] || j === (lst.length-1)) {
                          var filteredOrigLabel;
                          label = m[j-1] ? m[j-1] : label;
                          if (origLabel === label.trim()) {
                              filteredOrigLabel = "";
                          } else {
                              filteredOrigLabel = origLabel;
                          }
                          //var origLabel = j > 1 ? m[j-1] : "";
                          mystr = lst[j] ? lst[j].trim() : "";
                          if (j === (lst.length-1)) {
                              values.push(composeNumberInfo(filteredOrigLabel, label, mystr, elems[i+1], i));
                          } else {
                              values.push(composeNumberInfo(filteredOrigLabel, label, mystr, null, i));
                          }
                      }
                  }
              } else {
                  var filteredOrigLabel;
                  if (origLabel === label.trim()) {
                      filteredOrigLabel = "";
                  } else {
                      filteredOrigLabel = origLabel;
                  }
                  values.push(composeNumberInfo(filteredOrigLabel, label, elems[i], elems[i+1]));
              }
          }
          return values;
      }
  
      function setSpaces(values) {
          // Add space joins (is this really right?)
          for (var i=0,ilen=values.length-1;i<ilen;i++) {
              if (!values[i].joiningSuffix && values[i+1].label) {
                  values[i].joiningSuffix = " ";
              }
          }
      }
  
      function fixNumericAndCount(values, i, currentLabelInfo) {
          var master = values[currentLabelInfo.pos];
          var val = values[i].value;
          var isEscapedHyphen = master.joiningSuffix === "\\-";
          if (val.particle && val.particle !== master.particle) {
              currentLabelInfo.collapsible = false;
          }
          var mVal = val.match(/^[0-9]+([-,:a-zA-Z]*)$/);
          var mCurrentLabel = master.value.match(/^(?:[0-9]+|[ixv]+)([-,:a-zA-Z]*|\-[\-0-9]+)$/);
          if (!val || !mVal || !mCurrentLabel || isEscapedHyphen) {
              currentLabelInfo.collapsible = false;
              if (!val || !mCurrentLabel) {
                  currentLabelInfo.numeric = false;
              }
              if (isEscapedHyphen) {
                  currentLabelInfo.count--;
              }
          }
          if ((mVal && mVal[1]) || (mCurrentLabel && mCurrentLabel[1])) {
              currentLabelInfo.collapsible = false;
          }
          if (undefined === values[i].collapsible) {
              for (var j=i,jlen=i+currentLabelInfo.count;j<jlen;j++) {
                  if (isNaN(parseInt(values[j].value)) && !values[j].value.match(/^[ivxlcmIVXLCM]+$/)) {
                      values[j].collapsible = false;
                  } else {
                      values[j].collapsible = true;
                  }
              }
              currentLabelInfo.collapsible = values[i].collapsible;
          }
          var isCollapsible = currentLabelInfo.collapsible;
          for (var j=currentLabelInfo.pos,jlen=(currentLabelInfo.pos + currentLabelInfo.count); j<jlen; j++) {
              if (currentLabelInfo.count > 1 && isCollapsible) {
                  values[j].plural = 1;
              }
              values[j].numeric = currentLabelInfo.numeric;
              values[j].collapsible = currentLabelInfo.collapsible;
          }
      }
  
      function fixLabelVisibility(values, groupStartPos, currentLabelInfo) {
          if (currentLabelInfo.label.slice(0, 4) !== "var:") {
              if (currentLabelInfo.pos === 0) {
                  if (["locator", "number", "locator-extra", "page"].indexOf(variable) > -1) {
                      // Actually, shouldn't we do this always?
                      if ("undefined" === typeof me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label])) {
                          values[currentLabelInfo.pos].labelVisibility = true;
                      }
                  }
                  // If there is an explicit
                  // label embedded at the start of a field that
                  // does not match the context, it should be
                  // marked for rendering.
                  if (["locator", "number", "locator-extra", "page"].indexOf(variable) === -1) {
                      if (CSL.STATUTE_SUBDIV_STRINGS[currentLabelInfo.label] !== variable) {
                          values[0].labelVisibility = true;
                      }
                  }
              } else {
                  // Also, mark initial mid-field labels for
                  // rendering.
                  //if (values[i-1].label !== values[i].label && currentLabelInfo.label.slice(0, 4) !== "var:") {
                  values[currentLabelInfo.pos].labelVisibility = true;
                  //}
              }
          }
      }
      
      function setPluralsAndNumerics(values) {
          if (values.length === 0) {
              return;
          }
          var groupStartPos = 0;
          var groupCount = 1;
          
          for (var i=1,ilen=values.length;i<ilen;i++) {
              var lastVal = values[i-1];
              var thisVal = values[i];
              if (lastVal.label === thisVal.label && lastVal.particle === lastVal.particle) {
                  groupCount++;
              } else {
                  var currentLabelInfo = JSON.parse(JSON.stringify(values[groupStartPos]));
                  currentLabelInfo.pos = groupStartPos;
                  currentLabelInfo.count = groupCount;
                  currentLabelInfo.numeric = true;
                  fixNumericAndCount(values, groupStartPos, currentLabelInfo);
                  if (lastVal.label !== thisVal.label) {
                      fixLabelVisibility(values, groupStartPos, currentLabelInfo);
                  }
                  groupStartPos = i;
                  groupCount = 1;
              }
          }
          // Not sure why this repetition is necessary?
          var currentLabelInfo = JSON.parse(JSON.stringify(values[groupStartPos]));
          currentLabelInfo.pos = groupStartPos;
          currentLabelInfo.count = groupCount;
          currentLabelInfo.numeric = true;
          fixNumericAndCount(values, groupStartPos, currentLabelInfo);
          fixLabelVisibility(values, groupStartPos, currentLabelInfo);
          if (values.length && values[0].numeric && variable.slice(0, 10) === "number-of-") {
              if (parseInt(ItemObject[realVariable], 10) > 1) {
                  values[0].plural = 1;
              }
          }
      }        
  
      function stripHyphenBackslash(joiningSuffix) {
          return joiningSuffix.replace("\\-", "-");
      }
  
      function setStyling(values) {
          var masterNode = CSL.Util.cloneToken(node);
          var masterStyling = new CSL.Token();
          if (!me.tmp.just_looking) {
              // Per discussion @ https://discourse.citationstyles.org/t/formatting-attributes-and-hyphen/1518
              masterStyling.decorations = masterNode.decorations;
              masterNode.decorations = [];
              //for (var j=masterNode.decorations.length-1;j>-1;j--) {
              //    if (masterNode.decorations[j][0] === "@quotes") {
              //        // Add to styling
              //        masterStyling.decorations = masterStyling.decorations.concat(masterNode.decorations.slice(j, j+1));
              //        // Remove from node
              //        masterNode.decorations = masterNode.decorations.slice(0, j).concat(masterNode.decorations.slice(j+1));
              //    }
              //}
              masterStyling.strings.prefix = masterNode.strings.prefix;
              masterNode.strings.prefix = "";
              masterStyling.strings.suffix = masterNode.strings.suffix;
              masterNode.strings.suffix = "";
          }
          var masterLabel = values.length ? values[0].label : null;
          if (values.length) {
              for (var i=0,ilen=values.length; i<ilen; i++) {
                  var val = values[i];
                  // Clone node, make styling parameters on each instance sane.
                  var newnode = CSL.Util.cloneToken(masterNode);
                  newnode.gender = node.gender;
                  if (masterLabel === val.label) {
                      newnode.formatter = node.formatter;
                  }
                  if (val.numeric) {
                      newnode.successor_prefix = val.successor_prefix;
                  }
                  newnode.strings.suffix = newnode.strings.suffix + stripHyphenBackslash(val.joiningSuffix);
                  val.styling = newnode;
              }
              if (!me.tmp.just_looking) {
                  if (values[0].value.slice(0,1) === "\"" && values[values.length-1].value.slice(-1) === "\"") {
                      values[0].value = values[0].value.slice(1);
                      values[values.length-1].value = values[values.length-1].value.slice(0,-1);
                      masterStyling.decorations.push(["@quotes", true]);
                  }
              }
          }
          return masterStyling;
      }
  
      function checkTerm(variable, val) {
          var ret = true;
          if (["locator", "locator-extra", "page"].indexOf(variable) > -1) {
              var label;
              if (val.origLabel) {
                  label = val.origLabel;
              } else {
                  label = val.label;
              }
              ret = !!me.getTerm(CSL.STATUTE_SUBDIV_STRINGS[label]);
          }
          return ret;
      }
  
      function checkPage(variable, val) {
          return "page" === variable
              || (["locator", "locator-extra"].indexOf(variable) > -1 && (["p."].indexOf(val.label) > -1 || ["p."].indexOf(val.origLabel) > -1));
      }
      
      function fixupRangeDelimiter(variable, val, rangeDelimiter, isNumeric) {
          var isPage = checkPage(variable, val);
          var hasTerm = checkTerm(variable, val);
          if (hasTerm && rangeDelimiter === "-") {
              if (isNumeric) {
                  if (isPage || ["locator", "locator-extra", "issue", "volume", "edition", "number"].indexOf(variable) > -1) {
                      rangeDelimiter = me.getTerm("page-range-delimiter");
                      if (!rangeDelimiter) {
                          rangeDelimiter = "\u2013";
                      }
                  }
                  if (variable === "collection-number") {
                      rangeDelimiter = me.getTerm("year-range-delimiter");
                      if (!rangeDelimiter) {
                          rangeDelimiter = "\u2013";
                      }
                  }
              }
          }
          //if (rangeDelimiter === "\\-") {
          //    rangeDelimiter = "-";
          //}
          return rangeDelimiter;
      }
  
      function manglePageNumbers(values, i, currentInfo) {
          if (i<1) {
              return;
          }
          if (currentInfo.count !== 2) {
              return;
          }
          if (values[i-1].particle !== values[i].particle) {
              return;
          }
          if (values[i-1].joiningSuffix !== "-") {
              currentInfo.count = 1;
              return;
          }
          if (!me.opt["page-range-format"] && (parseInt(values[i-1].value, 10) > parseInt(values[i].value, 10))) {
              values[i-1].joiningSuffix = fixupRangeDelimiter(variable, values[i], values[i-1].joiningSuffix, true);
              return;
          }
          var val = values[i];
  
          var isPage = checkPage(variable, val);
          var str;
          if (isPage && !isNaN(parseInt(values[i-1].value)) && !isNaN(parseInt(values[i].value))) {
              str = values[i-1].particle + values[i-1].value + " - " + values[i].particle + values[i].value;
              str = me.fun.page_mangler(str);
          } else {
              // if (("" + values[i-1].value).match(/[0-9]$/) && ("" + values[i].value).match(/^[0-9]/)) {
              if (("" + values[i-1].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/) && ("" + values[i].value).match(/^([0-9]+|[ivxlcmIVXLCM]+)$/)) {
                  values[i-1].joiningSuffix = me.getTerm("page-range-delimiter");
              }
              str = values[i-1].value + stripHyphenBackslash(values[i-1].joiningSuffix) + values[i].value;
          }
          var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
          // var m = str.match(/^((?:[0-9]*[a-zA-Z]+0*))?([0-9]+[a-z]*)(\s*[^0-9]+\s*)([-,a-zA-Z]?0*)([0-9]+[a-z]*)$/);
          if (m) {
              var rangeDelimiter = m[3];
              rangeDelimiter = fixupRangeDelimiter(variable, val, rangeDelimiter, values[i].numeric);
              values[i-1].particle = m[1];
              values[i-1].value = m[2];
              values[i-1].joiningSuffix = rangeDelimiter;
              values[i].particle = m[4];
              values[i].value = m[5];
          }
          currentInfo.count = 0;
      }
      
      function fixRanges(values) {
  
          if (!node) {
              return;
          }
          if (["page", "chapter-number", "collection-number", "edition", "issue", "number", "number-of-pages", "number-of-volumes", "volume", "locator", "locator-extra"].indexOf(variable) === -1) {
              return;
          }
  
          var currentInfo = {
              count: 0,
              label: null,
              lastHadRangeDelimiter: false
          };
  
          for (var i=0,ilen=values.length; i<ilen; i++) {
              var val = values[i];
              if (!val.collapsible) {
                  currentInfo.count = 0;
                  currentInfo.label = null;
                  var isNumeric = val.numeric;
                  val.joiningSuffix = fixupRangeDelimiter(variable, val, val.joiningSuffix, isNumeric);
              } else if (currentInfo.label === val.label && val.joiningSuffix === "-") {
                  // So if there is a hyphen here, and none previous, reset to 1
                  currentInfo.count = 1;
              } else if (currentInfo.label === val.label && val.joiningSuffix !== "-") {
                  // If there is NO hyphen here, count up
                  currentInfo.count++;
                  if (currentInfo.count === 2) {
                      manglePageNumbers(values, i, currentInfo);
                  }
              } else if (currentInfo.label !== val.label) {
                  // If the label doesn't match and count is 2, process
                  currentInfo.label = val.label;
                  currentInfo.count = 1;
              } else {
                  // Safety belt: label doesn't match and count is some other value, so reset to 1
                  // This never happens, though.
                  currentInfo.count = 1;
                  currentInfo.label = val.label;
              }
          }
          // Finally clear, if needed
          if (currentInfo.count === 2) {
              manglePageNumbers(values, values.length-1, currentInfo);
          }
      }
  
      function setVariableParams(shadow_numbers, realVariable, values) {
          var obj = shadow_numbers[realVariable];
          if (values.length) {
              obj.numeric = values[0].numeric;
              obj.collapsible = values[0].collapsible;
              obj.plural = values[0].plural;
              obj.label = CSL.STATUTE_SUBDIV_STRINGS[values[0].label];
              if (variable === "number" && obj.label === "issue" && me.getTerm("number")) {
                  obj.label = "number";
              }
          }
      }
  
      // Split out the labels and values.
  
      // short-circuit if object exists: if numeric, set styling, no other action
      if (node && this.tmp.shadow_numbers[realVariable] && this.tmp.shadow_numbers[realVariable].values.length) {
          var values = this.tmp.shadow_numbers[realVariable].values;
          fixRanges(values);
          //if (!this.tmp.shadow_numbers[variable].masterStyling && !this.tmp.just_looking) {
              this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
          //}
          return;
      }
  
      // info.styling = node;
  
      // This carries value, pluralization and numeric info for use in other contexts.
      // XXX We used to use one set of params for the entire variable value.
      // XXX Now params are set on individual objects, of which there may be several after parsing.
      if (!this.tmp.shadow_numbers[realVariable]) {
          this.tmp.shadow_numbers[realVariable] = {
              values:[]
          };
      }
      //this.tmp.shadow_numbers[variable].values = [];
      //this.tmp.shadow_numbers[variable].plural = 0;
      //this.tmp.shadow_numbers[variable].numeric = false;
      //this.tmp.shadow_numbers[variable].label = false;
  
      if (!ItemObject) {
          return;
      }
  
      // Possibly apply multilingual transform
      var languageRole = CSL.LangPrefsMap[variable];
      if (languageRole) {
          var localeType = this.opt["cite-lang-prefs"][languageRole][0];
          val = this.transform.getTextSubField(ItemObject, realVariable, "locale-"+localeType, true);
          val = val.name;
      } else {
          val = ItemObject[realVariable];
      }
  
      if (val && realVariable === "number" && ItemObject.type === "legal_case") {
          val = val.replace(/[\\]*-/g, "\\-");
      }
  
      // XXX HOLDING THIS
      // Apply short form ONLY if first element tests is-numeric=false
      if (val && this.sys.getAbbreviation) {
          // RefMe bug report: print("XX D'oh! (3): "+num);
          // true as the fourth argument suppresses update of the UI
  
          // No need for this.
          //val = ("" + val).replace(/^\"/, "").replace(/\"$/, "");
          if (this.sys.normalizeAbbrevsKey) {
              var normval = this.sys.normalizeAbbrevsKey(realVariable, val);
          } else {
              var normval = val;
          }
          var jurisdiction = this.transform.loadAbbreviation(ItemObject.jurisdiction, "number", normval, ItemObject.language);
          if (this.transform.abbrevs[jurisdiction].number) {
              if (this.transform.abbrevs[jurisdiction].number[normval]) {
                  val = this.transform.abbrevs[jurisdiction].number[normval];
              } else {
                  
                  // *** This is terrible ***
                  
                  // Strings rendered via cs:number should not be added to the abbreviations
                  // UI unless they test non-numeric. The test happens below.
                  if ("undefined" !== typeof this.transform.abbrevs[jurisdiction].number[normval]) {
                      delete this.transform.abbrevs[jurisdiction].number[normval];
                  }
              }
          }
      }
  
      //   {
      //     label: "sec.",
      //     labelForm: "plural",
      //     labelVisibility: true,
      //     value: 100,
      //     styling: [object],
      //     numeric: true
      //     joiningSuffix: " & ",
      //   },
  
      // Process only if there is a value.
      if ("undefined" !== typeof val && ("string" === typeof val || "number" === typeof val)) {
          if ("number" === typeof val) {
              val = "" + val;
          }
          var defaultLabel = CSL.STATUTE_SUBDIV_STRINGS_REVERSE[variable];
  
          if (this.tmp.shadow_numbers[realVariable].values.length === 0) {
              // XXX
              var values = parseString(val, defaultLabel);
  
              setSpaces(values);
              //print("setSpaces(): "+JSON.stringify(values, null, 2));
  
              setPluralsAndNumerics(values);
              //print("setPluralsAndNumerics(): "+JSON.stringify(values, null, 2));
  
              for (var obj of values) {
                  if (!obj.numeric) obj.plural = 0;
              }
              this.tmp.shadow_numbers[realVariable].values = values;
              // me.sys.print(JSON.stringify(values))
  
              if (node) {
                  fixRanges(values);
                  
                  this.tmp.shadow_numbers[realVariable].masterStyling = setStyling(values);
                  // me.sys.print("setStyling(): "+JSON.stringify(values, null, 2));
              }
              setVariableParams(this.tmp.shadow_numbers, realVariable, values);
          }
          
          // hack in support for non-numeric numerics like "91 Civ. 5442 (RPP)|91 Civ. 5471"
          var info = this.tmp.shadow_numbers[realVariable];
          if (variable === "number") {
              if (info.values.length === 1 && info.values[0].value.indexOf("|") > -1) {
                  info.values[0].value = info.values[0].value.replace(/\|/g, ", ");
                  info.values[0].numeric = true;
                  info.values[0].plural = 1;
                  info.values[0].collapsible = false;
                  info.numeric = true;
                  info.plural = 1;
                  info.collapsible = false;
              }
          }
          if (info.values.length === 1) {
              if (info.values[0].value.match(/^[0-9]+(?:\/[0-9]+)+$/)) {
                  info.values[0].numeric = true;
                  info.values[0].plural = 0;
                  info.values[0].collapsible = false;
                  info.numeric = true;
                  info.plural = 0;
                  info.collapsible = false;
              }
          }
          if (variable === "page") {
              if (info.values.length > 0) {
                  if (info.values[0].gotosleepability) {
                      info.labelForm = "short";
                  }
              }
          }
          //this.sys.print("OK "+JSON.stringify(values, ["label", "origLabel", "labelSuffix", "particle", "collapsible", "value", "numeric", "joiningSuffix", "labelVisibility", "plural"], 2));
      }
  };
  
  CSL.Util.outputNumericField = function(state, varname, itemID) {
  
      state.output.openLevel(state.tmp.shadow_numbers[varname].masterStyling);
      var masterStyling = state.tmp.shadow_numbers[varname].masterStyling;
      var nums = state.tmp.shadow_numbers[varname].values;
      var masterLabel = nums.length ? nums[0].label : null;
      var labelForm = state.tmp.shadow_numbers[varname].labelForm;
      var tryStatic = state.tmp.group_context.tip.label_static;
      var embeddedLabelForm;
      if (labelForm) {
          embeddedLabelForm = labelForm;
      } else {
          embeddedLabelForm = "short";
          //labelForm = "short";
      }
      var labelCapitalizeIfFirst = state.tmp.shadow_numbers[varname].labelCapitalizeIfFirst;
      var labelDecorations = state.tmp.shadow_numbers[varname].labelDecorations;
      var lastLabelName = null;
  
      for (var i=0,ilen=nums.length;i<ilen;i++) {
          var num = nums[i];
          var label = "";
          var labelName;
          if (num.label) {
              if ('var:' === num.label.slice(0,4)) {
                  labelName = num.label.slice(4);
              } else {
                  labelName = CSL.STATUTE_SUBDIV_STRINGS[num.label];
              }
              if (labelName) {
                  // Simplify this some day.
                  if (num.label === masterLabel) {
                      if (tryStatic) {
                          label = state.getTerm(labelName, "static", num.plural);
                          if (label.indexOf("%s") === -1) {
                              label = "";
                          }
                      }
                      if (!label) {
                          label = state.getTerm(labelName, labelForm, num.plural);
                      }
                  } else {
                      if (tryStatic) {
                          label = state.getTerm(labelName, "static", num.plural);
                          if (label.indexOf("%s") === -1) {
                              label = "";
                          }
                      }
                      if (!label) {
                          label = state.getTerm(labelName, embeddedLabelForm, num.plural);
                      }
                  }
                  if (labelCapitalizeIfFirst) {
                      label = CSL.Output.Formatters["capitalize-first"](state, label);
                  }
              }
          }
          var labelPlaceholderPos = -1;
          if (label) {
              labelPlaceholderPos = label.indexOf("%s");
          }
          var numStyling = CSL.Util.cloneToken(num.styling);
          numStyling.formatter = num.styling.formatter;
          numStyling.type = num.styling.type;
          numStyling.num = num.styling.num;
          numStyling.gender = num.styling.gender;
          
          if (labelPlaceholderPos > 0 && labelPlaceholderPos < (label.length-2)) {
              numStyling.strings.prefix += label.slice(0,labelPlaceholderPos);
              numStyling.strings.suffix = label.slice(labelPlaceholderPos+2) + numStyling.strings.suffix;
          } else if (num.labelVisibility) {
              if (!label) {
                  label = num.label;
                  labelName = num.label;
              }
              if (labelPlaceholderPos > 0) {
                  var prefixLabelStyling = new CSL.Token();
                  prefixLabelStyling.decorations = labelDecorations;
                  state.output.append(label.slice(0,labelPlaceholderPos), prefixLabelStyling);
              } else if (labelPlaceholderPos === (label.length-2) || labelPlaceholderPos === -1) {
                  // And add a trailing delimiter.
                  state.output.append(label+num.labelSuffix, "empty");
              }
          }
          CSL.UPDATE_GROUP_CONTEXT_CONDITION(state, masterStyling.strings.prefix, null, masterStyling, `${num.particle}${num.value}`);
          if (num.collapsible) {
              var blob;
              if (num.value.match(/^[1-9][0-9]*$/)) {
                  blob = new CSL.NumericBlob(state, num.particle, parseInt(num.value, 10), numStyling, itemID);
              } else {
                  blob = new CSL.NumericBlob(state, num.particle, num.value, numStyling, itemID);
              }
              if ("undefined" === typeof blob.gender) {
                  blob.gender = state.locale[state.opt.lang]["noun-genders"][varname];
              }
              state.output.append(blob, "literal");
          } else {
              state.output.append(num.particle + num.value, numStyling);
          }
          if (labelPlaceholderPos === 0 && labelPlaceholderPos < (label.length-2)) {
              // Only and always if this is the last entry of this label
              if (lastLabelName === null) {
                  lastLabelName = labelName;
              }
              if (labelName !== lastLabelName || i === (nums.length-1)) {
                  var suffixLabelStyling = new CSL.Token();
                  suffixLabelStyling.decorations = labelDecorations;
                  state.output.append(label.slice(labelPlaceholderPos+2), suffixLabelStyling);
              }
          }
          lastLabelName = labelName;
          state.tmp.term_predecessor = true;
      }
      state.output.closeLevel();
  };
  
  /*global CSL: true */
  
  CSL.Util.PageRangeMangler = {};
  
  CSL.Util.PageRangeMangler.getFunction = function (state, rangeType) {
      var rangerex, pos, len, stringify, listify, expand, minimize, minimize_internal, chicago, lst, m, b, e, ret, begin, end, ret_func;
      
      var range_delimiter = state.getTerm(rangeType + "-range-delimiter");
  
      rangerex = /([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)\s*(?:\u2013|-)\s*([0-9]*[a-zA-Z]+0*)?([0-9]+[a-z]*)/;
  
      stringify = function (lst) {
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
              if ("object" === typeof lst[pos]) {
                  lst[pos] = lst[pos].join("");
              }
          }
          var ret = lst.join("");
          ret = ret.replace(/([^\\])\-/g, "$1"+state.getTerm(rangeType + "-range-delimiter"));
          return ret;
      };
  
      listify = function (str) {
          var m, lst, ret;
          // Normalized delimiter form, for use in regexps
          var hyphens = "\\s+\\-\\s+";
          // Normalize delimiters to hyphen wrapped in single spaces
          var this_range_delimiter = range_delimiter === "-" ? "" : range_delimiter;
          var delimRex = new RegExp("([^\\\\])[-" + this_range_delimiter + "\\u2013]", "g");
          str = str.replace(delimRex, "$1 - ").replace(/\s+-\s+/g, " - ");
          // Workaround for Internet Explorer
          //var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+)?[0-9]+" + hyphens + "(?:[0-9]*[a-zA-Z]+)?[0-9]+)", "g");
          //var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+)?[0-9]+" + hyphens + "(?:[0-9]*[a-zA-Z]+)?[0-9]+");
          var rexm = new RegExp("((?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*)", "g");
          var rexlst = new RegExp("(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*" + hyphens + "(?:[0-9]*[a-zA-Z]+0*)?[0-9]+[a-z]*");
          m = str.match(rexm);
          lst = str.split(rexlst);
          if (lst.length === 0) {
              ret = m;
          } else {
              ret = [lst[0]];
              for (pos = 1, len = lst.length; pos < len; pos += 1) {
                  ret.push(m[pos - 1].replace(/\s*\-\s*/g, "-"));
                  ret.push(lst[pos]);
              }
          }
          return ret;
      };
  
      expand = function (str) {
          str = "" + str;
          lst = listify(str);
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
              m = lst[pos].match(rangerex);
              if (m) {
                  if (!m[3] || m[1] === m[3]) {
                      if (m[4].length < m[2].length) {
                          m[4] = m[2].slice(0, (m[2].length - m[4].length)) + m[4];
                      }
                      if (parseInt(m[2], 10) < parseInt(m[4], 10)) {
                          m[3] = range_delimiter + (m[1] ? m[1] : "");
                          lst[pos] = m.slice(1);
                      }
                  }
              }
              if ("string" === typeof lst[pos]) {
                  lst[pos] = lst[pos].replace(/\-/g, range_delimiter);
              }
          }
          return lst;
      };
  
      minimize = function (lst, minchars, isyear) {
          len = lst.length;
          for (var i = 1, ilen = lst.length; i < ilen; i += 2) {
              if ("object" === typeof lst[i]) {
                  lst[i][3] = minimize_internal(lst[i][1], lst[i][3], minchars, isyear);
                  if (lst[i][2].slice(1) === lst[i][0]) {
                      lst[i][2] = range_delimiter;
                  }
              }
          }
          return stringify(lst);
      };
  
      minimize_internal = function (begin, end, minchars, isyear) {
          if (!minchars) {
              minchars = 0;
          }
          b = ("" + begin).split("");
          e = ("" + end).split("");
          ret = e.slice();
          ret.reverse();
          if (b.length === e.length) {
              for (var i = 0, ilen = b.length; i < ilen; i += 1) {
                  if (b[i] === e[i] && ret.length > minchars) {
                      ret.pop();
                  } else {
                      if (minchars && isyear && ret.length === 3) {
                          var front = b.slice(0, i);
                          front.reverse();
                          ret = ret.concat(front);
                      }
                      break;
                  }
              }
          }
          ret.reverse();
          return ret.join("");
      };
  
      chicago = function (lst) {
          len = lst.length;
          for (pos = 1; pos < len; pos += 2) {
              if ("object" === typeof lst[pos]) {
                  m = lst[pos];
                  begin = parseInt(m[1], 10);
                  end = parseInt(m[3], 10);
                  if (begin > 100 && begin % 100 && parseInt((begin / 100), 10) === parseInt((end / 100), 10)) {
                      m[3] = "" + (end % 100);
                  } else if (begin >= 10000) {
                      m[3] = "" + (end % 1000);
                  }
              }
              if (m[2].slice(1) === m[0]) {
                  m[2] = range_delimiter;
              }
          }
          return stringify(lst);
      };
  
      //
      // The top-level option handlers.
      //
      var sniff = function (str, func, minchars, isyear) {
          var ret;
      str = "" + str;
      var lst = expand(str);
          var ret = func(lst, minchars, isyear);
          return ret;
      };
      if (!state.opt[rangeType + "-range-format"]) {
          ret_func = function (str) {
              //return str.replace("-", "\u2013", "g");
              return sniff(str, stringify);
          };
      } else if (state.opt[rangeType + "-range-format"] === "expanded") {
          ret_func = function (str) {
              return sniff(str, stringify);
          };
      } else if (state.opt[rangeType + "-range-format"] === "minimal") {
          ret_func = function (str) {
              return sniff(str, minimize);
          };
      } else if (state.opt[rangeType + "-range-format"] === "minimal-two") {
          ret_func = function (str, isyear) {
              return sniff(str, minimize, 2, isyear);
          };
      } else if (state.opt[rangeType + "-range-format"] === "chicago") {
          ret_func = function (str) {
              return sniff(str, chicago);
          };
      }
  
      return ret_func;
  };
  
  
  /*global CSL: true */
  
  // Use a state machine
  
  // Okay, good!
  // Needs some tweaks:
  // 1. First pass: quotes only
  //    Special: Convert all sandwiched single-quote markup to apostrophe
  // 2. Second pass: tags
  
  CSL.Util.FlipFlopper = function(state) {
      
      /**
       * INTERNAL
       */
  
      var _nestingState = [];
  
      var _nestingData = {
          "<span class=\"nocase\">": {
              type: "nocase",
              opener: "<span class=\"nocase\">",
              closer: "</span>",
              attr: null,
              outer: null,
              flipflop: null
          },
          "<span class=\"nodecor\">": {
              type: "nodecor",
              opener: "<span class=\"nodecor\">",
              closer: "</span>",
              attr: "@class",
              outer: "nodecor",
              flipflop: {
                  "nodecor": "nodecor"
              }
          },
          "<span style=\"font-variant:small-caps;\">": {
              type: "tag",
              opener: "<span style=\"font-variant:small-caps;\">",
              closer: "</span>",
              attr: "@font-variant",
              outer: "small-caps",
              flipflop: {
                  "small-caps": "normal",
                  "normal": "small-caps"
              }
          },
          "<sc>": {
              type: "tag",
              opener: "<sc>",
              closer: "</sc>",
              attr: "@font-variant",
              outer: "small-caps",
              flipflop: {
                  "small-caps": "normal",
                  "normal": "small-caps"
              }
          },
          "<i>": {
              type: "tag",
              opener: "<i>",
              closer: "</i>",
              attr: "@font-style",
              outer: "italic",
              flipflop: {
                  "italic": "normal",
                  "normal": "italic"
              }
          },
          "<b>": {
              type: "tag",
              opener: "<b>",
              closer: "</b>",
              attr: "@font-weight",
              outer: "bold",
              flipflop: {
                  "bold": "normal",
                  "normal": "bold"
              }
          },
          "<sup>": {
              type: "tag",
              opener: "<sup>",
              closer: "</sup>",
              attr: "@vertical-align",
              outer: "sup",
              flipflop: {
                  "sub": "sup",
                  "sup": "sup"
              }
          },
          "<sub>": {
              type: "tag",
              opener: "<sub>",
              closer: "</sub>",
              attr: "@vertical-align",
              outer: "sub",
              flipflop: {
                  "sup": "sub",
                  "sub": "sub"
              }
          },
          " \"": {
              type: "quote",
              opener: " \"",
              closer: "\"",
              attr: "@quotes",
              outer: "true",
              flipflop: {
                  "true": "inner",
                  "inner": "true",
                  "false": "true"
              }
          },
          " \'": {
              type: "quote",
              opener: " \'",
              closer: "\'",
              attr: "@quotes",
              outer: "inner",
              flipflop: {
                  "true": "inner",
                  "inner": "true",
                  "false": "true"
              }
          }
      };
  
      _nestingData["(\""] = _nestingData[" \""];
      _nestingData["(\'"] = _nestingData[" \'"];
  
      var localeOpenQuote = state.getTerm("open-quote");
      var localeCloseQuote = state.getTerm("close-quote");
      var localeOpenInnerQuote = state.getTerm("open-inner-quote");
      var localeCloseInnerQuote = state.getTerm("close-inner-quote");
  
      // If locale uses straight quotes, do not register them. All will be well.
      // Otherwise, clone straight-quote data, and adjust.
      if (localeOpenQuote && localeCloseQuote && [" \""," \'","\"","\'"].indexOf(localeOpenQuote) === -1) {
          _nestingData[localeOpenQuote] = JSON.parse(JSON.stringify(_nestingData[" \""]));
          _nestingData[localeOpenQuote].opener = localeOpenQuote;
          _nestingData[localeOpenQuote].closer = localeCloseQuote;
      }
      
      if (localeOpenInnerQuote && localeCloseInnerQuote && [" \""," \'","\"","\'"].indexOf(localeOpenInnerQuote) === -1) {
          _nestingData[localeOpenInnerQuote] = JSON.parse(JSON.stringify(_nestingData[" \'"]));
          _nestingData[localeOpenInnerQuote].opener = localeOpenInnerQuote;
          _nestingData[localeOpenInnerQuote].closer = localeCloseInnerQuote;
      }
      
      function _setOuterQuoteForm(quot) {
          var flip = {
              " \'": " \"",
              " \"": " \'",
              "(\"": "(\'",
              "(\'": "(\""
          };
          _nestingData[quot].outer = "true";
          _nestingData[flip[quot]].outer = "inner";
      }
      
      function _getNestingOpenerParams(opener) {
          var openers = [];
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
              var key = keys[i];
              if (_nestingData[opener].type !== "quote" || !_nestingData[opener]) {
                  openers.push(key);
              }
          }
          var ret = _nestingData[opener];
          ret.opener = new RegExp("^(?:" + openers.map(function(str){
              return str.replace("(", "\\(");
          }).join("|") + ")");
          return ret;
      }
  
      var _nestingParams = (function() {
          var ret = {};
          var keys = Object.keys(_nestingData);
          for (var i = 0, l = keys.length; i < l; i++) {
              var key = keys[i];
              ret[key] = _getNestingOpenerParams(key);
          }
          return ret;
      }());
  
      var _tagRex = (function() {
          var openers = [];
          var closers = [];
          var vals = {};
          for (var opener in _nestingParams) {
              openers.push(opener);
              vals[_nestingParams[opener].closer] = true;
          }
          var keys = Object.keys(vals);
          for (var i = 0, l = keys.length; i < l; i++) {
              var closer = keys[i];
              closers.push(closer);
          }
  
          var all = openers.concat(closers).map(function(str){
              return str.replace("(", "\\(");
          }).join("|");
  
          return {
              matchAll: new RegExp("((?:" + all + "))", "g"),
              splitAll: new RegExp("(?:" + all + ")", "g"),
              open: new RegExp("(^(?:" + openers.map(function(str){
                  return str.replace("(", "\\(");
              }).join("|") + ")$)"),
              close: new RegExp("(^(?:" + closers.join("|") + ")$)"),
          };
      }());
  
      function _tryOpen(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (!params || tag.match(params.opener)) {
              _nestingState.push({
                  type: _nestingParams[tag].type,
                  opener: _nestingParams[tag].opener,
                  closer: _nestingParams[tag].closer,
                  pos: pos
              });
              return false;
          } else {
              _nestingState.pop();
              _nestingState.push({
                  type: _nestingParams[tag].type,
                  opener: _nestingParams[tag].opener,
                  closer: _nestingParams[tag].closer,
                  pos: pos
              });
              return {
                  fixtag: params.pos
              };
          }
      }
      
      function _tryClose(tag, pos) {
          var params = _nestingState[_nestingState.length - 1];
          if (params && tag === params.closer) {
              _nestingState.pop();
              if (params.type === "nocase") {
                  return {
                      nocase: {
                          open: params.pos,
                          close: pos
                      }
                  };
              } else {
                  return false;
              }
          } else {
              if (params) {
                  return {
                      fixtag: params.pos
                  };
              } else {
                  return {
                      fixtag: pos
                  };
              }
          }
      }
      
      function _pushNestingState(tag, pos) {
          if (tag.match(_tagRex.open)) {
              return _tryOpen(tag, pos);
          } else {
              return _tryClose(tag, pos);
          }
      }
      
      function _doppelString(str) {
          var forcedSpaces = [];
          // Normalize markup
          str = str.replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?\"[^>]*(>)/g, "$1 $2$3;\"$4");
          str = str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3");
  
          var match = str.match(_tagRex.matchAll);
          if (!match) {
              return {
                  tags: [],
                  strings: [str],
                  forcedSpaces: []
              };
          }
          var split = str.split(_tagRex.splitAll);
  
          for (var i=0,ilen=match.length-1;i<ilen;i++) {
              if (_nestingData[match[i]]) {
                  if (split[i+1] === "" && ["\"", "'"].indexOf(match[i+1]) > -1) {
                      match[i+1] = " " + match[i+1];
                      forcedSpaces.push(true);
                  } else {
                      forcedSpaces.push(false);
                  }
              }
          }
          return {
              tags: match,
              strings: split,
              forcedSpaces: forcedSpaces
          };
      }
  
      var TagReg = function(blob) {
          var _stack = [];
          this.set = function (tag) {
              var attr = _nestingData[tag].attr;
              var decor = null;
              for (var i=_stack.length-1;i>-1;i--) {
                  var _decor = _stack[i];
                  if (_decor[0] === attr) {
                      decor = _decor;
                      break;
                  }
              }
              if (!decor) {
                  var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(blob.alldecor);
                  outer:
                  for (var i=allTheDecor.length-1;i>-1;i--) {
                      var decorset = allTheDecor[i];
                      if (!decorset) {
                          continue;
                      }
                      for (var j=decorset.length-1;j>-1;j--) {
                          var _decor = decorset[j];
                          if (_decor[0] === attr) {
                              decor = _decor;
                              break outer;
                          }
                      }
                  }
              }
              if (!decor) {
                  decor = [attr, _nestingData[tag].outer];
              } else {
                  decor = [attr, _nestingData[tag].flipflop[decor[1]]];
              }
              _stack.push(decor);
          };
          this.pair = function () {
              return _stack[_stack.length-1];
          };
          this.pop = function () {
              _stack.pop();
          };
      };
      
      function _apostropheForce(tag, str) {
          if (tag === "\'") {
              if (str && str.match(/^[^\,\.\?\:\;\ ]/)) {
                  return "\u2019";
              }
          } else if (tag === " \'" && str && str.match(/^[\ ]/)) {
              return " \u2019";
          }
          return false;
      }
  
      function _undoppelToQueue(blob, doppel, leadingSpace) {
          var firstString = true;
          var tagReg = new TagReg(blob);
          blob.blobs = [];
          function Stack (blob) {
              this.stack = [blob];
              this.latest = blob;
              this.addStyling = function(str, decor) {
                  if (firstString) {
                      if (str.slice(0, 1) === " ") {
                          str = str.slice(1);
                      }
                      if (str.slice(0, 1) === " ") {
                          str = str.slice(1);
                      }
                      firstString = false;
                  }
                  this.latest = this.stack[this.stack.length-1];
                  if (decor) {
                      if ("string" === typeof this.latest.blobs) {
                          var child = new CSL.Blob();
                          child.blobs = this.latest.blobs;
                          child.alldecor = this.latest.alldecor.slice();
                          this.latest.blobs = [child];
                      }
                      var tok = new CSL.Token();
                      var newblob = new CSL.Blob(null, tok);
                      newblob.alldecor = this.latest.alldecor.slice();
                      
                      // AHA! Bad naming. There is _decorset from the list, and
                      // there WAS decorset that we are building. Dumb. Fix the
                      // names and fix it up.
                      
                      if (decor[0] === "@class" && decor[1] === "nodecor") {
                          var newdecorset = [];
                          var seen = {};
                          var allTheDecor = [state[state.tmp.area].opt.layout_decorations].concat(newblob.alldecor);
                          for (var i=allTheDecor.length-1;i>-1;i--) {
                              var _decorset = allTheDecor[i];
                              if (!_decorset) {
                                  continue;
                              }
                              for (var j=_decorset.length-1;j>-1;j--) {
                                  var _olddecor = _decorset[j];
                                  if (["@font-weight", "@font-style", "@font-variant"].indexOf(_olddecor[0]) > -1
                                      && !seen[_olddecor[0]]) {
                                      
                                      if (decor[1] !== "normal") {
                                          newblob.decorations.push([_olddecor[0], "normal"]);
                                          newdecorset.push([_olddecor[0], "normal"]);
                                      }
                                      seen[_olddecor[0]] = true;
                                  }
                              }
                          }
                          newblob.alldecor.push(newdecorset);
                          
                      } else {
                          newblob.decorations.push(decor);
                          newblob.alldecor.push([decor]);
                      }
                      this.latest.blobs.push(newblob);
                      this.stack.push(newblob);
                      this.latest = newblob;
                      if (str) {
                          var tok = new CSL.Token();
                          var newblob = new CSL.Blob(null, tok);
                          newblob.blobs = str;
                          newblob.alldecor = this.latest.alldecor.slice();
                          this.latest.blobs.push(newblob);
                      }
                  } else {
                      if (str) {
                          var child = new CSL.Blob();
                          child.blobs = str;
                          child.alldecor = this.latest.alldecor.slice();
                          this.latest.blobs.push(child);
                      }
                  }
              };
              this.popStyling = function() {
                  this.stack.pop();
              };
          }
          var stack = new Stack(blob);
          if (doppel.strings.length) {
              var str = doppel.strings[0];
              if (leadingSpace) {
                  str = " " + str;
              }
              stack.addStyling(str);
          }
          for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {
              var tag = doppel.tags[i];
              var str = doppel.strings[i+1];
              if (tag.match(_tagRex.open)) {
                  tagReg.set(tag);
                  stack.addStyling(str, tagReg.pair());
              } else {
                  tagReg.pop();
                  stack.popStyling();
                  stack.addStyling(str);
              }
          }
      }
  
      /**
       * PUBLIC
       */
  
      this.processTags = function (blob) {
          var str = blob.blobs;
          var leadingSpace = false;
          if (str.slice(0, 1) === " " && !str.match(/^\s+[\'\"]/)) {
              leadingSpace = true;
          }
          var rex = new RegExp("(" + CSL.ROMANESQUE_REGEXP.source + ")\u2019(" + CSL.ROMANESQUE_REGEXP.source + ")", "g");
          var str = " " + str.replace(rex, "$1\'$2");
          var doppel = _doppelString(str);
          if (doppel.tags.length === 0) {
              return;
          }
          var quoteFormSeen = false;
          
        for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {
              var tag = doppel.tags[i];
              var str = doppel.strings[i+1];
              var apostrophe = _apostropheForce(tag, str);
              if (apostrophe) {
                  doppel.strings[i+1] = apostrophe + doppel.strings[i+1];
                  doppel.tags[i] = "";
              } else {
                  var tagInfo;
                  while (true) {
                      tagInfo = _pushNestingState(tag, i);
                      if (tagInfo) {
                          if (Object.keys(tagInfo).indexOf("fixtag") > -1) {
                              if (tag.match(_tagRex.close)
                                  && tag === "\'") {
                                  
                                  doppel.strings[i+1] = "\u2019" + doppel.strings[i+1];
                                  doppel.tags[i] = "";
                              } else {
                                  var failedTag = doppel.tags[tagInfo.fixtag];
                                  if (doppel.forcedSpaces[tagInfo.fixtag-1]) {
                                      failedTag = failedTag.slice(1);
                                  }
                                  doppel.strings[tagInfo.fixtag+1] = failedTag + doppel.strings[tagInfo.fixtag+1];
                                  doppel.tags[tagInfo.fixtag] = "";
                              }
                              if (_nestingState.length > 0) {
                                  if (tag !== "\'") {
                                      _nestingState.pop();
                                  } else {
                                      break;
                                  }
                              } else {
                                  break;
                              }
                          } else if (tagInfo.nocase) {
                              doppel.tags[tagInfo.nocase.open] = "";
                              doppel.tags[tagInfo.nocase.close] = "";
                              break;
                          } else {
                              break;
                          }
                      } else {
                          break;
                      }
                  }
                  if (tagInfo && (tagInfo.fixtag|| tagInfo.fixtag === 0)) {
                      doppel.strings[i+1] = doppel.tags[i] + doppel.strings[i+1];
                      doppel.tags[i] = "";
                  }
              }
          }
          // Stray tags are neutralized here
          for (var i=_nestingState.length-1;i>-1;i--) {
              var tagPos = _nestingState[i].pos;
              var tag = doppel.tags[tagPos];
              if (tag === " \'" || tag === "\'") {
  
                  doppel.strings[tagPos+1] = " \u2019" + doppel.strings[tagPos+1];
              } else {
                  doppel.strings[tagPos+1] = doppel.tags[tagPos] + doppel.strings[tagPos+1];
              }
              doppel.tags[tagPos] = "";
              _nestingState.pop();
          }
          for (var i=doppel.tags.length-1;i>-1;i--) {
              if (!doppel.tags[i]) {
                  doppel.tags = doppel.tags.slice(0,i).concat(doppel.tags.slice(i+1));
                  doppel.strings[i] = doppel.strings[i] + doppel.strings[i+1];
                  doppel.strings = doppel.strings.slice(0,i+1).concat(doppel.strings.slice(i+2));
              }
          }
          // Sniff initial (outer) quote form (single or double) and configure parser
          // Also add leading spaces.
          for (var i=0,ilen=doppel.tags.length;i<ilen;i++) {
              var tag = doppel.tags[i];
              var forcedSpace = doppel.forcedSpaces[i-1];
              if ([" \"", " \'", "(\"", "(\'"].indexOf(tag) > -1) {
                  if (!quoteFormSeen) {
                      _setOuterQuoteForm(tag);
                      quoteFormSeen = true;
                  }
                  if (!forcedSpace) {
                      doppel.strings[i] += tag.slice(0, 1);
                  }
              }
          }
          //print(JSON.stringify(doppel, null, 2))
          //print(_undoppelString(doppel));
          _undoppelToQueue(blob, doppel, leadingSpace);
      };
  };
  
  /*global CSL: true */
  
  CSL.Output.Formatters = (function () {
      var rexStr = "(?:\u2018|\u2019|\u201C|\u201D| \"| \'|\"|\'|[-\u2013\u2014\/.,;?!:]|\\[|\\]|\\(|\\)|<span style=\"font-variant: small-caps;\">|<span class=\"no(?:case|decor)\">|<\/span>|<\/?(?:i|sc|b|sub|sup)>)";
      var tagDoppel = new CSL.Doppeler(rexStr, function(str) {
          return str.replace(/(<span)\s+(class=\"no(?:case|decor)\")[^>]*(>)/g, "$1 $2$3").replace(/(<span)\s+(style=\"font-variant:)\s*(small-caps);?(\")[^>]*(>)/g, "$1 $2 $3;$4$5");
      });
      var rexNameStr = "(?:[-\\s]*<\\/*(?:span\s+class=\"no(?:case|decor)\"|i|sc|b|sub|sup)>[-\\s]*|[-\\s]+)";
      var nameDoppel = new CSL.Doppeler(rexNameStr);
      
      var wordDoppel = new CSL.Doppeler("(?:[\u00A0\u0020\u00A0\u2000-\u200B\u205F\u3000]+)");
      
      /**
       * INTERNAL
       */
  
      var _tagParams = {
          "<span style=\"font-variant: small-caps;\">": "</span>",
          "<span class=\"nocase\">": "</span>",
          "<span class=\"nodecor\">": "</span>",
          "<sc>": "</sc>",
          "<sub>": "</sub>",
          "<sup>": "</sup>"
      };
  
      function _capitalise (word) {
          // Weird stuff is (.) transpiled with regexpu
          //   https://github.com/mathiasbynens/regexpu
          var m = word.match(/(^\s*)((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))(.*)/);
          // Do not uppercase lone Greek letters
          // (No case transforms in Greek citations, but chars used in titles to science papers)
          if (m && !(m[2].match(/^[\u0370-\u03FF]$/) && !m[3])) {
              return m[1] + CSL.toLocaleUpperCase.call(this, m[2]) + m[3];
          }
          return word;
      }
  
      function _textcaseEngine(config, string) {
          if (!string) {
              return "";
          }
          config.doppel = tagDoppel.split(string);
          var quoteParams = {
              " \"": {
                  opener: " \'",
                  closer: "\""
              },
              " \'": {
                  opener: " \"",
                  closer: "\'"
              },
              "\u2018": {
                  opener: "\u2018",
                  closer: "\u2019"
              },
              "\u201C": {
                  opener: "\u201C",
                  closer: "\u201D"
              },
          };
          function tryOpen(tag, pos) {
              if (config.quoteState.length === 0 || tag === config.quoteState[config.quoteState.length - 1].opener) {
                  config.quoteState.push({
                      opener: quoteParams[tag].opener,
                      closer: quoteParams[tag].closer,
                      pos: pos
                  });
                  return false;
              } else {
                  var prevPos = config.quoteState[config.quoteState.length-1].pos;
                  config.quoteState.pop();
                  config.quoteState.push({
                      opener: quoteParams[tag].opener,
                      closer: quoteParams[tag].closer,
                      positions: pos
                  });
                  return prevPos;
              }
          }
          function tryClose(tag, pos) {
              if (config.quoteState.length > 0 && tag === config.quoteState[config.quoteState.length - 1].closer) {
                  config.quoteState.pop();
              } else {
                  return pos;
              }
          }
          function pushQuoteState(tag, pos) {
              var isOpener = ["\u201C", "\u2018", " \"", " \'"].indexOf(tag) > -1 ? true : false;
              if (isOpener) {
                  return tryOpen(tag, pos);
              } else {
                  return tryClose(tag, pos);
              }
          }
          function quoteFix (tag, positions) {
              var m = tag.match(/(^(?:\u2018|\u2019|\u201C|\u201D|\"|\')|(?: \"| \')$)/);
              if (m) {
                  return pushQuoteState(m[1], positions);
              }
          }
          // Run state machine
          if (config.doppel.strings.length && config.doppel.strings[0].trim()) {
              config.doppel.strings[0] = config.capitaliseWords(config.doppel.strings[0], 0, config.doppel.tags[0]);
          }
  
        for (var i=0,ilen=config.doppel.tags.length;i<ilen;i++) {
              var tag = config.doppel.tags[i];
              var str = config.doppel.strings[i+1];
  
              if (config.tagState !== null) {
                  // Evaluate tag state for current string
                  if (_tagParams[tag]) {
                      config.tagState.push(_tagParams[tag]);
                  } else if (config.tagState.length && tag === config.tagState[config.tagState.length - 1]) {
                      config.tagState.pop();
                  }
              }
  
              if (config.afterPunct !== null) {
                  // Evaluate punctuation state of current string
                  if (tag.match(/[\!\?\:]$/)) {
                      config.afterPunct = true;
                  }
              }
  
              // Process if outside tag scope, else noop for upper-casing
              if (config.tagState.length === 0) {
                  config.doppel.strings[i+1] = config.capitaliseWords(str, i+1, config.doppel,config.doppel.tags[i+1]);
                  
              } else if (config.doppel.strings[i+1].trim()) {
                  config.lastWordPos = null;
              }
              
              if (config.quoteState !== null) {
                  // Evaluate quote state of current string and fix chars that have flown
                  var quotePos = quoteFix(tag, i);
                  if (quotePos || quotePos === 0) {
                      var origChar = config.doppel.origStrings[quotePos+1].slice(0, 1);
                      config.doppel.strings[quotePos+1] = origChar + config.doppel.strings[quotePos+1].slice(1);
                      config.lastWordPos = null;
                  }
              }
  
              // If there was a printable string, unset first-word and after-punctuation
              if (config.isFirst) {
                  if (str.trim()) {
                      config.isFirst = false;
                  }
              }
              if (config.afterPunct) {
                  if (str.trim()) {
                      config.afterPunct = false;
                  }
              }
          }
          if (config.quoteState) {
              for (var i=0,ilen=config.quoteState.length;i<ilen;i++) {
                  var quotePos = config.quoteState[i].pos;
                  // Test for quotePos avoids a crashing error:
                  //   https://github.com/citation-style-language/test-suite/blob/master/processor-tests/humans/flipflop_OrphanQuote.txt
                  if (typeof quotePos !== 'undefined') {
                      var origChar = config.doppel.origStrings[quotePos+1].slice(0, 1);
                      config.doppel.strings[quotePos+1] = origChar + config.doppel.strings[quotePos+1].slice(1);
                  }
              }
          }
          // Specially capitalize the last word if necessary (invert stop-word list)
          if (config.lastWordPos) {
              var lastWords = wordDoppel.split(config.doppel.strings[config.lastWordPos.strings]);
              var lastWord = lastWords.strings[config.lastWordPos.words];
              if (lastWord.length > 1 && CSL.toLocaleLowerCase.call(this, lastWord).match(config.skipWordsRex)) {
                  lastWord = _capitalise.call(this, lastWord);
                  lastWords.strings[config.lastWordPos.words] = lastWord;
              }
              config.doppel.strings[config.lastWordPos.strings] = wordDoppel.join(lastWords);
          }
  
          // Recombine the string
          return tagDoppel.join(config.doppel);
      }
  
      /**
       * PUBLIC
       */
  
      /**
       * A noop that just delivers the string.
       */
      function passthrough (state, str) {
          return str;
      }
  
      /**
       * Force all letters in the string to lowercase, skipping nocase spans
       */
      function lowercase(state, string) {
          var config = {
              quoteState: null,
              capitaliseWords: function(str) {
                  var words = str.split(" ");
                  for (var i=0,ilen=words.length;i<ilen;i++) {
                      var word = words[i];
                      if (word) {
                          words[i] = CSL.toLocaleLowerCase.call(state, word);
                      }
                  }
                  return words.join(" ");
              },
              skipWordsRex: null,
              tagState: [],
              afterPunct: null,
              isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
      }
  
      /**
       * Force all letters in the string to uppercase.
       */
      function uppercase(state, string) {
          var config = {
              quoteState: null,
              capitaliseWords: function(str) {
                  var words = str.split(" ");
                  for (var i=0,ilen=words.length;i<ilen;i++) {
                      var word = words[i];
                      if (word) {
                          // Okay.
                          // So we need to pick up an array of locales from state.tmp.
                          // This function is invoked in the context of queue.js, so
                          // the item is not available here. Three levels to be included
                          // in the array:
                          // 1. Field language tag, if any
                          // 2. Item language tag, if any
                          // 3. Value of state.opt.lang
                          words[i] = CSL.toLocaleUpperCase.call(state, word);
                      }
                  }
                  return words.join(" ");
              },
              skipWordsRex: null,
              tagState: [],
              afterPunct: null,
              isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
      }
  
      /**
       * Similar to <b>capitalize_first</b>, but force the
       * subsequent characters to lowercase.
       */
      function sentence(state, string) {
          var config = {
              quoteState: [],
              capitaliseWords: function(str) {
                  var words = str.split(" ");
                  for (var i=0,ilen=words.length;i<ilen;i++) {
                      var word = words[i];
                      if (word) {
                          if (config.isFirst) {
                              words[i] = _capitalise.call(state, word);
                              config.isFirst = false;
                          } else {
                              words[i] = CSL.toLocaleLowerCase.call(state, word);
                          }
                      }
                  }
                  return words.join(" ");
              },
              skipWordsRex: null,
              tagState: [],
              afterPunct: null,
              isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
      }
  
      function title(state, string) {
          var config = {
              quoteState: [],
              capitaliseWords: function(str, i, followingTag) {
                  if (str.trim()) {
                      var wordle = wordDoppel.split(str);
                      var words = wordle.strings;
                      for (var j=0,jlen=words.length;j<jlen;j++) {
                          var word = words[j];
                          if (!word) {
                              continue;
                          }
                          let lcase = CSL.toLocaleLowerCase.call(state, word);
                          let capitalize = false;
                          if (word.length > 1 && !lcase.match(config.skipWordsRex)) {
                              // Capitalize every word that is not a stop-word
                              capitalize = true;
                          } else if (j === (words.length - 1) && followingTag === "-") {
                              capitalize = true;
                          } else if (config.isFirst) {
                              // Capitalize first word, even if a stop-word
                              capitalize = true;
                          } else if (config.afterPunct) {
                              // Capitalize after punctuation
                              capitalize = true;
                          }
                          // Don't capitalize if word already contains capitalization
                          if (capitalize && word === lcase) {
                              words[j] = _capitalise.call(state, word);
                          }
                          config.afterPunct = false;
                          config.isFirst = false;
                          config.lastWordPos = {
                              strings: i,
                              words: j
                          };
                      }
                      str = wordDoppel.join(wordle);
                  }
                  return str;
              },
              skipWordsRex: state.locale[state.opt.lang].opts["skip-words-regexp"],
              tagState: [],
              afterPunct: false,
              isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
      }
      
      
      /**
       * Force capitalization of the first letter in the string, leave
       * the rest of the characters untouched.
       */
      function capitalizeFirst(state, string) {
          var config = {
              quoteState: [],
              capitaliseWords: function(str) {
                  var wordle = wordDoppel.split(str);
                  var words = wordle.strings;
                  for (var i=0,ilen=words.length;i<ilen;i++) {
                      var word = words[i];
                      if (word) {
                          if (config.isFirst) {
                              // Don't capitalize if word already contains capitalization
                              if (word === CSL.toLocaleLowerCase.call(state, word)) {
                                  words[i] = _capitalise.call(state, word);
                              }
                              config.isFirst = false;
                              break;
                          }
                      }
                  }
                  return wordDoppel.join(wordle);
              },
              skipWordsRex: null,
              tagState: [],
              afterPunct: null,
              isFirst: true
          };
          return _textcaseEngine.call(state, config, string);
      }
  
      /**
       * Force the first letter of each space-delimited
       * word in the string to uppercase, and leave the remainder
       * of the string untouched.  Single characters are forced
       * to uppercase.
       */
      function capitalizeAll (state, string) {
          var config = {
              quoteState: [],
              capitaliseWords: function(str) {
                  var wordle = wordDoppel.split(str);
                  var words = wordle.strings;
                  for (var i=0,ilen=words.length;i<ilen;i++) {
                      var word = words[i];
                      if (word) {
                          // Don't capitalize if word already contains capitalization
                          if (word === CSL.toLocaleLowerCase.call(state, word)) {
                              words[i] = _capitalise.call(state, word);
                          }
                      }
                  }
                  return wordDoppel.join(wordle);
              },
              skipWordsRex: null,
              tagState: [],
              afterPunct: null,
              isFirst: null
          };
          return _textcaseEngine.call(state, config, string);
      }
      return {
          nameDoppel: nameDoppel,
          passthrough: passthrough,
          lowercase: lowercase,
          uppercase: uppercase,
          sentence: sentence,
          title: title,
          "capitalize-first": capitalizeFirst,
          "capitalize-all": capitalizeAll
      };
  }());
  
  /*global CSL: true */
  
  
  /**
   * Output specifications.
   * @class
   */
  CSL.Output.Formats = function () {};
  
  /**
   * HTML output format specification.
   * <p>The headline says it all.  The source code for this
   * object can be used as a template for producing other
   * output modes.</p>
   */
  CSL.Output.Formats.prototype.html = {
      //
      // text_escape: Format-specific function for escaping text destined
      // for output.  Takes the text to be escaped as sole argument.  Function
      // will be run only once across each portion of text to be escaped, it
      // need not be idempotent.
      //
      "text_escape": function (text) {
          // Numeric entities, in case the output is processed as
          // xml in an environment in which HTML named entities are
          // not declared.
          if (!text) {
              text = "";
          }
          return text.replace(/&/g, "&#38;")
              .replace(/</g, "&#60;")
              .replace(/>/g, "&#62;")
              .replace(/\s\s/g, "\u00A0 ")
              .replace(CSL.SUPERSCRIPTS_REGEXP,
                       function(aChar) {
                           // return "&#60;sup&#62;" + CSL.SUPERSCRIPTS[aChar] + "&#60;/sup&#62;";
                           return "<sup>" + CSL.SUPERSCRIPTS[aChar] + "</sup>";
                       });
      },
      "bibstart": "<div class=\"csl-bib-body\">\n",
      "bibend": "</div>",
      "@font-style/italic": "<i>%%STRING%%</i>",
      "@font-style/oblique": "<em>%%STRING%%</em>",
      "@font-style/normal": "<span style=\"font-style:normal;\">%%STRING%%</span>",
      "@font-variant/small-caps": "<span style=\"font-variant:small-caps;\">%%STRING%%</span>",
      "@passthrough/true": CSL.Output.Formatters.passthrough,
      "@font-variant/normal": "<span style=\"font-variant:normal;\">%%STRING%%</span>",
      "@font-weight/bold": "<b>%%STRING%%</b>",
      "@font-weight/normal": "<span style=\"font-weight:normal;\">%%STRING%%</span>",
      "@font-weight/light": false,
      "@text-decoration/none": "<span style=\"text-decoration:none;\">%%STRING%%</span>",
      "@text-decoration/underline": "<span style=\"text-decoration:underline;\">%%STRING%%</span>",
      "@vertical-align/sup": "<sup>%%STRING%%</sup>",
      "@vertical-align/sub": "<sub>%%STRING%%</sub>",
      "@vertical-align/baseline": "<span style=\"baseline\">%%STRING%%</span>",
      "@strip-periods/true": CSL.Output.Formatters.passthrough,
      "@strip-periods/false": CSL.Output.Formatters.passthrough,
      "@quotes/true": function (state, str) {
          if ("undefined" === typeof str) {
              return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function (state, str) {
          if ("undefined" === typeof str) {
              //
              // Mostly right by being wrong (for apostrophes)
              //
              return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      //"@bibliography/body": function (state,str){
      //    return "<div class=\"csl-bib-body\">\n"+str+"</div>";
      //},
      "@cite/entry": function (state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
    },
      "@bibliography/entry": function (state, str) {
          // Test for this.item_id to add decorations to
          // bibliography output of individual entries.
          //
          // Full item content can be obtained from
          // state.registry.registry[id].ref, using
          // CSL variable keys.
          //
          // Example:
          //
          //   print(state.registry.registry[this.item_id].ref["title"]);
          //
          // At present, for parallel citations, only the
          // id of the master item is supplied on this.item_id.
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
              insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return "  <div class=\"csl-entry\">" + str + "</div>\n" + insert;
      },
      "@display/block": function (state, str) {
          return "\n\n    <div class=\"csl-block\">" + str + "</div>\n";
      },
      "@display/left-margin": function (state, str) {
          return "\n    <div class=\"csl-left-margin\">" + str + "</div>";
      },
      "@display/right-inline": function (state, str) {
          return "<div class=\"csl-right-inline\">" + str + "</div>\n  ";
      },
      "@display/indent": function (state, str) {
          return "<div class=\"csl-indent\">" + str + "</div>\n  ";
      },
      "@showid/true": function (state, str, cslid) {
          if (!state.tmp.just_looking && ! state.tmp.suppress_decorations) {
              if (cslid) {
                  return "<span class=\"" + state.opt.nodenames[cslid] + "\" cslid=\"" + cslid + "\">" + str + "</span>";
              } else if (this.params && "string" === typeof str) {
                  var prePunct = "";
                  if (str) {
                      var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                      prePunct = m[1];
                      str = m[2];
                  }
                  var postPunct = "";
                  if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                      postPunct = str.slice(-1);
                      str = str.slice(0,-1);
                  }
                  return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
              } else {
                  return str;
              }
          } else {
              return str;
          }
      },
      "@URL/true": function (state, str) {
          return "<a href=\"" + str + "\">" + str + "</a>";
      },
      "@DOI/true": function (state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
              doiurl = "https://doi.org/" + str;
          }
          return "<a href=\"" + doiurl + "\">" + str + "</a>";
      }
  };
  
  /**
   * Plain text output specification.
   *
   * (Code contributed by Simon Kornblith, Center for History and New Media,
   * George Mason University.)
   */
  CSL.Output.Formats.prototype.text = {
      //
      // text_escape: Format-specific function for escaping text destined
      // for output.  Takes the text to be escaped as sole argument.  Function
      // will be run only once across each portion of text to be escaped, it
      // need not be idempotent.
      //
      "text_escape": function (text) {
          if (!text) {
              text = "";
          }
          return text;
      },
      "bibstart": "",
      "bibend": "",
      "@font-style/italic": false,
      "@font-style/oblique": false,
      "@font-style/normal": false,
      "@font-variant/small-caps": false,
      "@passthrough/true": CSL.Output.Formatters.passthrough,
      "@font-variant/normal": false,
      "@font-weight/bold": false,
      "@font-weight/normal": false,
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": false,
      "@vertical-align/baseline": false,
      "@vertical-align/sup": false,
      "@vertical-align/sub": false,
      "@strip-periods/true": CSL.Output.Formatters.passthrough,
      "@strip-periods/false": CSL.Output.Formatters.passthrough,
      "@quotes/true": function (state, str) {
          if ("undefined" === typeof str) {
              return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function (state, str) {
          if ("undefined" === typeof str) {
              //
              // Mostly right by being wrong (for apostrophes)
              //
              return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      //"@bibliography/body": function (state,str){
      //    return "<div class=\"csl-bib-body\">\n"+str+"</div>";
      //},
      "@cite/entry": function (state, str) {
      return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
    },
      "@bibliography/entry": function (state, str) {
          return str+"\n";
      },
      "@display/block": function (state, str) {
          return "\n"+str;
      },
      "@display/left-margin": function (state, str) {
          return str;
      },
      "@display/right-inline": function (state, str) {
          return str;
      },
      "@display/indent": function (state, str) {
          return "\n    "+str;
      },
      "@showid/true": function (state, str) {
          return str;
      },
      "@URL/true": function (state, str) {
          return str;
      },
      "@DOI/true": function (state, str) {
          return str;
      }
  };
  
  /**
   * Plain text output specification.
   *
   * (Code contributed by Simon Kornblith, Center for History and New Media,
   * George Mason University.)
   */
  CSL.Output.Formats.prototype.rtf = {
      //
      // text_escape: Format-specific function for escaping text destined
      // for output.  Takes the text to be escaped as sole argument.  Function
      // will be run only once across each portion of text to be escaped, it
      // need not be idempotent.
      //
      "text_escape": function (text) {
          if (!text) {
              text = "";
          }
          return text
          .replace(/([\\{}])/g, "\\$1")
          .replace(CSL.SUPERSCRIPTS_REGEXP,
                   function(aChar) {
                       return "\\super " + CSL.SUPERSCRIPTS[aChar] + "\\nosupersub{}";
                   })
          .replace(/[\u007F-\uFFFF]/g,
                   function(aChar) { return "\\uc0\\u"+aChar.charCodeAt(0).toString()+"{}"; })
          .split("\t").join("\\tab{}");
      },
      "@passthrough/true": CSL.Output.Formatters.passthrough,
      "@font-style/italic":"{\\i{}%%STRING%%}",
      "@font-style/normal":"{\\i0{}%%STRING%%}",
      "@font-style/oblique":"{\\i{}%%STRING%%}",
      "@font-variant/small-caps":"{\\scaps %%STRING%%}",
      "@font-variant/normal":"{\\scaps0{}%%STRING%%}",
      "@font-weight/bold":"{\\b{}%%STRING%%}",
      "@font-weight/normal":"{\\b0{}%%STRING%%}",
      "@font-weight/light":false,
      "@text-decoration/none":false,
      "@text-decoration/underline":"{\\ul{}%%STRING%%}",
      "@vertical-align/baseline":false,
      "@vertical-align/sup":"\\super %%STRING%%\\nosupersub{}",
      "@vertical-align/sub":"\\sub %%STRING%%\\nosupersub{}",
      "@strip-periods/true": CSL.Output.Formatters.passthrough,
      "@strip-periods/false": CSL.Output.Formatters.passthrough,
      "@quotes/true": function (state, str) {
          if ("undefined" === typeof str) {
              return CSL.Output.Formats.rtf.text_escape(state.getTerm("open-quote"));
          }
          return CSL.Output.Formats.rtf.text_escape(state.getTerm("open-quote")) + str + CSL.Output.Formats.rtf.text_escape(state.getTerm("close-quote"));
      },
      "@quotes/inner": function (state, str) {
          if ("undefined" === typeof str) {
              return CSL.Output.Formats.rtf.text_escape("\u2019");
          }
          return CSL.Output.Formats.rtf.text_escape(state.getTerm("open-inner-quote")) + str + CSL.Output.Formats.rtf.text_escape(state.getTerm("close-inner-quote"));
      },
      "@quotes/false": false,
      "bibstart":"{\\rtf ",
      "bibend":"}",
      "@display/block": "\\line{}%%STRING%%\\line\r\n",
      "@cite/entry": function (state, str) {
          // If wrapCitationEntry does not exist, cite/entry 
          // is not applied.
      return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
    },
      "@bibliography/entry": function(state,str){
          return str;
      },
      "@display/left-margin": function(state,str){
          return str+"\\tab ";
      },
      "@display/right-inline": function (state, str) {
          return str+"\r\n";
      },
      "@display/indent": function (state, str) {
          return "\n\\tab "+str+"\\line\r\n";
      },
      "@showid/true": function (state, str) {
          if (!state.tmp.just_looking && ! state.tmp.suppress_decorations) {
              var prePunct = "";
              if (str) {
                  var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                  prePunct = m[1];
                  str = m[2];
              }
              var postPunct = "";
              if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                  postPunct = str.slice(-1);
                  str = str.slice(0,-1);
              }
              return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
              return str;
          }
      },
      "@URL/true": function (state, str) {
          return str;
      },
      "@DOI/true": function (state, str) {
          return str;
      }
  };
  
  /*
  
      This does not seem to work in Zotero plugins. For some reason the scope of the link does not
      close when interpreted by the LibreOffice. Perhaps this creates a field within a field,
      and that is not allowed?
  
      "@URL/true": function (state, str) {
          return "\\field{\\*\\fldinst{HYPERLINK \"" + str + "\"}}{\\fldrslt{"+ str +"}}";
      },
      "@DOI/true": function (state, str) {
          return "\\field{\\*\\fldinst{HYPERLINK \"https://doi.org/" + str + "\"}}{\\fldrslt{"+ str +"}}";
      }
  */
  
  /**
   * AsciiDoc output specification.
   *
   * See http://asciidoc.org/ or https://asciidoctor.org/
   */
  CSL.Output.Formats.prototype.asciidoc = {
      "text_escape": function (text) {
          if (!text) {
              text = "";
          }
          return text.replace("*", "pass:[*]", "g")
              .replace("_", "pass:[_]", "g")
              .replace("#", "pass:[#]", "g")
              .replace("^", "pass:[^]", "g")
              .replace("~", "pass:[~]", "g")
              .replace("[[", "pass:[[[]", "g")
              .replace("  ", "&#160; ", "g")
              .replace(CSL.SUPERSCRIPTS_REGEXP, function(aChar) {
                  return "^" + CSL.SUPERSCRIPTS[aChar] + "^";
              });
      },
      "bibstart": "",
      "bibend": "",
      "@passthrough/true": CSL.Output.Formatters.passthrough,
      "@font-style/italic": "__%%STRING%%__",
      "@font-style/oblique": "__%%STRING%%__",
      "@font-style/normal": false,
      "@font-variant/small-caps": "[small-caps]#%%STRING%%#",
      "@font-variant/normal": false,
      "@font-weight/bold": "**%%STRING%%**",
      "@font-weight/normal": false,
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": "[underline]##%%STRING%%##",
      "@vertical-align/sup": "^^%%STRING%%^^",
      "@vertical-align/sub": "~~%%STRING%%~~",
      "@vertical-align/baseline": false,
      "@strip-periods/true": CSL.Output.Formatters.passthrough,
      "@strip-periods/false": CSL.Output.Formatters.passthrough,
      "@quotes/true": function (state, str) {
          if ("undefined" === typeof str) {
              return "``";
          }
          return "``" + str + "''";
      },
      "@quotes/inner": function (state, str) {
          if ("undefined" === typeof str) {
              return "`";
          }
          return "`" + str + "'";
      },
      "@quotes/false": false,
      "@cite/entry": function (state, str) {
          // if wrapCitationEntry does not exist, cite/entry is not applied
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function (state, str) {
          return str + "\n";
      },
      "@display/block": function (state, str) {
          return str;
      },
      "@display/left-margin": function (state, str) {
          return str;
      },
      "@display/right-inline": function (state, str) {
          return " " + str;
      },
      "@display/indent": function (state, str) {
          return " " + str;
      },
      "@showid/true": function (state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && "string" === typeof str) {
              var prePunct = "";
              if (str) {
                  var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                  prePunct = m[1];
                  str = m[2];
              }
              var postPunct = "";
              if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                  postPunct = str.slice(-1);
                  str = str.slice(0,-1);
              }
              return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
              return str;
          }
      },
      "@URL/true": function (state, str) {
          // AsciiDoc renders URLs automatically as links
          return str;
      },
      "@DOI/true": function (state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
              doiurl = "https://doi.org/" + str;
          }
          return doiurl + "[" + str + "]";
      }
  };
  
  /**
   * Output specification for XSL-FO (Extensible Stylesheet
   * Language - Formatting Objects)
   *
   * See https://www.w3.org/TR/xsl11/#fo-section
   */
  CSL.Output.Formats.prototype.fo = {
      "text_escape": function (text) {
          if (!text) {
              text = "";
          }
          return text.replace(/&/g, "&#38;")
              .replace(/</g, "&#60;")
              .replace(/>/g, "&#62;")
              .replace("  ", "&#160; ", "g")
              .replace(CSL.SUPERSCRIPTS_REGEXP, function(aChar) {
                  return "<fo:inline vertical-align=\"super\">" + CSL.SUPERSCRIPTS[aChar] + "</fo:inline>";
              });
      },
      "bibstart": "",
      "bibend": "",
      "@passthrough/true": CSL.Output.Formatters.passthrough,
      "@font-style/italic": "<fo:inline font-style=\"italic\">%%STRING%%</fo:inline>",
      "@font-style/oblique": "<fo:inline font-style=\"oblique\">%%STRING%%</fo:inline>",
      "@font-style/normal": "<fo:inline font-style=\"normal\">%%STRING%%</fo:inline>",
      "@font-variant/small-caps": "<fo:inline font-variant=\"small-caps\">%%STRING%%</fo:inline>",
      "@font-variant/normal": "<fo:inline font-variant=\"normal\">%%STRING%%</fo:inline>",
      "@font-weight/bold": "<fo:inline font-weight=\"bold\">%%STRING%%</fo:inline>",
      "@font-weight/normal": "<fo:inline font-weight=\"normal\">%%STRING%%</fo:inline>",
      "@font-weight/light": "<fo:inline font-weight=\"lighter\">%%STRING%%</fo:inline>",
      "@text-decoration/none": "<fo:inline text-decoration=\"none\">%%STRING%%</fo:inline>",
      "@text-decoration/underline": "<fo:inline text-decoration=\"underline\">%%STRING%%</fo:inline>",
      "@vertical-align/sup": "<fo:inline vertical-align=\"super\">%%STRING%%</fo:inline>",
      "@vertical-align/sub": "<fo:inline vertical-align=\"sub\">%%STRING%%</fo:inline>",
      "@vertical-align/baseline": "<fo:inline vertical-align=\"baseline\">%%STRING%%</fo:inline>",
      "@strip-periods/true": CSL.Output.Formatters.passthrough,
      "@strip-periods/false": CSL.Output.Formatters.passthrough,
      "@quotes/true": function (state, str) {
          if ("undefined" === typeof str) {
              return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function (state, str) {
          if ("undefined" === typeof str) {
              return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      "@cite/entry": function (state, str) {
          return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
      },
      "@bibliography/entry": function (state, str) {
          var indent = "";
          if (state.bibliography && state.bibliography.opt && state.bibliography.opt.hangingindent) {
              var hi = state.bibliography.opt.hangingindent;
              indent = " start-indent=\"" + hi +"em\" text-indent=\"-" + hi + "em\"";
          }
          var insert = "";
          if (state.sys.embedBibliographyEntry) {
              insert = state.sys.embedBibliographyEntry(this.item_id) + "\n";
          }
          return "<fo:block id=\"" + this.system_id + "\"" + indent + ">" + str + "</fo:block>\n" + insert;
      },
      "@display/block": function (state, str) {
          return "\n  <fo:block>" + str + "</fo:block>\n";
      },
      "@display/left-margin": function (state, str) {
          return "\n  <fo:table table-layout=\"fixed\" width=\"100%\">\n    " +
                  "<fo:table-column column-number=\"1\" column-width=\"$$$__COLUMN_WIDTH_1__$$$\"/>\n    " +
                  "<fo:table-column column-number=\"2\" column-width=\"proportional-column-width(1)\"/>\n    " +
                  "<fo:table-body>\n      " +
                      "<fo:table-row>\n        " +
                          "<fo:table-cell>\n          " +
                              "<fo:block>" + str + "</fo:block>\n        " +
                          "</fo:table-cell>\n        ";
      },
      "@display/right-inline": function (state, str) {
          return "<fo:table-cell>\n          " +
                  "<fo:block>" + str + "</fo:block>\n        " +
              "</fo:table-cell>\n      " +
              "</fo:table-row>\n    " +
              "</fo:table-body>\n  " +
              "</fo:table>\n";
      },
      "@display/indent": function (state, str) {
          return "<fo:block margin-left=\"2em\">" + str + "</fo:block>\n";
      },
      "@showid/true": function (state, str) {
          if (!state.tmp.just_looking && !state.tmp.suppress_decorations && this.params && "string" === typeof str) {
              var prePunct = "";
              if (str) {
                  var m = str.match(CSL.VARIABLE_WRAPPER_PREPUNCT_REX);
                  prePunct = m[1];
                  str = m[2];
              }
              var postPunct = "";
              if (str && CSL.SWAPPING_PUNCTUATION.indexOf(str.slice(-1)) > -1) {
                  postPunct = str.slice(-1);
                  str = str.slice(0,-1);
              }
              return state.sys.variableWrapper(this.params, prePunct, str, postPunct);
          } else {
              return str;
          }
      },
      "@URL/true": function (state, str) {
          return "<fo:basic-link external-destination=\"url('" + str + "')\">" + str + "</fo:basic-link>";
      },
      "@DOI/true": function (state, str) {
          var doiurl = str;
          if (!str.match(/^https?:\/\//)) {
              doiurl = "https://doi.org/" + str;
          }
          return "<fo:basic-link external-destination=\"url('" + doiurl + "')\">" + str + "</fo:basic-link>";
      }
  };
  
  /**
   * LaTeX .bbl output.
   *
   * (Code contributed by Egon Willighagen, based on the prototype.text code.)
   */
  CSL.Output.Formats.prototype.latex = {
      "text_escape": function (text) {
          if (!text) {
              text = "";
          }
          return text;
      },
      "bibstart": "\\begin{thebibliography}{4}",
      "bibend": "\end{thebibliography}",
      "@font-style/italic": "{\\em %%STRING%%}",
      "@font-style/oblique": false,
      "@font-style/normal": false,
      "@font-variant/small-caps": false,
      "@passthrough/true": CSL.Output.Formatters.passthrough,
      "@font-variant/normal": false,
      "@font-weight/bold": "{\\bf %%STRING%%}",
      "@font-weight/normal": false,
      "@font-weight/light": false,
      "@text-decoration/none": false,
      "@text-decoration/underline": false,
      "@vertical-align/baseline": false,
      "@vertical-align/sup": false,
      "@vertical-align/sub": false,
      "@strip-periods/true": CSL.Output.Formatters.passthrough,
      "@strip-periods/false": CSL.Output.Formatters.passthrough,
      "@quotes/true": function (state, str) {
          if ("undefined" === typeof str) {
              return state.getTerm("open-quote");
          }
          return state.getTerm("open-quote") + str + state.getTerm("close-quote");
      },
      "@quotes/inner": function (state, str) {
          if ("undefined" === typeof str) {
              //
              // Mostly right by being wrong (for apostrophes)
              //
              return "\u2019";
          }
          return state.getTerm("open-inner-quote") + str + state.getTerm("close-inner-quote");
      },
      "@quotes/false": false,
      //"@bibliography/body": function (state,str){
      //    return "<div class=\"csl-bib-body\">\n"+str+"</div>";
      //},
      "@cite/entry": function (state, str) {
      return state.sys.wrapCitationEntry(str, this.item_id, this.locator_txt, this.suffix_txt);
    },
      "@bibliography/entry": function (state, str) {
          return "\\bibitem{" + state.sys.embedBibliographyEntry(this.item_id) + "}\n";
      },
      "@display/block": function (state, str) {
          return "\n"+str;
      },
      "@display/left-margin": function (state, str) {
          return str;
      },
      "@display/right-inline": function (state, str) {
          return str;
      },
      "@display/indent": function (state, str) {
          return "\n    "+str;
      },
      "@showid/true": function (state, str, cslid) {
          return str;
      },
      "@URL/true": function (state, str) {
          return str;
      },
      "@DOI/true": function (state, str) {
          return str;
      }
  };
  
  CSL.Output.Formats = new CSL.Output.Formats();
  
  /*global CSL: true */
  
  
  //
  // Time for a rewrite of this module.
  //
  // Simon has pointed out that list and hash behavior can
  // be obtained by ... just using a list and a hash.  This
  // is faster for batched operations, because sorting is
  // greatly optimized.  Since most of the interaction
  // with plugins at runtime will involve batches of
  // references, there will be solid gains if the current,
  // one-reference-at-a-time approach implemented here
  // can be replaced with something that leverages the native
  // sort method of the Array() type.
  //
  // That's going to take some redesign, but it will simplify
  // things in the long run, so it might as well happen now.
  //
  // We'll keep makeCitationCluster and makeBibliography as
  // simple methods that return a string.  Neither should
  // have any effect on internal state.  This will be a change
  // in behavior for makeCitationCluster.
  //
  // A new updateItems command will be introduced, to replace
  // insertItems.  It will be a simple list of IDs, in the
  // sequence of first reference in the document.
  //
  // The calling application should always invoke updateItems
  // before makeCitationCluster.
  //
  
  //
  // should allow batched registration of items by
  // key.  should behave as an update, with deletion
  // of items and the tainting of disambiguation
  // partner sets affected by a deletes and additions.
  //
  //
  // we'll need a reset method, to clear the decks
  // in the citation area and start over.
  
  /**
   * Registry of cited items.
   * <p>This is a persistent store of disambiguation and
   * sort order information relating to individual items
   * for which rendering is requested.  Item data is stored
   * in a hash, with the item key as hash key, for quick
   * retrieval.  A virtual sequence within the hashed store
   * is maintained on the fly as items are added to the
   * store, using <code>*_next</code> and <code>*_prev</code>
   * attributes on each item.  A separate hash of items
   * based on their undisambiguated cite form is
   * maintained, and the item id list and disambiguation
   * level for each set of disambiguation partners is shared
   * through the registry item.</p>
   * @class
   */
  CSL.Registry = function (state) {
      this.debug = false;
      this.state = state;
      this.registry = {};
      this.reflist = [];
      this.refhash = {};
      this.namereg = new CSL.Registry.NameReg(state);
      this.citationreg = new CSL.Registry.CitationReg(state);
      // See CSL.NameOutput.prototype.outputNames
      // and CSL.Registry.prototype.doinserts
      this.authorstrings = {};
      
      // for parallel delimiter support
      this.masterMap = {};
      
      //
      // shared scratch vars
      this.mylist = [];
      this.myhash = {};
      this.deletes = [];
      this.inserts = [];
      this.uncited = {};
      this.refreshes = {};
      this.akeys = {};
      this.oldseq = {};
      this.return_data = {};
      //
      // each ambig is a list of the ids of other objects
      // that have the same base-level rendering
      this.ambigcites = {};
      this.ambigresets = {};
      this.sorter = new CSL.Registry.Comparifier(state, "bibliography_sort");
      //this.modes = CSL.getModes.call(this.state);
      //this.checkerator = new CSL.Checkerator();
  
      this.getSortedIds = function () {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
              ret.push("" + this.reflist[i].id);
          }
          return ret;
      };
  
      this.getSortedRegistryItems = function () {
          var ret = [];
          for (var i = 0, ilen = this.reflist.length; i < ilen; i += 1) {
              ret.push(this.reflist[i]);
          }
          return ret;
      };
  };
  
  //
  // Here's the sequence of operations to be performed on
  // update:
  //
  //  1.  (o) [init] Receive list as function argument, store as hash and as list.
  //  2.  (o) [init] Initialize refresh list.  Never needs sorting, only hash required.
  
  //  3.  (o) [dodeletes] Delete loop.
  //  3a. (o) [dodeletes] Delete names in items to be deleted from names reg.
  //  3b. (o) [dodeletes] Complement refreshes list with items affected by
  //      possible name changes.  We'll actually perform the refresh once
  //      all of the necessary data and parameters have been established
  //      in the registry.
  //  3c. (o) [dodeletes] Delete all items to be deleted from their disambig pools.
  //  3d. (o) [dodeletes] Delete all items in deletion list from hash.
  
  //  4.  (o) [doinserts] Insert loop.
  //  4a. (o) [doinserts] Retrieve entries for items to insert.
  //  4b. (o) [doinserts] Generate ambig key.
  //  4c. (o) [doinserts] Add names in items to be inserted to names reg
  //      (implicit in getAmbiguousCite).
  //  4d. (o) [doinserts] Record ambig pool key on akey list (used for updating further
  //      down the chain).
  //  4e. (o) [doinserts] Create registry token.
  //  4f. (o) [doinserts] Add item ID to hash.
  //  4g. (o) [doinserts] Set and record the base token to hold disambiguation
  //      results ("disambig" in the object above).
  //  5.  (o) [rebuildlist] Create "new" list of hash pointers, in the order given
  //          in the argument to the update function.
  //  6.  (o) [rebuildlist] Apply citation numbers to new list.
  //  7.  (o) [dorefreshes] Refresh items requiring update.
  
  
  
  //  5. (o) [delnames] Delete names in items to be deleted from names reg, and obtain IDs
  //         of other items that would be affected by changes around that surname.
  //  6. (o) [delnames] Complement delete and insert lists with items affected by
  //         possible name changes.
  //  7. (o) [delambigs] Delete all items to be deleted from their disambig pools.
  //  8. (o) [delhash] Delete all items in deletion list from hash.
  
  //  9. (o) [addtohash] Retrieve entries for items to insert.
  // 10. (o) [addtohash] Add items to be inserted to their disambig pools.
  // 11. (o) [addtohash] Add names in items to be inserted to names reg
  //         (implicit in getAmbiguousCite).
  // 12. (o) [addtohash] Create registry token for each item to be inserted.
  // 13. (o) [addtohash] Add items for insert to hash.
  
  // 14. (o) [buildlist] Create "new" list of hash pointers, in the order given in the argument
  //         to the update function.
  // 15. (o) [renumber] Apply citation numbers to new list.
  // 16. (o) [setdisambigs] Set disambiguation parameters on each inserted item token.
  // 17. (o) [setsortkeys] Set sort keys on each item token.
  // 18. (o) [sorttokens] Resort token list
  // 19. (o) [renumber] Reset citation numbers on list items
  //
  
  CSL.Registry.prototype.init = function (itemIDs, uncited_flag) {
      var i, ilen;
      this.oldseq = {};
      //  1. Receive list as function argument, store as hash and as list.
      //
      // Result:
      //   this.mylist: a list of all itemIDs of referenced items, cited and uncited.
      //   this.myhash: a hash of index positions in this.mylist.
      //   this.uncited: hash of uncited itemIDs.
      //
      // Proceed as follows.
      //
      if (uncited_flag) {
          // If uncited_flag is non-nil, add any missing itemIDs to this.mylist
          // from itemIDs input list, and set the itemIDs in itemIDs on this.uncited.
          this.uncited = {};
          for (var i=0,ilen=itemIDs.length;i<ilen; i += 1) {
              if (!this.myhash[itemIDs[i]]) {
                  this.mylist.push("" + itemIDs[i]);
              }
              this.uncited[itemIDs[i]] = true;
              this.myhash[itemIDs[i]] = true;
          }
      } else {
          // If uncited_flag is nil, remove duplicate itemIDs from itemIDs input
          // list, set the result on this.mylist, and add missing itemIDs to
          // this.mylist from itemIDs input list.
          for (var key in this.uncited) {
              itemIDs.push(key);
          }
          var myhash = {};
          for (i=itemIDs.length-1;i>-1; i += -1) {
              if (myhash[itemIDs[i]]) {
                  itemIDs = itemIDs.slice(0, i).concat(itemIDs.slice(i + 1));
              } else {
                  myhash[itemIDs[i]] = true;
              }
          }
          this.mylist = itemIDs;
          this.myhash = myhash;
      }
      //
      //  2. Initialize refresh list.  Never needs sorting, only hash required.
      //
      this.refreshes = {};
      this.touched = {};
      this.ambigsTouched = {};
      this.ambigresets = {};
  };
  
  CSL.Registry.prototype.dopurge = function (myhash) {
      // Remove any uncited items not in myhash
      for (var i=this.mylist.length-1;i>-1;i+=-1) {
          // Might not want to be quite this restrictive.
          if (this.citationreg.citationsByItemId) {
              if ((!this.citationreg.citationsByItemId || !this.citationreg.citationsByItemId[this.mylist[i]]) && !myhash[this.mylist[i]]) {
                  delete this.myhash[this.mylist[i]];
                  delete this.uncited[this.mylist[i]];
                  this.mylist = this.mylist.slice(0,i).concat(this.mylist.slice(i+1));
              }
          }
      }
      this.dodeletes(this.myhash);
  };
  
  CSL.Registry.prototype.dodeletes = function (myhash) {
      var otheritems, key, ambig, pos, len, items, kkey, mypos, id;
      if ("string" === typeof myhash) {
          var key = myhash;
          myhash = {};
          myhash[key] = true;
      }
      //
      //  3. Delete loop.
      //
      for (var key in this.registry) {
          if (!myhash[key]) {
              // skip items explicitly marked as uncited
              if (this.uncited[key]) {
                  continue;
              }
              //
              //  3a. Delete names in items to be deleted from names reg.
              //
              otheritems = this.namereg.delitems(key);
              //
              //  3b. Complement refreshes list with items affected by
              //      possible name changes.  We'll actually perform the refresh once
              //      all of the necessary data and parameters have been established
              //      in the registry.
              //
              for (kkey in otheritems) {
                  this.refreshes[kkey] = true;
              }
              //
              //  3c. Delete all items to be deleted from their disambig pools.
              //
              ambig = this.registry[key].ambig;
              mypos = this.ambigcites[ambig].indexOf(key);
              if (mypos > -1) {
                  items = this.ambigcites[ambig].slice();
                  this.ambigcites[ambig] = items.slice(0, mypos).concat(items.slice(mypos+1, items.length));
                  this.ambigresets[ambig] = this.ambigcites[ambig].length;
              }
              //
              // XX. What we've missed is to provide an update of all
              // items sharing the same ambig  += -1 the remaining items in
              // ambigcites.  So let's do that here, just in case the
              // names update above doesn't catch them all.
              //
              len = this.ambigcites[ambig].length;
              for (pos = 0; pos < len; pos += 1) {
                  id = "" + this.ambigcites[ambig][pos];
                  this.refreshes[id] = true;
              }
              //
              // 3d-0. Remove parallel id references and realign
              // parallel ID refs.
              //
              if (this.registry[key].siblings) {
                  if (this.registry[key].siblings.length == 1) {
                      var loneSiblingID = this.registry[key].siblings[0];
                      if (this.registry[loneSiblingID].siblings) {
                          this.registry[loneSiblingID].siblings.pop();
                          this.registry[loneSiblingID].master = true;
                          // this.registry[loneSiblingID].parallel = false;
                      }
                  } else if (this.registry[key].siblings.length > 1) {
                      var removeIDs = [key];
                      if (this.registry[key].master) {
                          var newmasterID = this.registry[key].siblings[0];
                          var newmaster = this.registry[newmasterID];
                          newmaster.master = true;
                          // newmaster.parallel_delimiter is set externally, if at all
                          // newmaster.parallel = false;
                          removeIDs.push(newmasterID);
                          // for (var k = 0, klen = this.registry[key].siblings.length; k < klen; k += 1) {
                          //     this.registry[this.registry[key].siblings[k]].parallel = newmasterID;
                          // }
                      }
                      var buffer = [];
                      for (var k = this.registry[key].siblings.length - 1; k > -1; k += -1) {
                          var siblingID = this.registry[key].siblings.pop();
                          if (removeIDs.indexOf(siblingID) === -1) {
                              buffer.push(siblingID);
                          }
                      }
                      for (var k = buffer.length - 1; k > -1; k += -1) {
                          this.registry[key].siblings.push(buffer[k]);
                      }
                  }
              }
              //
              // 3d-1. Remove item from reflist
              for (var i=this.reflist.length-1;i>-1;i--) {
                  if (this.reflist[i].id === key) {
                      this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i+1));
                  }
              }
              //
              //  3d. Delete all items in deletion list from hash.
              //
              delete this.registry[key];
              delete this.refhash[key];
  
              // For processCitationCluster()
              this.return_data.bibchange = true;
          }
      }
      // Disabled.  See formats.js for code.
      // this.state.fun.decorate.items_delete( this.state.output[this.state.opt.mode].tmp, myhash );
  };
  
  CSL.Registry.prototype.doinserts = function (mylist) {
      var item, Item, akey, newitem, abase, i, ilen;
      if ("string" === typeof mylist) {
          mylist = [mylist];
      }
      //
      //  4. Insert loop.
      //
      for (var i = 0, ilen = mylist.length; i < ilen; i += 1) {
          item = mylist[i];
          if (!this.registry[item]) {
              //
              //  4a. Retrieve entries for items to insert.
              //
              Item = this.state.retrieveItem(item);
  
              //
              //  4b. Generate ambig key.
              //
              // AND
              //
              //  4c. Add names in items to be inserted to names reg
              //      (implicit in getAmbiguousCite).
              //
              akey = CSL.getAmbiguousCite.call(this.state, Item);
              this.ambigsTouched[akey] = true;
              //
              //  4d. Record ambig pool key on akey list (used for updating further
              //      down the chain).
              //
              if (!Item.legislation_id) {
                  this.akeys[akey] = true;
              }
              //
              //  4e. Create registry token.
              //
              newitem = {
                  "id": "" + item,
                  "seq": 0,
                  "offset": 0,
                  "sortkeys": false,
                  "ambig": false,
                  "rendered": false,
                  "disambig": false,
                  "ref": Item,
                  "newItem": true
              };
              //
              //
              //  4f. Add item ID to hash.
              //
              this.registry[item] = newitem;
              //
              //  4f(a). Add first reference note number
              //         (this may be redundant)
              if (this.citationreg.citationsByItemId && this.citationreg.citationsByItemId[item]) {
                  this.registry[item]["first-reference-note-number"] = this.citationreg.citationsByItemId[item][0].properties.noteIndex;
              }
  
              //
              //  4g. Set and record the base token to hold disambiguation
              //      results ("disambig" in the object above).
              //
              abase = CSL.getAmbigConfig.call(this.state);
              this.registerAmbigToken(akey, item, abase);
  
              //if (!this.ambigcites[akey]){
              //    this.ambigcites[akey] = [];
              //}
              //CSL.debug("Run: "+item+"("+this.ambigcites[akey]+")");
              //if (this.ambigcites[akey].indexOf(item) === -1){
              //    CSL.debug("  Add: "+item);
              //    this.ambigcites[akey].push(item);
              //}
              //
              //  4h. Make a note that this item needs its sort keys refreshed.
              //
              this.touched[item] = true;
              // For processCitationCluster()
              this.return_data.bibchange = true;
          }
      }
      // Disabled.  See formats.js for code.
      // this.state.fun.decorate.items_add( this.state.output[this.state.opt.mode].tmp, mylist );
  };
  
  /*
  // No longer required.
  CSL.Registry.prototype.douncited = function () {
      var pos, len;
      var cited_len = this.mylist.length - this.uncited.length;
      for (pos = 0, len = cited_len; pos < len; pos += 1) {
          this.registry[this.mylist[pos]].uncited = false;
      }
      for (pos = cited_len, len = this.mylist.length; pos < len; pos += 1) {
          this.registry[this.mylist[pos]].uncited = true;
      }
  };
  */
  
  CSL.Registry.prototype.rebuildlist = function (nosort) {
      var len, pos, item, Item;
      //
      //  5. Create "new" list of hash pointers, in the order given in the argument
      //     to the update function.
      //
      //
      // XXX Keep reflist in place.
      //
      if (!nosort) {
          this.reflist_inserts = [];
          //
          //  6. Apply citation numbers to new list,
          //     saving off old sequence numbers as we go.
          //
          // XXX Just memo inserts -- actual insert happens below, at last "sort"
          //
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
              item = this.mylist[pos];
              Item = this.registry[item];
              if (Item.newItem) {
                  this.reflist_inserts.push(Item);
              }
              this.oldseq[item] = this.registry[item].seq;
              this.registry[item].seq = (pos + 1);
          }
      } else {
          this.reflist = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
              item = this.mylist[pos];
              Item = this.registry[item];
              this.reflist.push(Item);
              this.oldseq[item] = this.registry[item].seq;
              this.registry[item].seq = (pos + 1);
          }
      }
  };
  
  /*
   * Okay, at this point we should have a numbered list
   * of registry tokens in the notional order requested,
   * with sequence numbers to reconstruct the ordering
   * if the list is remangled.  So far so good.
   */
  
  CSL.Registry.prototype.dorefreshes = function () {
      var key, regtoken, Item, akey, abase;
      //
      //  7. Refresh items requiring update.
      //
      // It looks like we need to do four things on each cite for refresh:
      // (1) Generate the akey for the cite.
      // (2) Register it on the ambig token.
      // (3) Register the akey in this.akeys
      // (4) Register the item ID in this.touched
      //
      for (var key in this.refreshes) {
          regtoken = this.registry[key];
          if (!regtoken) {
              continue;
          }
          regtoken.sortkeys = undefined;
          Item = this.state.refetchItem(key);
          var akey = regtoken.ambig;
  
          if ("undefined" === typeof akey) {
              this.state.tmp.disambig_settings = false;
              akey = CSL.getAmbiguousCite.call(this.state, Item);
              abase = CSL.getAmbigConfig.call(this.state);
              this.registerAmbigToken(akey, key, abase);
          }
          for (var akkey in this.ambigresets) {
              if (this.ambigresets[akkey] === 1) {
                  var loneKey = this.ambigcites[akey][0];
                  var Item = this.state.refetchItem(loneKey);
                  this.registry[loneKey].disambig = new CSL.AmbigConfig();
                  this.state.tmp.disambig_settings = false;
                  var akey = CSL.getAmbiguousCite.call(this.state, Item);
                  var abase = CSL.getAmbigConfig.call(this.state);
                  this.registerAmbigToken(akey, loneKey, abase);
              }
          }
          this.state.tmp.taintedItemIDs[key] = true;
          this.ambigsTouched[akey] = true;
          if (!Item.legislation_id) {
              this.akeys[akey] = true;
          }
          this.touched[key] = true;
      }
  };
  
  /*
   * Main disambiguation  += -1 can everything for disambiguation be
   * crunched into this function?
   */
  CSL.Registry.prototype.setdisambigs = function () {
      //
      // Okay, more changes.  Here is where we resolve all disambiguation
      // issues for cites touched by the update.  The this.ambigcites set is
      // based on the complete short form of citations, and is the basis on
      // which names are added and minimal adding of initials or given names
      // is performed.
      //
  
      //
      //  8.  Set disambiguation parameters on each inserted item token.
      //
      for (var akey in this.ambigsTouched) {
          //
          // Disambiguation is fully encapsulated.
          // Disambiguator will run only if there are multiple
          // items, and at least one disambiguation mode is
          // in effect.
          this.state.disambiguate.run(akey);
      }
      this.ambigsTouched = {};
      this.akeys = {};
  };
  
  
  
  CSL.Registry.prototype.renumber = function () {
      var len, pos, item;
      //
      // 19. Reset citation numbers on list items
      //
      if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {
          this.state.bibliography_sort.tmp.citation_number_map = {};
      }
      len = this.reflist.length;
      for (pos = 0; pos < len; pos += 1) {
          item = this.reflist[pos];
          // save the overhead of rerenderings if citation-number is not
          // used in the style.
          item.seq = (pos + 1);
          if (this.state.bibliography_sort.opt.citation_number_sort_direction === CSL.DESCENDING) {
              this.state.bibliography_sort.tmp.citation_number_map[item.seq] = (this.reflist.length - item.seq + 1);
          }
          // update_mode is set to CSL.NUMERIC if citation-number is rendered
          // in citations.
          if (this.state.opt.update_mode === CSL.NUMERIC && item.seq != this.oldseq[item.id]) {
              this.state.tmp.taintedItemIDs[item.id] = true;
          }
          if (item.seq != this.oldseq[item.id]) {
              this.return_data.bibchange = true;
          }
      }
  };
  
  CSL.Registry.prototype.setsortkeys = function () {
      var key;
      //
      // 17. Set sort keys on each item token.
      //
      for (var i = 0, ilen = this.mylist.length; i < ilen; i += 1) {
          var key = this.mylist[i];
          // The last of these conditions may create some thrashing on styles that do not require sorting.
          if (this.touched[key] || this.state.tmp.taintedItemIDs[key] || !this.registry[key].sortkeys) {
              this.registry[key].sortkeys = CSL.getSortKeys.call(this.state, this.state.retrieveItem(key), "bibliography_sort");
          }
      }
  };
  
  CSL.Registry.prototype._insertItem = function(element, array) {
      array.splice(this._locationOf(element, array) + 1, 0, element);
      return array;
  };
  
  CSL.Registry.prototype._locationOf = function(element, array, start, end) {
      if (array.length === 0) {
          return -1;
      }
      start = start || 0;
      end = end || array.length;
      var pivot = (start + end) >> 1;  // should be faster than dividing by 2
      
      var c = this.sorter.compareKeys(element, array[pivot]);
      if (end - start <= 1) {
          return c == -1 ? pivot - 1 : pivot;
      }
      switch (c) {
          case -1: return this._locationOf(element, array, start, pivot);
          case 0: return pivot;
          case 1: return this._locationOf(element, array, pivot, end);
      }
  };
  
  CSL.Registry.prototype.sorttokens = function (nosort) {
      var len, item, Item, pos;
      //
      // 18. Resort token list.
      //
      if (!nosort) {
          this.reflist_inserts = [];
          len = this.mylist.length;
          for (pos = 0; pos < len; pos += 1) {
              item = this.mylist[pos];
              Item = this.registry[item];
              if (Item.newItem) {
                  this.reflist_inserts.push(Item);
              }
          }
          // There is a thin possibility that tainted items in a sorted list
          // will change position due to disambiguation. We cover for that here.
          for (var key in this.state.tmp.taintedItemIDs) {
              if (this.registry[key] && !this.registry[key].newItem) {
                  // Move tainted items from reflist to reflist_inserts
                  for (var i=this.reflist.length-1;i>-1;i--) {
                      if (this.reflist[i].id === key) {
                          this.reflist_inserts.push(this.reflist[i]);
                          this.reflist = this.reflist.slice(0, i).concat(this.reflist.slice(i+1));
                      }
                  }
              }
          }
          for (var i=0,ilen=this.reflist_inserts.length;i<ilen;i++) {
              var Item = this.reflist_inserts[i];
              delete Item.newItem;
              this.reflist = this._insertItem(Item, this.reflist);
          }
          for (pos = 0; pos < len; pos += 1) {
              item = this.mylist[pos];
              Item = this.registry[item];
              this.registry[item].seq = (pos + 1);
          }
      }
  };
  
  /**
   * Compare two sort keys
   * <p>Nested, because keys are an array.</p>
   */
  CSL.Registry.Comparifier = function (state, keyset) {
      var sort_directions, len, pos, compareKeys;
      var sortCompare = CSL.getSortCompare.call(state, state.opt["default-locale-sort"]);
      sort_directions = state[keyset].opt.sort_directions;
      this.compareKeys = function (a, b) {
          len = a.sortkeys ? a.sortkeys.length : 0;
          for (pos = 0; pos < len; pos += 1) {
              //
              // for ascending sort 1 uses 1, -1 uses -1.
              // For descending sort, the values are reversed.
              //
              // Need to handle undefined values.  No way around it.
              // So have to screen .localeCompare (which is also
              // needed) from undefined values.  Everywhere, in all
              // compares.
              //
              var cmp = 0;
              if (a.sortkeys[pos] === b.sortkeys[pos]) {
                  cmp = 0;
              } else if ("undefined" === typeof a.sortkeys[pos]) {
                  cmp = sort_directions[pos][1];
              } else if ("undefined" === typeof b.sortkeys[pos]) {
                  cmp = sort_directions[pos][0];
              } else {
                  // cmp = a.sortkeys[pos].localeCompare(b.sortkeys[pos]);
                  cmp = sortCompare(a.sortkeys[pos], b.sortkeys[pos]);
              }
              if (0 < cmp) {
                  return sort_directions[pos][1];
              } else if (0 > cmp) {
                  return sort_directions[pos][0];
              }
          }
          if (a.seq > b.seq) {
              return 1;
          } else if (a.seq < b.seq) {
              return -1;
          }
          return 0;
      };
      compareKeys = this.compareKeys;
      this.compareCompositeKeys = function (a, b) {
          return compareKeys(a[1], b[1]);
      };
  };
  
  
  /**
   * Compare two disambiguation tokens by their registry sort order
   * <p>Disambiguation lists need to be sorted this way, to
   * obtain the correct year-suffix when that's used.</p>
   */
  CSL.Registry.prototype.compareRegistryTokens = function (a, b) {
      if (a.seq > b.seq) {
          return 1;
      } else if (a.seq < b.seq) {
          return -1;
      }
      return 0;
  };
  
  CSL.Registry.prototype.registerAmbigToken = function (akey, id, ambig_config) {
      //SNIP-START
      if (!this.registry[id]) {
          CSL.debug("Warning: unregistered item: itemID=("+id+"), akey=("+akey+")");
      }
      //SNIP-END
      // Taint if number of names to be included has changed
      if (this.registry[id] && this.registry[id].disambig && this.registry[id].disambig.names) {
          for (var i = 0, ilen = ambig_config.names.length; i < ilen; i += 1) {
              var new_names_params = ambig_config.names[i];
              var old_names_params = this.registry[id].disambig.names[i];
              if (new_names_params !== old_names_params) {
                  this.state.tmp.taintedItemIDs[id] = true;
              } else if (ambig_config.givens[i]) {
                  // Compare givenses only if the number of names is aligned.
                  for (var j=0,jlen=ambig_config.givens[i].length;j<jlen;j+=1) {
                      var new_gnames_params = ambig_config.givens[i][j];
                      var old_gnames_params = this.registry[id].disambig.givens[i][j];
                      if (new_gnames_params !== old_gnames_params) {
                          this.state.tmp.taintedItemIDs[id] = true;
                      }
                  }
              }
          }
      }
  
      if (!this.ambigcites[akey]) {
          this.ambigcites[akey] = [];
      }
      if (this.ambigcites[akey].indexOf("" + id) === -1) {
          this.ambigcites[akey].push("" + id);
      }
      this.registry[id].ambig = akey;
      this.registry[id].disambig = CSL.cloneAmbigConfig(ambig_config);
  };
  
  
  /**
   * Get the sort key of an item, without decorations
   * <p>This is used internally by the Registry.</p>
   */
  CSL.getSortKeys = function (Item, key_type) {
      var area, root, extension, strip_prepositions, len, pos;
      //SNIP-START
      if (false) {
          CSL.debug("KEY TYPE: " + key_type);
      }
      //SNIP-END
      area = this.tmp.area;
      root = this.tmp.root;
      extension = this.tmp.extension;
      strip_prepositions = CSL.Util.Sort.strip_prepositions;
      this.tmp.area = key_type;
      // Gawdawful, this.
      this.tmp.root = key_type.indexOf("_") > -1 ? key_type.slice(0,-5) : key_type;
      this.tmp.extension = "_sort";
      this.tmp.disambig_override = true;
      this.tmp.disambig_request = false;
      this.tmp.suppress_decorations = true;
      CSL.getCite.call(this, Item);
      this.tmp.suppress_decorations = false;
      this.tmp.disambig_override = false;
      len = this[key_type].keys.length;
      for (pos = 0; pos < len; pos += 1) {
          this[key_type].keys[pos] = strip_prepositions(this[key_type].keys[pos]);
      }
      //SNIP-START
      if (false) {
          CSL.debug("sort keys (" + key_type + "): " + this[key_type].keys);
      }
      //SNIP-END
      
      this.tmp.area = area;
      this.tmp.root = root;
      this.tmp.extension = extension;
      return this[key_type].keys;
  };
  
  
  /*global CSL: true */
  
  CSL.Registry.NameReg = function (state) {
      var pkey, ikey, skey, dagopt, gdropt, items, strip_periods, set_keys, evalname, delitems, addname, myitems;
      this.state = state;
      this.namereg = {};
      this.nameind = {};
      // used for restoring state following preview
      this.nameindpkeys = {};
      //
      // family, initials form, fullname (with given stripped of periods)
      //
      // keys registered, indexed by ID
      this.itemkeyreg = {};
  
      strip_periods = function (str) {
          if (!str) {
              str = "";
          }
          return str.replace(/\./g, " ").replace(/\s+/g, " ").replace(/\s+$/,"");
      };
  
      set_keys = function (state, itemid, nameobj) {
          pkey = strip_periods(nameobj.family);
          skey = strip_periods(nameobj.given);
          // Drop lowercase suffixes (such as et al.) from given name field
          // for disambiguation purposes.
          var m = skey.match(/[,\!]* ([^,]+)$/);
          if (m && m[1] === m[1].toLowerCase()) {
              skey = skey.replace(/[,\!]* [^,]+$/, "");
          }
          // The %s terminator enables normal initialization behavior
          // with non-Byzantine names.
          ikey = CSL.Util.Names.initializeWith(state, skey, "%s");
          if (state.citation.opt["givenname-disambiguation-rule"] === "by-cite") {
              pkey = "" + itemid + pkey;
          }
      };
  
      evalname = function (item_id, nameobj, namenum, request_base, form, initials) {
          var param;
          // XXX THIS CAN NO LONGER HAPPEN
          if (state.tmp.area.slice(0, 12) === "bibliography" && !form) {
              if ("string" === typeof initials) {
                  return 1;
              } else {
                  return 2;
              }
          }
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
          set_keys(this.state, "" + item_id, nameobj);
          //
          // possible options are:
          //
          // <option disambiguate-add-givenname value="true"/> (a)
          // <option disambiguate-add-givenname value="all-names"/> (a)
          // <option disambiguate-add-givenname value="all-names-with-initials"/> (b)
          // <option disambiguate-add-givenname value="primary-name"/> (d)
          // <option disambiguate-add-givenname value="primary-name-with-initials"/> (e)
          // <option disambiguate-add-givenname value="by-cite"/> (g)
          //
          param = 2;
          dagopt = state.opt["disambiguate-add-givenname"];
          gdropt = state.citation.opt["givenname-disambiguation-rule"];
          var gdropt_orig = gdropt;
          if (gdropt === "by-cite") {
              gdropt = "all-names";
          }
          //
          // set initial value
          //
          if ("short" === form) {
              param = 0;
          } else if ("string" === typeof initials) {
              param = 1;
          }
          //
          // give literals a pass
          if ("undefined" === typeof this.namereg[pkey] || "undefined" === typeof this.namereg[pkey].ikey[ikey]) {
              return param;
          }
          //
          // adjust value upward if appropriate -- only if running
          // a non-names-global disambiguation strategy
          //
          if (gdropt_orig === "by-cite" && param <= request_base) {
              //param = request_base;
              return request_base;
          }
          if (!dagopt) {
              return param;
          }
          if ("string" === typeof gdropt && gdropt.slice(0, 12) === "primary-name" && namenum > 0) {
              return param;
          }
          //
          // the last composite condition is for backward compatibility
          //
          if (!gdropt || gdropt === "all-names" || gdropt === "primary-name") {
              if (this.namereg[pkey].count > 1) {
                  param = 1;
              }
              if ((this.namereg[pkey].ikey 
                   && this.namereg[pkey].ikey[ikey].count > 1)
                  || (this.namereg[pkey].count > 1 
                      && "string" !== typeof initials)) {
  
                  param = 2;
              }
          } else if (gdropt === "all-names-with-initials" || gdropt === "primary-name-with-initials") {
              if (this.namereg[pkey].count > 1) {
                  param = 1;
              } else {
                  param = 0;
              }
          }
          if (!state.registry.registry[item_id]) {
              if (form == "short") {
                  return 0;
              } else if ("string" == typeof initials) {
                  return 1;
              }
          } else {
              return param;
          }
      };
  
      //
      // The operation of this function does not show up in the
      // standard test suite, but it has been hand-tested with
      // a print trace, and seems to work okay.
      //
      delitems = function (ids) {
          var pos, len, posB, id, fullkey;
          if ("string" === typeof ids || "number" === typeof ids) {
              ids = ["" + ids];
          }
          // ret carries the IDs of other items using this name.
          var ret = {};
          len = ids.length;
          for (pos = 0; pos < len; pos += 1) {
              id = "" + ids[pos];
              if (!this.nameind[id]) {
                  continue;
              }
              for (fullkey in this.nameind[id]) {
                  if (this.nameind[id].hasOwnProperty(fullkey)) {
                      var key = fullkey.split("::");
                      pkey = key[0];
                      ikey = key[1];
                      skey = key[2];
                      // Skip names that have been deleted already.
                      // Needed to clear integration DisambiguateAddGivenname1.txt
                      // and integration DisambiguateAddGivenname2.txt
                      if ("undefined" === typeof this.namereg[pkey]) {
                          continue;
                      }
  
                      // ????
                      //posA = this.namereg[pkey].items.indexOf(posA);
  
                      items = this.namereg[pkey].items;
                      // This was really, really unperceptive. They key elements
                      // have absolutely nothing to do with whether there was ever
                      // a registration at each key level.
                      if (skey && this.namereg[pkey].ikey[ikey] && this.namereg[pkey].ikey[ikey].skey[skey]) {
                          myitems = this.namereg[pkey].ikey[ikey].skey[skey].items;
                          posB = myitems.indexOf("" + id);
                          if (posB > -1) {
                              this.namereg[pkey].ikey[ikey].skey[skey].items = myitems.slice(0, posB).concat(myitems.slice([(posB + 1)]));
                          }
                          if (this.namereg[pkey].ikey[ikey].skey[skey].items.length === 0) {
                              delete this.namereg[pkey].ikey[ikey].skey[skey];
                              this.namereg[pkey].ikey[ikey].count += -1;
                              if (this.namereg[pkey].ikey[ikey].count < 2) {
                                  for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                                      state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                                  }
                              }
                          }
                      }
                      if (ikey && this.namereg[pkey].ikey[ikey]) {
                          posB = this.namereg[pkey].ikey[ikey].items.indexOf("" + id);
                          if (posB > -1) {
                              items = this.namereg[pkey].ikey[ikey].items.slice();
                              this.namereg[pkey].ikey[ikey].items = items.slice(0, posB).concat(items.slice([posB + 1]));
                          }
                          if (this.namereg[pkey].ikey[ikey].items.length === 0) {
                              delete this.namereg[pkey].ikey[ikey];
                              this.namereg[pkey].count += -1;
                              if (this.namereg[pkey].count < 2) {
                                  for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                                      state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                                  }
                              }
                          }
                      }
                      if (pkey) {
                          posB = this.namereg[pkey].items.indexOf("" + id);
                          if (posB > -1) {
                              items = this.namereg[pkey].items.slice();
                              this.namereg[pkey].items = items.slice(0, posB).concat(items.slice([posB + 1], items.length));
                          }
                          if (this.namereg[pkey].items.length < 2) {
                              delete this.namereg[pkey];
                          }
                      }
                      delete this.nameind[id][fullkey];
                  }
              }
              delete this.nameind[id];
              delete this.nameindpkeys[id];
          }
          return ret;
      };
      //
      // Run ALL
      // renderings with disambiguate-add-givenname set to a value
      // with the by-cite behaviour, and then set the names-based
      // expanded form when the final makeCitationCluster rendering
      // is output.  This could be done with a single var set on
      // the state object in the execution wrappers that run the
      // style.
      //
      addname = function (item_id, nameobj, pos) {
          var i, ilen;
          var res = state.nameOutput.getName(nameobj, "locale-translit", true);
          nameobj = res.name;
  
          if (state.citation.opt["givenname-disambiguation-rule"]
              && state.citation.opt["givenname-disambiguation-rule"].slice(0, 8) === "primary-"
              && pos !== 0) {
                  return;
          }
          
          // A hack. Safe if the name object is used only here, for disambiguation purposes.
          if (state.opt["demote-non-dropping-particle"] === "never" && nameobj["non-dropping-particle"] && nameobj["family"]) {
              nameobj["family"] = nameobj["non-dropping-particle"] + " " + nameobj["family"];
          }
          
          //CSL.debug("INS");
          set_keys(this.state, "" + item_id, nameobj);
          // pkey, ikey and skey should be stored in separate cascading objects.
          // there should also be a kkey, on each, which holds the item ids using
          // that form of the name.
          //
          // (later note: well, we seem to have slipped a notch here.
          // Adding lists of IDs all over the place here makes no sense;
          // the lists need to include _only_ the items currently rendered
          // at the given level, and the place to do that is in evalname,
          // and in delnames, not here.)
          if (pkey) {
              if ("undefined" === typeof this.namereg[pkey]) {
                  this.namereg[pkey] = {};
                  this.namereg[pkey].count = 0;
                  this.namereg[pkey].ikey = {};
                  this.namereg[pkey].items = [item_id];
              } else if (this.namereg[pkey].items.indexOf(item_id) === -1) {
                  this.namereg[pkey].items.push(item_id);
              }
  //            if (this.namereg[pkey].items.indexOf(item_id) === -1) {
  //                this.namereg[pkey].items.push(item_id);
  //            }
          }
          if (pkey && ikey) {
              if ("undefined" === typeof this.namereg[pkey].ikey[ikey]) {
                  this.namereg[pkey].ikey[ikey] = {};
                  this.namereg[pkey].ikey[ikey].count = 0;
                  this.namereg[pkey].ikey[ikey].skey = {};
                  this.namereg[pkey].ikey[ikey].items = [item_id];
                  this.namereg[pkey].count += 1;
                  if (this.namereg[pkey].count === 2) {
                      for (var i = 0, ilen = this.namereg[pkey].items.length; i < ilen; i += 1) {
                          state.tmp.taintedItemIDs[this.namereg[pkey].items[i]] = true;
                      }
                  }
              } else if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
                  this.namereg[pkey].ikey[ikey].items.push(item_id);
              }
  //            if (this.namereg[pkey].ikey[ikey].items.indexOf(item_id) === -1) {
  //                this.namereg[pkey].ikey[ikey].items.push(item_id);
  //            }
          }
          if (pkey && ikey && skey) {
              if ("undefined" === typeof this.namereg[pkey].ikey[ikey].skey[skey]) {
                  this.namereg[pkey].ikey[ikey].skey[skey] = {};
                  this.namereg[pkey].ikey[ikey].skey[skey].items = [item_id];
                  this.namereg[pkey].ikey[ikey].count += 1;
                  if (this.namereg[pkey].ikey[ikey].count === 2) {
                      for (var i = 0, ilen = this.namereg[pkey].ikey[ikey].items.length; i < ilen; i += 1) {
                          state.tmp.taintedItemIDs[this.namereg[pkey].ikey[ikey].items[i]] = true;
                      }
                  }
              } else if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
                  this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
              }
  //            if (this.namereg[pkey].ikey[ikey].skey[skey].items.indexOf(item_id) === -1) {
  //                this.namereg[pkey].ikey[ikey].skey[skey].items.push(item_id);
  //            }
          }
          if ("undefined" === typeof this.nameind[item_id]) {
              this.nameind[item_id] = {};
              this.nameindpkeys[item_id] = {};
          }
          //CSL.debug("INS-A: [" + pkey + "] [" + ikey + "] [" + skey + "]");
          if (pkey) {
              this.nameind[item_id][pkey + "::" + ikey + "::" + skey] = true;
              this.nameindpkeys[item_id][pkey] = this.namereg[pkey];
          }
          //CSL.debug("INS-B");
      };
      this.addname = addname;
      this.delitems = delitems;
      this.evalname = evalname;
  };
  
  /*global CSL: true */
  
  CSL.Registry.CitationReg = function () {
      this.citationById = {};
      this.citationByIndex = [];
  };
  
  /*global CSL: true */
  
  CSL.Disambiguation = function (state) {
      this.state = state;
      this.sys = this.state.sys;
      this.registry = state.registry.registry;
      this.ambigcites = state.registry.ambigcites;
      this.configModes();
      this.debug = false;
  };
  
  CSL.Disambiguation.prototype.run = function(akey) {
      if (!this.modes.length) {
          return;
      }
      //SNIP-START
      if (this.debug) {
          print("[A] === RUN ===");
      }
      //SNIP-END
      this.akey = akey;
      if (this.initVars(akey)) {
          this.runDisambig();
      }
  
  };
  
  CSL.Disambiguation.prototype.runDisambig = function () {
      var ismax;
      //SNIP-START
      if (this.debug) {
          print("[C] === runDisambig() ===");
      }
      //SNIP-END
      this.initGivens = true;
      //
      // Length of list may change during processing
      while (this.lists.length) {
          this.gnameset = 0;
          this.gname = 0;
          this.clashes = [1, 0];
          // each list is scanned repeatedly until all
          // items either succeed or ultimately fail.
          while(this.lists[0][1].length) {
              this.listpos = 0;
              if (!this.base) {
                  this.base = this.lists[0][0];
              }
              ismax = this.incrementDisambig();
              this.scanItems(this.lists[0]);
              this.evalScan(ismax);
          }
          this.lists = this.lists.slice(1);
      }
  };
  
  CSL.Disambiguation.prototype.scanItems = function (list) {
      var pos, len, otherItem;
      //SNIP-START
      if (this.debug) {
          print("[2] === scanItems() ===");
      }
      //SNIP-END
  
      this.Item = list[1][0];
      this.ItemCite = CSL.getAmbiguousCite.call(this.state, this.Item, this.base, true);
  
      this.scanlist = list[1];
      this.partners = [];
      this.partners.push(this.Item);
      this.nonpartners = [];
      var clashes = 0;
  
      for (var pos = 1, len = list[1].length; pos < len; pos += 1) {
          otherItem = list[1][pos];
          var otherItemCite = CSL.getAmbiguousCite.call(this.state, otherItem, this.base, true);
          //SNIP-START
          if (this.debug) {
              if (pos > 1) {
                  print("  -----------");
              }
          }
          //SNIP-END
          if (this.ItemCite === otherItemCite) {
              //SNIP-START
              if (this.debug) {
                  print("  [CLASH]--> "+this.Item.id+": "+this.ItemCite);
                  print("             "+otherItem.id+": "+otherItemCite);
              }
              //SNIP-END
              clashes += 1;
              this.partners.push(otherItem);
          } else {
              //SNIP-START
              if (this.debug) {
                  print("  [clear]--> "+this.Item.id+": "+this.ItemCite);
                  print("             "+otherItem.id+": "+otherItemCite);
              }
              //SNIP-END
              this.nonpartners.push(otherItem);
          }
      }
      this.clashes[0] = this.clashes[1];
      this.clashes[1] = clashes;
  };
  
  CSL.Disambiguation.prototype.evalScan = function (maxed) {
      this[this.modes[this.modeindex]](maxed);
      if (maxed) {
          if (this.modeindex < this.modes.length - 1) {
              this.modeindex += 1;
          } else {
              this.lists[this.listpos + 1] = [this.base, []];
          }
      }
  };
  
  CSL.Disambiguation.prototype.disNames = function (ismax) {
      var i, ilen;
      
      //SNIP-START
      if (this.debug) {
          print("[3] == disNames() ==");
          //print("       partners: "+[this.partners[i].id for (i in this.partners)].join(", "));
          //print("    nonpartners: "+[this.nonpartners[i].id for (i in this.nonpartners)].join(", "));
      }
      //SNIP-END
  
      // New design
      // this.base is a forward-only counter. Values are never
      // reduced, and the counter object is never overwritten.
      // It is methodically pushed forward in single-unit increments
      // in incrementDisambig() until disNames() wipes out the list.
  
      // this.betterbase is cloned from this.base exactly once,
      // at the start of a disambiguation run. Whenever an operation
      // results in improvement, the just-incremented elements
      // identified as this.base.names[this.gnameset] (number of
      // names)and as this.base.givens[this.gnameset][this.gname]
      // (level of given name) are copied from this.base.
  
      // The this.base object is used to control disambiguation
      // renderings. These will be more fully expanded than the final
      // text, but the flip side of the fact that the extra data does
      // not contribute anything to disambiguation is that leaving
      // it in does no harm -- think of it as the Cold Dark Matter of
      // disambiguation.
  
      if (this.clashes[1] === 0 && this.nonpartners.length === 1) {
          this.captureStepToBase();
          //SNIP-START
          if (this.debug) {
              print("  ** RESOLUTION [a]: lone partner, one nonpartner");
              print("  registering "+this.partners[0].id+" and "+this.nonpartners[0].id);
          }
          //SNIP-END
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, []];
      } else if (this.clashes[1] === 0) {
          this.captureStepToBase();
          //SNIP-START
          if (this.debug) {
              print("  ** RESOLUTION [b]: lone partner, unknown number of remaining nonpartners");
              print("  registering "+this.partners[0].id);
          }
          //SNIP-END
          this.state.registry.registerAmbigToken(this.akey, "" + this.partners[0].id, this.betterbase);
          this.lists[this.listpos] = [this.betterbase, this.nonpartners];
          if (this.nonpartners.length) {
              this.initGivens = true;
          }
      } else if (this.nonpartners.length === 1) {
          this.captureStepToBase();
          //SNIP-START
          if (this.debug) {
              print("  ** RESOLUTION [c]: lone nonpartner, unknown number of partners remaining");
              print("  registering "+this.nonpartners[0].id);
          }
          //SNIP-END
          this.state.registry.registerAmbigToken(this.akey, "" + this.nonpartners[0].id, this.betterbase);
          //this.lists[this.listpos] = [this.betterbase, this.partners];
          this.lists[this.listpos] = [this.betterbase, this.partners];
      } else if (this.clashes[1] < this.clashes[0]) {
          this.captureStepToBase();
          //SNIP-START
          if (this.debug) {
              print("  ** RESOLUTION [d]: better result, but no entries safe to register");
          }
          //SNIP-END
          this.lists[this.listpos] = [this.betterbase, this.partners];
          this.lists.push([this.betterbase, this.nonpartners]);
      } else {
          //SNIP-START
          if (this.debug) {
              print("  ** RESOLUTION [e]: no improvement, and clashes remain");
          }
          //SNIP-END
          if (ismax) {
              this.lists[this.listpos] = [this.betterbase, this.nonpartners];
              this.lists.push([this.betterbase, this.partners]);
              if (this.modeindex === this.modes.length - 1) {
                  //SNIP-START
                  if (this.debug) {
                      print("     (registering clashing entries because we've run out of options)");
                  }
                  //SNIP-END
                  for (var i = 0, ilen = this.partners.length; i < ilen; i += 1) {
                      this.state.registry.registerAmbigToken(this.akey, "" + this.partners[i].id, this.betterbase);
                  }
                  this.lists[this.listpos] = [this.betterbase, []];
              }
          }
      }
  };
  
  CSL.Disambiguation.prototype.disExtraText = function () {
      //SNIP-START
      if (this.debug) {
          print("[3] === disExtraText ==");
      }
      //SNIP-END
      
      var done = false;
  
      if (this.clashes[1] === 0 && this.nonpartners.length < 2) {
          done = true;
      }
  
      // If first encounter in this cycle and multiple modes are
      // available, decrement mode and reset base
      if (!done && (!this.base.disambiguate || this.state.tmp.disambiguate_count !== this.state.tmp.disambiguate_maxMax)) {
          // Rerun everything on each subcycle? This doesn't work currently.
          //this.initVars(this.akey)
          this.modeindex = 0;
          this.base.disambiguate = this.state.tmp.disambiguate_count;
          this.betterbase.disambiguate = this.state.tmp.disambiguate_count;
          if (!this.base.disambiguate) {
              // Evaluate here?
              this.initGivens = true;
              // If disambiguate is false set to true
              this.base.disambiguate = 1;
              // There may be changes
              for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
                  this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
              }
          } else {
              this.disNames();
          }
      } else if (done || this.state.tmp.disambiguate_count === this.state.tmp.disambiguate_maxMax) {
          if (done || this.modeindex === this.modes.length - 1) {
              // If this is the end, disambiguation failed.
              // Discard disambiguate=true (?) and set parameters
              var base = this.lists[this.listpos][0];
              for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
                  this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
                  this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
              }
              this.lists[this.listpos] = [this.betterbase, []];
          } else {
              // If this is followed by year-suffix, keep
              // parameters and set disambiguate=true since it MIGHT
              // include the date, needed for year-suffix.
              // This may be a bit over-aggressive for cases in which the
              // disambiguate condition does not add the date
              this.modeindex = this.modes.length - 1;
              var base = this.lists[this.listpos][0];
              base.disambiguate = true;
              for (var i = 0, ilen = this.lists[this.listpos][1].length; i < ilen; i += 1) {
                  // Always tainting here might be a little over-aggressive, but a taint may be required.
                  this.state.tmp.taintedItemIDs[this.lists[this.listpos][1][i].id] = true;
                  this.state.registry.registerAmbigToken(this.akey, "" + this.lists[this.listpos][1][i].id, base);
              }
          }
      }
  };
  
  CSL.Disambiguation.prototype.disYears = function () {
      var pos, len, tokens, token;
      //SNIP-START
      if (this.debug) {
          print("[3] === disYears ==");
      }
      //SNIP-END
      tokens = [];
      var base = this.lists[this.listpos][0];
      if (this.clashes[1]) {
          // That is, if the initial increment on the ambigs group returns no
          // clashes, don't apply suffix. The condition is a necessary failsafe.
      // In original submission order
      for (var i = 0, ilen = this.state.registry.mylist.length; i < ilen; i += 1) {
        var origid = this.state.registry.mylist[i];
        for (var j = 0, jlen = this.lists[this.listpos][1].length; j < jlen; j += 1) {
          var token = this.lists[this.listpos][1][j];
          // Warning: token.id can be number. This should be fixed at a higher level in citeproc-js if poss.
          if (token.id == origid) {
            tokens.push(this.registry[token.id]);
            break;
          }
        }
      }
      }
      tokens.sort(this.state.registry.sorter.compareKeys);
      for (var pos = 0, len = tokens.length; pos < len; pos += 1) {
          base.year_suffix = ""+pos;
          var oldBase = this.state.registry.registry[tokens[pos].id].disambig;
          this.state.registry.registerAmbigToken(this.akey, "" + tokens[pos].id, base);
          if (CSL.ambigConfigDiff(oldBase,base)) {
              this.state.tmp.taintedItemIDs[tokens[pos].id] = true;
          }
      }
      this.lists[this.listpos] = [this.betterbase, []];
  };
  
  CSL.Disambiguation.prototype.incrementDisambig = function () {
      //SNIP-START
      if (this.debug) {
          print("\n[1] === incrementDisambig() ===");
      }
      //SNIP-END
      if (this.initGivens) {
          this.initGivens = false;
          return false;
      }
      var maxed = false;
      var increment_names = true;
      if ("disNames" === this.modes[this.modeindex]) {
          // this.gnameset: the index pos of the current nameset
          // this.gname: the index pos of the current name w/in the current nameset
          
          // Stages:
          // - Increment givenname (optional)
          // - Add a name (optional)
          // - Move to next nameset
  
          // Incrementing is done forward-only on this.base. Values
          // that improve disambiguation results are copied to
          // this.betterbase, which is used to set the disambig parameters
          // in the processor registry.
          
  
          // Increment
          // Max val is always true if a level is inactive.
          increment_names = false;
          if ("number" !== typeof this.givensMax) {
              increment_names = true;
          }
          var increment_namesets = false;
          if ("number" !== typeof this.namesMax) {
              increment_namesets = true;
          }
          if ("number" === typeof this.givensMax) {
              if (this.base.givens.length && this.base.givens[this.gnameset][this.gname] < this.givensMax) {
                  this.base.givens[this.gnameset][this.gname] += 1;
              } else {
                  increment_names = true;
              }
          }
          if ("number" === typeof this.namesMax 
              && increment_names) {
              if (this.state.opt["disambiguate-add-names"]) {
                  increment_namesets = false;
                  if (this.gname < this.namesMax) {
                      this.base.names[this.gnameset] += 1;
                      this.gname += 1;
                  } else {
                      increment_namesets = true;
                  }
              } else {
                  increment_namesets = true;
              }
          }
          if ("number" === typeof this.namesetsMax && increment_namesets) {
              if (this.gnameset < this.namesetsMax) {
                  this.gnameset += 1;
                  this.base.names[this.gnameset] = 1;
                  this.gname = 0;
              }
          }
          //SNIP-START
          if (this.debug) {
              print("    ------------------");
              print("    incremented values");
              print("    ------------------");
              print("    | gnameset: "+this.gnameset);
              print("    | gname: "+this.gname);
              print("    | names value: "+this.base.names[this.gnameset]);
              if (this.base.givens.length) {
                  print("    | givens value: "+this.base.givens[this.gnameset][this.gname]);
              } else {
                  print("    | givens value: nil");
              }
              print("    | namesetsMax: "+this.namesetsMax);
              print("    | namesMax: "+this.namesMax);
              print("    | givensMax: "+this.givensMax);
          }
          //SNIP-END
          if (("number" !== typeof this.namesetsMax || this.namesetsMax === -1 || this.gnameset === this.namesetsMax)
              && (!this.state.opt["disambiguate-add-names"] || "number" !== typeof this.namesMax || this.gname === this.namesMax)
              && ("number" != typeof this.givensMax || "undefined" === typeof this.base.givens[this.gnameset] || "undefined" === typeof this.base.givens[this.gnameset][this.gname] || this.base.givens[this.gnameset][this.gname] === this.givensMax)) {
    
  
              maxed = true;
              //SNIP-START
              if (this.debug) {
                  print("    MAXED");
              }
              //SNIP-END
          }
      } else if ("disExtraText" === this.modes[this.modeindex]) {
          this.base.disambiguate += 1;
          this.betterbase.disambiguate += 1;
      }
      return maxed;
  };
  
  CSL.Disambiguation.prototype.initVars = function (akey) {
      var i, ilen, myIds, myItemBundles, myItems;
      //SNIP-START
      if (this.debug) {
          print("[B] === initVars() ===");
      }
      //SNIP-END
      this.lists = [];
      this.base = false;
      this.betterbase = false;
      this.akey = akey;
  
      this.maxNamesByItemId = {};
  
  
      myItemBundles = [];
      myIds = this.ambigcites[akey];
      if (!myIds || !myIds.length) {
          return false;
      }
      var myItem = this.state.refetchItem("" + myIds[0]);
      this.getCiteData(myItem);
      this.base = CSL.getAmbigConfig.call(this.state);
      if (myIds && myIds.length > 1) {
          myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          // Build a composite list of Items and associated
          // max names. This is messy, but it's the only
          // way to get the items sorted by the number of names
          // to be disambiguated. If they are in descending order
          // with name expansions, the processor will hang.
          for (var i = 1, ilen = myIds.length; i < ilen; i += 1) {
              myItem = this.state.refetchItem("" + myIds[i]);
              this.getCiteData(myItem, this.base);
              myItemBundles.push([this.maxNamesByItemId[myItem.id], myItem]);
          }
          myItemBundles.sort(
              function (a, b) {
                  if (a[0] > b[0]) {
                      return 1;
                  } else if (a[0] < b[0]) {
                      return -1;
                  } else {
                      if (a[1].id > b[1].id) {
                          return 1;
                      } else if (a[1].id < b[1].id) {
                          return -1;
                      } else {
                          return 0;
                      }
                  }
              }
          );
          myItems = [];
          for (var i = 0, ilen = myItemBundles.length; i < ilen; i += 1) {
              myItems.push(myItemBundles[i][1]);
          }
          this.lists.push([this.base, myItems]);
          this.Item = this.lists[0][1][0];
      } else {
          this.Item = this.state.refetchItem("" + myIds[0]);
      }
  
      this.modeindex = 0;
      if (this.state.citation.opt["disambiguate-add-names"] || true) {
          this.namesMax = this.maxNamesByItemId[this.Item.id][0];
      } else {
          var namesMax = this.base.names[0];
          for (var i=1,ilen=this.base.names.length;i<ilen;i+=1){
              namesMax = Math.max(namesMax,this.base.names.names[i]);
          }
      }
  
  
      this.padBase(this.base);
      this.padBase(this.betterbase);
      this.base.year_suffix = false;
      this.base.disambiguate = false;
      this.betterbase.year_suffix = false;
      this.betterbase.disambiguate = false;
      if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite"
         && this.state.opt["disambiguate-add-givenname"]) {
          this.givensMax = 2;
      }
      return true;
  };
  
  
  CSL.Disambiguation.prototype.padBase = function (base) {
      for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
          if (!base.givens[i]) {
              base.givens[i] = [];
          }
          for (var j=0,jlen=base.names[i];j<jlen;j+=1) {
              if (!base.givens[i][j]) {
                  base.givens[i][j] = 0;
              }
          }
      }
  };
  
  /**
   * Set available modes for disambiguation
   */
  CSL.Disambiguation.prototype.configModes = function () {
      var dagopt, gdropt;
      // Modes are function names prototyped to this instance.
      this.modes = [];
      dagopt = this.state.opt["disambiguate-add-givenname"];
      gdropt = this.state.citation.opt["givenname-disambiguation-rule"];
      if (this.state.opt['disambiguate-add-names'] || (dagopt && gdropt === "by-cite")) {
          this.modes.push("disNames");
      }
  
      if (this.state.opt.development_extensions.prioritize_disambiguate_condition) {
          if (this.state.opt.has_disambiguate) {
              this.modes.push("disExtraText");
          }
          if (this.state.opt["disambiguate-add-year-suffix"]) {
              this.modes.push("disYears");
          }
      } else {
          if (this.state.opt["disambiguate-add-year-suffix"]) {
              this.modes.push("disYears");
          }
          if (this.state.opt.has_disambiguate) {
              this.modes.push("disExtraText");
          }
      }
  };
  
  CSL.Disambiguation.prototype.getCiteData = function(Item, base) {
      // Initialize base if first set item seen
      if (!this.maxNamesByItemId[Item.id]) {
          CSL.getAmbiguousCite.call(this.state, Item, base);
          base = CSL.getAmbigConfig.call(this.state);
          this.maxNamesByItemId[Item.id] = CSL.getMaxVals.call(this.state);
          this.state.registry.registry[Item.id].disambig.givens = this.state.tmp.disambig_settings.givens.slice();
          // Slice the nested lists as well. Without this, disambiguate_YearSuffixFiftyTwoEntriesByCite fails.
          for (var i=0,ilen=this.state.registry.registry[Item.id].disambig.givens.length;i<ilen;i+=1) {
              this.state.registry.registry[Item.id].disambig.givens[i] = this.state.tmp.disambig_settings.givens[i].slice();
          }
          this.namesetsMax = this.state.registry.registry[Item.id].disambig.names.length - 1;
          if (!this.base) {
              this.base = base;
              this.betterbase = CSL.cloneAmbigConfig(base);
          }
          if (base.names.length < this.base.names.length) {
              // I don't know what would happen with discrepancies in the number
              // of namesets rendered on items, so we use the fewer of the two
              // and limit the other to that size.
              this.base = base;
          }
          // Padding. Within namesets, we use the longer of the two throughout.
          for (var i = 0, ilen = base.names.length; i < ilen; i += 1) {
              if (base.names[i] > this.base.names[i]) {
                  // XXX The old must have been wrong surely. The new, I'm not sure.
                  //this.base.givens[i] = this.base.givens[i].concat(this.base.givens[i].slice(this.base.names[i]));
                  this.base.givens[i] = base.givens[i].slice();
                  this.base.names[i] = base.names[i];
                  this.betterbase.names = this.base.names.slice();
                  this.betterbase.givens = this.base.givens.slice();
                  this.padBase(this.base);
                  this.padBase(this.betterbase);
              }
          }
          // This shouldn't be necessary
          // getAmbiguousCite() should return a valid and complete
          // givens segment under all conditions, but it does not
          // do so for institution authors, so we clean up after it
          // here.
          // Relevant test: sort_ChicagoYearSuffix2
          this.betterbase.givens = this.base.givens.slice();
          for (var j = 0, jlen = this.base.givens.length; j < jlen; j += 1) {
              this.betterbase.givens[j] = this.base.givens[j].slice();
          }
      }
  };
  
  CSL.Disambiguation.prototype.captureStepToBase = function() {
      // Be paranoid about the presence of givens
      if (this.state.citation.opt["givenname-disambiguation-rule"] === "by-cite"
          && this.base.givens && this.base.givens.length) {
          if ("undefined" !== typeof this.base.givens[this.gnameset][this.gname]) {
              if (this.betterbase.givens.length < this.base.givens.length) {
                  this.betterbase.givens = JSON.parse(JSON.stringify(this.base.givens));
              }
              this.betterbase.givens[this.gnameset][this.gname] = this.base.givens[this.gnameset][this.gname];
          }
      }
      this.betterbase.names[this.gnameset] = this.base.names[this.gnameset];
  };
  
  CSL.Engine.prototype.getJurisdictionList = function (jurisdiction) {
      var jurisdictionList = [];
      var jurisdictionElems = jurisdiction.split(":");
      for (var j=jurisdictionElems.length;j>0;j--) {
          var composedID = jurisdictionElems.slice(0,j).join(":");
          jurisdictionList.push(composedID);
          if (this.opt.jurisdiction_fallbacks[composedID]) {
              var fallback = this.opt.jurisdiction_fallbacks[composedID];
              jurisdictionList.push(fallback);
          }
      }
      if (jurisdictionList.indexOf("us") === -1) {
          jurisdictionList.push("us");
      }
      return jurisdictionList;
  };
  
  CSL.Engine.prototype.loadStyleModule = function (jurisdiction, xmlSource, skipFallback) {
      var myFallback = null;
      var macroCount = 0;
      this.juris[jurisdiction] = {};
      var myXml = CSL.setupXml(xmlSource);
      myXml.addMissingNameNodes(myXml.dataObj);
      myXml.addInstitutionNodes(myXml.dataObj);
      myXml.insertPublisherAndPlace(myXml.dataObj);
      myXml.flagDateMacros(myXml.dataObj);
      var myNodes = myXml.getNodesByName(myXml.dataObj, "law-module");
      for (var i=0,ilen=myNodes.length;i<ilen;i++) {
          var myTypes = myXml.getAttributeValue(myNodes[i],"types");
          if (myTypes) {
              this.juris[jurisdiction].types = {};
              myTypes =  myTypes.split(/\s+/);
              for (var j=0,jlen=myTypes.length;j<jlen;j++) {
                  this.juris[jurisdiction].types[myTypes[j]] = true;
              }
          }
          if (!skipFallback) {
              myFallback = myXml.getAttributeValue(myNodes[i],"fallback");
              if (myFallback) {
                  if (jurisdiction !== "us") {
                      this.opt.jurisdiction_fallbacks[jurisdiction] = myFallback;
                  }
              }
          }
      }
      var lang = this.opt.lang ? this.opt.lang : this.opt["default-locale"][0];
      CSL.SET_COURT_CLASSES(this, lang, myXml, myXml.dataObj);
      
      if (!this.juris[jurisdiction].types) {
          this.juris[jurisdiction].types = CSL.MODULE_TYPES;
      }
      var myNodes = myXml.getNodesByName(myXml.dataObj, "macro");
      for (var i=0,ilen=myNodes.length;i<ilen;i++) {
          var myName = myXml.getAttributeValue(myNodes[i], "name");
          if (!CSL.MODULE_MACROS[myName]) {
              CSL.debug("CSL: skipping non-modular macro name \"" + myName + "\" in module context");
              continue;
          }
          macroCount++;
          this.juris[jurisdiction][myName] = [];
          // Must use the same XML parser for style and modules.
          this.buildTokenLists(myNodes[i], this.juris[jurisdiction][myName]);
          this.configureTokenList(this.juris[jurisdiction][myName]);
      }
      //if (macroCount < Object.keys(CSL.MODULE_MACROS).length) {
      //    var missing = [];
      //    throw "CSL ERROR: Incomplete jurisdiction style module for: " + jurisdiction;
      //}
      return myFallback;
  };
  
  CSL.Engine.prototype.retrieveAllStyleModules = function (jurisdictionList) {
      var ret = {};
      var preferences = this.locale[this.opt.lang].opts["jurisdiction-preference"];
      preferences = preferences ? preferences : [];
      preferences = [""].concat(preferences);
      for (var i=preferences.length-1;i>-1;i--) {
          var preference = preferences[i];
          for (var j=0,jlen=jurisdictionList.length;j<jlen;j++) {
              var jurisdiction = jurisdictionList[j];
              // If we've "seen" it, we have it already, or we're not going to get it.
              if (this.opt.jurisdictions_seen[jurisdiction]) {
                  continue;
              }
              // Try to get the module
              var res = this.sys.retrieveStyleModule(jurisdiction, preference);
              // If we fail and we've run out of preferences, mark as "seen"
              // Otherwise mark as "seen" if we get something.
              if ((!res && !preference) || res) {
                  this.opt.jurisdictions_seen[jurisdiction] = true;
              }
              // Don't memo unless get got style code.
              if (!res) {
                  continue;
              }
              ret[jurisdiction] = res;
          }
      }
      // Give 'em what we got.
      return ret;
  };
  
  CSL.ParticleList = (function() {
    var always_dropping_1 = [[[0,1], null]];
    var always_dropping_3 = [[[0,3], null]];
    var always_non_dropping_1 = [[null, [0,1]]];
    var always_non_dropping_2 = [[null, [0,2]]];
    var always_non_dropping_3 = [[null, [0,3]]];
    var either_1 = [[null, [0,1]],[[0,1],null]];
    var either_2 = [[null, [0,2]],[[0,2],null]];
    var either_1_dropping_best = [[[0,1],null],[null, [0,1]]];
    var either_2_dropping_best = [[[0,2],null],[null, [0,2]]];
    var either_3_dropping_best = [[[0,3],null],[null, [0,3]]];
    var non_dropping_2_alt_dropping_1_non_dropping_1 = [[null, [0,2]], [[0,1], [1,2]]];
    var PARTICLES = [
      ["'s", always_non_dropping_1],
      ["'s-", always_non_dropping_1],
      ["'t", always_non_dropping_1],
      ["a", 	always_non_dropping_1],
      ["aan 't", always_non_dropping_2],
      ["aan de", always_non_dropping_2],
      ["aan den", always_non_dropping_2],
      ["aan der", always_non_dropping_2],
      ["aan het", always_non_dropping_2],
      ["aan t", always_non_dropping_2],
      ["aan", always_non_dropping_1],
      ["ad-", either_1],
      ["adh-", either_1],
      ["af", either_1],
      ["al", either_1],
      ["al-", either_1],
      ["am de", always_non_dropping_2],
      ["am", always_non_dropping_1],
      ["an-", either_1],
      ["ar-", either_1],
      ["as-", either_1],
      ["ash-", either_1],
      ["at-", either_1],
      ["ath-", either_1],
      ["auf dem", either_2_dropping_best],
      ["auf den", either_2_dropping_best],
      ["auf der", either_2_dropping_best],
      ["auf ter", always_non_dropping_2],
      ["auf", either_1_dropping_best],
      ["aus 'm", either_2_dropping_best],
      ["aus dem", either_2_dropping_best],
      ["aus den", either_2_dropping_best],
      ["aus der", either_2_dropping_best],
      ["aus m", either_2_dropping_best],
      ["aus", either_1_dropping_best],
      ["aus'm", either_2_dropping_best],
      ["az-", either_1],
      ["aÅ¡-", either_1],
      ["aá¸-", either_1],
      ["aá¸-", either_1],
      ["aá¹£-", either_1],
      ["aá¹­-", either_1],
      ["aá¹¯-", either_1],
      ["aáº“-", either_1],
      ["ben", always_non_dropping_1],
      ["bij 't", always_non_dropping_2],
      ["bij de", always_non_dropping_2],
      ["bij den", always_non_dropping_2],
      ["bij het", always_non_dropping_2],
      ["bij t", always_non_dropping_2],
      ["bij", always_non_dropping_1],
      ["bin", always_non_dropping_1],
      ["boven d", always_non_dropping_2],
      ["boven d'", always_non_dropping_2],
      ["d", always_non_dropping_1],
      ["d'", either_1],
      ["da", either_1],
      ["dal", always_non_dropping_1],
      ["dal'", always_non_dropping_1],
      ["dall'", always_non_dropping_1],
      ["dalla", always_non_dropping_1],
      ["das", either_1],
      ["de die le", always_non_dropping_3],
      ["de die", always_non_dropping_2],
      ["de l", always_non_dropping_2],
      ["de l'", always_non_dropping_2],
      ["de la", non_dropping_2_alt_dropping_1_non_dropping_1],
      ["de las", non_dropping_2_alt_dropping_1_non_dropping_1],
      ["de le", always_non_dropping_2],
      ["de li", either_2],
      ["de van der", always_non_dropping_3],
      ["de", either_1],
      ["de'", either_1],
      ["deca", always_non_dropping_1],
      ["degli", either_1],
      ["dei", either_1],
      ["del", either_1],
      ["dela", always_dropping_1],
      ["dell'", either_1],
      ["della", either_1],
      ["delle", either_1],
      ["dello", either_1],
      ["den", either_1],
      ["der", either_1],
      ["des", either_1],
      ["di", either_1],
      ["die le", always_non_dropping_2],
      ["do", always_non_dropping_1],
      ["don", always_non_dropping_1],
      ["dos", either_1],
      ["du", either_1],
      ["ed-", either_1],
      ["edh-", either_1],
      ["el", either_1],
      ["el-", either_1],
      ["en-", either_1],
      ["er-", either_1],
      ["es-", either_1],
      ["esh-", either_1],
      ["et-", either_1],
      ["eth-", either_1],
      ["ez-", either_1],
      ["eÅ¡-", either_1],
      ["eá¸-", either_1],
      ["eá¸-", either_1],
      ["eá¹£-", either_1],
      ["eá¹­-", either_1],
      ["eá¹¯-", either_1],
      ["eáº“-", either_1],
      ["het", always_non_dropping_1],
      ["i", always_non_dropping_1],
      ["il", always_dropping_1],
      ["im", always_non_dropping_1],
      ["in 't", always_non_dropping_2],
      ["in de", always_non_dropping_2],
      ["in den", always_non_dropping_2],
      ["in der", either_2],
      ["in het", always_non_dropping_2],
      ["in t", always_non_dropping_2],
      ["in", always_non_dropping_1],
      ["l", always_non_dropping_1],
      ["l'", always_non_dropping_1],
      ["la", always_non_dropping_1],
      ["las", always_non_dropping_1],
      ["le", always_non_dropping_1],
      ["les", either_1],
      ["lo", either_1],
      ["los", always_non_dropping_1],
      ["lou", always_non_dropping_1],
      ["of", always_non_dropping_1],
      ["onder 't", always_non_dropping_2],
      ["onder de", always_non_dropping_2],
      ["onder den", always_non_dropping_2],
      ["onder het", always_non_dropping_2],
      ["onder t", always_non_dropping_2],
      ["onder", always_non_dropping_1],
      ["op 't", always_non_dropping_2],
      ["op de", either_2],
      ["op den", always_non_dropping_2],
      ["op der", always_non_dropping_2],
      ["op gen", always_non_dropping_2],
      ["op het", always_non_dropping_2],
      ["op t", always_non_dropping_2],
      ["op ten", always_non_dropping_2],
      ["op", always_non_dropping_1],
      ["over 't", always_non_dropping_2],
      ["over de", always_non_dropping_2],
      ["over den", always_non_dropping_2],
      ["over het", always_non_dropping_2],
      ["over t", always_non_dropping_2],
      ["over", always_non_dropping_1],
      ["s", always_non_dropping_1],
      ["s'", always_non_dropping_1],
      ["sen", always_dropping_1],
      ["t", always_non_dropping_1],
      ["te", always_non_dropping_1],
      ["ten", always_non_dropping_1],
      ["ter", always_non_dropping_1],
      ["tho", always_non_dropping_1],
      ["thoe", always_non_dropping_1],
      ["thor", always_non_dropping_1],
      ["to", always_non_dropping_1],
      ["toe", always_non_dropping_1],
      ["tot", always_non_dropping_1],
      ["uijt 't", always_non_dropping_2],
      ["uijt de", always_non_dropping_2],
      ["uijt den", always_non_dropping_2],
      ["uijt te de", always_non_dropping_3],
      ["uijt ten", always_non_dropping_2],
      ["uijt", always_non_dropping_1],
      ["uit 't", always_non_dropping_2],
      ["uit de", always_non_dropping_2],
      ["uit den", always_non_dropping_2],
      ["uit het", always_non_dropping_2],
      ["uit t", always_non_dropping_2],
      ["uit te de", always_non_dropping_3],
      ["uit ten", always_non_dropping_2],
      ["uit", always_non_dropping_1],
      ["unter", always_non_dropping_1],
      ["v", always_non_dropping_1],
      ["v.", always_non_dropping_1],
      ["v.d.", always_non_dropping_1],
      ["van 't", always_non_dropping_2],
      ["van de l", always_non_dropping_3],
      ["van de l'", always_non_dropping_3],
      ["van de", always_non_dropping_2],
      ["van de", always_non_dropping_2],
      ["van den", always_non_dropping_2],
      ["van der", always_non_dropping_2],
      ["van gen", always_non_dropping_2],
      ["van het", always_non_dropping_2],
      ["van la", always_non_dropping_2],
      ["van t", always_non_dropping_2],
      ["van ter", always_non_dropping_2],
      ["van van de", always_non_dropping_3],
      ["van", either_1],
      ["vander", always_non_dropping_1],
      ["vd", always_non_dropping_1],
      ["ver", always_non_dropping_1],
      ["vom und zum", always_dropping_3],
      ["vom", either_1],
      ["von 't", always_non_dropping_2],
      ["von dem", either_2_dropping_best],
      ["von den", either_2_dropping_best],
      ["von der", either_2_dropping_best],
      ["von t", always_non_dropping_2],
      ["von und zu", either_3_dropping_best],
      ["von zu", either_2_dropping_best],
      ["von", either_1_dropping_best],
      ["voor 't", always_non_dropping_2],
      ["voor de", always_non_dropping_2],
      ["voor den", always_non_dropping_2],
      ["voor in 't", always_non_dropping_3],
      ["voor in t", always_non_dropping_3],
      ["voor", always_non_dropping_1],
      ["vor der", either_2_dropping_best],
      ["vor", either_1_dropping_best],
      ["z", always_dropping_1],
      ["ze", always_dropping_1],
      ["zu", either_1_dropping_best],
      ["zum", either_1],
      ["zur", either_1]
    ];
      return PARTICLES;
  }());
  
  CSL.parseParticles = (function(){
      function splitParticles(nameValue, firstNameFlag, caseOverride) {
      // Parse particles out from name fields.
      // * nameValue (string) is the field content to be parsed.
      // * firstNameFlag (boolean) parse trailing particles
      //	 (default is to parse leading particles)
      // * caseOverride (boolean) include all but one word in particle set
      //	 (default is to include only words with lowercase first char)
          //   [caseOverride is not used in this application]
      // Returns an array with:
      // * (boolean) flag indicating whether a particle was found
      // * (string) the name after removal of particles
      // * (array) the list of particles found
      var origNameValue = nameValue;
      nameValue = caseOverride ? nameValue.toLowerCase() : nameValue;
      var particleList = [];
      var rex;
          var hasParticle;
      if (firstNameFlag) {
        nameValue = nameValue.split("").reverse().join("");
        rex = CSL.PARTICLE_GIVEN_REGEXP;
      } else {
        rex = CSL.PARTICLE_FAMILY_REGEXP;
      }
      var m = nameValue.match(rex);
      while (m) {
        var m1 = firstNameFlag ? m[1].split("").reverse().join("") : m[1];
        var firstChar = m ? m1 : false;
        var firstChar = firstChar ? m1.replace(/^[-\'\u02bb\u2019\s]*(.).*$/, "$1") : false;
        hasParticle = firstChar ? firstChar.toUpperCase() !== firstChar : false;
        if (!hasParticle) {
                  break;
              }
        if (firstNameFlag) {
          particleList.push(origNameValue.slice(m1.length * -1));
          origNameValue = origNameValue.slice(0,m1.length * -1);
        } else {
          particleList.push(origNameValue.slice(0,m1.length));
          origNameValue = origNameValue.slice(m1.length);
        }
        //particleList.push(m1);
        nameValue = m[2];
        m = nameValue.match(rex);
      }
      if (firstNameFlag) {
        nameValue = nameValue.split("").reverse().join("");
        particleList.reverse();
        for (var i=1,ilen=particleList.length;i<ilen;i++) {
          if (particleList[i].slice(0, 1) == " ") {
            particleList[i-1] += " ";
          }
        }
        for (var i=0,ilen=particleList.length;i<ilen;i++) {
          if (particleList[i].slice(0, 1) == " ") {
            particleList[i] = particleList[i].slice(1);
          }
        }
        nameValue = origNameValue.slice(0, nameValue.length);
      } else {
        nameValue = origNameValue.slice(nameValue.length * -1);
      }
      return [hasParticle, nameValue, particleList];
    }
      function trimLast(str) {
          var lastChar = str.slice(-1);
          str = str.trim();
          if (lastChar === " " && ["\'", "\u2019"].indexOf(str.slice(-1)) > -1) {
              str += " ";
          }
          return str;
      }
      function parseSuffix(nameObj) {
          if (!nameObj.suffix && nameObj.given) {
              var m = nameObj.given.match(/(\s*,!*\s*)/);
              if (m) {
                  var idx = nameObj.given.indexOf(m[1]);
                  var possible_suffix = nameObj.given.slice(idx + m[1].length);
                  var possible_comma = nameObj.given.slice(idx, idx + m[1].length).replace(/\s*/g, "");
                  if (possible_suffix.replace(/\./g, "") === 'et al' && !nameObj["dropping-particle"]) {
                      // This hack covers the case where "et al." is explicitly used in the
                      // authorship information of the work.
                      nameObj["dropping-particle"] = possible_suffix;
                      nameObj["comma-dropping-particle"] = ",";
                  } else {
                      if (possible_comma.length === 2) {
                          nameObj["comma-suffix"] = true;
                      }
                      nameObj.suffix = possible_suffix;
                  }
                  nameObj.given = nameObj.given.slice(0, idx);
              }
          }
      }
      return function(nameObj) {
          // Extract and set non-dropping particle(s) from family name field
          var res = splitParticles(nameObj.family);
          var lastNameValue = res[1];
          var lastParticleList = res[2];
          nameObj.family = lastNameValue;
          var nonDroppingParticle = trimLast(lastParticleList.join(""));
          if (nonDroppingParticle) {
              nameObj['non-dropping-particle'] = nonDroppingParticle;
          }
          // Split off suffix first of all
          parseSuffix(nameObj);
          // Extract and set dropping particle(s) from given name field
          var res = splitParticles(nameObj.given, true);
          var firstNameValue = res[1];
          var firstParticleList = res[2];
          nameObj.given = firstNameValue;
          var droppingParticle = firstParticleList.join("").trim();
          if (droppingParticle) {
              nameObj['dropping-particle'] = droppingParticle;
          }
      };
  }());
  
  
  module.exports = CSL
  },{}],86:[function(require,module,exports){
  (function (global){(function (){
  (function (global) {
    'use strict';
  
    function fetchPonyfill(options) {
      var Promise = options && options.Promise || global.Promise;
      var XMLHttpRequest = options && options.XMLHttpRequest || global.XMLHttpRequest;
  
      return (function () {
        var globalThis = Object.create(global, {
          fetch: {
            value: undefined,
            writable: true
          }
        });
  
        (function (global, factory) {
          typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
          typeof define === 'function' && define.amd ? define(['exports'], factory) :
          (factory((global.WHATWGFetch = {})));
        }(this, (function (exports) { 'use strict';
  
          var global =
            (typeof globalThis !== 'undefined' && globalThis) ||
            (typeof self !== 'undefined' && self) ||
            (typeof global !== 'undefined' && global);
  
          var support = {
            searchParams: 'URLSearchParams' in global,
            iterable: 'Symbol' in global && 'iterator' in Symbol,
            blob:
              'FileReader' in global &&
              'Blob' in global &&
              (function() {
                try {
                  new Blob();
                  return true
                } catch (e) {
                  return false
                }
              })(),
            formData: 'FormData' in global,
            arrayBuffer: 'ArrayBuffer' in global
          };
  
          function isDataView(obj) {
            return obj && DataView.prototype.isPrototypeOf(obj)
          }
  
          if (support.arrayBuffer) {
            var viewClasses = [
              '[object Int8Array]',
              '[object Uint8Array]',
              '[object Uint8ClampedArray]',
              '[object Int16Array]',
              '[object Uint16Array]',
              '[object Int32Array]',
              '[object Uint32Array]',
              '[object Float32Array]',
              '[object Float64Array]'
            ];
  
            var isArrayBufferView =
              ArrayBuffer.isView ||
              function(obj) {
                return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
              };
          }
  
          function normalizeName(name) {
            if (typeof name !== 'string') {
              name = String(name);
            }
            if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
              throw new TypeError('Invalid character in header field name')
            }
            return name.toLowerCase()
          }
  
          function normalizeValue(value) {
            if (typeof value !== 'string') {
              value = String(value);
            }
            return value
          }
  
          // Build a destructive iterator for the value list
          function iteratorFor(items) {
            var iterator = {
              next: function() {
                var value = items.shift();
                return {done: value === undefined, value: value}
              }
            };
  
            if (support.iterable) {
              iterator[Symbol.iterator] = function() {
                return iterator
              };
            }
  
            return iterator
          }
  
          function Headers(headers) {
            this.map = {};
  
            if (headers instanceof Headers) {
              headers.forEach(function(value, name) {
                this.append(name, value);
              }, this);
            } else if (Array.isArray(headers)) {
              headers.forEach(function(header) {
                this.append(header[0], header[1]);
              }, this);
            } else if (headers) {
              Object.getOwnPropertyNames(headers).forEach(function(name) {
                this.append(name, headers[name]);
              }, this);
            }
          }
  
          Headers.prototype.append = function(name, value) {
            name = normalizeName(name);
            value = normalizeValue(value);
            var oldValue = this.map[name];
            this.map[name] = oldValue ? oldValue + ', ' + value : value;
          };
  
          Headers.prototype['delete'] = function(name) {
            delete this.map[normalizeName(name)];
          };
  
          Headers.prototype.get = function(name) {
            name = normalizeName(name);
            return this.has(name) ? this.map[name] : null
          };
  
          Headers.prototype.has = function(name) {
            return this.map.hasOwnProperty(normalizeName(name))
          };
  
          Headers.prototype.set = function(name, value) {
            this.map[normalizeName(name)] = normalizeValue(value);
          };
  
          Headers.prototype.forEach = function(callback, thisArg) {
            for (var name in this.map) {
              if (this.map.hasOwnProperty(name)) {
                callback.call(thisArg, this.map[name], name, this);
              }
            }
          };
  
          Headers.prototype.keys = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push(name);
            });
            return iteratorFor(items)
          };
  
          Headers.prototype.values = function() {
            var items = [];
            this.forEach(function(value) {
              items.push(value);
            });
            return iteratorFor(items)
          };
  
          Headers.prototype.entries = function() {
            var items = [];
            this.forEach(function(value, name) {
              items.push([name, value]);
            });
            return iteratorFor(items)
          };
  
          if (support.iterable) {
            Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
          }
  
          function consumed(body) {
            if (body.bodyUsed) {
              return Promise.reject(new TypeError('Already read'))
            }
            body.bodyUsed = true;
          }
  
          function fileReaderReady(reader) {
            return new Promise(function(resolve, reject) {
              reader.onload = function() {
                resolve(reader.result);
              };
              reader.onerror = function() {
                reject(reader.error);
              };
            })
          }
  
          function readBlobAsArrayBuffer(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsArrayBuffer(blob);
            return promise
          }
  
          function readBlobAsText(blob) {
            var reader = new FileReader();
            var promise = fileReaderReady(reader);
            reader.readAsText(blob);
            return promise
          }
  
          function readArrayBufferAsText(buf) {
            var view = new Uint8Array(buf);
            var chars = new Array(view.length);
  
            for (var i = 0; i < view.length; i++) {
              chars[i] = String.fromCharCode(view[i]);
            }
            return chars.join('')
          }
  
          function bufferClone(buf) {
            if (buf.slice) {
              return buf.slice(0)
            } else {
              var view = new Uint8Array(buf.byteLength);
              view.set(new Uint8Array(buf));
              return view.buffer
            }
          }
  
          function Body() {
            this.bodyUsed = false;
  
            this._initBody = function(body) {
              /*
                fetch-mock wraps the Response object in an ES6 Proxy to
                provide useful test harness features such as flush. However, on
                ES5 browsers without fetch or Proxy support pollyfills must be used;
                the proxy-pollyfill is unable to proxy an attribute unless it exists
                on the object before the Proxy is created. This change ensures
                Response.bodyUsed exists on the instance, while maintaining the
                semantic of setting Request.bodyUsed in the constructor before
                _initBody is called.
              */
              this.bodyUsed = this.bodyUsed;
              this._bodyInit = body;
              if (!body) {
                this._bodyText = '';
              } else if (typeof body === 'string') {
                this._bodyText = body;
              } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
                this._bodyBlob = body;
              } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
                this._bodyFormData = body;
              } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                this._bodyText = body.toString();
              } else if (support.arrayBuffer && support.blob && isDataView(body)) {
                this._bodyArrayBuffer = bufferClone(body.buffer);
                // IE 10-11 can't handle a DataView body.
                this._bodyInit = new Blob([this._bodyArrayBuffer]);
              } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
                this._bodyArrayBuffer = bufferClone(body);
              } else {
                this._bodyText = body = Object.prototype.toString.call(body);
              }
  
              if (!this.headers.get('content-type')) {
                if (typeof body === 'string') {
                  this.headers.set('content-type', 'text/plain;charset=UTF-8');
                } else if (this._bodyBlob && this._bodyBlob.type) {
                  this.headers.set('content-type', this._bodyBlob.type);
                } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
                  this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
                }
              }
            };
  
            if (support.blob) {
              this.blob = function() {
                var rejected = consumed(this);
                if (rejected) {
                  return rejected
                }
  
                if (this._bodyBlob) {
                  return Promise.resolve(this._bodyBlob)
                } else if (this._bodyArrayBuffer) {
                  return Promise.resolve(new Blob([this._bodyArrayBuffer]))
                } else if (this._bodyFormData) {
                  throw new Error('could not read FormData body as blob')
                } else {
                  return Promise.resolve(new Blob([this._bodyText]))
                }
              };
  
              this.arrayBuffer = function() {
                if (this._bodyArrayBuffer) {
                  var isConsumed = consumed(this);
                  if (isConsumed) {
                    return isConsumed
                  }
                  if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
                    return Promise.resolve(
                      this._bodyArrayBuffer.buffer.slice(
                        this._bodyArrayBuffer.byteOffset,
                        this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
                      )
                    )
                  } else {
                    return Promise.resolve(this._bodyArrayBuffer)
                  }
                } else {
                  return this.blob().then(readBlobAsArrayBuffer)
                }
              };
            }
  
            this.text = function() {
              var rejected = consumed(this);
              if (rejected) {
                return rejected
              }
  
              if (this._bodyBlob) {
                return readBlobAsText(this._bodyBlob)
              } else if (this._bodyArrayBuffer) {
                return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
              } else if (this._bodyFormData) {
                throw new Error('could not read FormData body as text')
              } else {
                return Promise.resolve(this._bodyText)
              }
            };
  
            if (support.formData) {
              this.formData = function() {
                return this.text().then(decode)
              };
            }
  
            this.json = function() {
              return this.text().then(JSON.parse)
            };
  
            return this
          }
  
          // HTTP methods whose capitalization should be normalized
          var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];
  
          function normalizeMethod(method) {
            var upcased = method.toUpperCase();
            return methods.indexOf(upcased) > -1 ? upcased : method
          }
  
          function Request(input, options) {
            if (!(this instanceof Request)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
            }
  
            options = options || {};
            var body = options.body;
  
            if (input instanceof Request) {
              if (input.bodyUsed) {
                throw new TypeError('Already read')
              }
              this.url = input.url;
              this.credentials = input.credentials;
              if (!options.headers) {
                this.headers = new Headers(input.headers);
              }
              this.method = input.method;
              this.mode = input.mode;
              this.signal = input.signal;
              if (!body && input._bodyInit != null) {
                body = input._bodyInit;
                input.bodyUsed = true;
              }
            } else {
              this.url = String(input);
            }
  
            this.credentials = options.credentials || this.credentials || 'same-origin';
            if (options.headers || !this.headers) {
              this.headers = new Headers(options.headers);
            }
            this.method = normalizeMethod(options.method || this.method || 'GET');
            this.mode = options.mode || this.mode || null;
            this.signal = options.signal || this.signal;
            this.referrer = null;
  
            if ((this.method === 'GET' || this.method === 'HEAD') && body) {
              throw new TypeError('Body not allowed for GET or HEAD requests')
            }
            this._initBody(body);
  
            if (this.method === 'GET' || this.method === 'HEAD') {
              if (options.cache === 'no-store' || options.cache === 'no-cache') {
                // Search for a '_' parameter in the query string
                var reParamSearch = /([?&])_=[^&]*/;
                if (reParamSearch.test(this.url)) {
                  // If it already exists then set the value with the current time
                  this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime());
                } else {
                  // Otherwise add a new '_' parameter to the end with the current time
                  var reQueryString = /\?/;
                  this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime();
                }
              }
            }
          }
  
          Request.prototype.clone = function() {
            return new Request(this, {body: this._bodyInit})
          };
  
          function decode(body) {
            var form = new FormData();
            body
              .trim()
              .split('&')
              .forEach(function(bytes) {
                if (bytes) {
                  var split = bytes.split('=');
                  var name = split.shift().replace(/\+/g, ' ');
                  var value = split.join('=').replace(/\+/g, ' ');
                  form.append(decodeURIComponent(name), decodeURIComponent(value));
                }
              });
            return form
          }
  
          function parseHeaders(rawHeaders) {
            var headers = new Headers();
            // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
            // https://tools.ietf.org/html/rfc7230#section-3.2
            var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
            // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
            // https://github.com/github/fetch/issues/748
            // https://github.com/zloirock/core-js/issues/751
            preProcessedHeaders
              .split('\r')
              .map(function(header) {
                return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
              })
              .forEach(function(line) {
                var parts = line.split(':');
                var key = parts.shift().trim();
                if (key) {
                  var value = parts.join(':').trim();
                  headers.append(key, value);
                }
              });
            return headers
          }
  
          Body.call(Request.prototype);
  
          function Response(bodyInit, options) {
            if (!(this instanceof Response)) {
              throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
            }
            if (!options) {
              options = {};
            }
  
            this.type = 'default';
            this.status = options.status === undefined ? 200 : options.status;
            this.ok = this.status >= 200 && this.status < 300;
            this.statusText = 'statusText' in options ? options.statusText : '';
            this.headers = new Headers(options.headers);
            this.url = options.url || '';
            this._initBody(bodyInit);
          }
  
          Body.call(Response.prototype);
  
          Response.prototype.clone = function() {
            return new Response(this._bodyInit, {
              status: this.status,
              statusText: this.statusText,
              headers: new Headers(this.headers),
              url: this.url
            })
          };
  
          Response.error = function() {
            var response = new Response(null, {status: 0, statusText: ''});
            response.type = 'error';
            return response
          };
  
          var redirectStatuses = [301, 302, 303, 307, 308];
  
          Response.redirect = function(url, status) {
            if (redirectStatuses.indexOf(status) === -1) {
              throw new RangeError('Invalid status code')
            }
  
            return new Response(null, {status: status, headers: {location: url}})
          };
  
          exports.DOMException = global.DOMException;
          try {
            new exports.DOMException();
          } catch (err) {
            exports.DOMException = function(message, name) {
              this.message = message;
              this.name = name;
              var error = Error(message);
              this.stack = error.stack;
            };
            exports.DOMException.prototype = Object.create(Error.prototype);
            exports.DOMException.prototype.constructor = exports.DOMException;
          }
  
          function fetch(input, init) {
            return new Promise(function(resolve, reject) {
              var request = new Request(input, init);
  
              if (request.signal && request.signal.aborted) {
                return reject(new exports.DOMException('Aborted', 'AbortError'))
              }
  
              var xhr = new XMLHttpRequest();
  
              function abortXhr() {
                xhr.abort();
              }
  
              xhr.onload = function() {
                var options = {
                  status: xhr.status,
                  statusText: xhr.statusText,
                  headers: parseHeaders(xhr.getAllResponseHeaders() || '')
                };
                options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
                var body = 'response' in xhr ? xhr.response : xhr.responseText;
                setTimeout(function() {
                  resolve(new Response(body, options));
                }, 0);
              };
  
              xhr.onerror = function() {
                setTimeout(function() {
                  reject(new TypeError('Network request failed'));
                }, 0);
              };
  
              xhr.ontimeout = function() {
                setTimeout(function() {
                  reject(new TypeError('Network request failed'));
                }, 0);
              };
  
              xhr.onabort = function() {
                setTimeout(function() {
                  reject(new exports.DOMException('Aborted', 'AbortError'));
                }, 0);
              };
  
              function fixUrl(url) {
                try {
                  return url === '' && global.location.href ? global.location.href : url
                } catch (e) {
                  return url
                }
              }
  
              xhr.open(request.method, fixUrl(request.url), true);
  
              if (request.credentials === 'include') {
                xhr.withCredentials = true;
              } else if (request.credentials === 'omit') {
                xhr.withCredentials = false;
              }
  
              if ('responseType' in xhr) {
                if (support.blob) {
                  xhr.responseType = 'blob';
                } else if (
                  support.arrayBuffer &&
                  request.headers.get('Content-Type') &&
                  request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
                ) {
                  xhr.responseType = 'arraybuffer';
                }
              }
  
              if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
                Object.getOwnPropertyNames(init.headers).forEach(function(name) {
                  xhr.setRequestHeader(name, normalizeValue(init.headers[name]));
                });
              } else {
                request.headers.forEach(function(value, name) {
                  xhr.setRequestHeader(name, value);
                });
              }
  
              if (request.signal) {
                request.signal.addEventListener('abort', abortXhr);
  
                xhr.onreadystatechange = function() {
                  // DONE (success or failure)
                  if (xhr.readyState === 4) {
                    request.signal.removeEventListener('abort', abortXhr);
                  }
                };
              }
  
              xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
            })
          }
  
          fetch.polyfill = true;
  
          if (!global.fetch) {
            global.fetch = fetch;
            global.Headers = Headers;
            global.Request = Request;
            global.Response = Response;
          }
  
          exports.Headers = Headers;
          exports.Request = Request;
          exports.Response = Response;
          exports.fetch = fetch;
  
          Object.defineProperty(exports, '__esModule', { value: true });
  
        })));
  
  
        return {
          fetch: globalThis.fetch,
          Headers: globalThis.Headers,
          Request: globalThis.Request,
          Response: globalThis.Response,
          DOMException: globalThis.DOMException
        };
      }());
    }
  
    if (typeof define === 'function' && define.amd) {
      define(function () {
        return fetchPonyfill;
      });
    } else if (typeof exports === 'object') {
      module.exports = fetchPonyfill;
    } else {
      global.fetchPonyfill = fetchPonyfill;
    }
  }(typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof global !== 'undefined' ? global : this));
  
  
  }).call(this)}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
  },{}],87:[function(require,module,exports){
  /*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
  exports.read = function (buffer, offset, isLE, mLen, nBytes) {
    var e, m
    var eLen = (nBytes * 8) - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var nBits = -7
    var i = isLE ? (nBytes - 1) : 0
    var d = isLE ? -1 : 1
    var s = buffer[offset + i]
  
    i += d
  
    e = s & ((1 << (-nBits)) - 1)
    s >>= (-nBits)
    nBits += eLen
    for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  
    m = e & ((1 << (-nBits)) - 1)
    e >>= (-nBits)
    nBits += mLen
    for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}
  
    if (e === 0) {
      e = 1 - eBias
    } else if (e === eMax) {
      return m ? NaN : ((s ? -1 : 1) * Infinity)
    } else {
      m = m + Math.pow(2, mLen)
      e = e - eBias
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
  }
  
  exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c
    var eLen = (nBytes * 8) - mLen - 1
    var eMax = (1 << eLen) - 1
    var eBias = eMax >> 1
    var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
    var i = isLE ? 0 : (nBytes - 1)
    var d = isLE ? 1 : -1
    var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0
  
    value = Math.abs(value)
  
    if (isNaN(value) || value === Infinity) {
      m = isNaN(value) ? 1 : 0
      e = eMax
    } else {
      e = Math.floor(Math.log(value) / Math.LN2)
      if (value * (c = Math.pow(2, -e)) < 1) {
        e--
        c *= 2
      }
      if (e + eBias >= 1) {
        value += rt / c
      } else {
        value += rt * Math.pow(2, 1 - eBias)
      }
      if (value * c >= 2) {
        e++
        c /= 2
      }
  
      if (e + eBias >= eMax) {
        m = 0
        e = eMax
      } else if (e + eBias >= 1) {
        m = ((value * c) - 1) * Math.pow(2, mLen)
        e = e + eBias
      } else {
        m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
        e = 0
      }
    }
  
    for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}
  
    e = (e << mLen) | m
    eLen += mLen
    for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}
  
    buffer[offset + i - d] |= s * 128
  }
  
  },{}],88:[function(require,module,exports){
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      define([], factory) /* global define */
    } else if (typeof module === 'object' && module.exports) {
      module.exports = factory()
    } else {
      root.moo = factory()
    }
  }(this, function() {
    'use strict';
  
    var hasOwnProperty = Object.prototype.hasOwnProperty
    var toString = Object.prototype.toString
    var hasSticky = typeof new RegExp().sticky === 'boolean'
  
    /***************************************************************************/
  
    function isRegExp(o) { return o && toString.call(o) === '[object RegExp]' }
    function isObject(o) { return o && typeof o === 'object' && !isRegExp(o) && !Array.isArray(o) }
  
    function reEscape(s) {
      return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')
    }
    function reGroups(s) {
      var re = new RegExp('|' + s)
      return re.exec('').length - 1
    }
    function reCapture(s) {
      return '(' + s + ')'
    }
    function reUnion(regexps) {
      if (!regexps.length) return '(?!)'
      var source =  regexps.map(function(s) {
        return "(?:" + s + ")"
      }).join('|')
      return "(?:" + source + ")"
    }
  
    function regexpOrLiteral(obj) {
      if (typeof obj === 'string') {
        return '(?:' + reEscape(obj) + ')'
  
      } else if (isRegExp(obj)) {
        // TODO: consider /u support
        if (obj.ignoreCase) throw new Error('RegExp /i flag not allowed')
        if (obj.global) throw new Error('RegExp /g flag is implied')
        if (obj.sticky) throw new Error('RegExp /y flag is implied')
        if (obj.multiline) throw new Error('RegExp /m flag is implied')
        return obj.source
  
      } else {
        throw new Error('Not a pattern: ' + obj)
      }
    }
  
    function objectToRules(object) {
      var keys = Object.getOwnPropertyNames(object)
      var result = []
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]
        var thing = object[key]
        var rules = [].concat(thing)
        if (key === 'include') {
          for (var j = 0; j < rules.length; j++) {
            result.push({include: rules[j]})
          }
          continue
        }
        var match = []
        rules.forEach(function(rule) {
          if (isObject(rule)) {
            if (match.length) result.push(ruleOptions(key, match))
            result.push(ruleOptions(key, rule))
            match = []
          } else {
            match.push(rule)
          }
        })
        if (match.length) result.push(ruleOptions(key, match))
      }
      return result
    }
  
    function arrayToRules(array) {
      var result = []
      for (var i = 0; i < array.length; i++) {
        var obj = array[i]
        if (obj.include) {
          var include = [].concat(obj.include)
          for (var j = 0; j < include.length; j++) {
            result.push({include: include[j]})
          }
          continue
        }
        if (!obj.type) {
          throw new Error('Rule has no type: ' + JSON.stringify(obj))
        }
        result.push(ruleOptions(obj.type, obj))
      }
      return result
    }
  
    function ruleOptions(type, obj) {
      if (!isObject(obj)) {
        obj = { match: obj }
      }
      if (obj.include) {
        throw new Error('Matching rules cannot also include states')
      }
  
      // nb. error and fallback imply lineBreaks
      var options = {
        defaultType: type,
        lineBreaks: !!obj.error || !!obj.fallback,
        pop: false,
        next: null,
        push: null,
        error: false,
        fallback: false,
        value: null,
        type: null,
        shouldThrow: false,
      }
  
      // Avoid Object.assign(), so we support IE9+
      for (var key in obj) {
        if (hasOwnProperty.call(obj, key)) {
          options[key] = obj[key]
        }
      }
  
      // type transform cannot be a string
      if (typeof options.type === 'string' && type !== options.type) {
        throw new Error("Type transform cannot be a string (type '" + options.type + "' for token '" + type + "')")
      }
  
      // convert to array
      var match = options.match
      options.match = Array.isArray(match) ? match : match ? [match] : []
      options.match.sort(function(a, b) {
        return isRegExp(a) && isRegExp(b) ? 0
             : isRegExp(b) ? -1 : isRegExp(a) ? +1 : b.length - a.length
      })
      return options
    }
  
    function toRules(spec) {
      return Array.isArray(spec) ? arrayToRules(spec) : objectToRules(spec)
    }
  
    var defaultErrorRule = ruleOptions('error', {lineBreaks: true, shouldThrow: true})
    function compileRules(rules, hasStates) {
      var errorRule = null
      var fast = Object.create(null)
      var fastAllowed = true
      var unicodeFlag = null
      var groups = []
      var parts = []
  
      // If there is a fallback rule, then disable fast matching
      for (var i = 0; i < rules.length; i++) {
        if (rules[i].fallback) {
          fastAllowed = false
        }
      }
  
      for (var i = 0; i < rules.length; i++) {
        var options = rules[i]
  
        if (options.include) {
          // all valid inclusions are removed by states() preprocessor
          throw new Error('Inheritance is not allowed in stateless lexers')
        }
  
        if (options.error || options.fallback) {
          // errorRule can only be set once
          if (errorRule) {
            if (!options.fallback === !errorRule.fallback) {
              throw new Error("Multiple " + (options.fallback ? "fallback" : "error") + " rules not allowed (for token '" + options.defaultType + "')")
            } else {
              throw new Error("fallback and error are mutually exclusive (for token '" + options.defaultType + "')")
            }
          }
          errorRule = options
        }
  
        var match = options.match.slice()
        if (fastAllowed) {
          while (match.length && typeof match[0] === 'string' && match[0].length === 1) {
            var word = match.shift()
            fast[word.charCodeAt(0)] = options
          }
        }
  
        // Warn about inappropriate state-switching options
        if (options.pop || options.push || options.next) {
          if (!hasStates) {
            throw new Error("State-switching options are not allowed in stateless lexers (for token '" + options.defaultType + "')")
          }
          if (options.fallback) {
            throw new Error("State-switching options are not allowed on fallback tokens (for token '" + options.defaultType + "')")
          }
        }
  
        // Only rules with a .match are included in the RegExp
        if (match.length === 0) {
          continue
        }
        fastAllowed = false
  
        groups.push(options)
  
        // Check unicode flag is used everywhere or nowhere
        for (var j = 0; j < match.length; j++) {
          var obj = match[j]
          if (!isRegExp(obj)) {
            continue
          }
  
          if (unicodeFlag === null) {
            unicodeFlag = obj.unicode
          } else if (unicodeFlag !== obj.unicode && options.fallback === false) {
            throw new Error('If one rule is /u then all must be')
          }
        }
  
        // convert to RegExp
        var pat = reUnion(match.map(regexpOrLiteral))
  
        // validate
        var regexp = new RegExp(pat)
        if (regexp.test("")) {
          throw new Error("RegExp matches empty string: " + regexp)
        }
        var groupCount = reGroups(pat)
        if (groupCount > 0) {
          throw new Error("RegExp has capture groups: " + regexp + "\nUse (?: â€¦ ) instead")
        }
  
        // try and detect rules matching newlines
        if (!options.lineBreaks && regexp.test('\n')) {
          throw new Error('Rule should declare lineBreaks: ' + regexp)
        }
  
        // store regex
        parts.push(reCapture(pat))
      }
  
  
      // If there's no fallback rule, use the sticky flag so we only look for
      // matches at the current index.
      //
      // If we don't support the sticky flag, then fake it using an irrefutable
      // match (i.e. an empty pattern).
      var fallbackRule = errorRule && errorRule.fallback
      var flags = hasSticky && !fallbackRule ? 'ym' : 'gm'
      var suffix = hasSticky || fallbackRule ? '' : '|'
  
      if (unicodeFlag === true) flags += "u"
      var combined = new RegExp(reUnion(parts) + suffix, flags)
      return {regexp: combined, groups: groups, fast: fast, error: errorRule || defaultErrorRule}
    }
  
    function compile(rules) {
      var result = compileRules(toRules(rules))
      return new Lexer({start: result}, 'start')
    }
  
    function checkStateGroup(g, name, map) {
      var state = g && (g.push || g.next)
      if (state && !map[state]) {
        throw new Error("Missing state '" + state + "' (in token '" + g.defaultType + "' of state '" + name + "')")
      }
      if (g && g.pop && +g.pop !== 1) {
        throw new Error("pop must be 1 (in token '" + g.defaultType + "' of state '" + name + "')")
      }
    }
    function compileStates(states, start) {
      var all = states.$all ? toRules(states.$all) : []
      delete states.$all
  
      var keys = Object.getOwnPropertyNames(states)
      if (!start) start = keys[0]
  
      var ruleMap = Object.create(null)
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]
        ruleMap[key] = toRules(states[key]).concat(all)
      }
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]
        var rules = ruleMap[key]
        var included = Object.create(null)
        for (var j = 0; j < rules.length; j++) {
          var rule = rules[j]
          if (!rule.include) continue
          var splice = [j, 1]
          if (rule.include !== key && !included[rule.include]) {
            included[rule.include] = true
            var newRules = ruleMap[rule.include]
            if (!newRules) {
              throw new Error("Cannot include nonexistent state '" + rule.include + "' (in state '" + key + "')")
            }
            for (var k = 0; k < newRules.length; k++) {
              var newRule = newRules[k]
              if (rules.indexOf(newRule) !== -1) continue
              splice.push(newRule)
            }
          }
          rules.splice.apply(rules, splice)
          j--
        }
      }
  
      var map = Object.create(null)
      for (var i = 0; i < keys.length; i++) {
        var key = keys[i]
        map[key] = compileRules(ruleMap[key], true)
      }
  
      for (var i = 0; i < keys.length; i++) {
        var name = keys[i]
        var state = map[name]
        var groups = state.groups
        for (var j = 0; j < groups.length; j++) {
          checkStateGroup(groups[j], name, map)
        }
        var fastKeys = Object.getOwnPropertyNames(state.fast)
        for (var j = 0; j < fastKeys.length; j++) {
          checkStateGroup(state.fast[fastKeys[j]], name, map)
        }
      }
  
      return new Lexer(map, start)
    }
  
    function keywordTransform(map) {
      var reverseMap = Object.create(null)
      var byLength = Object.create(null)
      var types = Object.getOwnPropertyNames(map)
      for (var i = 0; i < types.length; i++) {
        var tokenType = types[i]
        var item = map[tokenType]
        var keywordList = Array.isArray(item) ? item : [item]
        keywordList.forEach(function(keyword) {
          (byLength[keyword.length] = byLength[keyword.length] || []).push(keyword)
          if (typeof keyword !== 'string') {
            throw new Error("keyword must be string (in keyword '" + tokenType + "')")
          }
          reverseMap[keyword] = tokenType
        })
      }
  
      // fast string lookup
      // https://jsperf.com/string-lookups
      function str(x) { return JSON.stringify(x) }
      var source = ''
      source += 'switch (value.length) {\n'
      for (var length in byLength) {
        var keywords = byLength[length]
        source += 'case ' + length + ':\n'
        source += 'switch (value) {\n'
        keywords.forEach(function(keyword) {
          var tokenType = reverseMap[keyword]
          source += 'case ' + str(keyword) + ': return ' + str(tokenType) + '\n'
        })
        source += '}\n'
      }
      source += '}\n'
      return Function('value', source) // type
    }
  
    /***************************************************************************/
  
    var Lexer = function(states, state) {
      this.startState = state
      this.states = states
      this.buffer = ''
      this.stack = []
      this.reset()
    }
  
    Lexer.prototype.reset = function(data, info) {
      this.buffer = data || ''
      this.index = 0
      this.line = info ? info.line : 1
      this.col = info ? info.col : 1
      this.queuedToken = info ? info.queuedToken : null
      this.queuedThrow = info ? info.queuedThrow : null
      this.setState(info ? info.state : this.startState)
      this.stack = info && info.stack ? info.stack.slice() : []
      return this
    }
  
    Lexer.prototype.save = function() {
      return {
        line: this.line,
        col: this.col,
        state: this.state,
        stack: this.stack.slice(),
        queuedToken: this.queuedToken,
        queuedThrow: this.queuedThrow,
      }
    }
  
    Lexer.prototype.setState = function(state) {
      if (!state || this.state === state) return
      this.state = state
      var info = this.states[state]
      this.groups = info.groups
      this.error = info.error
      this.re = info.regexp
      this.fast = info.fast
    }
  
    Lexer.prototype.popState = function() {
      this.setState(this.stack.pop())
    }
  
    Lexer.prototype.pushState = function(state) {
      this.stack.push(this.state)
      this.setState(state)
    }
  
    var eat = hasSticky ? function(re, buffer) { // assume re is /y
      return re.exec(buffer)
    } : function(re, buffer) { // assume re is /g
      var match = re.exec(buffer)
      // will always match, since we used the |(?:) trick
      if (match[0].length === 0) {
        return null
      }
      return match
    }
  
    Lexer.prototype._getGroup = function(match) {
      var groupCount = this.groups.length
      for (var i = 0; i < groupCount; i++) {
        if (match[i + 1] !== undefined) {
          return this.groups[i]
        }
      }
      throw new Error('Cannot find token type for matched text')
    }
  
    function tokenToString() {
      return this.value
    }
  
    Lexer.prototype.next = function() {
      var index = this.index
  
      // If a fallback token matched, we don't need to re-run the RegExp
      if (this.queuedGroup) {
        var token = this._token(this.queuedGroup, this.queuedText, index)
        this.queuedGroup = null
        this.queuedText = ""
        return token
      }
  
      var buffer = this.buffer
      if (index === buffer.length) {
        return // EOF
      }
  
      // Fast matching for single characters
      var group = this.fast[buffer.charCodeAt(index)]
      if (group) {
        return this._token(group, buffer.charAt(index), index)
      }
  
      // Execute RegExp
      var re = this.re
      re.lastIndex = index
      var match = eat(re, buffer)
  
      // Error tokens match the remaining buffer
      var error = this.error
      if (match == null) {
        return this._token(error, buffer.slice(index, buffer.length), index)
      }
  
      var group = this._getGroup(match)
      var text = match[0]
  
      if (error.fallback && match.index !== index) {
        this.queuedGroup = group
        this.queuedText = text
  
        // Fallback tokens contain the unmatched portion of the buffer
        return this._token(error, buffer.slice(index, match.index), index)
      }
  
      return this._token(group, text, index)
    }
  
    Lexer.prototype._token = function(group, text, offset) {
      // count line breaks
      var lineBreaks = 0
      if (group.lineBreaks) {
        var matchNL = /\n/g
        var nl = 1
        if (text === '\n') {
          lineBreaks = 1
        } else {
          while (matchNL.exec(text)) { lineBreaks++; nl = matchNL.lastIndex }
        }
      }
  
      var token = {
        type: (typeof group.type === 'function' && group.type(text)) || group.defaultType,
        value: typeof group.value === 'function' ? group.value(text) : text,
        text: text,
        toString: tokenToString,
        offset: offset,
        lineBreaks: lineBreaks,
        line: this.line,
        col: this.col,
      }
      // nb. adding more props to token object will make V8 sad!
  
      var size = text.length
      this.index += size
      this.line += lineBreaks
      if (lineBreaks !== 0) {
        this.col = size - nl + 1
      } else {
        this.col += size
      }
  
      // throw, if no rule with {error: true}
      if (group.shouldThrow) {
        throw new Error(this.formatError(token, "invalid syntax"))
      }
  
      if (group.pop) this.popState()
      else if (group.push) this.pushState(group.push)
      else if (group.next) this.setState(group.next)
  
      return token
    }
  
    if (typeof Symbol !== 'undefined' && Symbol.iterator) {
      var LexerIterator = function(lexer) {
        this.lexer = lexer
      }
  
      LexerIterator.prototype.next = function() {
        var token = this.lexer.next()
        return {value: token, done: !token}
      }
  
      LexerIterator.prototype[Symbol.iterator] = function() {
        return this
      }
  
      Lexer.prototype[Symbol.iterator] = function() {
        return new LexerIterator(this)
      }
    }
  
    Lexer.prototype.formatError = function(token, message) {
      if (token == null) {
        // An undefined token indicates EOF
        var text = this.buffer.slice(this.index)
        var token = {
          text: text,
          offset: this.index,
          lineBreaks: text.indexOf('\n') === -1 ? 0 : 1,
          line: this.line,
          col: this.col,
        }
      }
      var start = Math.max(0, token.offset - token.col + 1)
      var eol = token.lineBreaks ? token.text.indexOf('\n') : token.text.length
      var firstLine = this.buffer.substring(start, token.offset + eol)
      message += " at line " + token.line + " col " + token.col + ":\n\n"
      message += "  " + firstLine + "\n"
      message += "  " + Array(token.col).join(" ") + "^"
      return message
    }
  
    Lexer.prototype.clone = function() {
      return new Lexer(this.states, this.state)
    }
  
    Lexer.prototype.has = function(tokenType) {
      return true
    }
  
  
    return {
      compile: compile,
      states: compileStates,
      error: Object.freeze({error: true}),
      fallback: Object.freeze({fallback: true}),
      keywords: keywordTransform,
    }
  
  }));
  
  },{}],89:[function(require,module,exports){
  // shim for using process in browser
  var process = module.exports = {};
  
  // cached from whatever global is present so that test runners that stub it
  // don't break things.  But we need to wrap it in a try catch in case it is
  // wrapped in strict mode code which doesn't define any globals.  It's inside a
  // function because try/catches deoptimize in certain engines.
  
  var cachedSetTimeout;
  var cachedClearTimeout;
  
  function defaultSetTimout() {
      throw new Error('setTimeout has not been defined');
  }
  function defaultClearTimeout () {
      throw new Error('clearTimeout has not been defined');
  }
  (function () {
      try {
          if (typeof setTimeout === 'function') {
              cachedSetTimeout = setTimeout;
          } else {
              cachedSetTimeout = defaultSetTimout;
          }
      } catch (e) {
          cachedSetTimeout = defaultSetTimout;
      }
      try {
          if (typeof clearTimeout === 'function') {
              cachedClearTimeout = clearTimeout;
          } else {
              cachedClearTimeout = defaultClearTimeout;
          }
      } catch (e) {
          cachedClearTimeout = defaultClearTimeout;
      }
  } ())
  function runTimeout(fun) {
      if (cachedSetTimeout === setTimeout) {
          //normal enviroments in sane situations
          return setTimeout(fun, 0);
      }
      // if setTimeout wasn't available but was latter defined
      if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
          cachedSetTimeout = setTimeout;
          return setTimeout(fun, 0);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedSetTimeout(fun, 0);
      } catch(e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
              return cachedSetTimeout.call(null, fun, 0);
          } catch(e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
              return cachedSetTimeout.call(this, fun, 0);
          }
      }
  
  
  }
  function runClearTimeout(marker) {
      if (cachedClearTimeout === clearTimeout) {
          //normal enviroments in sane situations
          return clearTimeout(marker);
      }
      // if clearTimeout wasn't available but was latter defined
      if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
          cachedClearTimeout = clearTimeout;
          return clearTimeout(marker);
      }
      try {
          // when when somebody has screwed with setTimeout but no I.E. maddness
          return cachedClearTimeout(marker);
      } catch (e){
          try {
              // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
              return cachedClearTimeout.call(null, marker);
          } catch (e){
              // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
              // Some versions of I.E. have different rules for clearTimeout vs setTimeout
              return cachedClearTimeout.call(this, marker);
          }
      }
  
  
  
  }
  var queue = [];
  var draining = false;
  var currentQueue;
  var queueIndex = -1;
  
  function cleanUpNextTick() {
      if (!draining || !currentQueue) {
          return;
      }
      draining = false;
      if (currentQueue.length) {
          queue = currentQueue.concat(queue);
      } else {
          queueIndex = -1;
      }
      if (queue.length) {
          drainQueue();
      }
  }
  
  function drainQueue() {
      if (draining) {
          return;
      }
      var timeout = runTimeout(cleanUpNextTick);
      draining = true;
  
      var len = queue.length;
      while(len) {
          currentQueue = queue;
          queue = [];
          while (++queueIndex < len) {
              if (currentQueue) {
                  currentQueue[queueIndex].run();
              }
          }
          queueIndex = -1;
          len = queue.length;
      }
      currentQueue = null;
      draining = false;
      runClearTimeout(timeout);
  }
  
  process.nextTick = function (fun) {
      var args = new Array(arguments.length - 1);
      if (arguments.length > 1) {
          for (var i = 1; i < arguments.length; i++) {
              args[i - 1] = arguments[i];
          }
      }
      queue.push(new Item(fun, args));
      if (queue.length === 1 && !draining) {
          runTimeout(drainQueue);
      }
  };
  
  // v8 likes predictible objects
  function Item(fun, array) {
      this.fun = fun;
      this.array = array;
  }
  Item.prototype.run = function () {
      this.fun.apply(null, this.array);
  };
  process.title = 'browser';
  process.browser = true;
  process.env = {};
  process.argv = [];
  process.version = ''; // empty string to avoid regexp issues
  process.versions = {};
  
  function noop() {}
  
  process.on = noop;
  process.addListener = noop;
  process.once = noop;
  process.off = noop;
  process.removeListener = noop;
  process.removeAllListeners = noop;
  process.emit = noop;
  process.prependListener = noop;
  process.prependOnceListener = noop;
  
  process.listeners = function (name) { return [] }
  
  process.binding = function (name) {
      throw new Error('process.binding is not supported');
  };
  
  process.cwd = function () { return '/' };
  process.chdir = function (dir) {
      throw new Error('process.chdir is not supported');
  };
  process.umask = function() { return 0; };
  
  },{}],90:[function(require,module,exports){
  /* eslint-env browser */
  
  const { Buffer } = require('buffer/')
  
  function syncFetch (...args) {
    const request = new syncFetch.Request(...args)
  
    const xhr = new XMLHttpRequest()
    xhr.withCredentials = request.credentials === 'include'
    xhr.timeout = request[INTERNALS].timeout
  
    // Request
    xhr.open(request.method, request.url, false)
  
    try {
      xhr.responseType = 'arraybuffer'
    } catch (e) {
      // not in Worker scope
      // https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/responseType#Synchronous_XHR_restrictions
    }
  
    for (const header of request.headers) {
      xhr.setRequestHeader(...header)
    }
  
    xhr.send(request.body || null)
  
    // Response
    let headers = xhr.getAllResponseHeaders()
    headers = headers && headers.split('\r\n').filter(Boolean).map(header => header.split(': ', 2))
  
    const response = new syncFetch.Response(xhr.response, {
      headers,
      status: xhr.status,
      statusText: xhr.statusText
    })
  
    response[INTERNALS].url = xhr.responseURL
    response[INTERNALS].redirected = xhr.responseURL !== request.url
  
    return response
  }
  
  const INTERNALS = Symbol('SyncFetch Internals')
  const REQ_UNSUPPORTED = ['mode', 'cache', 'redirect', 'referrer', 'integrity']
  const HTTP_STATUS = {
    100: 'Continue',
    101: 'Switching Protocols',
    200: 'OK',
    201: 'Created',
    202: 'Accepted',
    203: 'Non-Authoritative Information',
    204: 'No Content',
    205: 'Reset Content',
    206: 'Partial Content',
    300: 'Multiple Choices',
    301: 'Moved Permanently',
    302: 'Found',
    303: 'See Other',
    304: 'Not Modified',
    305: 'Use Proxy',
    307: 'Temporary Redirect',
    400: 'Bad Request',
    401: 'Unauthorized',
    402: 'Payment Required',
    403: 'Forbidden',
    404: 'Not Found',
    405: 'Method Not Allowed',
    406: 'Not Acceptable',
    407: 'Proxy Authentication Required',
    408: 'Request Timeout',
    409: 'Conflict',
    410: 'Gone',
    411: 'Length Required',
    412: 'Precondition Failed',
    413: 'Payload Too Large',
    414: 'URI Too Long',
    415: 'Unsupported Media Type',
    416: 'Range Not Satisfiable',
    417: 'Expectation Failed',
    426: 'Upgrade Required',
    500: 'Internal Server Error',
    501: 'Not Implemented',
    502: 'Bad Gateway',
    503: 'Service Unavailable',
    504: 'Gateway Timeout',
    505: 'HTTP Version Not Supported'
  }
  
  class SyncRequest {
    constructor (resource, init = {}) {
      for (const option of REQ_UNSUPPORTED) {
        if (option in init) {
          throw new TypeError(`option ${option} not supported`)
        }
      }
  
      if (init.credentials === 'same-origin') {
        throw new TypeError('option credentials with value \'same-origin\' not supported')
      }
  
      this[INTERNALS] = {
        method: init.method || 'GET',
        headers: new syncFetch.Headers(init.headers),
        body: init.body ? Buffer.from(init.body) : null,
        credentials: init.credentials || 'omit',
  
        // Non-spec
        timeout: init.timeout || 0
      }
  
      if (typeof resource === 'string') {
        this[INTERNALS].url = resource
      } else if (resource instanceof SyncRequest) {
        this[INTERNALS].url = resource.url
        if (!init.method) {
          this[INTERNALS].method = resource.method
        }
        if (!init.headers) {
          this[INTERNALS].headers = resource.headers
        }
        if (!init.body) {
          this[INTERNALS].body = resource[INTERNALS].body
        }
        if (!init.credentials) {
          this[INTERNALS].credentials = resource.credentials
        }
      } else {
        throw new TypeError('Request input should be a URL string or a Request object')
      }
    }
  
    get cache () {
      return 'default'
    }
  
    get credentials () {
      return this[INTERNALS].credentials
    }
  
    get destination () {
      return ''
    }
  
    get headers () {
      return this[INTERNALS].headers
    }
  
    get integrity () {
      return ''
    }
  
    get method () {
      return this[INTERNALS].method
    }
  
    get mode () {
      return 'cors'
    }
  
    get priority () {
      return 'auto'
    }
  
    get redirect () {
      return 'follow'
    }
  
    get referrer () {
      return 'about:client'
    }
  
    get referrerPolicy () {
      return ''
    }
  
    get url () {
      return this[INTERNALS].url
    }
  
    clone () {
      checkBody(this)
      return new SyncRequest(this.url, this[INTERNALS])
    }
  }
  
  class SyncResponse {
    constructor (body, init = {}) {
      this[INTERNALS] = {
        body: body ? Buffer.from(body) : null,
        bodyUsed: false,
  
        headers: new syncFetch.Headers(init.headers),
        status: init.status,
        statusText: init.statusText
      }
    }
  
    get headers () {
      return this[INTERNALS].headers
    }
  
    get ok () {
      const status = this[INTERNALS].status
      return status >= 200 && status < 300
    }
  
    get redirected () {
      return this[INTERNALS].redirected
    }
  
    get status () {
      return this[INTERNALS].status
    }
  
    get statusText () {
      return this[INTERNALS].statusText
    }
  
    get url () {
      return this[INTERNALS].url
    }
  
    clone () {
      return this.redirect(this[INTERNALS].url, this[INTERNALS].status)
    }
  
    redirect (url, status) {
      checkBody(this)
  
      const response = new SyncResponse(this[INTERNALS].body, {
        headers: this[INTERNALS].headers,
        status: status || this[INTERNALS].status,
        statusText: HTTP_STATUS[status] || this[INTERNALS].statusText
      })
  
      response[INTERNALS].url = url || this[INTERNALS].url
      response[INTERNALS].redirected = this[INTERNALS].redirected
  
      return response
    }
  }
  
  class Body {
    constructor (body) {
      this[INTERNALS] = {
        body: Buffer.from(body),
        bodyUsed: false
      }
    }
  
    get bodyUsed () {
      return this[INTERNALS].bodyUsed
    }
  
    static mixin (prototype) {
      for (const name of Object.getOwnPropertyNames(Body.prototype)) {
        if (name === 'constructor') { continue }
        const desc = Object.getOwnPropertyDescriptor(Body.prototype, name)
        Object.defineProperty(prototype, name, { ...desc, enumerable: true })
      }
    }
  
    arrayBuffer () {
      const buffer = consumeBody(this)
      return buffer.buffer.slice(buffer.byteOffset, buffer.byteOffset + buffer.byteLength)
    }
  
    blob () {
      const type = this.headers && this.headers.get('content-type')
      return new Blob([consumeBody(this)], type && { type })
    }
  
    text () {
      return consumeBody(this).toString()
    }
  
    json () {
      try {
        return JSON.parse(consumeBody(this).toString())
      } catch (err) {
        throw new TypeError(`invalid json response body at ${this.url} reason: ${err.message}`, 'invalid-json')
      }
    }
  
    buffer () {
      return consumeBody(this).clone()
    }
  }
  
  function checkBody (body) {
    if (body.bodyUsed) {
      throw new TypeError(`body used already for: ${body.url}`)
    }
  }
  
  function consumeBody (body) {
    checkBody(body)
    body[INTERNALS].bodyUsed = true
    return body[INTERNALS].body || Buffer.alloc(0)
  }
  
  Body.mixin(SyncRequest.prototype)
  Body.mixin(SyncResponse.prototype)
  
  class Headers {
    constructor (headers) {
      if (headers instanceof syncFetch.Headers) {
        this[INTERNALS] = { ...headers[INTERNALS] }
      } else {
        this[INTERNALS] = {}
  
        if (Array.isArray(headers)) {
          for (const [name, value] of headers) {
            this.append(name, value)
          }
        } else if (typeof headers === 'object') {
          for (const name in headers) {
            this.set(name, headers[name])
          }
        }
      }
    }
  
    // modification
    append (name, value) {
      name = name.toLowerCase()
      if (!this[INTERNALS][name]) {
        this[INTERNALS][name] = []
      }
      this[INTERNALS][name].push(value)
    }
  
    delete (name) {
      delete this[INTERNALS][name.toLowerCase()]
    }
  
    set (name, value) {
      this[INTERNALS][name.toLowerCase()] = [value]
    }
  
    // access
    entries () {
      const pairs = []
      for (const name in this[INTERNALS]) {
        for (const value of this[INTERNALS][name]) {
          pairs.push([name, value])
        }
      }
      return pairs
    }
  
    get (name) {
      name = name.toLowerCase()
      return name in this[INTERNALS] ? this[INTERNALS][name].join(', ') : null
    }
  
    keys () {
      return Object.keys(this[INTERNALS])
    }
  
    has (name) {
      return name.toLowerCase() in this[INTERNALS]
    }
  
    values () {
      const values = []
      for (const name in this[INTERNALS]) {
        for (const value of this[INTERNALS][name]) {
          values.push(value)
        }
      }
      return values
    }
  
    * [Symbol.iterator] () {
      for (const name in this[INTERNALS]) {
        for (const value of this[INTERNALS][name]) {
          yield [name, value]
        }
      }
    }
  }
  
  syncFetch.Headers = Headers
  syncFetch.Request = SyncRequest
  syncFetch.Response = SyncResponse
  module.exports = syncFetch
  
  },{"buffer/":91}],91:[function(require,module,exports){
  (function (Buffer){(function (){
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   */
  /* eslint-disable no-proto */
  
  'use strict'
  
  var base64 = require('base64-js')
  var ieee754 = require('ieee754')
  var customInspectSymbol =
    (typeof Symbol === 'function' && typeof Symbol['for'] === 'function') // eslint-disable-line dot-notation
      ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
      : null
  
  exports.Buffer = Buffer
  exports.SlowBuffer = SlowBuffer
  exports.INSPECT_MAX_BYTES = 50
  
  var K_MAX_LENGTH = 0x7fffffff
  exports.kMaxLength = K_MAX_LENGTH
  
  /**
   * If `Buffer.TYPED_ARRAY_SUPPORT`:
   *   === true    Use Uint8Array implementation (fastest)
   *   === false   Print warning and recommend using `buffer` v4.x which has an Object
   *               implementation (most compatible, even IE6)
   *
   * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
   * Opera 11.6+, iOS 4.2+.
   *
   * We report that the browser does not support typed arrays if the are not subclassable
   * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
   * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
   * for __proto__ and has a buggy typed array implementation.
   */
  Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()
  
  if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
      typeof console.error === 'function') {
    console.error(
      'This browser lacks typed array (Uint8Array) support which is required by ' +
      '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
    )
  }
  
  function typedArraySupport () {
    // Can typed array instances can be augmented?
    try {
      var arr = new Uint8Array(1)
      var proto = { foo: function () { return 42 } }
      Object.setPrototypeOf(proto, Uint8Array.prototype)
      Object.setPrototypeOf(arr, proto)
      return arr.foo() === 42
    } catch (e) {
      return false
    }
  }
  
  Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.buffer
    }
  })
  
  Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function () {
      if (!Buffer.isBuffer(this)) return undefined
      return this.byteOffset
    }
  })
  
  function createBuffer (length) {
    if (length > K_MAX_LENGTH) {
      throw new RangeError('The value "' + length + '" is invalid for option "size"')
    }
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length)
    Object.setPrototypeOf(buf, Buffer.prototype)
    return buf
  }
  
  /**
   * The Buffer constructor returns instances of `Uint8Array` that have their
   * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
   * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
   * and the `Uint8Array` methods. Square bracket notation works as expected -- it
   * returns a single octet.
   *
   * The `Uint8Array` prototype remains unmodified.
   */
  
  function Buffer (arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
      if (typeof encodingOrOffset === 'string') {
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        )
      }
      return allocUnsafe(arg)
    }
    return from(arg, encodingOrOffset, length)
  }
  
  Buffer.poolSize = 8192 // not used by this implementation
  
  function from (value, encodingOrOffset, length) {
    if (typeof value === 'string') {
      return fromString(value, encodingOrOffset)
    }
  
    if (ArrayBuffer.isView(value)) {
      return fromArrayView(value)
    }
  
    if (value == null) {
      throw new TypeError(
        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
        'or Array-like Object. Received type ' + (typeof value)
      )
    }
  
    if (isInstance(value, ArrayBuffer) ||
        (value && isInstance(value.buffer, ArrayBuffer))) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }
  
    if (typeof SharedArrayBuffer !== 'undefined' &&
        (isInstance(value, SharedArrayBuffer) ||
        (value && isInstance(value.buffer, SharedArrayBuffer)))) {
      return fromArrayBuffer(value, encodingOrOffset, length)
    }
  
    if (typeof value === 'number') {
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      )
    }
  
    var valueOf = value.valueOf && value.valueOf()
    if (valueOf != null && valueOf !== value) {
      return Buffer.from(valueOf, encodingOrOffset, length)
    }
  
    var b = fromObject(value)
    if (b) return b
  
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null &&
        typeof value[Symbol.toPrimitive] === 'function') {
      return Buffer.from(
        value[Symbol.toPrimitive]('string'), encodingOrOffset, length
      )
    }
  
    throw new TypeError(
      'The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' +
      'or Array-like Object. Received type ' + (typeof value)
    )
  }
  
  /**
   * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
   * if value is a number.
   * Buffer.from(str[, encoding])
   * Buffer.from(array)
   * Buffer.from(buffer)
   * Buffer.from(arrayBuffer[, byteOffset[, length]])
   **/
  Buffer.from = function (value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length)
  }
  
  // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
  // https://github.com/feross/buffer/pull/148
  Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype)
  Object.setPrototypeOf(Buffer, Uint8Array)
  
  function assertSize (size) {
    if (typeof size !== 'number') {
      throw new TypeError('"size" argument must be of type number')
    } else if (size < 0) {
      throw new RangeError('The value "' + size + '" is invalid for option "size"')
    }
  }
  
  function alloc (size, fill, encoding) {
    assertSize(size)
    if (size <= 0) {
      return createBuffer(size)
    }
    if (fill !== undefined) {
      // Only pay attention to encoding if it's a string. This
      // prevents accidentally sending in a number that would
      // be interpreted as a start offset.
      return typeof encoding === 'string'
        ? createBuffer(size).fill(fill, encoding)
        : createBuffer(size).fill(fill)
    }
    return createBuffer(size)
  }
  
  /**
   * Creates a new filled Buffer instance.
   * alloc(size[, fill[, encoding]])
   **/
  Buffer.alloc = function (size, fill, encoding) {
    return alloc(size, fill, encoding)
  }
  
  function allocUnsafe (size) {
    assertSize(size)
    return createBuffer(size < 0 ? 0 : checked(size) | 0)
  }
  
  /**
   * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
   * */
  Buffer.allocUnsafe = function (size) {
    return allocUnsafe(size)
  }
  /**
   * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
   */
  Buffer.allocUnsafeSlow = function (size) {
    return allocUnsafe(size)
  }
  
  function fromString (string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') {
      encoding = 'utf8'
    }
  
    if (!Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  
    var length = byteLength(string, encoding) | 0
    var buf = createBuffer(length)
  
    var actual = buf.write(string, encoding)
  
    if (actual !== length) {
      // Writing a hex string, for example, that contains invalid characters will
      // cause everything after the first invalid character to be ignored. (e.g.
      // 'abxxcd' will be treated as 'ab')
      buf = buf.slice(0, actual)
    }
  
    return buf
  }
  
  function fromArrayLike (array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0
    var buf = createBuffer(length)
    for (var i = 0; i < length; i += 1) {
      buf[i] = array[i] & 255
    }
    return buf
  }
  
  function fromArrayView (arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
      var copy = new Uint8Array(arrayView)
      return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength)
    }
    return fromArrayLike(arrayView)
  }
  
  function fromArrayBuffer (array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) {
      throw new RangeError('"offset" is outside of buffer bounds')
    }
  
    if (array.byteLength < byteOffset + (length || 0)) {
      throw new RangeError('"length" is outside of buffer bounds')
    }
  
    var buf
    if (byteOffset === undefined && length === undefined) {
      buf = new Uint8Array(array)
    } else if (length === undefined) {
      buf = new Uint8Array(array, byteOffset)
    } else {
      buf = new Uint8Array(array, byteOffset, length)
    }
  
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype)
  
    return buf
  }
  
  function fromObject (obj) {
    if (Buffer.isBuffer(obj)) {
      var len = checked(obj.length) | 0
      var buf = createBuffer(len)
  
      if (buf.length === 0) {
        return buf
      }
  
      obj.copy(buf, 0, 0, len)
      return buf
    }
  
    if (obj.length !== undefined) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }
  
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }
  
  function checked (length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) {
      throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                           'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
    }
    return length | 0
  }
  
  function SlowBuffer (length) {
    if (+length != length) { // eslint-disable-line eqeqeq
      length = 0
    }
    return Buffer.alloc(+length)
  }
  
  Buffer.isBuffer = function isBuffer (b) {
    return b != null && b._isBuffer === true &&
      b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
  }
  
  Buffer.compare = function compare (a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength)
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength)
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      )
    }
  
    if (a === b) return 0
  
    var x = a.length
    var y = b.length
  
    for (var i = 0, len = Math.min(x, y); i < len; ++i) {
      if (a[i] !== b[i]) {
        x = a[i]
        y = b[i]
        break
      }
    }
  
    if (x < y) return -1
    if (y < x) return 1
    return 0
  }
  
  Buffer.isEncoding = function isEncoding (encoding) {
    switch (String(encoding).toLowerCase()) {
      case 'hex':
      case 'utf8':
      case 'utf-8':
      case 'ascii':
      case 'latin1':
      case 'binary':
      case 'base64':
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return true
      default:
        return false
    }
  }
  
  Buffer.concat = function concat (list, length) {
    if (!Array.isArray(list)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
  
    if (list.length === 0) {
      return Buffer.alloc(0)
    }
  
    var i
    if (length === undefined) {
      length = 0
      for (i = 0; i < list.length; ++i) {
        length += list[i].length
      }
    }
  
    var buffer = Buffer.allocUnsafe(length)
    var pos = 0
    for (i = 0; i < list.length; ++i) {
      var buf = list[i]
      if (isInstance(buf, Uint8Array)) {
        if (pos + buf.length > buffer.length) {
          Buffer.from(buf).copy(buffer, pos)
        } else {
          Uint8Array.prototype.set.call(
            buffer,
            buf,
            pos
          )
        }
      } else if (!Buffer.isBuffer(buf)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      } else {
        buf.copy(buffer, pos)
      }
      pos += buf.length
    }
    return buffer
  }
  
  function byteLength (string, encoding) {
    if (Buffer.isBuffer(string)) {
      return string.length
    }
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
      return string.byteLength
    }
    if (typeof string !== 'string') {
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. ' +
        'Received type ' + typeof string
      )
    }
  
    var len = string.length
    var mustMatch = (arguments.length > 2 && arguments[2] === true)
    if (!mustMatch && len === 0) return 0
  
    // Use a for loop to avoid recursion
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'ascii':
        case 'latin1':
        case 'binary':
          return len
        case 'utf8':
        case 'utf-8':
          return utf8ToBytes(string).length
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return len * 2
        case 'hex':
          return len >>> 1
        case 'base64':
          return base64ToBytes(string).length
        default:
          if (loweredCase) {
            return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
          }
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  Buffer.byteLength = byteLength
  
  function slowToString (encoding, start, end) {
    var loweredCase = false
  
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
  
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) {
      start = 0
    }
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) {
      return ''
    }
  
    if (end === undefined || end > this.length) {
      end = this.length
    }
  
    if (end <= 0) {
      return ''
    }
  
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0
    start >>>= 0
  
    if (end <= start) {
      return ''
    }
  
    if (!encoding) encoding = 'utf8'
  
    while (true) {
      switch (encoding) {
        case 'hex':
          return hexSlice(this, start, end)
  
        case 'utf8':
        case 'utf-8':
          return utf8Slice(this, start, end)
  
        case 'ascii':
          return asciiSlice(this, start, end)
  
        case 'latin1':
        case 'binary':
          return latin1Slice(this, start, end)
  
        case 'base64':
          return base64Slice(this, start, end)
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return utf16leSlice(this, start, end)
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = (encoding + '').toLowerCase()
          loweredCase = true
      }
    }
  }
  
  // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
  // to detect a Buffer instance. It's not possible to use `instanceof Buffer`
  // reliably in a browserify context because there could be multiple different
  // copies of the 'buffer' package in use. This method works even for Buffer
  // instances that were created from another copy of the `buffer` package.
  // See: https://github.com/feross/buffer/issues/154
  Buffer.prototype._isBuffer = true
  
  function swap (b, n, m) {
    var i = b[n]
    b[n] = b[m]
    b[m] = i
  }
  
  Buffer.prototype.swap16 = function swap16 () {
    var len = this.length
    if (len % 2 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 16-bits')
    }
    for (var i = 0; i < len; i += 2) {
      swap(this, i, i + 1)
    }
    return this
  }
  
  Buffer.prototype.swap32 = function swap32 () {
    var len = this.length
    if (len % 4 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 32-bits')
    }
    for (var i = 0; i < len; i += 4) {
      swap(this, i, i + 3)
      swap(this, i + 1, i + 2)
    }
    return this
  }
  
  Buffer.prototype.swap64 = function swap64 () {
    var len = this.length
    if (len % 8 !== 0) {
      throw new RangeError('Buffer size must be a multiple of 64-bits')
    }
    for (var i = 0; i < len; i += 8) {
      swap(this, i, i + 7)
      swap(this, i + 1, i + 6)
      swap(this, i + 2, i + 5)
      swap(this, i + 3, i + 4)
    }
    return this
  }
  
  Buffer.prototype.toString = function toString () {
    var length = this.length
    if (length === 0) return ''
    if (arguments.length === 0) return utf8Slice(this, 0, length)
    return slowToString.apply(this, arguments)
  }
  
  Buffer.prototype.toLocaleString = Buffer.prototype.toString
  
  Buffer.prototype.equals = function equals (b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
    if (this === b) return true
    return Buffer.compare(this, b) === 0
  }
  
  Buffer.prototype.inspect = function inspect () {
    var str = ''
    var max = exports.INSPECT_MAX_BYTES
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim()
    if (this.length > max) str += ' ... '
    return '<Buffer ' + str + '>'
  }
  if (customInspectSymbol) {
    Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect
  }
  
  Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) {
      target = Buffer.from(target, target.offset, target.byteLength)
    }
    if (!Buffer.isBuffer(target)) {
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. ' +
        'Received type ' + (typeof target)
      )
    }
  
    if (start === undefined) {
      start = 0
    }
    if (end === undefined) {
      end = target ? target.length : 0
    }
    if (thisStart === undefined) {
      thisStart = 0
    }
    if (thisEnd === undefined) {
      thisEnd = this.length
    }
  
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
      throw new RangeError('out of range index')
    }
  
    if (thisStart >= thisEnd && start >= end) {
      return 0
    }
    if (thisStart >= thisEnd) {
      return -1
    }
    if (start >= end) {
      return 1
    }
  
    start >>>= 0
    end >>>= 0
    thisStart >>>= 0
    thisEnd >>>= 0
  
    if (this === target) return 0
  
    var x = thisEnd - thisStart
    var y = end - start
    var len = Math.min(x, y)
  
    var thisCopy = this.slice(thisStart, thisEnd)
    var targetCopy = target.slice(start, end)
  
    for (var i = 0; i < len; ++i) {
      if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i]
        y = targetCopy[i]
        break
      }
    }
  
    if (x < y) return -1
    if (y < x) return 1
    return 0
  }
  
  // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
  // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
  //
  // Arguments:
  // - buffer - a Buffer to search
  // - val - a string, Buffer, or number
  // - byteOffset - an index into `buffer`; will be clamped to an int32
  // - encoding - an optional encoding, relevant is val is a string
  // - dir - true for indexOf, false for lastIndexOf
  function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1
  
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
      encoding = byteOffset
      byteOffset = 0
    } else if (byteOffset > 0x7fffffff) {
      byteOffset = 0x7fffffff
    } else if (byteOffset < -0x80000000) {
      byteOffset = -0x80000000
    }
    byteOffset = +byteOffset // Coerce to Number.
    if (numberIsNaN(byteOffset)) {
      // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
      byteOffset = dir ? 0 : (buffer.length - 1)
    }
  
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset
    if (byteOffset >= buffer.length) {
      if (dir) return -1
      else byteOffset = buffer.length - 1
    } else if (byteOffset < 0) {
      if (dir) byteOffset = 0
      else return -1
    }
  
    // Normalize val
    if (typeof val === 'string') {
      val = Buffer.from(val, encoding)
    }
  
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
      // Special case: looking for empty string/buffer always fails
      if (val.length === 0) {
        return -1
      }
      return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
    } else if (typeof val === 'number') {
      val = val & 0xFF // Search for a byte value [0-255]
      if (typeof Uint8Array.prototype.indexOf === 'function') {
        if (dir) {
          return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
        } else {
          return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
        }
      }
      return arrayIndexOf(buffer, [val], byteOffset, encoding, dir)
    }
  
    throw new TypeError('val must be string, number or Buffer')
  }
  
  function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
    var indexSize = 1
    var arrLength = arr.length
    var valLength = val.length
  
    if (encoding !== undefined) {
      encoding = String(encoding).toLowerCase()
      if (encoding === 'ucs2' || encoding === 'ucs-2' ||
          encoding === 'utf16le' || encoding === 'utf-16le') {
        if (arr.length < 2 || val.length < 2) {
          return -1
        }
        indexSize = 2
        arrLength /= 2
        valLength /= 2
        byteOffset /= 2
      }
    }
  
    function read (buf, i) {
      if (indexSize === 1) {
        return buf[i]
      } else {
        return buf.readUInt16BE(i * indexSize)
      }
    }
  
    var i
    if (dir) {
      var foundIndex = -1
      for (i = byteOffset; i < arrLength; i++) {
        if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
          if (foundIndex === -1) foundIndex = i
          if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
        } else {
          if (foundIndex !== -1) i -= i - foundIndex
          foundIndex = -1
        }
      }
    } else {
      if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
      for (i = byteOffset; i >= 0; i--) {
        var found = true
        for (var j = 0; j < valLength; j++) {
          if (read(arr, i + j) !== read(val, j)) {
            found = false
            break
          }
        }
        if (found) return i
      }
    }
  
    return -1
  }
  
  Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1
  }
  
  Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
  }
  
  Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
  }
  
  function hexWrite (buf, string, offset, length) {
    offset = Number(offset) || 0
    var remaining = buf.length - offset
    if (!length) {
      length = remaining
    } else {
      length = Number(length)
      if (length > remaining) {
        length = remaining
      }
    }
  
    var strLen = string.length
  
    if (length > strLen / 2) {
      length = strLen / 2
    }
    for (var i = 0; i < length; ++i) {
      var parsed = parseInt(string.substr(i * 2, 2), 16)
      if (numberIsNaN(parsed)) return i
      buf[offset + i] = parsed
    }
    return i
  }
  
  function utf8Write (buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
  }
  
  function asciiWrite (buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length)
  }
  
  function base64Write (buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length)
  }
  
  function ucs2Write (buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
  }
  
  Buffer.prototype.write = function write (string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
      encoding = 'utf8'
      length = this.length
      offset = 0
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
      encoding = offset
      length = this.length
      offset = 0
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
      offset = offset >>> 0
      if (isFinite(length)) {
        length = length >>> 0
        if (encoding === undefined) encoding = 'utf8'
      } else {
        encoding = length
        length = undefined
      }
    } else {
      throw new Error(
        'Buffer.write(string, encoding, offset[, length]) is no longer supported'
      )
    }
  
    var remaining = this.length - offset
    if (length === undefined || length > remaining) length = remaining
  
    if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
      throw new RangeError('Attempt to write outside buffer bounds')
    }
  
    if (!encoding) encoding = 'utf8'
  
    var loweredCase = false
    for (;;) {
      switch (encoding) {
        case 'hex':
          return hexWrite(this, string, offset, length)
  
        case 'utf8':
        case 'utf-8':
          return utf8Write(this, string, offset, length)
  
        case 'ascii':
        case 'latin1':
        case 'binary':
          return asciiWrite(this, string, offset, length)
  
        case 'base64':
          // Warning: maxLength not taken into account in base64Write
          return base64Write(this, string, offset, length)
  
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return ucs2Write(this, string, offset, length)
  
        default:
          if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
          encoding = ('' + encoding).toLowerCase()
          loweredCase = true
      }
    }
  }
  
  Buffer.prototype.toJSON = function toJSON () {
    return {
      type: 'Buffer',
      data: Array.prototype.slice.call(this._arr || this, 0)
    }
  }
  
  function base64Slice (buf, start, end) {
    if (start === 0 && end === buf.length) {
      return base64.fromByteArray(buf)
    } else {
      return base64.fromByteArray(buf.slice(start, end))
    }
  }
  
  function utf8Slice (buf, start, end) {
    end = Math.min(buf.length, end)
    var res = []
  
    var i = start
    while (i < end) {
      var firstByte = buf[i]
      var codePoint = null
      var bytesPerSequence = (firstByte > 0xEF)
        ? 4
        : (firstByte > 0xDF)
            ? 3
            : (firstByte > 0xBF)
                ? 2
                : 1
  
      if (i + bytesPerSequence <= end) {
        var secondByte, thirdByte, fourthByte, tempCodePoint
  
        switch (bytesPerSequence) {
          case 1:
            if (firstByte < 0x80) {
              codePoint = firstByte
            }
            break
          case 2:
            secondByte = buf[i + 1]
            if ((secondByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
              if (tempCodePoint > 0x7F) {
                codePoint = tempCodePoint
              }
            }
            break
          case 3:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
              if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                codePoint = tempCodePoint
              }
            }
            break
          case 4:
            secondByte = buf[i + 1]
            thirdByte = buf[i + 2]
            fourthByte = buf[i + 3]
            if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
              tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
              if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                codePoint = tempCodePoint
              }
            }
        }
      }
  
      if (codePoint === null) {
        // we did not generate a valid codePoint so insert a
        // replacement char (U+FFFD) and advance only 1 byte
        codePoint = 0xFFFD
        bytesPerSequence = 1
      } else if (codePoint > 0xFFFF) {
        // encode to utf16 (surrogate pair dance)
        codePoint -= 0x10000
        res.push(codePoint >>> 10 & 0x3FF | 0xD800)
        codePoint = 0xDC00 | codePoint & 0x3FF
      }
  
      res.push(codePoint)
      i += bytesPerSequence
    }
  
    return decodeCodePointsArray(res)
  }
  
  // Based on http://stackoverflow.com/a/22747272/680742, the browser with
  // the lowest limit is Chrome, with 0x10000 args.
  // We go 1 magnitude less, for safety
  var MAX_ARGUMENTS_LENGTH = 0x1000
  
  function decodeCodePointsArray (codePoints) {
    var len = codePoints.length
    if (len <= MAX_ARGUMENTS_LENGTH) {
      return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    }
  
    // Decode in chunks to avoid "call stack size exceeded".
    var res = ''
    var i = 0
    while (i < len) {
      res += String.fromCharCode.apply(
        String,
        codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
      )
    }
    return res
  }
  
  function asciiSlice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i] & 0x7F)
    }
    return ret
  }
  
  function latin1Slice (buf, start, end) {
    var ret = ''
    end = Math.min(buf.length, end)
  
    for (var i = start; i < end; ++i) {
      ret += String.fromCharCode(buf[i])
    }
    return ret
  }
  
  function hexSlice (buf, start, end) {
    var len = buf.length
  
    if (!start || start < 0) start = 0
    if (!end || end < 0 || end > len) end = len
  
    var out = ''
    for (var i = start; i < end; ++i) {
      out += hexSliceLookupTable[buf[i]]
    }
    return out
  }
  
  function utf16leSlice (buf, start, end) {
    var bytes = buf.slice(start, end)
    var res = ''
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for (var i = 0; i < bytes.length - 1; i += 2) {
      res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
    }
    return res
  }
  
  Buffer.prototype.slice = function slice (start, end) {
    var len = this.length
    start = ~~start
    end = end === undefined ? len : ~~end
  
    if (start < 0) {
      start += len
      if (start < 0) start = 0
    } else if (start > len) {
      start = len
    }
  
    if (end < 0) {
      end += len
      if (end < 0) end = 0
    } else if (end > len) {
      end = len
    }
  
    if (end < start) end = start
  
    var newBuf = this.subarray(start, end)
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype)
  
    return newBuf
  }
  
  /*
   * Need to make sure that buffer isn't trying to write out of bounds.
   */
  function checkOffset (offset, ext, length) {
    if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
  }
  
  Buffer.prototype.readUintLE =
  Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
  
    return val
  }
  
  Buffer.prototype.readUintBE =
  Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      checkOffset(offset, byteLength, this.length)
    }
  
    var val = this[offset + --byteLength]
    var mul = 1
    while (byteLength > 0 && (mul *= 0x100)) {
      val += this[offset + --byteLength] * mul
    }
  
    return val
  }
  
  Buffer.prototype.readUint8 =
  Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    return this[offset]
  }
  
  Buffer.prototype.readUint16LE =
  Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return this[offset] | (this[offset + 1] << 8)
  }
  
  Buffer.prototype.readUint16BE =
  Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    return (this[offset] << 8) | this[offset + 1]
  }
  
  Buffer.prototype.readUint32LE =
  Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return ((this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16)) +
        (this[offset + 3] * 0x1000000)
  }
  
  Buffer.prototype.readUint32BE =
  Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset] * 0x1000000) +
      ((this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      this[offset + 3])
  }
  
  Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var val = this[offset]
    var mul = 1
    var i = 0
    while (++i < byteLength && (mul *= 0x100)) {
      val += this[offset + i] * mul
    }
    mul *= 0x80
  
    if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  
    return val
  }
  
  Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) checkOffset(offset, byteLength, this.length)
  
    var i = byteLength
    var mul = 1
    var val = this[offset + --i]
    while (i > 0 && (mul *= 0x100)) {
      val += this[offset + --i] * mul
    }
    mul *= 0x80
  
    if (val >= mul) val -= Math.pow(2, 8 * byteLength)
  
    return val
  }
  
  Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 1, this.length)
    if (!(this[offset] & 0x80)) return (this[offset])
    return ((0xff - this[offset] + 1) * -1)
  }
  
  Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset] | (this[offset + 1] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }
  
  Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 2, this.length)
    var val = this[offset + 1] | (this[offset] << 8)
    return (val & 0x8000) ? val | 0xFFFF0000 : val
  }
  
  Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16) |
      (this[offset + 3] << 24)
  }
  
  Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
  
    return (this[offset] << 24) |
      (this[offset + 1] << 16) |
      (this[offset + 2] << 8) |
      (this[offset + 3])
  }
  
  Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, true, 23, 4)
  }
  
  Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 4, this.length)
    return ieee754.read(this, offset, false, 23, 4)
  }
  
  Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, true, 52, 8)
  }
  
  Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
    offset = offset >>> 0
    if (!noAssert) checkOffset(offset, 8, this.length)
    return ieee754.read(this, offset, false, 52, 8)
  }
  
  function checkInt (buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
  }
  
  Buffer.prototype.writeUintLE =
  Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }
  
    var mul = 1
    var i = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeUintBE =
  Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    byteLength = byteLength >>> 0
    if (!noAssert) {
      var maxBytes = Math.pow(2, 8 * byteLength) - 1
      checkInt(this, value, offset, byteLength, maxBytes, 0)
    }
  
    var i = byteLength - 1
    var mul = 1
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      this[offset + i] = (value / mul) & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeUint8 =
  Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
    this[offset] = (value & 0xff)
    return offset + 1
  }
  
  Buffer.prototype.writeUint16LE =
  Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }
  
  Buffer.prototype.writeUint16BE =
  Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }
  
  Buffer.prototype.writeUint32LE =
  Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
    return offset + 4
  }
  
  Buffer.prototype.writeUint32BE =
  Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }
  
  Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)
  
      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }
  
    var i = 0
    var mul = 1
    var sub = 0
    this[offset] = value & 0xFF
    while (++i < byteLength && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      var limit = Math.pow(2, (8 * byteLength) - 1)
  
      checkInt(this, value, offset, byteLength, limit - 1, -limit)
    }
  
    var i = byteLength - 1
    var mul = 1
    var sub = 0
    this[offset + i] = value & 0xFF
    while (--i >= 0 && (mul *= 0x100)) {
      if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
        sub = 1
      }
      this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
    }
  
    return offset + byteLength
  }
  
  Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
    if (value < 0) value = 0xff + value + 1
    this[offset] = (value & 0xff)
    return offset + 1
  }
  
  Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    return offset + 2
  }
  
  Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
    return offset + 2
  }
  
  Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
    return offset + 4
  }
  
  Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
    if (value < 0) value = 0xffffffff + value + 1
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
    return offset + 4
  }
  
  function checkIEEE754 (buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range')
    if (offset < 0) throw new RangeError('Index out of range')
  }
  
  function writeFloat (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
    }
    ieee754.write(buf, value, offset, littleEndian, 23, 4)
    return offset + 4
  }
  
  Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert)
  }
  
  Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert)
  }
  
  function writeDouble (buf, value, offset, littleEndian, noAssert) {
    value = +value
    offset = offset >>> 0
    if (!noAssert) {
      checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
    }
    ieee754.write(buf, value, offset, littleEndian, 52, 8)
    return offset + 8
  }
  
  Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert)
  }
  
  Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert)
  }
  
  // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
  Buffer.prototype.copy = function copy (target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer')
    if (!start) start = 0
    if (!end && end !== 0) end = this.length
    if (targetStart >= target.length) targetStart = target.length
    if (!targetStart) targetStart = 0
    if (end > 0 && end < start) end = start
  
    // Copy 0 bytes; we're done
    if (end === start) return 0
    if (target.length === 0 || this.length === 0) return 0
  
    // Fatal error conditions
    if (targetStart < 0) {
      throw new RangeError('targetStart out of bounds')
    }
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range')
    if (end < 0) throw new RangeError('sourceEnd out of bounds')
  
    // Are we oob?
    if (end > this.length) end = this.length
    if (target.length - targetStart < end - start) {
      end = target.length - targetStart + start
    }
  
    var len = end - start
  
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {
      // Use built-in when available, missing from IE11
      this.copyWithin(targetStart, start, end)
    } else {
      Uint8Array.prototype.set.call(
        target,
        this.subarray(start, end),
        targetStart
      )
    }
  
    return len
  }
  
  // Usage:
  //    buffer.fill(number[, offset[, end]])
  //    buffer.fill(buffer[, offset[, end]])
  //    buffer.fill(string[, offset[, end]][, encoding])
  Buffer.prototype.fill = function fill (val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
      if (typeof start === 'string') {
        encoding = start
        start = 0
        end = this.length
      } else if (typeof end === 'string') {
        encoding = end
        end = this.length
      }
      if (encoding !== undefined && typeof encoding !== 'string') {
        throw new TypeError('encoding must be a string')
      }
      if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
        throw new TypeError('Unknown encoding: ' + encoding)
      }
      if (val.length === 1) {
        var code = val.charCodeAt(0)
        if ((encoding === 'utf8' && code < 128) ||
            encoding === 'latin1') {
          // Fast path: If `val` fits into a single byte, use that numeric value.
          val = code
        }
      }
    } else if (typeof val === 'number') {
      val = val & 255
    } else if (typeof val === 'boolean') {
      val = Number(val)
    }
  
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) {
      throw new RangeError('Out of range index')
    }
  
    if (end <= start) {
      return this
    }
  
    start = start >>> 0
    end = end === undefined ? this.length : end >>> 0
  
    if (!val) val = 0
  
    var i
    if (typeof val === 'number') {
      for (i = start; i < end; ++i) {
        this[i] = val
      }
    } else {
      var bytes = Buffer.isBuffer(val)
        ? val
        : Buffer.from(val, encoding)
      var len = bytes.length
      if (len === 0) {
        throw new TypeError('The value "' + val +
          '" is invalid for argument "value"')
      }
      for (i = 0; i < end - start; ++i) {
        this[i + start] = bytes[i % len]
      }
    }
  
    return this
  }
  
  // HELPER FUNCTIONS
  // ================
  
  var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g
  
  function base64clean (str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0]
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '')
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return ''
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while (str.length % 4 !== 0) {
      str = str + '='
    }
    return str
  }
  
  function utf8ToBytes (string, units) {
    units = units || Infinity
    var codePoint
    var length = string.length
    var leadSurrogate = null
    var bytes = []
  
    for (var i = 0; i < length; ++i) {
      codePoint = string.charCodeAt(i)
  
      // is surrogate component
      if (codePoint > 0xD7FF && codePoint < 0xE000) {
        // last char was a lead
        if (!leadSurrogate) {
          // no lead yet
          if (codePoint > 0xDBFF) {
            // unexpected trail
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          } else if (i + 1 === length) {
            // unpaired lead
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
            continue
          }
  
          // valid lead
          leadSurrogate = codePoint
  
          continue
        }
  
        // 2 leads in a row
        if (codePoint < 0xDC00) {
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          leadSurrogate = codePoint
          continue
        }
  
        // valid surrogate pair
        codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
      } else if (leadSurrogate) {
        // valid bmp char, but last char was a lead
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
      }
  
      leadSurrogate = null
  
      // encode utf8
      if (codePoint < 0x80) {
        if ((units -= 1) < 0) break
        bytes.push(codePoint)
      } else if (codePoint < 0x800) {
        if ((units -= 2) < 0) break
        bytes.push(
          codePoint >> 0x6 | 0xC0,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x10000) {
        if ((units -= 3) < 0) break
        bytes.push(
          codePoint >> 0xC | 0xE0,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else if (codePoint < 0x110000) {
        if ((units -= 4) < 0) break
        bytes.push(
          codePoint >> 0x12 | 0xF0,
          codePoint >> 0xC & 0x3F | 0x80,
          codePoint >> 0x6 & 0x3F | 0x80,
          codePoint & 0x3F | 0x80
        )
      } else {
        throw new Error('Invalid code point')
      }
    }
  
    return bytes
  }
  
  function asciiToBytes (str) {
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      // Node's code seems to be doing this and not & 0x7F..
      byteArray.push(str.charCodeAt(i) & 0xFF)
    }
    return byteArray
  }
  
  function utf16leToBytes (str, units) {
    var c, hi, lo
    var byteArray = []
    for (var i = 0; i < str.length; ++i) {
      if ((units -= 2) < 0) break
  
      c = str.charCodeAt(i)
      hi = c >> 8
      lo = c % 256
      byteArray.push(lo)
      byteArray.push(hi)
    }
  
    return byteArray
  }
  
  function base64ToBytes (str) {
    return base64.toByteArray(base64clean(str))
  }
  
  function blitBuffer (src, dst, offset, length) {
    for (var i = 0; i < length; ++i) {
      if ((i + offset >= dst.length) || (i >= src.length)) break
      dst[i + offset] = src[i]
    }
    return i
  }
  
  // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
  // the `instanceof` check but they should be treated as of that type.
  // See: https://github.com/feross/buffer/issues/166
  function isInstance (obj, type) {
    return obj instanceof type ||
      (obj != null && obj.constructor != null && obj.constructor.name != null &&
        obj.constructor.name === type.name)
  }
  function numberIsNaN (obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
  }
  
  // Create lookup table for `toString('hex')`
  // See: https://github.com/feross/buffer/issues/219
  var hexSliceLookupTable = (function () {
    var alphabet = '0123456789abcdef'
    var table = new Array(256)
    for (var i = 0; i < 16; ++i) {
      var i16 = i * 16
      for (var j = 0; j < 16; ++j) {
        table[i16 + j] = alphabet[i] + alphabet[j]
      }
    }
    return table
  })()
  
  }).call(this)}).call(this,require("buffer").Buffer)
  },{"base64-js":83,"buffer":84,"ieee754":87}],"citation-js":[function(require,module,exports){
  "use strict";
  
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  Object.defineProperty(exports, "Cite", {
    enumerable: true,
    get: function () {
      return _index.default;
    }
  });
  Object.defineProperty(exports, "logger", {
    enumerable: true,
    get: function () {
      return _logger.default;
    }
  });
  exports.version = exports.util = exports.plugins = void 0;
  var _index = _interopRequireDefault(require("./Cite/index.js"));
  var plugins = _interopRequireWildcard(require("./plugins/index.js"));
  exports.plugins = plugins;
  var util = _interopRequireWildcard(require("./util/index.js"));
  exports.util = util;
  var _logger = _interopRequireDefault(require("./logger.js"));
  var _package = _interopRequireDefault(require("../package.json"));
  require("./plugin-common/index.js");
  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
  const version = _package.default.version;
  exports.version = version;
  },{"../package.json":43,"./Cite/index.js":3,"./logger.js":10,"./plugin-common/index.js":11,"./plugins/index.js":23,"./util/index.js":39}]},{},[51,78]);
  